///
/// @file       RegisterModel.cpp
///
///             An automatically generated file that defines the objects and numbers that the model
///             exports. It also defines the relationship between these numbers and the model
///             variables.
///             It also defines the objects and numbers that the model needs to request of the rest
///             of the system.
///             In short, all configuration data that we may want to change in the database for
///             configuration purposes, and does not have a direct mapping to functionality, is
///             stored in this file somewhere.
///
/// @ingroup    CoreTrainSim
///
/// @author     CommsDataGenerator (Automatically generated, do not modify)
///
/// @copyright  (C) Copyright:  SYDAC Pty Ltd, 2025
///

#include "project_comms_structure/ProjectObjectConstants.h"

#include "model_dll/ObjectDB.h"

#include "common/Version.h"

#include <map>
#include <string>
#include <vector>

using namespace Project;
using namespace std;

#include "ModelSpecific.h"

#ifdef MODEL_NAMESPACE
// Log that we are registering this implementation
#pragma message("Registering " STRING(MODEL_NAMESPACE))

namespace MODEL_NAMESPACE
{
#endif
    // Dummy variable for the variable mapper.
    double g_dummy_variable = 0.0;


    // Our registration functions are in this namespace
    namespace Registration
    {
        const char * const   MODEL_TITLE = "BEML_EMU";
        const Common::Version VERSION(1, 0, 0);

        /// Populates the ObjectDB supplied with information on all objects and numbers owned and
        /// required.
        ///
        /// @param db The DB to populate.
        ///
        /// @note
        ///      These functions are broken up into sub-functions to avoid the VC++ 7.1 error
        ///      "fatal error C1509: compiler limit : too many exception handler states in function 'foo'. simplify function"


        // The object definitions
        void DefineTrainObject(int object_id, int parent_id, ModelResource &resource, ObjectDB &db)
        {
            ObjectDB::ObjectInfo oi(true, Sim::ObjectID(object_id), Sim::ObjectID(parent_id), "Train", ClassID::TRAIN);
            int number_id = 0;
            oi.numbers.reserve(70);

            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ATC EB Unable To Reset", 0, 0.5, &resource.ModelInputs().TrainInput.Faults.ATCEBUnableToReset, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ATC EB Unable To Reset State", 0, 0.5, &resource.ModelOutputs().TrainFaultStates.ATCEBUnableToReset, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Auto Power On", 0, 0.5, &resource.ModelInputs().TrainInput.Overrides.AutoPowerOn, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CCU Communication Error", 0, 0.5, &resource.ModelInputs().TrainInput.Faults.CCUCommunicationError, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CCU Communication Error State", 0, 0.5, &resource.ModelOutputs().TrainFaultStates.CCUCommunicationError, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Collision", 0.0, 0.5, resource.ExternallyModelled("Collision"), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Damaged OHE", 0, 0.5, &resource.ModelInputs().TrainInput.Faults.DamagedOHE, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Damaged OHE State", 0, 0.5, &resource.ModelOutputs().TrainFaultStates.DamagedOHE, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Depot Signal Malfunction", 0, 0.5, &resource.ModelInputs().TrainInput.Faults.DepotSignalMalfunction, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Depot Signal Malfunction State", 0, 0.5, &resource.ModelOutputs().TrainFaultStates.DepotSignalMalfunction, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Derailment", 0.0, 0.5, resource.ExternallyModelled("Derailment"), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Doors Not Opening From DOPB OP1", 0, 0.5, &resource.ModelInputs().TrainInput.Faults.DoorsNotOpeningFromDOPBOP1, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Doors Not Opening From DOPB OP1 State", 0, 0.5, &resource.ModelOutputs().TrainFaultStates.DoorsNotOpeningFromDOPBOP1, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Dynamic Brake Cut Out", 0, 0.5, &resource.ModelInputs().TrainInput.Faults.DynamicBrakeCutOut, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Dynamic Brake Cut Out State", 0, 0.5, &resource.ModelOutputs().TrainFaultStates.DynamicBrakeCutOut, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Enable Live3D", 0, 0.5, resource.Unmapped("EnableLive3D"), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "FDU Fault Alarm TL Active", 0, 0.5, &resource.ModelInputs().TrainInput.Faults.FDUFaultAlarmTLActive, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "FDU Fault Alarm TL Active State", 0, 0.5, &resource.ModelOutputs().TrainFaultStates.FDUFaultAlarmTLActive, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "FSB Applied At 10 KMPH", 0, 0.5, &resource.ModelInputs().TrainInput.Faults.FSBAppliedAt10KMPH, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "FSB Applied At 10 KMPH State", 0, 0.5, &resource.ModelOutputs().TrainFaultStates.FSBAppliedAt10KMPH, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "FWD REV Train Line Mismatch", 0, 0.5, &resource.ModelInputs().TrainInput.Faults.FWDREVTrainLineMismatch, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "FWD REV Train Line Mismatch State", 0, 0.5, &resource.ModelOutputs().TrainFaultStates.FWDREVTrainLineMismatch, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Frozen", 0.0, 0.5, resource.ExternallyModelled("Frozen"), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "High Tractive Effort Required", 0, 0.5, &resource.ModelInputs().TrainInput.Faults.HighTractiveEffortRequired, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "High Tractive Effort Required State", 0, 0.5, &resource.ModelOutputs().TrainFaultStates.HighTractiveEffortRequired, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Ignore Vigilance Override", 0, 0.5, resource.Unmapped("Ignore Vigilance Override"), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Internal Fire Alarm TL Active", 0, 0.5, &resource.ModelInputs().TrainInput.Faults.InternalFireAlarmTLActive, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Internal Fire Alarm TL Active State", 0, 0.5, &resource.ModelOutputs().TrainFaultStates.InternalFireAlarmTLActive, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Lead Car Acceleration", 0, 0.001, &resource.ModelOutputs().DynamicsOutput[0].Inertia.Acceleration, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Lead Car Jerk", 0.0, 1.0E-5, &resource.ModelOutputs().DynamicsOutput[0].Inertia.Jerk, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Lead Car Position", 0.0, 1.0E-5, &resource.ModelOutputs().DynamicsOutput[0].Inertia.Position, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Lead Car Speed", 0.0, 1.0E-5, &resource.ModelOutputs().DynamicsOutput[0].Inertia.Velocity, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Low MR Pressure", 0, 0.5, &resource.ModelInputs().TrainInput.Faults.LowMRPressure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Low MR Pressure State", 0, 0.5, &resource.ModelOutputs().TrainFaultStates.LowMRPressure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Main Signal Switches To Red", 0, 0.5, &resource.ModelInputs().TrainInput.Faults.MainSignalSwitchesToRed, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Main Signal Switches To Red State", 0, 0.5, &resource.ModelOutputs().TrainFaultStates.MainSignalSwitchesToRed, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Neutral Zone VCB Backup Function Activated", 0, 0.5, &resource.ModelInputs().TrainInput.Faults.NeutralZoneVCBBackupFunctionActivated, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Neutral Zone VCB Backup Function Activated State", 0, 0.5, &resource.ModelOutputs().TrainFaultStates.NeutralZoneVCBBackupFunctionActivated, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "One PSD Bypassed At Station In Open Condition", 0, 0.5, &resource.ModelInputs().TrainInput.Faults.OnePSDBypassedAtStationInOpenCondition, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "One PSD Bypassed At Station In Open Condition State", 0, 0.5, &resource.ModelOutputs().TrainFaultStates.OnePSDBypassedAtStationInOpenCondition, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Orientation Swap Request", 0, 0.5, &resource.ModelInputs().TrainInput.Overrides.OrientationSwapRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PSD ADCL Status Not Available", 0, 0.5, &resource.ModelInputs().TrainInput.Faults.PSDADCLStatusNotAvailable, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PSD ADCL Status Not Available State", 0, 0.5, &resource.ModelOutputs().TrainFaultStates.PSDADCLStatusNotAvailable, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PSD Status Unknown", 0, 0.5, &resource.ModelInputs().TrainInput.Faults.PSDStatusUnknown, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PSD Status Unknown State", 0, 0.5, &resource.ModelOutputs().TrainFaultStates.PSDStatusUnknown, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Platform Screen Door Not Working", 0, 0.5, &resource.ModelInputs().TrainInput.Faults.PlatformScreenDoorNotWorking, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Platform Screen Door Not Working State", 0, 0.5, &resource.ModelOutputs().TrainFaultStates.PlatformScreenDoorNotWorking, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Reverse Motion In Forward Command", 0, 0.5, &resource.ModelInputs().TrainInput.Faults.ReverseMotionInForwardCommand, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Reverse Motion In Forward Command State", 0, 0.5, &resource.ModelOutputs().TrainFaultStates.ReverseMotionInForwardCommand, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TCMS Display Hanged", 0, 0.5, &resource.ModelInputs().TrainInput.Faults.TCMSDisplayHanged, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TCMS Display Hanged State", 0, 0.5, &resource.ModelOutputs().TrainFaultStates.TCMSDisplayHanged, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TCMS Failure", 0, 0.5, &resource.ModelInputs().TrainInput.Faults.TCMSFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TCMS Failure State", 0, 0.5, &resource.ModelOutputs().TrainFaultStates.TCMSFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Total Distance Travelled", 0, 0.5, resource.Unmapped("TotalDistanceTravelled"), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Total Dynamic Brake Force", 0, 0.5, resource.Unmapped("TotalDynamicBrakeForce"), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Total Energy Consumption", 0, 0.5, &resource.ModelOutputs().ScoringTrainOutput.TotalEnergyConsumption, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Total Train Weight", 0, 0.5, resource.Unmapped("TotalTrainWeight"), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Track Adhesion Override", 0, 0.5, resource.Unmapped("Track Adhesion Override"), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Track Circuit Occupied", 0, 0.5, &resource.ModelInputs().TrainInput.Faults.TrackCircuitOccupied, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Track Circuit Occupied State", 0, 0.5, &resource.ModelOutputs().TrainFaultStates.TrackCircuitOccupied, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Traction Cut Mode Selector In ATP ATO UTO", 0, 0.5, &resource.ModelInputs().TrainInput.Faults.TractionCutModeSelectorInATPATOUTO, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Traction Cut Mode Selector In ATP ATO UTO State", 0, 0.5, &resource.ModelOutputs().TrainFaultStates.TractionCutModeSelectorInATPATOUTO, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Train Getting Zero Speed Order", 0, 0.5, &resource.ModelInputs().TrainInput.Faults.TrainGettingZeroSpeedOrder, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Train Getting Zero Speed Order State", 0, 0.5, &resource.ModelOutputs().TrainFaultStates.TrainGettingZeroSpeedOrder, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Train Load Override", 0, 0.5, &resource.ModelInputs().TrainInput.Overrides.TrainLoadOverride, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Train Overshoot ATC Not Allowing Reverse Alignment", 0, 0.5, &resource.ModelInputs().TrainInput.Faults.TrainOvershootATCNotAllowingReverseAlignment, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Train Overshoot ATC Not Allowing Reverse Alignment State", 0, 0.5, &resource.ModelOutputs().TrainFaultStates.TrainOvershootATCNotAllowingReverseAlignment, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Train Wakeup", 0, 0.5, resource.ExternallyModelled("TrainWakeup"), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Vehicle Load Override", 0, 0.5, resource.Unmapped("Vehicle Load Override"), true));
            db.AddObject(oi);
        }

        void DefineCBTCTrainInputsObject(int object_id, int parent_id, ModelResource &resource, ObjectDB &db)
        {
            ObjectDB::ObjectInfo oi(true, Sim::ObjectID(object_id), Sim::ObjectID(parent_id), "CBTCTrainInputs", ClassID::CBTC_TRAIN_INPUTS);
            int number_id = 0;
            oi.numbers.reserve(8);

            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ATO Brake D", 0, 0.01, &resource.ModelInputs().TrainInput.CBTCTuning.ATOBrakeD, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ATO Brake I", 5, 0.01, &resource.ModelInputs().TrainInput.CBTCTuning.ATOBrakeI, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ATO Brake P", 100, 0.01, &resource.ModelInputs().TrainInput.CBTCTuning.ATOBrakeP, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ATO Proximity Brake Distance", 0.5, 0.01, &resource.ModelInputs().TrainInput.CBTCTuning.ATOProximityBrakeDistance, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ATO Traction D", 0, 0.01, &resource.ModelInputs().TrainInput.CBTCTuning.ATOTractionD, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ATO Traction I", 2, 0.01, &resource.ModelInputs().TrainInput.CBTCTuning.ATOTractionI, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ATO Traction P", 50, 0.01, &resource.ModelInputs().TrainInput.CBTCTuning.ATOTractionP, true));
            db.AddObject(oi);
        }

        void DefineTrainDebugObject(int object_id, int parent_id, ModelResource &resource, ObjectDB &db)
        {
            ObjectDB::ObjectInfo oi(true, Sim::ObjectID(object_id), Sim::ObjectID(parent_id), "TrainDebug", ClassID::TrainDebug);
            int number_id = 0;
            oi.numbers.reserve(1);

            db.AddObject(oi);
        }

        void DefineVehicleObject(int object_id, int parent_id, int instance, ModelResource &resource, ObjectDB &db)
        {
            ObjectDB::ObjectInfo oi(true, Sim::ObjectID(object_id), Sim::ObjectID(parent_id), "Vehicle", ClassID::VEHICLE);
            int number_id = 0;
            oi.numbers.reserve(344);

            {
                static double INSTANCE_INDEX[8] = {0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0};
                oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Index", INSTANCE_INDEX[instance], 0.5, &INSTANCE_INDEX[instance], true));
            }
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "AK Open Failure", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.AKOpenFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "AK Open Failure State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].AKOpenFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "APS Circuit Breaker Tripped", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.APSCircuitBreakerTripped, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "APS Circuit Breaker Tripped State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].APSCircuitBreakerTripped, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "APS Group 1 Failure", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.APSGroup1Failure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "APS Group 1 Failure State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].APSGroup1Failure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "APS Group 1 Isolated", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.APSGroup1Isolated, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "APS Group 1 Isolated State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].APSGroup1Isolated, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Acceleration", 0.0, 1.0E-5, &resource.ModelOutputs().DynamicsOutput[instance].Inertia.Acceleration, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Acceleration Rate", 0, 0.001, &resource.ModelOutputs().DynamicsOutput[instance].Inertia.Jerk, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Air Suspension Bogie 1 Deflated", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.AirSuspensionBogie1Deflated, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Air Suspension Bogie 1 Deflated State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].AirSuspensionBogie1Deflated, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "All Door Close Indicator Not Working", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.AllDoorCloseIndicatorNotWorking, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "All Door Close Indicator Not Working State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].AllDoorCloseIndicatorNotWorking, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BCG Group 1 Failure", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.BCGGroup1Failure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BCG Group 1 Failure State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].BCGGroup1Failure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BCG Group 1 Isolated", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.BCGGroup1Isolated, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BCG Group 1 Isolated State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].BCGGroup1Isolated, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BCG Group 1 Isolation Failure", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.BCGGroup1IsolationFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BCG Group 1 Isolation Failure State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].BCGGroup1IsolationFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BECU Low R Pressure", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.BECULowRPressure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BECU Low R Pressure State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].BECULowRPressure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BECU Major Fault", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.BECUMajorFault, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BECU Major Fault State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].BECUMajorFault, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BECU Major Fault Wired", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.BECUMajorFaultWired, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BECU Major Fault Wired State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].BECUMajorFaultWired, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BECU PWR And BRK Cmd At Same Time", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.BECUPWRAndBRKCmdAtSameTime, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BECU PWR And BRK Cmd At Same Time State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].BECUPWRAndBRKCmdAtSameTime, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BECU1 Axle Locked Wheel Set 1", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.BECU1AxleLockedWheelSet1, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BECU1 Axle Locked Wheel Set 1 State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].BECU1AxleLockedWheelSet1, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BECU1 Brake Not Applied", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.BECU1BrakeNotApplied, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BECU1 Brake Not Applied State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].BECU1BrakeNotApplied, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BECU1 Brake Not Released", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.BECU1BrakeNotReleased, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BECU1 Brake Not Released State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].BECU1BrakeNotReleased, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BECU1 Car Load Pressure Low", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.BECU1CarLoadPressureLow, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BECU1 Car Load Pressure Low State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].BECU1CarLoadPressureLow, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BECU1 Emergency Brake Failure", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.BECU1EmergencyBrakeFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BECU1 Emergency Brake Failure State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].BECU1EmergencyBrakeFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BECU1 Failure All Speed Sensors", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.BECU1FailureAllSpeedSensors, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BECU1 Failure All Speed Sensors State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].BECU1FailureAllSpeedSensors, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BECU1 Load Pressure Low", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.BECU1LoadPressureLow, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BECU1 Load Pressure Low State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].BECU1LoadPressureLow, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BECU1 Missing On Segment", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.BECU1MissingOnSegment, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BECU1 Missing On Segment State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].BECU1MissingOnSegment, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BECU1 Service Brake Failure", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.BECU1ServiceBrakeFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BECU1 Service Brake Failure State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].BECU1ServiceBrakeFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BECU2 Axle Locked Wheel Set 2", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.BECU2AxleLockedWheelSet2, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BECU2 Axle Locked Wheel Set 2 State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].BECU2AxleLockedWheelSet2, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BECU2 Car Load Pressure Low", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.BECU2CarLoadPressureLow, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BECU2 Car Load Pressure Low State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].BECU2CarLoadPressureLow, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BECU2 Emergency Brake Failure", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.BECU2EmergencyBrakeFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BECU2 Emergency Brake Failure State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].BECU2EmergencyBrakeFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BECU2 Minor Fault", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.BECU2MinorFault, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BECU2 Minor Fault State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].BECU2MinorFault, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BIC Contactor Activation Fault", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.BICContactorActivationFault, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BIC Contactor Activation Fault State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].BICContactorActivationFault, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Battery Fuse Blown", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.BatteryFuseBlown, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Battery Fuse Blown State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].BatteryFuseBlown, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Bogie Derailed", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.BogieDerailed, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Bogie Derailed State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].BogieDerailed, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Brake Demand Signal Failure", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.BrakeDemandSignalFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Brake Demand Signal Failure State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].BrakeDemandSignalFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CC Detect Detrainment Door Open", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.CCDetectDetrainmentDoorOpen, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CC Detect Detrainment Door Open State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].CCDetectDetrainmentDoorOpen, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CCTV Display Hanged", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.CCTVDisplayHanged, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CCTV Display Hanged State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].CCTVDisplayHanged, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CI Failure", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.CIFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CI Failure State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].CIFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CI Gate Signal Abnormal", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.CIGateSignalAbnormal, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CI Gate Signal Abnormal State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].CIGateSignalAbnormal, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CI Isolated", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.CIIsolated, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CI Isolated State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].CIIsolated, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CI Local Communication Failure", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.CILocalCommunicationFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CI Local Communication Failure State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].CILocalCommunicationFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CI Microprocessor Abnormal", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.CIMicroprocessorAbnormal, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CI Microprocessor Abnormal State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].CIMicroprocessorAbnormal, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CI TCMS Communication Failure", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.CITCMSCommunicationFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CI TCMS Communication Failure State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].CITCMSCommunicationFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CMC Contactor Activation Failure", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.CMCContactorActivationFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CMC Contactor Activation Failure State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].CMCContactorActivationFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CMC Contactor Deactivation Failure", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.CMCContactorDeactivationFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CMC Contactor Deactivation Failure State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].CMCContactorDeactivationFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Cab Activation", 0, 0.5, resource.ExternallyModelled("CabActivation"), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Cab Enabling Circuit Breaker Tripped", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.CabEnablingCircuitBreakerTripped, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Cab Enabling Circuit Breaker Tripped State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].CabEnablingCircuitBreakerTripped, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Collision", 0.0, 0.5, &resource.ModelInputs().VehicleInput[instance].Common.CollisionAndDerailment.Collision, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Collision Mass", 0.0, 1.0, &resource.ModelInputs().VehicleInput[instance].Common.CollisionAndDerailment.CollisionMass, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Collision Speed", 0.0, 1.0E-5, &resource.ModelInputs().VehicleInput[instance].Common.CollisionAndDerailment.CollisionSpeed, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Communication Error RIO1 RIO2", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.CommunicationErrorRIO1RIO2, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Communication Error RIO1 RIO2 State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].CommunicationErrorRIO1RIO2, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Coupled Overlay", 0, 0, resource.Unmapped("CoupledOverlay", instance), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Coupler Damaged Overlay", 0, 0, resource.Unmapped("CouplerDamagedOverlay", instance), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Coupling Circuit Not Powered", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.CouplingCircuitNotPowered, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Coupling Circuit Not Powered State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].CouplingCircuitNotPowered, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DC 110 V Low Voltage", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.DC110VLowVoltage, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DC 110 V Low Voltage State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].DC110VLowVoltage, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DC Link Low Voltage Level 1", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.DCLinkLowVoltageLevel1, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DC Link Low Voltage Level 1 State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].DCLinkLowVoltageLevel1, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DC Link Over Voltage Level 1", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.DCLinkOverVoltageLevel1, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DC Link Over Voltage Level 1 State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].DCLinkOverVoltageLevel1, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DCSL Failure", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.DCSLFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DCSL Failure State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].DCSLFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DCSR Failure", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.DCSRFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DCSR Failure State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].DCSRFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DLSL Failure", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.DLSLFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DLSL Failure State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].DLSLFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DLSR Failure", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.DLSRFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DLSR Failure State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].DLSRFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DM1 A1 Door Not Opening At Platform", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.DM1A1DoorNotOpeningAtPlatform, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DM1 A1 Door Not Opening At Platform State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].DM1A1DoorNotOpeningAtPlatform, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DMI Failure", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.DMIFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DMI Failure State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].DMIFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Derailment", 0.0, 0.5, &resource.ModelInputs().VehicleInput[instance].Common.CollisionAndDerailment.Derailment, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Derailment Detected Right Side", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.DerailmentDetectedRightSide, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Derailment Detected Right Side State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].DerailmentDetectedRightSide, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door Close Announcement PB Not Working", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.DoorCloseAnnouncementPBNotWorking, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door Close Announcement PB Not Working State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].DoorCloseAnnouncementPBNotWorking, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door Close Obstruction", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.DoorCloseObstruction, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door Close Obstruction State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].DoorCloseObstruction, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door Close PB OP1 Not Working", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.DoorClosePBOP1NotWorking, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door Close PB OP1 Not Working State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].DoorClosePBOP1NotWorking, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door DCU Failure", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.DoorDCUFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door DCU Failure State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].DoorDCUFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door Emergency Handle Activation", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.DoorEmergencyHandleActivation, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door Emergency Handle Activation State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].DoorEmergencyHandleActivation, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door Failed To Lock", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.DoorFailedToLock, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door Failed To Lock State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].DoorFailedToLock, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door Failed To Unlock", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.DoorFailedToUnlock, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door Failed To Unlock State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].DoorFailedToUnlock, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door Major Fault", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.DoorMajorFault, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door Major Fault State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].DoorMajorFault, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door Motor Circuit Failure", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.DoorMotorCircuitFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door Motor Circuit Failure State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].DoorMotorCircuitFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door Open Obstruction", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.DoorOpenObstruction, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door Open Obstruction State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].DoorOpenObstruction, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door Unexpected Unlocking", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.DoorUnexpectedUnlocking, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door Unexpected Unlocking State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].DoorUnexpectedUnlocking, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "EB Not Released", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.EBNotReleased, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "EB Not Released State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].EBNotReleased, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "EDNOR Deactivated In Running Train", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.EDNORDeactivatedInRunningTrain, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "EDNOR Deactivated In Running Train State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].EDNORDeactivatedInRunningTrain, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ER1 Major Fault", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.ER1MajorFault, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ER1 Major Fault State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].ER1MajorFault, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Emergency Brake Due Deadman", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.EmergencyBrakeDueDeadman, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Emergency Brake Due Deadman State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].EmergencyBrakeDueDeadman, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Emergency Brake Due To EB PB", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.EmergencyBrakeDueToEBPB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Emergency Brake Due To EB PB State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].EmergencyBrakeDueToEBPB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Emergency Brake PB OP1 Not Working", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.EmergencyBrakePBOP1NotWorking, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Emergency Brake PB OP1 Not Working State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].EmergencyBrakePBOP1NotWorking, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Emergency Door Mechanical Unlocked", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.EmergencyDoorMechanicalUnlocked, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Emergency Door Mechanical Unlocked State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].EmergencyDoorMechanicalUnlocked, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Exterior Light 1 CB Tripped", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.ExteriorLight1CBTripped, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Exterior Light 1 CB Tripped State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].ExteriorLight1CBTripped, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Exterior Light 2 CB Tripped", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.ExteriorLight2CBTripped, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Exterior Light 2 CB Tripped State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].ExteriorLight2CBTripped, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Failure Of Trainborne ATC Equipment", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.FailureOfTrainborneATCEquipment, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Failure Of Trainborne ATC Equipment State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].FailureOfTrainborneATCEquipment, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Flood Light Not Working", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.FloodLightNotWorking, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Flood Light Not Working State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].FloodLightNotWorking, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Freeze", 0.0, 0.5, resource.ExternallyModelled("Freeze"), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Frozen", 0.0, 0.5, &resource.ModelInputs().VehicleInput[instance].Common.CollisionAndDerailment.Frozen, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "HVAC 1 Emergency Inverter Trip", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.HVAC1EmergencyInverterTrip, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "HVAC 1 Emergency Inverter Trip State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].HVAC1EmergencyInverterTrip, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "HVAC 1 External Smoke Mode", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.HVAC1ExternalSmokeMode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "HVAC 1 External Smoke Mode State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].HVAC1ExternalSmokeMode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "HVAC 1 Fire Mode", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.HVAC1FireMode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "HVAC 1 Fire Mode State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].HVAC1FireMode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "HVAC 1 RCCB Trip", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.HVAC1RCCBTrip, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "HVAC 1 RCCB Trip State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].HVAC1RCCBTrip, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "HVAC 1 Reduced Mode", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.HVAC1ReducedMode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "HVAC 1 Reduced Mode State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].HVAC1ReducedMode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "HVAC 1 Supply Fan MPCB Trip", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.HVAC1SupplyFanMPCBTrip, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "HVAC 1 Supply Fan MPCB Trip State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].HVAC1SupplyFanMPCBTrip, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "HVAC1 Major Fault", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.HVAC1MajorFault, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "HVAC1 Major Fault State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].HVAC1MajorFault, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Headlight Failure", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.HeadlightFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Headlight Failure State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].HeadlightFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Heat Alarm EDB", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.HeatAlarmEDB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Heat Alarm EDB State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].HeatAlarmEDB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Heavy Wheel Slip", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.HeavyWheelSlip, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Heavy Wheel Slip State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].HeavyWheelSlip, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Height", 5.0, 0.001, &resource.ModelInputs().VehicleConfig[instance].Common.Height, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Horn Activation", 0, 0.5, &resource.ModelOutputs().ScoringVehicleOutput[instance].HornActivation, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Horn Blows Continuously", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.HornBlowsContinuously, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Horn Blows Continuously State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].HornBlowsContinuously, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Horn Isolated By VDU", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.HornIsolatedByVDU, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Horn Isolated By VDU State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].HornIsolatedByVDU, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Interior Light 1 CB Tripped", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.InteriorLight1CBTripped, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Interior Light 1 CB Tripped State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].InteriorLight1CBTripped, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Interior Light 2 CB Tripped", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.InteriorLight2CBTripped, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Interior Light 2 CB Tripped State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].InteriorLight2CBTripped, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "K Open Failure", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.KOpenFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "K Open Failure State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].KOpenFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Lateral Acceleration", 0, 0.001, &resource.ModelOutputs().DynamicsOutput[instance].TrackGeometry.LateralAcceleration, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Lateral Acceleration Rate", 0, 0.001, &resource.ModelOutputs().DynamicsOutput[instance].TrackGeometry.LateralAccelerationRate, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Length", 20.0, 0.001, &resource.ModelInputs().VehicleConfig[instance].Common.Length, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Line Converter IGBT Failure", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.LineConverterIGBTFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Line Converter IGBT Failure State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].LineConverterIGBTFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Line Converter Over Current Level 2", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.LineConverterOverCurrentLevel2, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Line Converter Over Current Level 2 State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].LineConverterOverCurrentLevel2, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Line Voltage Indicator Not Working", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.LineVoltageIndicatorNotWorking, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Line Voltage Indicator Not Working State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].LineVoltageIndicatorNotWorking, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Low Battery Voltage Alarm", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.LowBatteryVoltageAlarm, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Low Battery Voltage Alarm State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].LowBatteryVoltageAlarm, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MCB 110 V DC Group Tripped", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.MCB110VDCGroupTripped, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MCB 110 V DC Group Tripped State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].MCB110VDCGroupTripped, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MCB APS Group Tripped", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.MCBAPSGroupTripped, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MCB APS Group Tripped State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].MCBAPSGroupTripped, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MCB Brake Group Tripped", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.MCBBrakeGroupTripped, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MCB Brake Group Tripped State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].MCBBrakeGroupTripped, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MCB Door Group Tripped", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.MCBDoorGroupTripped, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MCB Door Group Tripped State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].MCBDoorGroupTripped, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MCB HVAC Group Tripped", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.MCBHVACGroupTripped, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MCB HVAC Group Tripped State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].MCBHVACGroupTripped, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MCB Light Group Saloon Tripped", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.MCBLightGroupSaloonTripped, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MCB Light Group Saloon Tripped State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].MCBLightGroupSaloonTripped, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MCB Light Group Tripped", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.MCBLightGroupTripped, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MCB Light Group Tripped State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].MCBLightGroupTripped, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MCB PA Group Open", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.MCBPAGroupOpen, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MCB PA Group Open State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].MCBPAGroupOpen, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MCB Signaling Group Tripped", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.MCBSignalingGroupTripped, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MCB Signaling Group Tripped State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].MCBSignalingGroupTripped, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MCB TCMS Group Tripped", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.MCBTCMSGroupTripped, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MCB TCMS Group Tripped State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].MCBTCMSGroupTripped, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Main Circuit Earth Fault Level 2", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.MainCircuitEarthFaultLevel2, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Main Circuit Earth Fault Level 2 State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].MainCircuitEarthFaultLevel2, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Mass", 45000.0, 1, &resource.ModelOutputs().DynamicsOutput[instance].Inertia.Mass, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Master Controllerand Train Line Incongruence", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.MasterControllerandTrainLineIncongruence, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Master Controllerand Train Line Incongruence State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].MasterControllerandTrainLineIncongruence, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Mechanical Coupler Relay Fault", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.MechanicalCouplerRelayFault, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Mechanical Coupler Relay Fault State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].MechanicalCouplerRelayFault, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ODD Failure", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.ODDFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ODD Failure State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].ODDFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "OHL High Voltage Level 3", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.OHLHighVoltageLevel3, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "OHL High Voltage Level 3 State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].OHLHighVoltageLevel3, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "OHL Low Voltage Level 2", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.OHLLowVoltageLevel2, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "OHL Low Voltage Level 2 State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].OHLLowVoltageLevel2, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Obstacle Detected Right Side", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.ObstacleDetectedRightSide, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Obstacle Detected Right Side State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].ObstacleDetectedRightSide, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Orientation", 1.0, 0.5, &resource.ModelInputs().VehicleConfig[instance].Common.Orientation, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Other Cab Occupied Indicator Faulty", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.OtherCabOccupiedIndicatorFaulty, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Other Cab Occupied Indicator Faulty State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].OtherCabOccupiedIndicatorFaulty, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Over Temperature Of Converter Power Unit", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.OverTemperatureOfConverterPowerUnit, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Over Temperature Of Converter Power Unit State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].OverTemperatureOfConverterPowerUnit, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Over Temperature Of Inverter Power Unit", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.OverTemperatureOfInverterPowerUnit, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Over Temperature Of Inverter Power Unit State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].OverTemperatureOfInverterPowerUnit, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PCU Failure", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.PCUFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PCU Failure State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].PCUFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PEA1 Alarm Active", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.PEA1AlarmActive, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PEA1 Alarm Active State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].PEA1AlarmActive, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PEA1 Call Not Acknowledged", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.PEA1CallNotAcknowledged, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PEA1 Call Not Acknowledged State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].PEA1CallNotAcknowledged, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PEA1 Failure", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.PEA1Failure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PEA1 Failure State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].PEA1Failure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PEA2 Alarm Active", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.PEA2AlarmActive, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PEA2 Alarm Active State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].PEA2AlarmActive, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PEA2 Failure", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.PEA2Failure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PEA2 Failure State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].PEA2Failure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PEA3 Failure", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.PEA3Failure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PEA3 Failure State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].PEA3Failure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Pantograph Circuit Not Energized", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.PantographCircuitNotEnergized, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Pantograph Circuit Not Energized State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].PantographCircuitNotEnergized, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Pantograph Down For ADD Intervention", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.PantographDownForADDIntervention, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Pantograph Down For ADD Intervention State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].PantographDownForADDIntervention, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Pantograph Down For BUVDR Intervention", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.PantographDownForBUVDRIntervention, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Pantograph Down For BUVDR Intervention State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].PantographDownForBUVDRIntervention, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Pantograph Down For ORD Intervention", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.PantographDownForORDIntervention, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Pantograph Down For ORD Intervention State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].PantographDownForORDIntervention, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Pantograph Lowering Failure", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.PantographLoweringFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Pantograph Lowering Failure State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].PantographLoweringFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Pantograph Lowering Missing", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.PantographLoweringMissing, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Pantograph Lowering Missing State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].PantographLoweringMissing, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Pantograph Pipe Low Pressure", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.PantographPipeLowPressure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Pantograph Pipe Low Pressure State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].PantographPipeLowPressure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Pantograph Raise Failure", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.PantographRaiseFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Pantograph Raise Failure State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].PantographRaiseFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Pantograph Rising Inhibited", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.PantographRisingInhibited, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Pantograph Rising Inhibited State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].PantographRisingInhibited, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Pantograph Rising Missing", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.PantographRisingMissing, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Pantograph Rising Missing State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].PantographRisingMissing, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Parking Brake Application Failure", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.ParkingBrakeApplicationFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Parking Brake Application Failure State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].ParkingBrakeApplicationFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Parking Brake Release Failure", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.ParkingBrakeReleaseFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Parking Brake Release Failure State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].ParkingBrakeReleaseFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Pressure Guage Not Working", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.PressureGuageNotWorking, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Pressure Guage Not Working State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].PressureGuageNotWorking, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "RIO Mastership Error", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.RIOMastershipError, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "RIO Mastership Error State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].RIOMastershipError, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SCU 2 Failure", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.SCU2Failure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SCU 2 Failure State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].SCU2Failure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Shutdown Failure VCB Opening", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.ShutdownFailureVCBOpening, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Shutdown Failure VCB Opening State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].ShutdownFailureVCBOpening, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Smoke Alarm CAB Area", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.SmokeAlarmCABArea, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Smoke Alarm CAB Area State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].SmokeAlarmCABArea, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Speed", 0.0, 1.0E-5, &resource.ModelOutputs().DynamicsOutput[instance].Inertia.Velocity, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Train Door Locked Closed Relay Failure", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.TrainDoorLockedClosedRelayFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Train Door Locked Closed Relay Failure State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].TrainDoorLockedClosedRelayFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Train Door Not Closing At Platform", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.TrainDoorNotClosingAtPlatform, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Train Door Not Closing At Platform State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].TrainDoorNotClosingAtPlatform, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Train Doors Not Opening In ATO Mode", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.TrainDoorsNotOpeningInATOMode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Train Doors Not Opening In ATO Mode State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].TrainDoorsNotOpeningInATOMode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Train Radio Failure", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.TrainRadioFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Train Radio Failure State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].TrainRadioFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Transformer Oil Flow Warning", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.TransformerOilFlowWarning, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Transformer Oil Flow Warning State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].TransformerOilFlowWarning, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Transformer Oil Level Low", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.TransformerOilLevelLow, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Transformer Oil Level Low State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].TransformerOilLevelLow, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Transformer Oil Level Too Low", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.TransformerOilLevelTooLow, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Transformer Oil Level Too Low State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].TransformerOilLevelTooLow, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Transformer Oil Pressure Too Low", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.TransformerOilPressureTooLow, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Transformer Oil Pressure Too Low State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].TransformerOilPressureTooLow, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Transformer Oil Pressure Warning", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.TransformerOilPressureWarning, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Transformer Oil Pressure Warning State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].TransformerOilPressureWarning, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Transformer Oil Temperature High", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.TransformerOilTemperatureHigh, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Transformer Oil Temperature High State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].TransformerOilTemperatureHigh, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Transformer Oil Temperature Too High", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.TransformerOilTemperatureTooHigh, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Transformer Oil Temperature Too High State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].TransformerOilTemperatureTooHigh, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Unexpected Door Opening Detected By CC", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.UnexpectedDoorOpeningDetectedByCC, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Unexpected Door Opening Detected By CC State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].UnexpectedDoorOpeningDetectedByCC, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "VCB Missing Closing", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.VCBMissingClosing, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "VCB Missing Closing State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].VCBMissingClosing, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "VCB Missing Opening", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.VCBMissingOpening, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "VCB Missing Opening State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].VCBMissingOpening, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "VCB Opened By AC Overcurrent", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.VCBOpenedByACOvercurrent, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "VCB Opened By AC Overcurrent State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].VCBOpenedByACOvercurrent, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "VCB Opened By APS", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.VCBOpenedByAPS, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "VCB Opened By APS State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].VCBOpenedByAPS, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "VCB Opened By CI", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.VCBOpenedByCI, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "VCB Opened By CI State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].VCBOpenedByCI, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "VCB Opened By MTr Protection", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.VCBOpenedByMTrProtection, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "VCB Opened By MTr Protection State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].VCBOpenedByMTrProtection, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Vehicle Gradient", 0, 0.001, &resource.ModelInputs().VehicleInput[instance].Dynamics.TrackData.Gradient, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Vehicle Position", 0, 1.0E-5, &resource.ModelOutputs().DynamicsOutput[instance].Inertia.Position, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Vehicle Radius", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Dynamics.TrackData.Radius, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Vehicle Superelevation", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Dynamics.TrackData.Superelevation, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Vigilance Intervention", 0, 0.5, &resource.ModelOutputs().ScoringVehicleOutput[instance].VigilanceIntervention, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "WFL Failure", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.WFLFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "WFL Failure State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].WFLFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "WSP Active Bogie 1", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.WSPActiveBogie1, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "WSP Active Bogie 1 State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].WSPActiveBogie1, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Width", 2.0, 0.001, &resource.ModelInputs().VehicleConfig[instance].Common.Width, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Wipers Not Working", 0, 0.5, &resource.ModelInputs().VehicleInput[instance].Faults.WipersNotWorking, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Wipers Not Working State", 0, 0.5, &resource.ModelOutputs().VehicleFaultStates[instance].WipersNotWorking, true));
            db.AddObject(oi);
        }

        void DefineAudioOutputObject(int object_id, int parent_id, int p0, ModelResource &resource, ObjectDB &db)
        {
            ObjectDB::ObjectInfo oi(true, Sim::ObjectID(object_id), Sim::ObjectID(parent_id), "AudioOutput", ClassID::AUDIO_OUTPUT);
            int number_id = 0;
            oi.numbers.reserve(27);

            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Air Brake Release", 0, 0.5, &resource.ModelOutputs().AudioOutput[p0].AirBrakeRelease, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BP Vent Audio", 0, 0.5, resource.Unmapped("BPVentAudio"), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Bell", 0, 0.5, resource.Unmapped("Bell"), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Collision Detection Coupling", 0, 0.5, &resource.ModelOutputs().AudioOutput[p0].CollisionDetectionCoupling, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Compressor Start And Run Sound", 0, 0.5, &resource.ModelOutputs().AudioOutput[p0].CompressorStartAndRunSound, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Coupling", 0, 0.5, resource.Unmapped("Coupling"), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Deadman Alarm", 0, 0.5, &resource.ModelOutputs().AudioOutput[p0].DeadmanAlarm, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Derailment", 0, 0.5, &resource.ModelOutputs().AudioOutput[p0].Derailment, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door Warning Buzzer", 0, 0.5, &resource.ModelOutputs().AudioOutput[p0].DoorWarningBuzzer, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "EED EAD Operated", 0, 0.5, &resource.ModelOutputs().AudioOutput[p0].EEDEADOperated, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Emergency Brake Application Sound", 0, 0.5, &resource.ModelOutputs().AudioOutput[p0].EmergencyBrakeApplicationSound, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Flasher Light Operation Sound", 0, 0.5, &resource.ModelOutputs().AudioOutput[p0].FlasherLightOperationSound, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Horn High", 0, 0.5, &resource.ModelOutputs().AudioOutput[p0].HornHigh, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Horn Low", 0, 0.5, &resource.ModelOutputs().AudioOutput[p0].HornLow, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Mechanical Uncouple", 0, 0.5, &resource.ModelOutputs().AudioOutput[p0].MechanicalUncouple, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Obstacle Soft Collision", 0, 0.5, &resource.ModelOutputs().AudioOutput[p0].ObstacleSoftCollision, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Pantograph Lowering", 0, 0.5, &resource.ModelOutputs().AudioOutput[p0].PantographLowering, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Pantograph Raising", 0, 0.5, &resource.ModelOutputs().AudioOutput[p0].PantographRaising, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Pneumatic Pressure Release", 0, 0.5, &resource.ModelOutputs().AudioOutput[p0].PneumaticPressureRelease, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Saloon Door Closing Buzzer", 0, 0.5, &resource.ModelOutputs().AudioOutput[p0].SaloonDoorClosingBuzzer, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Saloon Door Opening Buzzer", 0, 0.5, &resource.ModelOutputs().AudioOutput[p0].SaloonDoorOpeningBuzzer, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "VCB Close Sound", 0, 0.5, &resource.ModelOutputs().AudioOutput[p0].VCBCloseSound, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "VCB Open Sound", 0, 0.5, &resource.ModelOutputs().AudioOutput[p0].VCBOpenSound, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Wheel Slide", 0, 0.5, &resource.ModelOutputs().AudioOutput[p0].WheelSlide, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Wheel Slip", 0, 0.5, &resource.ModelOutputs().AudioOutput[p0].WheelSlip, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Wiper Sound", 0, 0.5, &resource.ModelOutputs().AudioOutput[p0].WiperSound, true));
            db.AddObject(oi);
        }

        void DefineCBTCVehicleInputsObject(int object_id, int parent_id, int p0, ModelResource &resource, ObjectDB &db)
        {
            ObjectDB::ObjectInfo oi(true, Sim::ObjectID(object_id), Sim::ObjectID(parent_id), "CBTCVehicleInputs", ClassID::CBTC_VEHICLE_INPUTS);
            int number_id = 0;
            oi.numbers.reserve(39);

            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ATC Cab Activation", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].CBTC.OnBoard.ATCCabActivation, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ATC SB Reset Indicator", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].CBTC.OnBoard.ATCSBResetIndicator, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ATO Permitted Distance", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].CBTC.OnBoard.ATOPermittedDistance, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ATO Permitted Speed", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].CBTC.OnBoard.ATOPermittedSpeed, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ATO Start Indicator", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].CBTC.OnBoard.ATOStartIndicator, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ATO State", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].CBTC.OnBoard.ATOState, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Audio Acknowledge", 0, 0.5, resource.ExternallyModelled("AudioAcknowledge"), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Audio Departure Order", 0, 0.5, resource.ExternallyModelled("AudioDepartureOrder"), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Audio High Priority Text Alert", 0, 0.5, resource.ExternallyModelled("AudioHighPriorityTextAlert"), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Audio Safety Brake Alarm", 0, 0.5, resource.ExternallyModelled("AudioSafetyBrakeAlarm"), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Audio TCMS High Priority Fault", 0, 0.5, resource.ExternallyModelled("AudioTCMSHighPriorityFault"), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Audio Target Speed", 0, 0.5, resource.ExternallyModelled("AudioTargetSpeed"), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Audio Warning Alarm", 0, 0.5, resource.ExternallyModelled("AudioWarningAlarm"), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Close Left Train Doors", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].CBTC.Platform.CloseLeftTrainDoors, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Close Right Train Doors", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].CBTC.Platform.CloseRightTrainDoors, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Emergency Detrainment Door Locked", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].CBTC.OnBoard.EmergencyDetrainmentDoorLocked, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Immobilisation State", 1, 0.5, &resource.ModelInputs().VehicleInput[p0].CBTC.OnBoard.ImmobilisationState, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door Close Indicator", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].CBTC.Platform.LeftDoorCloseIndicator, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door Open Indicator", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].CBTC.Platform.LeftDoorOpenIndicator, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door Release Indicator", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].CBTC.Platform.LeftDoorReleaseIndicator, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Hold Door Close", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].CBTC.OnBoard.LeftHoldDoorClose, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Side Door Enable", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].CBTC.Platform.LeftSideDoorEnable, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "No Emergency Brake Order", 1, 0.5, &resource.ModelInputs().VehicleInput[p0].CBTC.OnBoard.NoEmergencyBrakeOrder, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "No Service Brake Order", 1, 0.5, &resource.ModelInputs().VehicleInput[p0].CBTC.OnBoard.NoServiceBrakeOrder, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Open Left Train Doors", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].CBTC.Platform.OpenLeftTrainDoors, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Open Right Train Doors", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].CBTC.Platform.OpenRightTrainDoors, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ROS Indicator", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].CBTC.OnBoard.ROSIndicator, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door Close Indicator", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].CBTC.Platform.RightDoorCloseIndicator, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door Open Indicator", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].CBTC.Platform.RightDoorOpenIndicator, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door Release Indicator", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].CBTC.Platform.RightDoorReleaseIndicator, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Hold Door Close", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].CBTC.OnBoard.RightHoldDoorClose, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Side Door Enable", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].CBTC.Platform.RightSideDoorEnable, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Rollback Detected", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].CBTC.OnBoard.RollbackDetected, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Traction Forward", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].CBTC.OnBoard.TractionForward, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "UTO Mode Active", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].CBTC.OnBoard.UTOModeActive, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "UTO PB Indicator", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].CBTC.OnBoard.UTOPBIndicator, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Wake Up Command", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].CBTC.OnBoard.WakeUpCommand, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Zero Speed", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].CBTC.OnBoard.ZeroSpeed, true));
            db.AddObject(oi);
        }

        void DefineCBTCVehicleOutputsObject(int object_id, int parent_id, int p0, ModelResource &resource, ObjectDB &db)
        {
            ObjectDB::ObjectInfo oi(true, Sim::ObjectID(object_id), Sim::ObjectID(parent_id), "CBTCVehicleOutputs", ClassID::CBTC_VEHICLE_OUTPUTS);
            int number_id = 0;
            oi.numbers.reserve(25);

            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ATC Bypass State", 0, 0.5, &resource.ModelOutputs().CBTCVehicleOut[p0].OnBoard.ATCBypassState, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ATC SB Reset Button", 0, 0.5, &resource.ModelOutputs().CBTCVehicleOut[p0].OnBoard.ATCSBResetButton, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ATO Start Button", 0, 0.5, &resource.ModelOutputs().CBTCVehicleOut[p0].OnBoard.ATOStartButton, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Cabin Activation", 0, 0.5, &resource.ModelOutputs().CBTCVehicleOut[p0].OnBoard.CabinActivation, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door Mode", 0, 0.5, resource.Unmapped("Door Mode", p0), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Driver Mode Selection", 0, 0.5, &resource.ModelOutputs().CBTCVehicleOut[p0].OnBoard.DriverModeSelection, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Emergency Door Not Open", 1, 0.5, &resource.ModelOutputs().CBTCVehicleOut[p0].OnBoard.EmergencyDoorNotOpen, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Fire Smoke Ind", 1, 0.5, &resource.ModelOutputs().CBTCVehicleOut[p0].OnBoard.FireSmokeInd, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Side Door Close Request", 0, 0.5, &resource.ModelOutputs().CBTCVehicleOut[p0].Platform.LeftSideDoorCloseRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Side Door Open Request", 0, 0.5, &resource.ModelOutputs().CBTCVehicleOut[p0].Platform.LeftSideDoorOpenRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Mechanical Coupling", 1, 0.5, &resource.ModelOutputs().CBTCVehicleOut[p0].OnBoard.MechanicalCoupling, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Mode Selector Position", 0, 0.5, &resource.ModelOutputs().CBTCVehicleOut[p0].OnBoard.ModeSelectorPosition, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "No Door Enable Bypass", 0, 0.5, &resource.ModelOutputs().CBTCVehicleOut[p0].OnBoard.NoDoorEnableBypass, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "No Emergency Brake", 1, 0.5, &resource.ModelOutputs().CBTCVehicleOut[p0].OnBoard.NoEmergencyBrake, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Passenger Emergency Alarm", 1, 0.5, &resource.ModelOutputs().CBTCVehicleOut[p0].OnBoard.PassengerEmergencyAlarm, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Power Supply", 0, 0.5, &resource.ModelOutputs().CBTCVehicleOut[p0].OnBoard.PowerSupply, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Side Door Close Request", 0, 0.5, &resource.ModelOutputs().CBTCVehicleOut[p0].Platform.RightSideDoorCloseRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Side Door Open Request", 0, 0.5, &resource.ModelOutputs().CBTCVehicleOut[p0].Platform.RightSideDoorOpenRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TBC Position", 0, 0.5, &resource.ModelOutputs().CBTCVehicleOut[p0].OnBoard.TBCPosition, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TCMS Speed Limit", 1, 0.5, &resource.ModelOutputs().CBTCVehicleOut[p0].OnBoard.TCMSSpeedLimit, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TCMS Speed Limit Cause", 1, 0.5, &resource.ModelOutputs().CBTCVehicleOut[p0].OnBoard.TCMSSpeedLimitCause, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Train Door Closed And Locked", 1, 0.5, &resource.ModelOutputs().CBTCVehicleOut[p0].OnBoard.TrainDoorClosedAndLocked, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "UTO Start Button", 0, 0.5, &resource.ModelOutputs().CBTCVehicleOut[p0].OnBoard.UTOStartButton, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Wake Up Status", 1, 0.5, &resource.ModelOutputs().CBTCVehicleOut[p0].OnBoard.WakeUpStatus, true));
            db.AddObject(oi);
        }

        void DefineCouplingObject(int object_id, int parent_id, int p0, int instance, ModelResource &resource, ObjectDB &db)
        {
            ObjectDB::ObjectInfo oi(true, Sim::ObjectID(object_id), Sim::ObjectID(parent_id), "Coupling", ClassID::COUPLING);
            int number_id = 0;
            oi.numbers.reserve(15);

            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Available", 0.0, 0.5, &resource.ModelInputs().VehicleInput[p0].Couplers.Coupler[instance].CouplingPhysical.Available, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Coupled", 0.0, 0.5, &resource.ModelOutputs().CouplingOutput[p0].Couplers.Coupler[instance].PhysicalSignals.MechanicalCouplerState, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Coupled Chain Length", 1.0, 0.5, &resource.ModelInputs().VehicleInput[p0].Couplers.Coupler[instance].CouplingPhysical.CoupledChainLength, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Coupler Damaged", 0, 0, &resource.ModelOutputs().CouplingOutput[p0].Couplers.Coupler[instance].PhysicalSignals.CouplerDamaged, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Coupling Separation", 0.0, 1.0E-5, &resource.ModelInputs().VehicleInput[p0].Couplers.Coupler[instance].CouplingPhysical.CouplingSeparation, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "End", 0.0, 0.5, &resource.ModelInputs().VehicleInput[p0].Couplers.Coupler[instance].CouplingPhysical.End, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Interfacing", 0.0, 0.5, &resource.ModelInputs().VehicleInput[p0].Couplers.Coupler[instance].CouplingPhysical.Interfacing, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Other Coupling Position", 0.0, 1.0E-5, &resource.ModelInputs().VehicleInput[p0].Couplers.Coupler[instance].CouplingPhysical.OtherCouplingPosition, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Other Vehicle End", 0.0, 0.5, &resource.ModelInputs().VehicleInput[p0].Couplers.Coupler[instance].CouplingPhysical.OtherVehicleEnd, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Other Vehicle ID", -1.0, 0.5, &resource.ModelInputs().VehicleInput[p0].Couplers.Coupler[instance].CouplingPhysical.OtherVehicleID, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Other Vehicle Orientation", 0.0, 0.5, &resource.ModelInputs().VehicleInput[p0].Couplers.Coupler[instance].CouplingPhysical.OtherVehicleOrientation, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Our Coupling Position", 0.0, 1.0E-5, &resource.ModelInputs().VehicleInput[p0].Couplers.Coupler[instance].CouplingPhysical.OurCouplingPosition, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Separation", 0.0, 1.0E-5, &resource.ModelInputs().VehicleInput[p0].Couplers.Coupler[instance].CouplingPhysical.Separation, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Separation Rate", 0.0, 1.0E-5, &resource.ModelInputs().VehicleInput[p0].Couplers.Coupler[instance].CouplingPhysical.SeparationRate, true));
            db.AddObject(oi);
        }

        void DefineCouplingInputsObject(int object_id, int parent_id, int p0, int p1, ModelResource &resource, ObjectDB &db)
        {
            ObjectDB::ObjectInfo oi(true, Sim::ObjectID(object_id), Sim::ObjectID(parent_id), "CouplingInputs", ClassID::COUPLING_INPUTS);
            int number_id = 0;
            oi.numbers.reserve(6);

            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Coupler Brake Demand", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].Couplers.Coupler[p1].CouplingInterface.CouplerBrakeDemand, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Coupler Type", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].Couplers.Coupler[p1].CouplingInterface.CouplerType, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Mechanically Coupled", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].Couplers.Coupler[p1].CouplingInterface.MechanicallyCoupled, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Pneumatically Coupled", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].Couplers.Coupler[p1].CouplingInterface.PneumaticallyCoupled, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Ready To Couple", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].Couplers.Coupler[p1].CouplingInterface.ReadyToCouple, true));
            db.AddObject(oi);
        }

        void DefineCouplingOutputsObject(int object_id, int parent_id, int p0, int p1, ModelResource &resource, ObjectDB &db)
        {
            ObjectDB::ObjectInfo oi(true, Sim::ObjectID(object_id), Sim::ObjectID(parent_id), "CouplingOutputs", ClassID::COUPLING_OUTPUTS);
            int number_id = 0;
            oi.numbers.reserve(6);

            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Coupler Brake Demand", 0, 0.5, &resource.ModelOutputs().CouplingOutput[p0].Couplers.Coupler[p1].CouplingInterface.CouplerBrakeDemand, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Coupler Type", 0, 0.5, &resource.ModelOutputs().CouplingOutput[p0].Couplers.Coupler[p1].CouplingInterface.CouplerType, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Mechanically Coupled", 0, 0.5, &resource.ModelOutputs().CouplingOutput[p0].Couplers.Coupler[p1].CouplingInterface.MechanicallyCoupled, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Pneumatically Coupled", 0, 0.5, &resource.ModelOutputs().CouplingOutput[p0].Couplers.Coupler[p1].CouplingInterface.PneumaticallyCoupled, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Ready To Couple", 0, 0.5, &resource.ModelOutputs().CouplingOutput[p0].Couplers.Coupler[p1].CouplingInterface.ReadyToCouple, true));
            db.AddObject(oi);
        }

        void DefineMimicInputsObject(int object_id, int parent_id, int p0, int p1, ModelResource &resource, ObjectDB &db)
        {
            ObjectDB::ObjectInfo oi(true, Sim::ObjectID(object_id), Sim::ObjectID(parent_id), "MimicInputs", ClassID::MIMIC_INPUTS);
            int number_id = 0;
            oi.numbers.reserve(12);

            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Acceleration", 0.0, 1.0E-5, &resource.ModelInputs().VehicleInput[p0].Couplers.Coupler[p1].CouplingPhysical.Mimic.Acceleration, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Braking Force", 0.0, 10.0, &resource.ModelInputs().VehicleInput[p0].Couplers.Coupler[p1].CouplingPhysical.Mimic.BrakingForce, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Gradient", 0.0, 0.001, &resource.ModelInputs().VehicleInput[p0].Couplers.Coupler[p1].CouplingPhysical.Mimic.Gradient, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Mass", 45000.0, 1.0, &resource.ModelInputs().VehicleInput[p0].Couplers.Coupler[p1].CouplingPhysical.Mimic.Mass, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Other Coupler Force", 0.0, 10.0, &resource.ModelInputs().VehicleInput[p0].Couplers.Coupler[p1].CouplingPhysical.Mimic.OtherCouplerForce, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Other Coupler Force Rate", 0.0, 10.0, &resource.ModelInputs().VehicleInput[p0].Couplers.Coupler[p1].CouplingPhysical.Mimic.OtherCouplerForceRate, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Position", 0.0, 1.0E-5, &resource.ModelInputs().VehicleInput[p0].Couplers.Coupler[p1].CouplingPhysical.Mimic.Position, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Radius", 0.0, 1.0, &resource.ModelInputs().VehicleInput[p0].Couplers.Coupler[p1].CouplingPhysical.Mimic.Radius, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Time", 0.0, 1.0E-4, &resource.ModelInputs().VehicleInput[p0].Couplers.Coupler[p1].CouplingPhysical.Mimic.Time, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Tractive Force", 0.0, 10.0, &resource.ModelInputs().VehicleInput[p0].Couplers.Coupler[p1].CouplingPhysical.Mimic.TractiveForce, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Velocity", 0.0, 1.0E-5, &resource.ModelInputs().VehicleInput[p0].Couplers.Coupler[p1].CouplingPhysical.Mimic.Velocity, true));
            db.AddObject(oi);
        }

        void DefineMimicOutputsObject(int object_id, int parent_id, int p0, int p1, ModelResource &resource, ObjectDB &db)
        {
            ObjectDB::ObjectInfo oi(true, Sim::ObjectID(object_id), Sim::ObjectID(parent_id), "MimicOutputs", ClassID::MIMIC_OUTPUTS);
            int number_id = 0;
            oi.numbers.reserve(12);

            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Acceleration", 0.0, 1.0E-5, &resource.ModelOutputs().DynamicsOutput[p0].Couplers[p1].Mimic.Acceleration, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Braking Force", 0.0, 10.0, &resource.ModelOutputs().DynamicsOutput[p0].Couplers[p1].Mimic.BrakingForce, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Gradient", 0.0, 0.001, &resource.ModelOutputs().DynamicsOutput[p0].Couplers[p1].Mimic.Gradient, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Mass", 45000.0, 1.0, &resource.ModelOutputs().DynamicsOutput[p0].Couplers[p1].Mimic.Mass, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Other Coupler Force", 0.0, 10.0, &resource.ModelOutputs().DynamicsOutput[p0].Couplers[p1].Mimic.OtherCouplerForce, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Other Coupler Force Rate", 0.0, 10.0, &resource.ModelOutputs().DynamicsOutput[p0].Couplers[p1].Mimic.OtherCouplerForceRate, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Position", 0.0, 1.0E-5, &resource.ModelOutputs().DynamicsOutput[p0].Couplers[p1].Mimic.Position, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Radius", 0.0, 1.0, &resource.ModelOutputs().DynamicsOutput[p0].Couplers[p1].Mimic.Radius, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Time", 0.0, 1.0E-4, &resource.ModelOutputs().DynamicsOutput[p0].Couplers[p1].Mimic.Time, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Tractive Force", 0.0, 10.0, &resource.ModelOutputs().DynamicsOutput[p0].Couplers[p1].Mimic.TractiveForce, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Velocity", 0.0, 1.0E-5, &resource.ModelOutputs().DynamicsOutput[p0].Couplers[p1].Mimic.Velocity, true));
            db.AddObject(oi);
        }

        void DefineDMIVehicleOutputsObject(int object_id, int parent_id, int p0, ModelResource &resource, ObjectDB &db)
        {
            ObjectDB::ObjectInfo oi(true, Sim::ObjectID(object_id), Sim::ObjectID(parent_id), "DMIVehicleOutputs", ClassID::DMI_VEHICLE_OUTPUTS);
            int number_id = 0;
            oi.numbers.reserve(4);

            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Cab Active", 0, 0.5, &resource.ModelOutputs().CBTCVehicleOut[p0].DMI.CabActive, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Neutral Section", 0, 0.5, &resource.ModelOutputs().CBTCVehicleOut[p0].DMI.NeutralSection, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Power On", 0, 0.5, &resource.ModelOutputs().CBTCVehicleOut[p0].DMI.PowerOn, true));
            db.AddObject(oi);
        }

        void DefineMotionBaseObject(int object_id, int parent_id, int p0, ModelResource &resource, ObjectDB &db)
        {
            ObjectDB::ObjectInfo oi(true, Sim::ObjectID(object_id), Sim::ObjectID(parent_id), "MotionBase", ClassID::MOTION_BASE);
            int number_id = 0;
            oi.numbers.reserve(33);

            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Angular Acceleration X", 0, 0.00001, &resource.ModelOutputs().MotionBaseControllerOutput[p0].AngularAcceleration[0], true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Angular Acceleration Y", 0, 0.00001, &resource.ModelOutputs().MotionBaseControllerOutput[p0].AngularAcceleration[1], true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Angular Acceleration Z", 0, 0.00001, &resource.ModelOutputs().MotionBaseControllerOutput[p0].AngularAcceleration[2], true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Angular Velocity X", 0, 0.00001, &resource.ModelOutputs().MotionBaseControllerOutput[p0].AngularVelocity[0], true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Angular Velocity Y", 0, 0.00001, &resource.ModelOutputs().MotionBaseControllerOutput[p0].AngularVelocity[1], true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Angular Velocity Z", 0, 0.00001, &resource.ModelOutputs().MotionBaseControllerOutput[p0].AngularVelocity[2], true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Apply Motion", 0, 0.5, &resource.ModelOutputs().MotionBaseControllerOutput[p0].ApplyMotion, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Degraded Track", 0, 0.01, &resource.ModelInputs().MotionBaseControllerInput[p0].Effects.DegradedTrack, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Gravitational Acceleration X", 0, 0.00001, &resource.ModelOutputs().MotionBaseControllerOutput[p0].GravitationalAcceleration[0], true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Gravitational Acceleration Y", 0, 0.00001, &resource.ModelOutputs().MotionBaseControllerOutput[p0].GravitationalAcceleration[1], true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Gravitational Acceleration Z", 0, 0.00001, &resource.ModelOutputs().MotionBaseControllerOutput[p0].GravitationalAcceleration[2], true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Linear Acceleration X", 0, 0.00001, &resource.ModelOutputs().MotionBaseControllerOutput[p0].LinearAcceleration[0], true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Linear Acceleration Y", 0, 0.00001, &resource.ModelOutputs().MotionBaseControllerOutput[p0].LinearAcceleration[1], true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Linear Acceleration Z", 0, 0.00001, &resource.ModelOutputs().MotionBaseControllerOutput[p0].LinearAcceleration[2], true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Linear Velocity X", 0, 0.00001, &resource.ModelOutputs().MotionBaseControllerOutput[p0].LinearVelocity[0], true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Linear Velocity Y", 0, 0.00001, &resource.ModelOutputs().MotionBaseControllerOutput[p0].LinearVelocity[1], true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Linear Velocity Z", 0, 0.00001, &resource.ModelOutputs().MotionBaseControllerOutput[p0].LinearVelocity[2], true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Manual Orientation X", 0, 0.00001, &resource.ModelOutputs().MotionBaseControllerOutput[p0].ManualOrientation[0], true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Manual Orientation Y", 0, 0.00001, &resource.ModelOutputs().MotionBaseControllerOutput[p0].ManualOrientation[1], true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Manual Orientation Z", 0, 0.00001, &resource.ModelOutputs().MotionBaseControllerOutput[p0].ManualOrientation[2], true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Manual Position X", 0, 0.00001, &resource.ModelOutputs().MotionBaseControllerOutput[p0].ManualPosition[0], true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Manual Position Y", 0, 0.00001, &resource.ModelOutputs().MotionBaseControllerOutput[p0].ManualPosition[1], true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Manual Position Z", 0, 0.00001, &resource.ModelOutputs().MotionBaseControllerOutput[p0].ManualPosition[2], true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "RM00", 0, 0.00001, &resource.ModelOutputs().MotionBaseControllerOutput[p0].OrientationDCM[0], true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "RM01", 0, 0.00001, &resource.ModelOutputs().MotionBaseControllerOutput[p0].OrientationDCM[3], true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "RM02", 0, 0.00001, &resource.ModelOutputs().MotionBaseControllerOutput[p0].OrientationDCM[6], true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "RM10", 0, 0.00001, &resource.ModelOutputs().MotionBaseControllerOutput[p0].OrientationDCM[1], true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "RM11", 0, 0.00001, &resource.ModelOutputs().MotionBaseControllerOutput[p0].OrientationDCM[4], true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "RM12", 0, 0.00001, &resource.ModelOutputs().MotionBaseControllerOutput[p0].OrientationDCM[7], true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "RM20", 0, 0.00001, &resource.ModelOutputs().MotionBaseControllerOutput[p0].OrientationDCM[2], true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "RM21", 0, 0.00001, &resource.ModelOutputs().MotionBaseControllerOutput[p0].OrientationDCM[5], true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "RM22", 0, 0.00001, &resource.ModelOutputs().MotionBaseControllerOutput[p0].OrientationDCM[8], true));
            db.AddObject(oi);
        }

        void DefineMotionBaseTuningObject(int object_id, int parent_id, int p0, ModelResource &resource, ObjectDB &db)
        {
            ObjectDB::ObjectInfo oi(true, Sim::ObjectID(object_id), Sim::ObjectID(parent_id), "MotionBaseTuning", ClassID::MOTION_BASE_TUNING);
            int number_id = 0;
            oi.numbers.reserve(17);

            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Angular Acceleration LPF Constant", 0, 0.01, &resource.ModelInputs().MotionBaseControllerInput[p0].Tuning.AngularAccelerationLPFConstant, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Angular Acceleration Saturation", 0, 0.01, &resource.ModelInputs().MotionBaseControllerInput[p0].Tuning.AngularAccelerationSaturation, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Angular Velocity LPF Constant", 0, 0.01, &resource.ModelInputs().MotionBaseControllerInput[p0].Tuning.AngularVelocityLPFConstant, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Angular Velocity Saturation", 0, 0.01, &resource.ModelInputs().MotionBaseControllerInput[p0].Tuning.AngularVelocitySaturation, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Heading Rate Limit", 0, 0.01, &resource.ModelInputs().MotionBaseControllerInput[p0].Tuning.HeadingRateLimit, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Linear Acceleration LPF Constant", 0, 0.01, &resource.ModelInputs().MotionBaseControllerInput[p0].Tuning.LinearAccelerationLPFConstant, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Linear Acceleration Saturation", 0, 0.01, &resource.ModelInputs().MotionBaseControllerInput[p0].Tuning.LinearAccelerationSaturation, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Linear Velocity LPF Constant", 0, 0.01, &resource.ModelInputs().MotionBaseControllerInput[p0].Tuning.LinearVelocityLPFConstant, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Linear Velocity Saturation", 0, 0.01, &resource.ModelInputs().MotionBaseControllerInput[p0].Tuning.LinearVelocitySaturation, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Pitch Rate Limit", 0, 0.01, &resource.ModelInputs().MotionBaseControllerInput[p0].Tuning.PitchRateLimit, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Roll Rate Limit", 0, 0.01, &resource.ModelInputs().MotionBaseControllerInput[p0].Tuning.RollRateLimit, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Roughness Profile Factor", 0, 0.01, &resource.ModelInputs().MotionBaseControllerInput[p0].Tuning.RoughnessProfileFactor, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Roughness Profile Frequency Factor", 0, 0.01, &resource.ModelInputs().MotionBaseControllerInput[p0].Tuning.RoughnessProfileFrequencyFactor, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Roughness Profile Speed Factor", 0, 0.01, &resource.ModelInputs().MotionBaseControllerInput[p0].Tuning.RoughnessProfileSpeedFactor, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Roughness Profile Speed Saturation", 0, 0.01, &resource.ModelInputs().MotionBaseControllerInput[p0].Tuning.RoughnessProfileSpeedSaturation, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Roughness Profile Type", 0, 0.01, &resource.ModelInputs().MotionBaseControllerInput[p0].Tuning.RoughnessProfileType, true));
            db.AddObject(oi);
        }

        void DefinePAPISVehicleOutputsObject(int object_id, int parent_id, int p0, ModelResource &resource, ObjectDB &db)
        {
            ObjectDB::ObjectInfo oi(true, Sim::ObjectID(object_id), Sim::ObjectID(parent_id), "PAPISVehicleOutputs", ClassID::PAPIS_VEHICLE_OUTPUTS);
            int number_id = 0;
            oi.numbers.reserve(12);

            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "All Door Close", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].MiscOutputs.PAPIS.AllDoorClose, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Cab Active", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].MiscOutputs.PAPIS.CabActive, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Couple", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].MiscOutputs.PAPIS.Couple, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door Close", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].MiscOutputs.PAPIS.DoorClose, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door Close Announcement", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].MiscOutputs.PAPIS.DoorCloseAnnouncement, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door Open", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].MiscOutputs.PAPIS.DoorOpen, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Emergency Door Open", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].MiscOutputs.PAPIS.EmergencyDoorOpen, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Front Obstacle Detected", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].MiscOutputs.PAPIS.FrontObstacleDetected, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PAPIS CCTV Power", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].MiscOutputs.PAPIS.PAPIS_CCTV_Power, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PECU Alarm Active", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].MiscOutputs.PAPIS.PECUAlarmActive, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Zero Speed", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].MiscOutputs.PAPIS.ZeroSpeed, true));
            db.AddObject(oi);
        }

        void DefineTCMSVehicleInputsObject(int object_id, int parent_id, int p0, ModelResource &resource, ObjectDB &db)
        {
            ObjectDB::ObjectInfo oi(true, Sim::ObjectID(object_id), Sim::ObjectID(parent_id), "TCMSVehicleInputs", ClassID::TCMS_VEHICLE_INPUTS);
            int number_id = 0;
            oi.numbers.reserve(75);

            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ATP Low Mode Activated", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.ATPLowModeActivated, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ATP Low Mode Max Speed", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.ATPLowModeMaxSpeed, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Activate HTE", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.ActivateHTE, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Activate Washing 3 Kmph", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.ActivateWashing3Kmph, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Activate Washing 4 Kmph", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.ActivateWashing4Kmph, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Activate Washing 5 Kmph", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.ActivateWashing5Kmph, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Auxiliary Desk Fire Detector Disable VDU Req", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.AuxiliaryDeskFireDetectorDisableVDUReq, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Bogie 1 Isolate VDU Req", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.Bogie1IsolateVDUReq, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Bogie 2 Isolate VDU Req", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.Bogie2IsolateVDUReq, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CAB Smoke Detector Disable VDU Req", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.CABSmokeDetectorDisableVDUReq, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door A1 Isolate VDU Req", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.DoorA1IsolateVDUReq, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door A2 Isolate VDU Req", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.DoorA2IsolateVDUReq, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door A3 Isolate VDU Req", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.DoorA3IsolateVDUReq, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door A4 Isolate VDU Req", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.DoorA4IsolateVDUReq, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door B1 Isolate VDU Req", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.DoorB1IsolateVDUReq, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door B2 Isolate VDU Req", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.DoorB2IsolateVDUReq, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door B3 Isolate VDU Req", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.DoorB3IsolateVDUReq, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door B4 Isolate VDU Req", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.DoorB4IsolateVDUReq, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "EDB Heat Alarm Disable VDU Req", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.EDBHeatAlarmDisableVDUReq, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "HVAC 1 Fire Detector Disable VDU Req", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.HVAC1FireDetectorDisableVDUReq, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Horn High", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.HornHigh, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Horn Isolate", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.HornIsolate, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Horn Low", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.HornLow, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "LHD CI Disable VDU Req", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.LHDCIDisableVDUReq, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "LHD Driver Desk Disable VDU Req", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.LHDDriverDeskDisableVDUReq, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "LHD LTJB Disable VDU Req", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.LHDLTJBDisableVDUReq, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "LV Command POPB", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.LVCommandPOPB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "LV Isolate BCG1", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.LVIsolateBCG1, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "LV Isolate BCG2", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.LVIsolateBCG2, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MV Comp Hours Reset", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.MVCompHoursReset, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MV MTr Blowers Forcing High", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.MVMTrBlowersForcingHigh, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MV MTr Blowers Forcing Low", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.MVMTrBlowersForcingLow, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MV Main Comp Forcing", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.MVMainCompForcing, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Park Brake Apply VDU Req", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.ParkBrakeApplyVDUReq, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Park Brake Bypass VDU Req", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.ParkBrakeBypassVDUReq, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Park Brake Release VDU Req", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.ParkBrakeReleaseVDUReq, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SHD End Cubicle Rear Left 1 Disable VDU Req", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.SHDEndCubicleRearLeft1DisableVDUReq, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SHD End Cubicle Rear Left 2 Disable VDU Req", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.SHDEndCubicleRearLeft2DisableVDUReq, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SHD End Cubicle Rear Right 1 Disable VDU Req", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.SHDEndCubicleRearRight1DisableVDUReq, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SHD End Cubicle Rear Right 2 Disable VDU Req", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.SHDEndCubicleRearRight2DisableVDUReq, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Saloon R1 Fire Detector Disable VDU Req", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.SaloonR1FireDetectorDisableVDUReq, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Saloon R2 Fire Detector Disable VDU Req", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.SaloonR2FireDetectorDisableVDUReq, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Shunt Mode Activated", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.ShuntModeActivated, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Shunt Mode Max Speed", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.ShuntModeMaxSpeed, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Shunt Mode Min Speed", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.ShuntModeMinSpeed, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TCMS APSICB Close", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.TCMSAPSICBClose, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TCMS APSICB Open", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.TCMSAPSICBOpen, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TCMS FDSCB Close", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.TCMSFDSCBClose, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TCMS FDSCB Open", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.TCMSFDSCBOpen, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TCMS FDU Reset Req", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.TCMSFDUResetReq, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TCMS Fire Alarm Reset Req", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.TCMSFireAlarmResetReq, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TCMS HVAC 1 Isolate Req", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.TCMSHVAC1IsolateReq, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TCMS HVAC 1 Reset Req", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.TCMSHVAC1ResetReq, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TCMS HVAC 2 Isolate Req", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.TCMSHVAC2IsolateReq, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TCMS HVAC 2 Reset Req", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.TCMSHVAC2ResetReq, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TCMS HVAC Smoke Reset Req", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.TCMSHVACSmokeResetReq, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TCMS HVAC1 Close", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.TCMSHVAC1Close, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TCMS HVAC1 Open", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.TCMSHVAC1Open, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TCMS HVAC2 Close", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.TCMSHVAC2Close, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TCMS HVAC2 Open", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.TCMSHVAC2Open, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TCMS Isolate APS 1", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.TCMSIsolateAPS1, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TCMS Isolate APS 2", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.TCMSIsolateAPS2, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TCMS Isolate CI", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.TCMSIsolateCI, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TCMS Isolate Panto", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.TCMSIsolatePanto, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TCMS Isolate VCB", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.TCMSIsolateVCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TCMS PABOR Bypass Req", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.TCMSPABORBypassReq, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TCMS Panto Lower Req", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.TCMSPantoLowerReq, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TCMS Panto Reset Req", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.TCMSPantoResetReq, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TCMS Panto Rise Req", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.TCMSPantoRiseReq, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TCMS Req Ctrl VCB NS", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.TCMSReqCtrlVCBNS, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TCMS VCB Close Req", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.TCMSVCBCloseReq, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TCMS VCB Open Req", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.TCMSVCBOpenReq, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TCMS VCB Reset Req", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.TCMSVCBResetReq, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TCMS WFL Isolation Req", 0, 0.5, &resource.ModelInputs().VehicleInput[p0].DisplayControl.TCMSWFLIsolationReq, true));
            db.AddObject(oi);
        }

        void DefineTCMSVehicleOutputsObject(int object_id, int parent_id, int p0, ModelResource &resource, ObjectDB &db)
        {
            ObjectDB::ObjectInfo oi(true, Sim::ObjectID(object_id), Sim::ObjectID(parent_id), "TCMSVehicleOutputs", ClassID::TCMS_VEHICLE_OUTPUTS);
            int number_id = 0;
            oi.numbers.reserve(285);

            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ADD Intervention", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.ADDIntervention, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "AK 1 Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.AK1Status, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "AK 2 Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.AK2Status, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "AK Contactor Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TractionBraking.AKContactorStatus, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "APS 1 Fault", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.APS1Fault, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "APS 1 Isolated", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.APS1Isolated, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "APS 1 Output Voltage", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.APS1OutputVoltage, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "APS 1 Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.APS1Status, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "APS 2 Fault", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.APS2Fault, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "APS 2 Isolated", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.APS2Isolated, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "APS 2 Output Voltage", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.APS2OutputVoltage, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "APS 2 Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.APS2Status, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "APS K AK Contactor", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.APSKAKContactor, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ATB Mode", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.ATBMode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ATC Bypass Mode", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.ATCBypassMode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ATC Status Not OK", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.ATCStatusNotOK, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ATO Mode", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.ATOMode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ATP Low Speed Cutout Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TractionBraking.ATPLowSpeedCutoutStatus, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ATP Mode", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.ATPMode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Air Suspension Pressure", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.PneumaticsSystem.AirSuspensionPressure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Aux Compressor", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.AuxCompressor, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BCG 1 Fault", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.BCG1Fault, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BCG 1 Isolated", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.BCG1Isolated, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BCG 1 Isolation Failed", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.BCG1IsolationFailed, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BCG 1 Output Current", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.BCG1OutputCurrent, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BCG 1 Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.BCG1Status, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BCG 2 Fault", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.BCG2Fault, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BCG 2 Isolated", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.BCG2Isolated, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BCG 2 Output Current", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.BCG2OutputCurrent, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BCG 2 Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.BCG2Status, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BCG Output Voltage", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.BCGOutputVoltage, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BECU Major Fault", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TractionBraking.BECUMajorFault, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BECU Minor Fault", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TractionBraking.BECUMinorFault, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BECU Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TractionBraking.BECUStatus, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Battery Current", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.BatteryCurrent, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Battery Isolation Contactor", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.BatteryIsolationContactor, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Battery Temperature", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.BatteryTemperature, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Battery Voltage", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.BatteryVoltage, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Bogie 1 Brake Cylinder Pressure", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.PneumaticsSystem.Bogie1BrakeCylinderPressure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Bogie 1 Isolation Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.PneumaticsSystem.Bogie1IsolationStatus, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Bogie 1 Parking Brake Isolated", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.PneumaticsSystem.Bogie1ParkingBrakeIsolated, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Bogie 1 Parking Brake Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.PneumaticsSystem.Bogie1ParkingBrakeStatus, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Bogie 1 SUSP Fault", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.PneumaticsSystem.Bogie1SUSPFault, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Bogie 1 SUSP Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.PneumaticsSystem.Bogie1SUSPStatus, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Bogie 1 Service Brake Fault", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.PneumaticsSystem.Bogie1ServiceBrakeFault, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Bogie 1 Service Brake Isolated", 0, 0.5, resource.Unmapped("Bogie 1 Service Brake Isolated"), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Bogie 1 Service Brake Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.PneumaticsSystem.Bogie1ServiceBrakeStatus, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Bogie 1 WSP Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TractionBraking.Bogie1WSPStatus, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Bogie 2 Brake Cylinder Pressure", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.PneumaticsSystem.Bogie2BrakeCylinderPressure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Bogie 2 Isolation Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.PneumaticsSystem.Bogie2IsolationStatus, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Bogie 2 Parking Brake Isolated", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.PneumaticsSystem.Bogie2ParkingBrakeIsolated, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Bogie 2 Parking Brake Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.PneumaticsSystem.Bogie2ParkingBrakeStatus, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Bogie 2 SUSP Fault", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.PneumaticsSystem.Bogie2SUSPFault, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Bogie 2 SUSP Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.PneumaticsSystem.Bogie2SUSPStatus, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Bogie 2 Service Brake Fault", 0, 0.5, resource.Unmapped("Bogie 2 Service Brake Fault", p0), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Bogie 2 Service Brake Isolated", 0, 0.5, resource.Unmapped("Bogie 2 Service Brake Isolated"), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Bogie 2 Service Brake Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.PneumaticsSystem.Bogie2ServiceBrakeStatus, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Bogie 2 WSP Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TractionBraking.Bogie2WSPStatus, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Brake Cylinder Pressure", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.PneumaticsSystem.BrakeCylinderPressure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Brake Loop CB Tripped", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.BrakeLoopCBTripped, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Brake Loop Open TL", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.BrakeLoopOpenTL, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Brake Train Line Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.BrakeTrainLineStatus, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CAB Smoke Alarm Active", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.CABSmokeAlarmActive, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CCU Fault", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TCMSSystem.CCUFault, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CI Fault", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TractionBraking.CIFault, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CI Isolated", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TractionBraking.CIIsolated, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CI K AK Contactor", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TractionBraking.CIKAKContactor, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CI Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TractionBraking.CIStatus, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Cab Active", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.CabActive, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Cab Not Enabled", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.CabNotEnabled, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Car Weight", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TractionBraking.CarWeight, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Consist Switch Status A", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TCMSSystem.ConsistSwitchStatusA, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Consist Switch Status B", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TCMSSystem.ConsistSwitchStatusB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Consist Switch Status C", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TCMSSystem.ConsistSwitchStatusC, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Coupled", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.Coupled, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DCU 1 Fault", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.Doors.DCU1Fault, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DCU 1 Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.Doors.DCU1Status, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DCU 2 Fault", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.Doors.DCU2Fault, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DCU 2 Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.Doors.DCU2Status, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DCU 3 Fault", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.Doors.DCU3Fault, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DCU 3 Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.Doors.DCU3Status, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DCU 4 Fault", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.Doors.DCU4Fault, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DCU 4 Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.Doors.DCU4Status, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DCU 5 Fault", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.Doors.DCU5Fault, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DCU 5 Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.Doors.DCU5Status, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DCU 6 Fault", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.Doors.DCU6Fault, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DCU 6 Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.Doors.DCU6Status, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DCU 7 Fault", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.Doors.DCU7Fault, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DCU 7 Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.Doors.DCU7Status, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DCU 8 Fault", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.Doors.DCU8Fault, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DCU 8 Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.Doors.DCU8Status, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Derailment Detected Left", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.DerailmentDetectedLeft, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Derailment Detected Right", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.DerailmentDetectedRight, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door A1 Emergency Released", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.Doors.DoorA1EmergencyReleased, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door A1 Fault", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.Doors.DoorA1Fault, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door A1 Isolated", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.Doors.DoorA1Isolated, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door A1 Locked", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.Doors.DoorA1Locked, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door A1 Open", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.Doors.DoorA1Open, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door A2 Emergency Released", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.Doors.DoorA2EmergencyReleased, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door A2 Fault", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.Doors.DoorA2Fault, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door A2 Isolated", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.Doors.DoorA2Isolated, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door A2 Locked", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.Doors.DoorA2Locked, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door A2 Open", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.Doors.DoorA2Open, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door A3 Emergency Released", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.Doors.DoorA3EmergencyReleased, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door A3 Fault", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.Doors.DoorA3Fault, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door A3 Isolated", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.Doors.DoorA3Isolated, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door A3 Locked", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.Doors.DoorA3Locked, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door A3 Open", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.Doors.DoorA3Open, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door A4 Emergency Released", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.Doors.DoorA4EmergencyReleased, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door A4 Fault", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.Doors.DoorA4Fault, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door A4 Isolated", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.Doors.DoorA4Isolated, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door A4 Locked", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.Doors.DoorA4Locked, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door A4 Open", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.Doors.DoorA4Open, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door B1 Emergency Released", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.Doors.DoorB1EmergencyReleased, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door B1 Fault", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.Doors.DoorB1Fault, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door B1 Isolated", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.Doors.DoorB1Isolated, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door B1 Locked", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.Doors.DoorB1Locked, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door B1 Open", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.Doors.DoorB1Open, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door B2 Emergency Released", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.Doors.DoorB2EmergencyReleased, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door B2 Fault", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.Doors.DoorB2Fault, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door B2 Isolated", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.Doors.DoorB2Isolated, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door B2 Locked", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.Doors.DoorB2Locked, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door B2 Open", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.Doors.DoorB2Open, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door B3 Emergency Released", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.Doors.DoorB3EmergencyReleased, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door B3 Fault", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.Doors.DoorB3Fault, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door B3 Isolated", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.Doors.DoorB3Isolated, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door B3 Locked", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.Doors.DoorB3Locked, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door B3 Open", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.Doors.DoorB3Open, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door B4 Emergency Released", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.Doors.DoorB4EmergencyReleased, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door B4 Fault", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.Doors.DoorB4Fault, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door B4 Isolated", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.Doors.DoorB4Isolated, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door B4 Locked", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.Doors.DoorB4Locked, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door B4 Open", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.Doors.DoorB4Open, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door Loop Open TL", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.DoorLoopOpenTL, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Driving Mode Not OK", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.DrivingModeNotOK, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Dummy Fault Signal", 0, 0.5, resource.Unmapped("Dummy Fault Signal"), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "EB 1 Line Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.EB1LineStatus, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "EB 2 Line Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.EB2LineStatus, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "EB By Brake Loop", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.EBByBrakeLoop, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "EB By CC", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.EBByCC, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "EB By MC", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.EBByMC, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "EB Due To ATC Zero Speed", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.EBDueToATCZeroSpeed, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "EB Due To Deadman", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.EBDueToDeadman, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "EB Due To Push Button", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.EBDueToPushButton, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "EB For Non Cab Enabled", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.EBForNonCabEnabled, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "EB For Non Direction Selected", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.EBForNonDirectionSelected, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ECN ALG Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TCMSSystem.ECNALGStatus, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ED Brake Requested", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TractionBraking.EDBrakeRequested, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ED Brake Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TractionBraking.EDBrakeStatus, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ED Cutout Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TractionBraking.EDCutoutStatus, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "EDB Heat Alarm Active", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.EDBHeatAlarmActive, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "EGS Operated ACPM", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.EGSOperatedACPM, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "EGS Operated OSPM", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.EGSOperatedOSPM, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "EP Brake Delivered", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TractionBraking.EPBrakeDelivered, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "EPIC Isolation Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TractionBraking.EPICIsolationStatus, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ER Fault", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TCMSSystem.ERFault, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Emergency Escape Door Fault", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.EmergencyEscapeDoorFault, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Emergency Escape Door Isolated", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.EmergencyEscapeDoorIsolated, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Emergency Escape Door Locked", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.EmergencyEscapeDoorLocked, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Emergency Escape Door Open", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.EmergencyEscapeDoorOpen, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Emergency Escape Door Released", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.DoorSystem.EmergencyEscapeDoorReleased, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Enable To Run", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.EnableToRun, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "External Smoke", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.ExternalSmoke, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "FDU Fault", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.FDUFault, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "FSB 1 Line Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.FSB1LineStatus, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "FSB 2 Line Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.FSB2LineStatus, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Filter Voltage", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TractionBraking.FilterVoltage, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Fire Detection Unit", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.FireDetectionUnit, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Flasher Light Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.FlasherLightStatus, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Forward Direction", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TractionBraking.ForwardDirection, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "HMI Power", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.HMIPower, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "HTE Required", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TractionBraking.HTERequired, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "HVAC 1 External Temperature", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.HVAC1ExternalTemperature, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "HVAC 1 Fault", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.HVAC1Fault, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "HVAC 1 Fire Smoke Active", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.HVAC1FireSmokeActive, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "HVAC 1 Internal Temperature", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.HVAC1InternalTemperature, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "HVAC 1 Isolated", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.HVAC1Isolated, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "HVAC 1 Reduced Mode", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.HVAC1ReducedMode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "HVAC 1 Set Point Temperature", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.HVAC1SetPointTemperature, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "HVAC 1 Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.HVAC1Status, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "HVAC 2 External Temperature", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.HVAC2ExternalTemperature, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "HVAC 2 Fault", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.HVAC2Fault, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "HVAC 2 Internal Temperature", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.HVAC2InternalTemperature, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "HVAC 2 Isolated", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.HVAC2Isolated, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "HVAC 2 Reduced Mode", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.HVAC2ReducedMode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "HVAC 2 Set Point Temperature", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.HVAC2SetPointTemperature, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "HVAC 2 Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.HVAC2Status, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "High Voltage Missing", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.HighVoltageMissing, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Holding Brake Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TractionBraking.HoldingBrakeStatus, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Internal Fire", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.InternalFire, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Jog Mode", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.JogMode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "K 1 Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.K1Status, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "K 2 Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.K2Status, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "K Contactor Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TractionBraking.KContactorStatus, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Line Voltage", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.LineVoltage, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Main Compressor", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.MainCompressor, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Main Pipe Pressure", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.PneumaticsSystem.MainPipePressure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Main Reservoir Pressure Low", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.PneumaticsSystem.MainReservoirPressureLow, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Motor Train Line Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.MotorTrainLineStatus, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Motoring TL Deenergized", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.MotoringTLDeenergized, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "No Line Voltage", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.NoLineVoltage, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Obstruction Detected Left", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.ObstructionDetectedLeft, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Obstruction Detected Right", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.ObstructionDetectedRight, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Odometer", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.Odometer, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Operational Mode", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.OperationalMode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Pantograph Fault", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.PantographSystem.PantographFault, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Pantograph Isolated", 0, 0.1, &resource.ModelOutputs().TCMSOutput[p0].Display.PantographSystem.PantographIsolated, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Pantograph Position", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.PantographSystem.PantographPosition, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Park Brake Applied", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.PneumaticsSystem.ParkBrakeApplied, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Park Brake Isolated", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.PneumaticsSystem.ParkBrakeIsolated, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Parking Brake Active TL", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.ParkingBrakeActiveTL, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Power Extension Contactor", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.PowerExtensionContactor, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Power Off Pressed", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.PowerOffPressed, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Propulsion Active", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TractionBraking.PropulsionActive, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Propulsion Enable Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TractionBraking.PropulsionEnableStatus, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Propulsion Fault", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TractionBraking.PropulsionFault, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Propulsion Isolated", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TractionBraking.PropulsionIsolated, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "RIO1 Fault", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TCMSSystem.RIO1Fault, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "RIO1 RIO2 Fault", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TCMSSystem.RIO1RIO2Fault, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "RIO1 Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TCMSSystem.RIO1Status, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "RIO2 Fault", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TCMSSystem.RIO2Fault, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "RIO2 Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TCMSSystem.RIO2Status, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "RMF Mode", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.RMFMode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "RMR Mode", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.RMRMode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ROS Mode", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.ROSMode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "RPRESS Isolation Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TractionBraking.RPRESSIsolationStatus, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Rescue Mode", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.RescueMode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Reverse Direction", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TractionBraking.ReverseDirection, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SFAR Fault", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.SFARFault, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Saloon Fire Alarm Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.SaloonFireAlarmStatus, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Saloon Light Group Status 1", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.SaloonLightGroupStatus1, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Saloon Light Group Status 2", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.SaloonLightGroupStatus2, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Sensor Fire Alarm Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.SensorFireAlarmStatus, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Service Brake Active", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.PneumaticsSystem.ServiceBrakesApplied, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Shore Supply", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.ShoreSupply, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Shunt Mode Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TractionBraking.ShuntModeStatus, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Speed Limit AS Cutout", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TractionBraking.SpeedLimitASCutout, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Speed Limit AS Deflated", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TractionBraking.SpeedLimitASDeflated, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Speed Limit Bogie Isolated", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TractionBraking.SpeedLimitBogieIsolated, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Speed Limit Brake Failure", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TractionBraking.SpeedLimitBrakeFailure, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Speed Limit EPIC Cutout", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TractionBraking.SpeedLimitEPICCutout, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Speed Limit Excessive Slip", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TractionBraking.SpeedLimitExcessiveSlip, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Speed Limit Jog Mode", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TractionBraking.SpeedLimitJogMode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Speed Limit Low Speed Cutout Mode", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TractionBraking.SpeedLimitLowSpeedCutoutMode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Speed Limit No ED Available", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TractionBraking.SpeedLimitNoEDAvailable, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Speed Limit Override Traction Block", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TractionBraking.SpeedLimitOverrideTractionBlock, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Speed Limit RPRESS Isolated", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TractionBraking.SpeedLimitRPRESSIsolated, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Speed Limit SCS Mode", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TractionBraking.SpeedLimitSCSMode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Standby Mode", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.StandbyMode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TBC Position", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.TBCPosition, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TCMS Speed Limit", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TractionBraking.TCMSSpeedLimit, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TE BE Feedback", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TractionBraking.TEBEFeedback, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Too Many Bogie Isolated", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.TooManyBogieIsolated, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Too Many EPIC Cutout", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.TooManyEPICCutout, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Too Many R Pressure Cutout", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.TooManyRPressureCutout, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Total Output Current", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.TotalOutputCurrent, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Total Weight", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TractionBraking.TotalWeight, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Tractive Effort", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TractionBraking.TractiveEffort, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Train Backbone Node Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TCMSSystem.TrainBackboneNodeStatus, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Train Control Contactor", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.TrainControlContactor, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Train Direction Missing", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.TrainDirectionMissing, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Train Ethernet Repeater Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TCMSSystem.TrainEthernetRepeaterStatus, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Train Ready Not OK", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.TrainReadyNotOK, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Train Speed", 0, 0.01, &resource.ModelOutputs().TCMSOutput[p0].Display.TractionBraking.TrainSpeed, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Transformer Oil Temperature", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.TransformerOilTemperature, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "UTO Mode", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.UTOMode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Underframe Fire Alarm Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.UnderframeFireAlarmStatus, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "VCB Fault", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.VCBFault, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "VCB Isolated", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.VCBIsolated, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "VCB Opened By AC Over Current", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.VCBOpenedByACOverCurrent, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "VCB Opened By APS", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.VCBOpenedByAPS, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "VCB Opened By IC DM", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.VCBOpenedByICDM, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "VCB Opened By IC M", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.VCBOpenedByICM, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "VCB Opened By MTr Protection", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.VCBOpenedByMTrProtection, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "VCB State", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.VCBState, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "VCB Trip Command Status", 0, 0.01, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.VCBTripCommandStatus, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "WFL Fault", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.WFLFault, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "WFL Isolated", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.WFLIsolated, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "WFL Oil Level Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.WFLOilLevelStatus, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "WFL Pump 1", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.WFLPump1Status, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "WFL Pump 2", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.WFLPump2Status, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "WFL Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.WFLStatus, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Washing Mode Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.TractionBraking.WashingModeStatus, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ZVRD Not Active", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.ElectricalSystem.ZVRDNotActive, true));
            db.AddObject(oi);
        }

        void DefineTCMSMessagesObject(int object_id, int parent_id, int p0, ModelResource &resource, ObjectDB &db)
        {
            ObjectDB::ObjectInfo oi(true, Sim::ObjectID(object_id), Sim::ObjectID(parent_id), "TCMSMessages", ClassID::TCMS_MESSAGES);
            int number_id = 0;
            oi.numbers.reserve(1);

            db.AddObject(oi);
        }

        void DefineTCMSMessageObject(int object_id, int parent_id, int p0, int instance, ModelResource &resource, ObjectDB &db)
        {
            ObjectDB::ObjectInfo oi(true, Sim::ObjectID(object_id), Sim::ObjectID(parent_id), "TCMSMessage", ClassID::TCMS_MESSAGE);
            int number_id = 0;
            oi.numbers.reserve(3);

            {
                static double INSTANCE_INDEX[10] = {0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0};
                oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Index", INSTANCE_INDEX[instance], 0.5, &INSTANCE_INDEX[instance], true));
            }
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Message ID", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.MessageList.Message[instance].MessageID, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Message Status", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Display.MessageList.Message[instance].MessageStatus, true));
            db.AddObject(oi);
        }

        void DefineVehicleDebugObject(int object_id, int parent_id, int p0, ModelResource &resource, ObjectDB &db)
        {
            ObjectDB::ObjectInfo oi(true, Sim::ObjectID(object_id), Sim::ObjectID(parent_id), "VehicleDebug", ClassID::VehicleDebug);
            int number_id = 0;
            oi.numbers.reserve(10);

            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Braking Force 1", 0, 0.5, &resource.ModelOutputs().BrakesVehicleOut[p0].Axle[0].BrakingForce, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Braking Force 2", 0, 0.5, &resource.ModelOutputs().BrakesVehicleOut[p0].Axle[1].BrakingForce, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Braking Force 3", 0, 0.5, &resource.ModelOutputs().BrakesVehicleOut[p0].Axle[2].BrakingForce, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Braking Force 4", 0, 0.5, &resource.ModelOutputs().BrakesVehicleOut[p0].Axle[3].BrakingForce, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Braking Force 5", 0, 0.5, &resource.ModelOutputs().BrakesVehicleOut[p0].Axle[4].BrakingForce, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Braking Force 6", 0, 0.5, &resource.ModelOutputs().BrakesVehicleOut[p0].Axle[5].BrakingForce, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Moving Force", 0, 0.5, &resource.ModelOutputs().DynamicsOutput[p0].Inertia.MovingForce, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Neutral Section", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Control.ElectricalSystem.NeutralSection, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Neutral Zone Backup Mode Active", 0, 0.5, &resource.ModelOutputs().TCMSOutput[p0].Control.ElectricalSystem.NeutralZoneBackupModeActive, true));
            db.AddObject(oi);
        }

        void DefineVehicleInputsObject(int object_id, int parent_id, int p0, ModelResource &resource, ObjectDB &db)
        {
            ObjectDB::ObjectInfo oi(true, Sim::ObjectID(object_id), Sim::ObjectID(parent_id), "VehicleInputs", ClassID::VEHICLE_INPUTS);
            int number_id = 0;
            oi.numbers.reserve(276);

            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "AC1CB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.AC1CB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "AC2CB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.AC2CB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ADDCOS", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.ADDCOS, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "APSCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.APSCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "APSICB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.APSICB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "AS Isolation Cock", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.ASIsolationCock, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ASCO End 1", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.ASCOEnd1, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ASCO End 2", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.ASCOEnd2, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ATO Start PB", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.ATOStartPB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BCBCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.BCBCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BCGCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.BCGCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BECUCB1", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.BECUCB1, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BECUCB2", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.BECUCB2, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BECUCB3", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.BECUCB3, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BIC 1 Inside", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.BIC1Inside, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BIC 1 Outside", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.BIC1Outside, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BIC 2 Inside", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.BIC2Inside, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BIC 2 Outside", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.BIC2Outside, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BLCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.BLCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Battery Reset PB", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.BatteryResetPB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Brake Loop Cutout SS", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.BrakeLoopCutoutSS, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "C1CB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.C1CB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CBFCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.CBFCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CBFCCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.CBFCCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CBTCCB1", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.CBTCCB1, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CCNVIO1CB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.CCNVIO1CB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CDUCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.CDUCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CECB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.CECB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CELCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.CELCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CICB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.CICB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CILCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.CILCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CMCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.CMCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CMCCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.CMCCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CRSBCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.CRSBCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CSACB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.CSACB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CSBCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.CSBCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CSCCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.CSCCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Cab Booster Fan SS", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.CabBoosterFanSS, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Cab Console Light PB", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.CabConsoleLightPB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Cab EED Left", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.CabEEDLeft, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Cab EED Right", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.CabEEDRight, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Cab Main Light PB", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.CabMainLightPB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Call On Light PB", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.CallOnLightPB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Class Inputs", 0, 0.5, resource.ExternallyModelled("VehicleInputs"), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Control Key", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.ControlKey, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DIOCB1", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.DIOCB1, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DIOCB2", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.DIOCB2, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DLCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.DLCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DMICB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.DMICB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DPLCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.DPLCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DRCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.DRCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DSCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.DSCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Deadman Bypass Switch", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.DeadmanBypassSwitch, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Deadman Safety Device", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.DeadmanSafetyDevice, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door Close Announcement PB", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.DoorCloseAnnouncementPB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door Proven Loop Cutout PB", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.DoorProvenLoopCutoutPB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door Proven Loop Output Switch", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.DoorProvenLoopOutputSwitch, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door Winder", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.DoorWinder, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Drivers Back Door", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.DriversBackDoor, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Dummy Cover", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.DummyCover, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "EBLR1CB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.EBLR1CB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "EBLR2CB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.EBLR2CB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "EBMVCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.EBMVCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "EDCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.EDCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ELCB1", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.ELCB1, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ELCB2", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.ELCB2, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "EPIC", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.EPIC, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ERCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.ERCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ERVRCB1", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.ERVRCB1, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ERVRCB2", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.ERVRCB2, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ESKCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.ESKCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Emergency Brake PB", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.EmergencyBrakePB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Emergency Brake PB Bypass SS", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.EmergencyBrakePBBypassSS, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Emergency Brake Reset PB", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.EmergencyBrakeResetPB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Emergency Door Gas Spring", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.EmergencyDoorGasSpring, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Emergency Stop PB", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.EmergencyStopPB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "FDSCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.FDSCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Flasher Light PB", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.FlasherLightPB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Flood Light PB", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.FloodLightPB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "HCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.HCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "HLLCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.HLLCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "HLRCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.HLRCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "HMCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.HMCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "HVAC1", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.HVAC1, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "HVAC2", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.HVAC2, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Head Light Switch", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.HeadLightSwitch, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Hold Door Close Bypass SS", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.HoldDoorCloseBypassSS, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Horn 1 Isolation Cock", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.Horn1IsolationCock, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Horn 2 Isolation Cock", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.Horn2IsolationCock, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Horn PB", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.HornPB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ILCB1", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.ILCB1, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ILCB2", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.ILCB2, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "LDICB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.LDICB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "LDLCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.LDLCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "LDRCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.LDRCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "LIMP Home PB", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.LIMPHomePB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Lamp Test PB", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.LampTestPB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Large Handle", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.LargeHandle, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 1 Coving", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.LeftDoor1Coving, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 1 DCUCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.LeftDoor1DCUCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 1 EED", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.LeftDoor1EED, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 1 Lockout", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.LeftDoor1Lockout, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 1 Manual Close", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.LeftDoor1ManualClose, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 1 Manual Open", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.LeftDoor1ManualOpen, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 2 Coving", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.LeftDoor2Coving, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 2 DCUCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.LeftDoor2DCUCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 2 EED", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.LeftDoor2EED, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 2 Lockout", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.LeftDoor2Lockout, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 2 Manual Close", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.LeftDoor2ManualClose, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 2 Manual Open", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.LeftDoor2ManualOpen, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 3 Coving", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.LeftDoor3Coving, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 3 DCUCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.LeftDoor3DCUCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 3 EED", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.LeftDoor3EED, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 3 Lockout", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.LeftDoor3Lockout, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 3 Manual Close", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.LeftDoor3ManualClose, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 3 Manual Open", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.LeftDoor3ManualOpen, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 4 Coving", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.LeftDoor4Coving, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 4 DCUCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.LeftDoor4DCUCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 4 EED", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.LeftDoor4EED, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 4 Lockout", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.LeftDoor4Lockout, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 4 Manual Close", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.LeftDoor4ManualClose, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 4 Manual Open", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.LeftDoor4ManualOpen, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door Close PB Operating Panel 1", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.LeftDoorClosePBOperatingPanel1, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door Close PB Operating Panel 2", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.LeftDoorClosePBOperatingPanel2, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door EAD", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.LeftDoorEAD, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door EAD Cover", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.LeftDoorEADCover, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door Open PB 1 Operating Panel 2", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.LeftDoorOpenPB1OperatingPanel2, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door Open PB Operating Panel 1", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.LeftDoorOpenPBOperatingPanel1, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door Open PB Operating Panel 2", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.LeftDoorOpenPBOperatingPanel2, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MLCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.MLCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MMCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.MMCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MR Isolation Cock", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.MRIsolationCock, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MREP Isolation Cock End 1", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.MREPIsolationCockEnd1, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MREP Isolation Cock End 2", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.MREPIsolationCockEnd2, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MSOCB1", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.MSOCB1, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MSOCB2", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.MSOCB2, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MSOCB3", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.MSOCB3, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MSOCB4", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.MSOCB4, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MSOCB5", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.MSOCB5, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MTBM1CB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.MTBM1CB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MTBM2CB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.MTBM2CB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MTBMCCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.MTBMCCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MTOPCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.MTOPCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Master Controller Handle", -100, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.MasterControllerHandle, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Microphone", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.Microphone, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Mode Selector", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.ModeSelector, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "NBCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.NBCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "NVICB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.NVICB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "OCCB1", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.OCCB1, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "OCCB2", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.OCCB2, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ODDCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.ODDCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ORD Plunger", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.ORDPlunger, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ORDCOS", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.ORDCOS, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PADCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.PADCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PANCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.PANCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PBCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.PBCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PECU Push Button", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.PECUPushButton, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PISCB1", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.PISCB1, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PISCB2", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.PISCB2, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "POCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.POCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PPU1CB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.PPU1CB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PPU2CB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.PPU2CB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PPU3CB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.PPU3CB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PTCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.PTCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Panto Down PB", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.PantoDownPB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Panto Selector", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.PantoSelector, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Panto Up PB", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.PantoUpPB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Pantograph Isolation Cock", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.PantographIsolationCock, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Park Brake Isolation Cock Bogie 1", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.ParkBrakeIsolationCockBogie1, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Park Brake Isolation Cock Bogie 2", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.ParkBrakeIsolationCockBogie2, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Parking Brake Manual Release Bogie 1 Handle 1", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.ParkingBrakeManualReleaseBogie1Handle1, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Parking Brake Manual Release Bogie 1 Handle 2", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.ParkingBrakeManualReleaseBogie1Handle2, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Parking Brake Manual Release Bogie 2 Handle 1", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.ParkingBrakeManualReleaseBogie2Handle1, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Parking Brake Manual Release Bogie 2 Handle 2", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.ParkingBrakeManualReleaseBogie2Handle2, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Parking Brake Off Switch", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.ParkingBrakeOffSwitch, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Parking Brake On Switch", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.ParkingBrakeOnSwitch, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Power Off PB", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.PowerOffPB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "RIO1CB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.RIO1CB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "RIO2CB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.RIO2CB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ROS PB", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.ROSPB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "RPTCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.RPTCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "RSACB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.RSACB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Ramp Cover", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.RampCover, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Ramp Cover Locking Lever", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.RampCoverLockingLever, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Ramp End Support", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.RampEndSupport, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Ramp Handle", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.RampHandle, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Ramp Middle Support", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.RampMiddleSupport, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Ramp Winder", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.RampWinder, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 1 Coving", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.RightDoor1Coving, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 1 DCUCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.RightDoor1DCUCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 1 EED", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.RightDoor1EED, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 1 Lockout", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.RightDoor1Lockout, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 1 Manual Close", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.RightDoor1ManualClose, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 1 Manual Open", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.RightDoor1ManualOpen, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 2 Coving", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.RightDoor2Coving, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 2 DCUCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.RightDoor2DCUCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 2 EED", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.RightDoor2EED, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 2 Lockout", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.RightDoor2Lockout, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 2 Manual Close", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.RightDoor2ManualClose, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 2 Manual Open", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.RightDoor2ManualOpen, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 3 Coving", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.RightDoor3Coving, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 3 DCUCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.RightDoor3DCUCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 3 EED", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.RightDoor3EED, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 3 Lockout", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.RightDoor3Lockout, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 3 Manual Close", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.RightDoor3ManualClose, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 3 Manual Open", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.RightDoor3ManualOpen, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 4 Coving", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.RightDoor4Coving, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 4 DCUCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.RightDoor4DCUCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 4 EED", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.RightDoor4EED, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 4 Lockout", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.RightDoor4Lockout, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 4 Manual Close", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.RightDoor4ManualClose, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 4 Manual Open", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.RightDoor4ManualOpen, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door Close PB Operating Panel 1", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.RightDoorClosePBOperatingPanel1, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door Close PB Operating Panel 5", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.RightDoorClosePBOperatingPanel5, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door EAD", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.RightDoorEAD, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door EAD Cover", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.RightDoorEADCover, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door Open PB 1 Operating Panel 5", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.RightDoorOpenPB1OperatingPanel5, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door Open PB Operating Panel 1", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.RightDoorOpenPBOperatingPanel1, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door Open PB Operating Panel 5", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.RightDoorOpenPBOperatingPanel5, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SAC1CCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.SAC1CCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SAC2CCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.SAC2CCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SIOCB1", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.SIOCB1, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SIOCB2", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.SIOCB2, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SOCB1", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.SOCB1, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SOCB2", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.SOCB2, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SP11CB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.SP11CB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SP12CB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.SP12CB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SP1CB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.SP1CB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SP2CB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.SP2CB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SP3CB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.SP3CB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SP4CB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.SP4CB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SP5CB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.SP5CB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SP6CB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.SP6CB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SPCB6", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.SPCB6, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SPCB7", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.SPCB7, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SPCB8", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.SPCB8, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SPPB", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.SPPB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SPSW", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.SPSW, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SR", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.SR, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SSCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.SSCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SSICB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.SSICB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Safety Cover", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.SafetyCover, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Safety Cutout SS", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.SafetyCutoutSS, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Small Handle", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.SmallHandle, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TBCCB1", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.TBCCB1, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TBCCB2", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.TBCCB2, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TBNCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.TBNCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TDICB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.TDICB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TERCB1", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.TERCB1, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TERCB2", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.TERCB2, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TLLCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.TLLCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TLRCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.TLRCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TRIVCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.TRIVCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TVDUCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.TVDUCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TWVCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.TWVCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "UTO PB", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.UTOPB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Uncouple PB", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.UncouplePB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Uncoupling Cock", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.UncouplingCock, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "VCB Close PB", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.VCBClosePB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "VCB Isolation Cock", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.VCBIsolationCock, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "VCB Open PB", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.VCBOpenPB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "VCBCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.VCBCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "VCBCCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.VCBCCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "VCCB Or UCCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.VCCBOrUCCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "VIO1CB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.VIO1CB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "VIO2CB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.VIO2CB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "WFL Test PB", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.WFLTestPB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "WFLCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.WFLCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "WIFICB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.WIFICB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "WWCB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.WWCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Winder Handles Access Cover", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.WinderHandlesAccessCover, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Wiper Control Switch", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.WiperControlSwitch, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Wiper Pump", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.WiperPump, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Wiper Selection Switch", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.WiperSelectionSwitch, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ZVBACB", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].InputStates.ZVBACB, true));
            db.AddObject(oi);
        }

        void DefineVehicleInputsModesObject(int object_id, int parent_id, int p0, ModelResource &resource, ObjectDB &db)
        {
            ObjectDB::ObjectInfo oi(true, Sim::ObjectID(object_id), Sim::ObjectID(parent_id), "VehicleInputsModes", ClassID::VEHICLE_INPUTS_MODES);
            int number_id = 0;
            oi.numbers.reserve(408);

            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "AC1CB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].AC1CB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "AC2CB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].AC2CB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ADDCOS", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].ADDCOS.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "APSCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].APSCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "APSICB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].APSICB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "AS Isolation Cock", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].ASIsolationCock.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ASCO End 1", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].ASCOEnd1.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ASCO End 2", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].ASCOEnd2.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ATO Start PB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].ATOStartPB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BCBCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].BCBCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BCGCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].BCGCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BECUCB1", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].BECUCB1.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BECUCB2", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].BECUCB2.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BECUCB3", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].BECUCB3.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BIC 1 Inside", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].BIC1Inside.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BIC 1 Outside", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].BIC1Outside.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BIC 2 Inside", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].BIC2Inside.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BIC 2 Outside", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].BIC2Outside.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BLCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].BLCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Battery Reset PB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].BatteryResetPB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Brake Loop Cutout SS", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].BrakeLoopCutoutSS.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "C1CB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].C1CB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CBFCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].CBFCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CBFCCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].CBFCCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CBTCCB1", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].CBTCCB1.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CCNVIO1CB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].CCNVIO1CB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CDUCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].CDUCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CECB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].CECB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CELCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].CELCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CICB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].CICB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CILCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].CILCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CMCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].CMCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CMCCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].CMCCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CRSBCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].CRSBCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CSACB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].CSACB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CSBCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].CSBCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CSCCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].CSCCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Cab Booster Fan SS", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].CabBoosterFanSS.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Cab Console Light PB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].CabConsoleLightPB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Cab EED Left", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].CabEEDLeft.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Cab EED Right", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].CabEEDRight.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Cab Main Light PB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].CabMainLightPB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Call On Light PB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].CallOnLightPB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Class Modes", 0, 0.5, resource.ExternallyModelled("VehicleInputsModes"), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Control Key", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].ControlKey.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DIOCB1", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].DIOCB1.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DIOCB2", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].DIOCB2.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DLCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].DLCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DMICB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].DMICB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DPLCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].DPLCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DRCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].DRCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DSCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].DSCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Deadman Bypass Switch", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].DeadmanBypassSwitch.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Deadman Safety Device", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].DeadmanSafetyDevice.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door Close Announcement PB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].DoorCloseAnnouncementPB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door Proven Loop Cutout PB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].DoorProvenLoopCutoutPB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door Proven Loop Output Switch", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].DoorProvenLoopOutputSwitch.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door Winder", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].DoorWinder.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Drivers Back Door", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].DriversBackDoor.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Dummy Cover", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].DummyCover.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "EBLR1CB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].EBLR1CB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "EBLR2CB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].EBLR2CB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "EBMVCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].EBMVCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "EDCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].EDCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ELCB1", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].ELCB1.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ELCB2", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].ELCB2.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "EPIC", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].EPIC.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ERCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].ERCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ERVRCB1", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].ERVRCB1.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ERVRCB2", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].ERVRCB2.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ESKCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].ESKCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Emergency Brake PB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].EmergencyBrakePB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Emergency Brake PB Bypass SS", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].EmergencyBrakePBBypassSS.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Emergency Brake Reset PB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].EmergencyBrakeResetPB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Emergency Door Gas Spring", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].EmergencyDoorGasSpring.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Emergency Stop PB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].EmergencyStopPB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "FDSCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].FDSCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Flasher Light PB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].FlasherLightPB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Flood Light PB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].FloodLightPB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "HCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].HCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "HLLCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].HLLCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "HLRCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].HLRCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "HMCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].HMCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "HVAC1", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].HVAC1.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "HVAC2", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].HVAC2.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Head Light Switch", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].HeadLightSwitch.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Hold Door Close Bypass SS", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].HoldDoorCloseBypassSS.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Horn 1 Isolation Cock", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].Horn1IsolationCock.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Horn 2 Isolation Cock", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].Horn2IsolationCock.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Horn PB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].HornPB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ILCB1", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].ILCB1.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ILCB2", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].ILCB2.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "LDICB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].LDICB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "LDLCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].LDLCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "LDRCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].LDRCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "LIMP Home PB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].LIMPHomePB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Lamp Test PB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].LampTestPB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Large Handle", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].LargeHandle.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 1 Coving", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoor1Coving.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 1 DCUCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoor1DCUCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 1 EED", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoor1EED.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 1 Lockout", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoor1Lockout.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 1 Manual Close", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoor1ManualClose.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 1 Manual Open", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoor1ManualOpen.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 2 Coving", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoor2Coving.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 2 DCUCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoor2DCUCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 2 EED", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoor2EED.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 2 Lockout", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoor2Lockout.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 2 Manual Close", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoor2ManualClose.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 2 Manual Open", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoor2ManualOpen.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 3 Coving", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoor3Coving.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 3 DCUCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoor3DCUCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 3 EED", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoor3EED.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 3 Lockout", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoor3Lockout.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 3 Manual Close", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoor3ManualClose.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 3 Manual Open", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoor3ManualOpen.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 4 Coving", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoor4Coving.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 4 DCUCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoor4DCUCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 4 EED", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoor4EED.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 4 Lockout", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoor4Lockout.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 4 Manual Close", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoor4ManualClose.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 4 Manual Open", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoor4ManualOpen.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door Close PB Operating Panel 1", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoorClosePBOperatingPanel1.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door Close PB Operating Panel 2", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoorClosePBOperatingPanel2.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door EAD", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoorEAD.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door EAD Cover", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoorEADCover.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door Open PB 1 Operating Panel 2", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoorOpenPB1OperatingPanel2.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door Open PB Operating Panel 1", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoorOpenPBOperatingPanel1.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door Open PB Operating Panel 2", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoorOpenPBOperatingPanel2.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MLCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].MLCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MMCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].MMCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MR Isolation Cock", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].MRIsolationCock.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MREP Isolation Cock End 1", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].MREPIsolationCockEnd1.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MREP Isolation Cock End 2", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].MREPIsolationCockEnd2.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MSOCB1", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].MSOCB1.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MSOCB2", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].MSOCB2.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MSOCB3", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].MSOCB3.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MSOCB4", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].MSOCB4.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MSOCB5", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].MSOCB5.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MTBM1CB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].MTBM1CB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MTBM2CB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].MTBM2CB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MTBMCCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].MTBMCCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MTOPCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].MTOPCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Master Controller Handle", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].MasterControllerHandle.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Microphone", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].Microphone.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Mode Selector", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].ModeSelector.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "NBCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].NBCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "NVICB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].NVICB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "OCCB1", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].OCCB1.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "OCCB2", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].OCCB2.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ODDCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].ODDCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ORD Plunger", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].ORDPlunger.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ORDCOS", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].ORDCOS.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PADCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].PADCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PANCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].PANCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PBCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].PBCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PECU Push Button", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].PECUPushButton.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PISCB1", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].PISCB1.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PISCB2", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].PISCB2.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "POCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].POCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PPU1CB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].PPU1CB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PPU2CB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].PPU2CB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PPU3CB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].PPU3CB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT AC1CB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT AC2CB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT APSCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT APSICB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT BCBCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT BCGCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT BECUCB1 Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT BECUCB2 Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT BECUCB3 Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT BLCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT C1CB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT CBFCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT CBFCCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT CBTCCB1 Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT CCNVIO1CB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT CDUCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT CECB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT CELCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT CICB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT CILCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT CMCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT CMCCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT CRSBCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT CSACB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT CSBCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT CSCCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT DIOCB1 Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT DIOCB2 Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT DLCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT DMICB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT DPLCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT DRCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT DSCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT EBLR1CB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT EBLR2CB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT EBMVCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT EDCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT ELCB1 Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT ELCB2 Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT ERCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT ERVRCB1 Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT ERVRCB2 Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT ESKCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT FDSCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT HCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT HLLCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT HLRCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT HMCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT HVAC1 Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT HVAC2 Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT ILCB1 Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT ILCB2 Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT LDICB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT LDLCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT LDRCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT Left Door 1 DCUCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT Left Door 2 DCUCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT Left Door 3 DCUCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT Left Door 4 DCUCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT MLCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT MMCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT MSOCB1 Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT MSOCB2 Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT MSOCB3 Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT MSOCB4 Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT MSOCB5 Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT MTBM1CB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT MTBM2CB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT MTBMCCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT MTOPCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT NBCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT NVICB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT OCCB1 Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT OCCB2 Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT ODDCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT PADCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT PANCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT PBCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT PISCB1 Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT PISCB2 Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT POCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT PPU1CB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT PPU2CB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT PPU3CB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT PTCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT RIO1CB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT RIO2CB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT RPTCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT RSACB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT Right Door 1 DCUCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT Right Door 2 DCUCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT Right Door 3 DCUCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT Right Door 4 DCUCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT SAC1CCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT SAC2CCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT SIOCB1 Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT SIOCB2 Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT SOCB1 Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT SOCB2 Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT SP11CB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT SP12CB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT SP1CB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT SP2CB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT SP3CB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT SP4CB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT SP5CB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT SP6CB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT SPCB6 Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT SPCB7 Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT SPCB8 Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT SSCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT SSICB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT TBCCB1 Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT TBCCB2 Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT TBNCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT TDICB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT TERCB1 Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT TERCB2 Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT TLLCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT TLRCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT TRIVCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT TVDUCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT TWVCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT VCBCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT VCBCCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT VCCB Or UCCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT VIO1CB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT VIO2CB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT WFLCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT WIFICB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT WWCB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT ZVBACB Trip", 1, 0.5, resource.Unmapped(""), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PTCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].PTCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Panto Down PB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].PantoDownPB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Panto Selector", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].PantoSelector.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Panto Up PB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].PantoUpPB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Pantograph Isolation Cock", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].PantographIsolationCock.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Park Brake Isolation Cock Bogie 1", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].ParkBrakeIsolationCockBogie1.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Park Brake Isolation Cock Bogie 2", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].ParkBrakeIsolationCockBogie2.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Parking Brake Manual Release Bogie 1 Handle 1", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].ParkingBrakeManualReleaseBogie1Handle1.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Parking Brake Manual Release Bogie 1 Handle 2", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].ParkingBrakeManualReleaseBogie1Handle2.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Parking Brake Manual Release Bogie 2 Handle 1", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].ParkingBrakeManualReleaseBogie2Handle1.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Parking Brake Manual Release Bogie 2 Handle 2", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].ParkingBrakeManualReleaseBogie2Handle2.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Parking Brake Off Switch", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].ParkingBrakeOffSwitch.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Parking Brake On Switch", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].ParkingBrakeOnSwitch.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Power Off PB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].PowerOffPB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "RIO1CB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].RIO1CB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "RIO2CB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].RIO2CB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ROS PB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].ROSPB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "RPTCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].RPTCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "RSACB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].RSACB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Ramp Cover", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].RampCover.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Ramp Cover Locking Lever", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].RampCoverLockingLever.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Ramp End Support", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].RampEndSupport.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Ramp Handle", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].RampHandle.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Ramp Middle Support", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].RampMiddleSupport.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Ramp Winder", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].RampWinder.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 1 Coving", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoor1Coving.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 1 DCUCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoor1DCUCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 1 EED", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoor1EED.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 1 Lockout", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoor1Lockout.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 1 Manual Close", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoor1ManualClose.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 1 Manual Open", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoor1ManualOpen.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 2 Coving", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoor2Coving.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 2 DCUCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoor2DCUCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 2 EED", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoor2EED.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 2 Lockout", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoor2Lockout.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 2 Manual Close", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoor2ManualClose.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 2 Manual Open", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoor2ManualOpen.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 3 Coving", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoor3Coving.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 3 DCUCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoor3DCUCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 3 EED", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoor3EED.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 3 Lockout", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoor3Lockout.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 3 Manual Close", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoor3ManualClose.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 3 Manual Open", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoor3ManualOpen.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 4 Coving", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoor4Coving.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 4 DCUCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoor4DCUCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 4 EED", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoor4EED.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 4 Lockout", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoor4Lockout.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 4 Manual Close", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoor4ManualClose.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 4 Manual Open", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoor4ManualOpen.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door Close PB Operating Panel 1", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoorClosePBOperatingPanel1.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door Close PB Operating Panel 5", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoorClosePBOperatingPanel5.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door EAD", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoorEAD.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door EAD Cover", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoorEADCover.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door Open PB 1 Operating Panel 5", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoorOpenPB1OperatingPanel5.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door Open PB Operating Panel 1", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoorOpenPBOperatingPanel1.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door Open PB Operating Panel 5", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoorOpenPBOperatingPanel5.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SAC1CCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].SAC1CCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SAC2CCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].SAC2CCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SIOCB1", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].SIOCB1.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SIOCB2", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].SIOCB2.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SOCB1", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].SOCB1.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SOCB2", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].SOCB2.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SP11CB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].SP11CB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SP12CB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].SP12CB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SP1CB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].SP1CB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SP2CB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].SP2CB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SP3CB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].SP3CB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SP4CB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].SP4CB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SP5CB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].SP5CB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SP6CB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].SP6CB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SPCB6", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].SPCB6.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SPCB7", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].SPCB7.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SPCB8", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].SPCB8.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SPPB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].SPPB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SPSW", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].SPSW.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SR", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].SR.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SSCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].SSCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SSICB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].SSICB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Safety Cover", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].SafetyCover.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Safety Cutout SS", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].SafetyCutoutSS.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Small Handle", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].SmallHandle.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TBCCB1", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].TBCCB1.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TBCCB2", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].TBCCB2.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TBNCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].TBNCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TDICB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].TDICB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TERCB1", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].TERCB1.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TERCB2", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].TERCB2.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TLLCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].TLLCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TLRCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].TLRCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TRIVCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].TRIVCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TVDUCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].TVDUCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TWVCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].TWVCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "UTO PB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].UTOPB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Uncouple PB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].UncouplePB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Uncoupling Cock", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].UncouplingCock.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "VCB Close PB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].VCBClosePB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "VCB Isolation Cock", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].VCBIsolationCock.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "VCB Open PB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].VCBOpenPB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "VCBCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].VCBCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "VCBCCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].VCBCCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "VCCB Or UCCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].VCCBOrUCCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "VIO1CB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].VIO1CB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "VIO2CB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].VIO2CB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "WFL Test PB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].WFLTestPB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "WFLCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].WFLCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "WIFICB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].WIFICB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "WWCB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].WWCB.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Winder Handles Access Cover", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].WinderHandlesAccessCover.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Wiper Control Switch", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].WiperControlSwitch.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Wiper Pump", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].WiperPump.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Wiper Selection Switch", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].WiperSelectionSwitch.Mode, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ZVBACB", 1, 0.5, &resource.ModelInputs().IOControlsInput[p0].ZVBACB.Mode, true));
            db.AddObject(oi);
        }

        void DefineVehicleInputsValuesObject(int object_id, int parent_id, int p0, ModelResource &resource, ObjectDB &db)
        {
            ObjectDB::ObjectInfo oi(true, Sim::ObjectID(object_id), Sim::ObjectID(parent_id), "VehicleInputsValues", ClassID::VEHICLE_INPUTS_VALUES);
            int number_id = 0;
            oi.numbers.reserve(408);

            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "AC1CB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].AC1CB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "AC2CB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].AC2CB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ADDCOS", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].ADDCOS.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "APSCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].APSCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "APSICB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].APSICB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "AS Isolation Cock", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].ASIsolationCock.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ASCO End 1", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].ASCOEnd1.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ASCO End 2", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].ASCOEnd2.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ATO Start PB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].ATOStartPB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BCBCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].BCBCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BCGCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].BCGCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BECUCB1", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].BECUCB1.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BECUCB2", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].BECUCB2.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BECUCB3", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].BECUCB3.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BIC 1 Inside", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].BIC1Inside.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BIC 1 Outside", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].BIC1Outside.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BIC 2 Inside", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].BIC2Inside.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BIC 2 Outside", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].BIC2Outside.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BLCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].BLCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Battery Reset PB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].BatteryResetPB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Brake Loop Cutout SS", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].BrakeLoopCutoutSS.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "C1CB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].C1CB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CBFCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].CBFCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CBFCCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].CBFCCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CBTCCB1", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].CBTCCB1.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CCNVIO1CB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].CCNVIO1CB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CDUCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].CDUCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CECB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].CECB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CELCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].CELCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CICB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].CICB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CILCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].CILCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CMCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].CMCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CMCCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].CMCCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CRSBCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].CRSBCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CSACB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].CSACB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CSBCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].CSBCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CSCCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].CSCCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Cab Booster Fan SS", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].CabBoosterFanSS.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Cab Console Light PB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].CabConsoleLightPB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Cab EED Left", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].CabEEDLeft.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Cab EED Right", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].CabEEDRight.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Cab Main Light PB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].CabMainLightPB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Call On Light PB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].CallOnLightPB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Class Values", 0, 0.5, resource.ExternallyModelled("VehicleInputsValues"), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Control Key", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].ControlKey.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DIOCB1", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].DIOCB1.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DIOCB2", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].DIOCB2.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DLCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].DLCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DMICB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].DMICB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DPLCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].DPLCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DRCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].DRCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DSCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].DSCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Deadman Bypass Switch", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].DeadmanBypassSwitch.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Deadman Safety Device", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].DeadmanSafetyDevice.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door Close Announcement PB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].DoorCloseAnnouncementPB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door Proven Loop Cutout PB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].DoorProvenLoopCutoutPB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door Proven Loop Output Switch", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].DoorProvenLoopOutputSwitch.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door Winder", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].DoorWinder.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Drivers Back Door", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].DriversBackDoor.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Dummy Cover", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].DummyCover.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "EBLR1CB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].EBLR1CB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "EBLR2CB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].EBLR2CB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "EBMVCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].EBMVCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "EDCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].EDCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ELCB1", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].ELCB1.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ELCB2", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].ELCB2.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "EPIC", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].EPIC.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ERCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].ERCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ERVRCB1", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].ERVRCB1.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ERVRCB2", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].ERVRCB2.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ESKCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].ESKCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Emergency Brake PB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].EmergencyBrakePB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Emergency Brake PB Bypass SS", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].EmergencyBrakePBBypassSS.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Emergency Brake Reset PB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].EmergencyBrakeResetPB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Emergency Door Gas Spring", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].EmergencyDoorGasSpring.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Emergency Stop PB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].EmergencyStopPB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "FDSCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].FDSCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Flasher Light PB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].FlasherLightPB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Flood Light PB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].FloodLightPB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "HCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].HCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "HLLCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].HLLCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "HLRCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].HLRCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "HMCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].HMCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "HVAC1", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].HVAC1.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "HVAC2", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].HVAC2.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Head Light Switch", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].HeadLightSwitch.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Hold Door Close Bypass SS", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].HoldDoorCloseBypassSS.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Horn 1 Isolation Cock", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].Horn1IsolationCock.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Horn 2 Isolation Cock", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].Horn2IsolationCock.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Horn PB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].HornPB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ILCB1", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].ILCB1.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ILCB2", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].ILCB2.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "LDICB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].LDICB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "LDLCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].LDLCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "LDRCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].LDRCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "LIMP Home PB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].LIMPHomePB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Lamp Test PB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].LampTestPB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Large Handle", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].LargeHandle.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 1 Coving", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoor1Coving.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 1 DCUCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoor1DCUCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 1 EED", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoor1EED.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 1 Lockout", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoor1Lockout.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 1 Manual Close", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoor1ManualClose.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 1 Manual Open", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoor1ManualOpen.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 2 Coving", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoor2Coving.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 2 DCUCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoor2DCUCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 2 EED", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoor2EED.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 2 Lockout", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoor2Lockout.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 2 Manual Close", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoor2ManualClose.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 2 Manual Open", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoor2ManualOpen.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 3 Coving", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoor3Coving.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 3 DCUCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoor3DCUCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 3 EED", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoor3EED.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 3 Lockout", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoor3Lockout.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 3 Manual Close", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoor3ManualClose.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 3 Manual Open", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoor3ManualOpen.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 4 Coving", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoor4Coving.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 4 DCUCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoor4DCUCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 4 EED", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoor4EED.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 4 Lockout", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoor4Lockout.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 4 Manual Close", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoor4ManualClose.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 4 Manual Open", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoor4ManualOpen.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door Close PB Operating Panel 1", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoorClosePBOperatingPanel1.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door Close PB Operating Panel 2", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoorClosePBOperatingPanel2.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door EAD", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoorEAD.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door EAD Cover", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoorEADCover.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door Open PB 1 Operating Panel 2", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoorOpenPB1OperatingPanel2.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door Open PB Operating Panel 1", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoorOpenPBOperatingPanel1.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door Open PB Operating Panel 2", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoorOpenPBOperatingPanel2.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MLCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].MLCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MMCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].MMCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MR Isolation Cock", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].MRIsolationCock.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MREP Isolation Cock End 1", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].MREPIsolationCockEnd1.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MREP Isolation Cock End 2", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].MREPIsolationCockEnd2.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MSOCB1", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].MSOCB1.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MSOCB2", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].MSOCB2.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MSOCB3", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].MSOCB3.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MSOCB4", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].MSOCB4.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MSOCB5", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].MSOCB5.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MTBM1CB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].MTBM1CB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MTBM2CB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].MTBM2CB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MTBMCCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].MTBMCCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MTOPCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].MTOPCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Master Controller Handle", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].MasterControllerHandle.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Microphone", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].Microphone.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Mode Selector", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].ModeSelector.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "NBCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].NBCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "NVICB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].NVICB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "OCCB1", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].OCCB1.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "OCCB2", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].OCCB2.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ODDCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].ODDCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ORD Plunger", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].ORDPlunger.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ORDCOS", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].ORDCOS.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PADCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].PADCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PANCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].PANCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PBCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].PBCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PECU Push Button", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].PECUPushButton.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PISCB1", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].PISCB1.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PISCB2", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].PISCB2.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "POCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].POCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PPU1CB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].PPU1CB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PPU2CB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].PPU2CB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PPU3CB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].PPU3CB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT AC1CB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].AC1CB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT AC2CB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].AC2CB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT APSCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].APSCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT APSICB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].APSICB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT BCBCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].BCBCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT BCGCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].BCGCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT BECUCB1 Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].BECUCB1.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT BECUCB2 Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].BECUCB2.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT BECUCB3 Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].BECUCB3.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT BLCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].BLCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT C1CB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].C1CB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT CBFCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].CBFCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT CBFCCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].CBFCCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT CBTCCB1 Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].CBTCCB1.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT CCNVIO1CB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].CCNVIO1CB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT CDUCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].CDUCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT CECB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].CECB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT CELCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].CELCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT CICB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].CICB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT CILCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].CILCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT CMCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].CMCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT CMCCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].CMCCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT CRSBCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].CRSBCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT CSACB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].CSACB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT CSBCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].CSBCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT CSCCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].CSCCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT DIOCB1 Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].DIOCB1.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT DIOCB2 Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].DIOCB2.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT DLCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].DLCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT DMICB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].DMICB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT DPLCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].DPLCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT DRCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].DRCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT DSCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].DSCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT EBLR1CB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].EBLR1CB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT EBLR2CB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].EBLR2CB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT EBMVCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].EBMVCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT EDCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].EDCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT ELCB1 Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].ELCB1.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT ELCB2 Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].ELCB2.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT ERCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].ERCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT ERVRCB1 Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].ERVRCB1.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT ERVRCB2 Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].ERVRCB2.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT ESKCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].ESKCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT FDSCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].FDSCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT HCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].HCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT HLLCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].HLLCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT HLRCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].HLRCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT HMCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].HMCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT HVAC1 Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].HVAC1.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT HVAC2 Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].HVAC2.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT ILCB1 Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].ILCB1.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT ILCB2 Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].ILCB2.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT LDICB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].LDICB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT LDLCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].LDLCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT LDRCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].LDRCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT Left Door 1 DCUCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoor1DCUCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT Left Door 2 DCUCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoor2DCUCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT Left Door 3 DCUCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoor3DCUCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT Left Door 4 DCUCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].LeftDoor4DCUCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT MLCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].MLCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT MMCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].MMCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT MSOCB1 Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].MSOCB1.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT MSOCB2 Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].MSOCB2.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT MSOCB3 Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].MSOCB3.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT MSOCB4 Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].MSOCB4.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT MSOCB5 Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].MSOCB5.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT MTBM1CB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].MTBM1CB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT MTBM2CB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].MTBM2CB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT MTBMCCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].MTBMCCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT MTOPCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].MTOPCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT NBCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].NBCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT NVICB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].NVICB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT OCCB1 Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].OCCB1.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT OCCB2 Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].OCCB2.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT ODDCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].ODDCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT PADCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].PADCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT PANCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].PANCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT PBCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].PBCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT PISCB1 Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].PISCB1.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT PISCB2 Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].PISCB2.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT POCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].POCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT PPU1CB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].PPU1CB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT PPU2CB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].PPU2CB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT PPU3CB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].PPU3CB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT PTCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].PTCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT RIO1CB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].RIO1CB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT RIO2CB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].RIO2CB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT RPTCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].RPTCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT RSACB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].RSACB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT Right Door 1 DCUCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoor1DCUCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT Right Door 2 DCUCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoor2DCUCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT Right Door 3 DCUCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoor3DCUCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT Right Door 4 DCUCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoor4DCUCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT SAC1CCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].SAC1CCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT SAC2CCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].SAC2CCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT SIOCB1 Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].SIOCB1.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT SIOCB2 Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].SIOCB2.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT SOCB1 Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].SOCB1.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT SOCB2 Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].SOCB2.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT SP11CB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].SP11CB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT SP12CB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].SP12CB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT SP1CB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].SP1CB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT SP2CB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].SP2CB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT SP3CB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].SP3CB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT SP4CB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].SP4CB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT SP5CB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].SP5CB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT SP6CB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].SP6CB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT SPCB6 Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].SPCB6.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT SPCB7 Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].SPCB7.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT SPCB8 Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].SPCB8.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT SSCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].SSCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT SSICB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].SSICB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT TBCCB1 Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].TBCCB1.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT TBCCB2 Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].TBCCB2.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT TBNCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].TBNCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT TDICB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].TDICB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT TERCB1 Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].TERCB1.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT TERCB2 Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].TERCB2.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT TLLCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].TLLCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT TLRCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].TLRCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT TRIVCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].TRIVCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT TVDUCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].TVDUCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT TWVCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].TWVCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT VCBCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].VCBCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT VCBCCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].VCBCCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT VCCB Or UCCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].VCCBOrUCCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT VIO1CB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].VIO1CB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT VIO2CB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].VIO2CB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT WFLCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].WFLCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT WIFICB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].WIFICB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT WWCB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].WWCB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PT ZVBACB Trip", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].ZVBACB.TripRequest, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PTCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].PTCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Panto Down PB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].PantoDownPB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Panto Selector", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].PantoSelector.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Panto Up PB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].PantoUpPB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Pantograph Isolation Cock", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].PantographIsolationCock.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Park Brake Isolation Cock Bogie 1", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].ParkBrakeIsolationCockBogie1.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Park Brake Isolation Cock Bogie 2", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].ParkBrakeIsolationCockBogie2.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Parking Brake Manual Release Bogie 1 Handle 1", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].ParkingBrakeManualReleaseBogie1Handle1.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Parking Brake Manual Release Bogie 1 Handle 2", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].ParkingBrakeManualReleaseBogie1Handle2.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Parking Brake Manual Release Bogie 2 Handle 1", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].ParkingBrakeManualReleaseBogie2Handle1.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Parking Brake Manual Release Bogie 2 Handle 2", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].ParkingBrakeManualReleaseBogie2Handle2.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Parking Brake Off Switch", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].ParkingBrakeOffSwitch.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Parking Brake On Switch", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].ParkingBrakeOnSwitch.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Power Off PB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].PowerOffPB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "RIO1CB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].RIO1CB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "RIO2CB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].RIO2CB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ROS PB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].ROSPB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "RPTCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].RPTCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "RSACB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].RSACB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Ramp Cover", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].RampCover.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Ramp Cover Locking Lever", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].RampCoverLockingLever.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Ramp End Support", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].RampEndSupport.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Ramp Handle", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].RampHandle.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Ramp Middle Support", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].RampMiddleSupport.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Ramp Winder", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].RampWinder.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 1 Coving", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoor1Coving.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 1 DCUCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoor1DCUCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 1 EED", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoor1EED.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 1 Lockout", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoor1Lockout.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 1 Manual Close", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoor1ManualClose.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 1 Manual Open", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoor1ManualOpen.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 2 Coving", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoor2Coving.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 2 DCUCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoor2DCUCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 2 EED", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoor2EED.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 2 Lockout", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoor2Lockout.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 2 Manual Close", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoor2ManualClose.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 2 Manual Open", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoor2ManualOpen.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 3 Coving", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoor3Coving.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 3 DCUCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoor3DCUCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 3 EED", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoor3EED.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 3 Lockout", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoor3Lockout.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 3 Manual Close", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoor3ManualClose.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 3 Manual Open", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoor3ManualOpen.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 4 Coving", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoor4Coving.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 4 DCUCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoor4DCUCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 4 EED", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoor4EED.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 4 Lockout", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoor4Lockout.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 4 Manual Close", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoor4ManualClose.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 4 Manual Open", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoor4ManualOpen.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door Close PB Operating Panel 1", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoorClosePBOperatingPanel1.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door Close PB Operating Panel 5", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoorClosePBOperatingPanel5.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door EAD", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoorEAD.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door EAD Cover", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoorEADCover.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door Open PB 1 Operating Panel 5", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoorOpenPB1OperatingPanel5.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door Open PB Operating Panel 1", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoorOpenPBOperatingPanel1.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door Open PB Operating Panel 5", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].RightDoorOpenPBOperatingPanel5.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SAC1CCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].SAC1CCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SAC2CCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].SAC2CCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SIOCB1", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].SIOCB1.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SIOCB2", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].SIOCB2.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SOCB1", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].SOCB1.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SOCB2", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].SOCB2.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SP11CB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].SP11CB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SP12CB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].SP12CB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SP1CB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].SP1CB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SP2CB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].SP2CB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SP3CB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].SP3CB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SP4CB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].SP4CB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SP5CB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].SP5CB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SP6CB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].SP6CB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SPCB6", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].SPCB6.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SPCB7", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].SPCB7.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SPCB8", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].SPCB8.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SPPB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].SPPB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SPSW", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].SPSW.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SR", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].SR.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SSCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].SSCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SSICB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].SSICB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Safety Cover", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].SafetyCover.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Safety Cutout SS", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].SafetyCutoutSS.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Small Handle", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].SmallHandle.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TBCCB1", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].TBCCB1.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TBCCB2", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].TBCCB2.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TBNCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].TBNCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TDICB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].TDICB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TERCB1", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].TERCB1.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TERCB2", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].TERCB2.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TLLCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].TLLCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TLRCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].TLRCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TRIVCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].TRIVCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TVDUCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].TVDUCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TWVCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].TWVCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "UTO PB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].UTOPB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Uncouple PB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].UncouplePB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Uncoupling Cock", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].UncouplingCock.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "VCB Close PB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].VCBClosePB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "VCB Isolation Cock", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].VCBIsolationCock.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "VCB Open PB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].VCBOpenPB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "VCBCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].VCBCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "VCBCCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].VCBCCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "VCCB Or UCCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].VCCBOrUCCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "VIO1CB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].VIO1CB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "VIO2CB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].VIO2CB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "WFL Test PB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].WFLTestPB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "WFLCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].WFLCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "WIFICB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].WIFICB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "WWCB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].WWCB.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Winder Handles Access Cover", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].WinderHandlesAccessCover.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Wiper Control Switch", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].WiperControlSwitch.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Wiper Pump", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].WiperPump.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Wiper Selection Switch", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].WiperSelectionSwitch.Value, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ZVBACB", 0, 0.5, &resource.ModelInputs().IOControlsInput[p0].ZVBACB.Value, true));
            db.AddObject(oi);
        }

        void DefineVehicleOutputsObject(int object_id, int parent_id, int p0, ModelResource &resource, ObjectDB &db)
        {
            ObjectDB::ObjectInfo oi(true, Sim::ObjectID(object_id), Sim::ObjectID(parent_id), "VehicleOutputs", ClassID::VEHICLE_OUTPUTS);
            int number_id = 0;
            oi.numbers.reserve(227);

            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "AC1CB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.AC1CB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "AC2CB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.AC2CB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "APS Fault Indicator", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].OutputControlStates.APSFaultIndicator, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "APSCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.APSCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "APSICB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.APSICB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ATO Start PB Lamp", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].OutputControlStates.ATOStartPBLamp, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "All Door Close Indicator", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].OutputControlStates.AllDoorsClosedLight, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BC SR Dual Pressure Gauge BC Pressure", 0, 10000, &resource.ModelOutputs().PneumaticsVehicleOut[p0].PressureGauges.Bogie[0].BrakeCylinderPressureGauge, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BC SR Dual Pressure Gauge SR Pressure", 0, 10000, &resource.ModelOutputs().PneumaticsVehicleOut[p0].PressureGauges.SRPressureGauge, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BCBCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.BCBCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BCGCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.BCGCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BECUCB1 Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.BECUCB1, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BECUCB2 Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.BECUCB2, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BECUCB3 Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.BECUCB3, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "BLCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.BLCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Battery Reset PB Lamp", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].OutputControlStates.BatteryResetPBLamp, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "C1CB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.C1CB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CBFCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.CBFCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CBFCCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.CBFCCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CBTCCB1 Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.CBTCCB1, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CCNVIO1CB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.CCNVIO1CB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CDUCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.CDUCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CECB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.CECB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CELCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.CELCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CICB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.CICB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CILCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.CILCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CMCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.CMCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CMCCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.CMCCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CRSBCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.CRSBCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CSACB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.CSACB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CSBCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.CSBCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "CSCCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.CSCCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Cab Console Light", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].OutputControlStates.CabConsoleLight, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Cab Console Light PB Lamp", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].OutputControlStates.CabConsoleLight, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Cab Main Light", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].OutputControlStates.CabMainLight, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Cab Main Light PB Lamp", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].OutputControlStates.CabMainLight, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Call Indicator", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].OutputStates.CallIndicator, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Call On Light PB Lamp", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].OutputControlStates.CallOnLightPBLamp, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Class Outputs", 0, 0.5, resource.ExternallyModelled("VehicleOutputs"), true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DIOCB1 Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.DIOCB1, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DIOCB2 Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.DIOCB2, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DLCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.DLCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DMICB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.DMICB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DPLCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.DPLCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DRCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.DRCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "DSCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.DSCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door Close Announcement PB Lamp", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].OutputControlStates.DoorCloseAnnouncementLamp, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Door Indicator", 0, 0.5, &resource.ModelOutputs().DoorsVehicleOut[p0].EmergencyDoor.LockingLeverUnlockAuth, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "EBLR1CB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.EBLR1CB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "EBLR2CB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.EBLR2CB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "EBMVCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.EBMVCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "EDCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.EDCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ELCB1 Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.ELCB1, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ELCB2 Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.ELCB2, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ERCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.ERCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ERVRCB1 Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.ERVRCB1, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ERVRCB2 Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.ERVRCB2, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ESKCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.ESKCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Emergency Brake Indicator", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].OutputControlStates.EmergencyBrakeIndicator, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Emergency Brake Reset PB Lamp", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].OutputControlStates.EBResetPBLamp, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Emergency Door", 0, 0.5, &resource.ModelOutputs().DoorsVehicleOut[p0].EmergencyDoor.EmergencyDoorOpen, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "FDSCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.FDSCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Flasher Light", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].OutputControlStates.FlasherLight, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Flasher Light PB Lamp", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].OutputControlStates.FlasherLightPBLamp, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Flood Light", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].OutputControlStates.FloodLight, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Flood Light PB Lamp", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].OutputControlStates.FloodLightPBLamp, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Gas Spring Locked", 0, 0.5, &resource.ModelOutputs().DoorsVehicleOut[p0].EmergencyDoor.GasSpringLocked, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "HCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.HCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "HLLCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.HLLCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "HLRCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.HLRCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "HMCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.HMCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "HVAC Fault Indicator", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].OutputControlStates.HVACFaultIndicator, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "HVAC1 Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.HVAC1, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "HVAC2 Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.HVAC2, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Head Light", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].OutputControlStates.HeadLight, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Horn PB Lamp", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].OutputControlStates.HornPBLamp, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ILCB1 Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.ILCB1, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ILCB2 Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.ILCB2, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "LDICB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.LDICB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "LDLCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.LDLCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "LDRCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.LDRCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "LIMP Home PB Lamp", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].OutputControlStates.LIMPHomePBLamp, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Lamp Test PB Lamp", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].OutputControlStates.LampTestPBLamp, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 1 DCUCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.LeftDoor1DCUCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 1 Inside Lamp", 0, 0.5, &resource.ModelOutputs().DoorsVehicleOut[p0].Doors[0].OutputControlStates.DoorInsideLamp, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 1 Outside Lamp", 0, 0.5, &resource.ModelOutputs().DoorsVehicleOut[p0].Doors[0].OutputControlStates.DoorOutsideLamp, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 1 Position", 0, 0.01, &resource.ModelOutputs().DoorsVehicleOut[p0].Doors[0].OutputControlStates.DoorPosition, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 1a Position", 0, 0.01, &resource.ModelOutputs().DoorsVehicleOut[p0].Doors[1].OutputControlStates.DoorPosition, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 2 DCUCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.LeftDoor2DCUCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 2 Inside Lamp", 0, 0.5, &resource.ModelOutputs().DoorsVehicleOut[p0].Doors[2].OutputControlStates.DoorInsideLamp, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 2 Outside Lamp", 0, 0.5, &resource.ModelOutputs().DoorsVehicleOut[p0].Doors[2].OutputControlStates.DoorOutsideLamp, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 2 Position", 0, 0.01, &resource.ModelOutputs().DoorsVehicleOut[p0].Doors[2].OutputControlStates.DoorPosition, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 3 DCUCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.LeftDoor3DCUCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 3 Inside Lamp", 0, 0.5, &resource.ModelOutputs().DoorsVehicleOut[p0].Doors[4].OutputControlStates.DoorInsideLamp, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 3 Outside Lamp", 0, 0.5, &resource.ModelOutputs().DoorsVehicleOut[p0].Doors[4].OutputControlStates.DoorOutsideLamp, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 3 Position", 0, 0.01, &resource.ModelOutputs().DoorsVehicleOut[p0].Doors[4].OutputControlStates.DoorPosition, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 4 DCUCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.LeftDoor4DCUCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 4 Inside Lamp", 0, 0.5, &resource.ModelOutputs().DoorsVehicleOut[p0].Doors[6].OutputControlStates.DoorInsideLamp, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 4 Outside Lamp", 0, 0.5, &resource.ModelOutputs().DoorsVehicleOut[p0].Doors[6].OutputControlStates.DoorOutsideLamp, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door 4 Position", 0, 0.01, &resource.ModelOutputs().DoorsVehicleOut[p0].Doors[6].OutputControlStates.DoorPosition, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door Close PB Operating Panel 1 Lamp", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].OutputControlStates.LeftDoorClosePBOperatingPanel1Lamp, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door Close PB Operating Panel 2 Lamp", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].OutputControlStates.LeftDoorClosePBOperatingPanel2Lamp, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door Open PB 1 Operating Panel 2 Lamp", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].OutputControlStates.LeftDoorOpenPB1OperatingPanel2Lamp, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door Open PB Operating Panel 1 Lamp", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].OutputControlStates.LeftDoorOpenPBOperatingPanel1Lamp, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Left Door Open PB Operating Panel 2 Lamp", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].OutputControlStates.LeftDoorOpenPBOperatingPanel2Lamp, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Line Voltage Indicator", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].OutputControlStates.LineVoltageIndicator, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MLCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.MLCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MMCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.MMCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MR Air Gauge MR Pressure", 0, 10000, &resource.ModelOutputs().PneumaticsVehicleOut[p0].PressureGauges.MainReservoirPressureGauge, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MSOCB1 Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.MSOCB1, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MSOCB2 Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.MSOCB2, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MSOCB3 Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.MSOCB3, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MSOCB4 Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.MSOCB4, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MSOCB5 Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.MSOCB5, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MTBM1CB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.MTBM1CB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MTBM2CB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.MTBM2CB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MTBMCCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.MTBMCCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "MTOPCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.MTOPCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Marker Or Tail Light", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].OutputControlStates.MarkerOrTailLight, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "NBCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.NBCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "NVICB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.NVICB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "OCCB1 Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.OCCB1, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "OCCB2 Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.OCCB2, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ODDCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.ODDCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Other Cab Occupied Indicator", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].OutputControlStates.OtherCabOccupiedIndicator, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PADCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.PADCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PANCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.PANCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PBCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.PBCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PISCB1 Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.PISCB1, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PISCB2 Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.PISCB2, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "POCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.POCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PPU1CB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.PPU1CB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PPU2CB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.PPU2CB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PPU3CB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.PPU3CB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "PTCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.PTCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Panto Down PB Lamp", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].OutputControlStates.PantoDownPBLamp, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Panto Up PB Lamp", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].OutputControlStates.PantoUpPBLamp, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Pantograph Position", 0, 0.001, &resource.ModelOutputs().PantographVehicleOut[p0].PantographPosition, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Parking Brake Indicator", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].OutputControlStates.ParkBrakeApplyPBLight, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Parking Brake Off Switch Lamp", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].OutputControlStates.ParkBrakeOffPBLamp, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Parking Brake On Switch Lamp", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].OutputControlStates.ParkBrakeOnPBLamp, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Power Fault Indicator", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].OutputControlStates.PowerFaultIndicator, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Power Off PB Lamp", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].OutputControlStates.PowerOFFPBLamp, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "RIO1CB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.RIO1CB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "RIO2CB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.RIO2CB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ROS PB Lamp", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].OutputControlStates.ROSPBLamp, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "RPTCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.RPTCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "RSACB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.RSACB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Ramp", 0, 0.5, &resource.ModelOutputs().DoorsVehicleOut[p0].EmergencyDoor.Ramp, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Ramp Support Down", 0, 0.5, &resource.ModelOutputs().DoorsVehicleOut[p0].EmergencyDoor.RampSupportDown, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 1 DCUCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.RightDoor1DCUCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 1 Inside Lamp", 0, 0.5, &resource.ModelOutputs().DoorsVehicleOut[p0].Doors[8].OutputControlStates.DoorInsideLamp, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 1 Outside Lamp", 0, 0.5, &resource.ModelOutputs().DoorsVehicleOut[p0].Doors[8].OutputControlStates.DoorOutsideLamp, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 1 Position", 0, 0.01, &resource.ModelOutputs().DoorsVehicleOut[p0].Doors[8].OutputControlStates.DoorPosition, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 2 DCUCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.RightDoor2DCUCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 2 Inside Lamp", 0, 0.5, &resource.ModelOutputs().DoorsVehicleOut[p0].Doors[10].OutputControlStates.DoorInsideLamp, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 2 Outside Lamp", 0, 0.5, &resource.ModelOutputs().DoorsVehicleOut[p0].Doors[10].OutputControlStates.DoorOutsideLamp, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 2 Position", 0, 0.01, &resource.ModelOutputs().DoorsVehicleOut[p0].Doors[10].OutputControlStates.DoorPosition, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 3 DCUCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.RightDoor3DCUCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 3 Inside Lamp", 0, 0.5, &resource.ModelOutputs().DoorsVehicleOut[p0].Doors[12].OutputControlStates.DoorInsideLamp, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 3 Outside Lamp", 0, 0.5, &resource.ModelOutputs().DoorsVehicleOut[p0].Doors[12].OutputControlStates.DoorOutsideLamp, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 3 Position", 0, 0.01, &resource.ModelOutputs().DoorsVehicleOut[p0].Doors[12].OutputControlStates.DoorPosition, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 4 DCUCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.RightDoor4DCUCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 4 Inside Lamp", 0, 0.5, &resource.ModelOutputs().DoorsVehicleOut[p0].Doors[14].OutputControlStates.DoorInsideLamp, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 4 Outside Lamp", 0, 0.5, &resource.ModelOutputs().DoorsVehicleOut[p0].Doors[14].OutputControlStates.DoorOutsideLamp, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door 4 Position", 0, 0.01, &resource.ModelOutputs().DoorsVehicleOut[p0].Doors[14].OutputControlStates.DoorPosition, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door Close PB Operating Panel 1 Lamp", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].OutputControlStates.RightDoorClosePBOperatingPanel1Lamp, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door Close PB Operating Panel 5 Lamp", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].OutputControlStates.RightDoorClosePBOperatingPanel5Lamp, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door Open PB 1 Operating Panel 5 Lamp", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].OutputControlStates.RightDoorOpenPB1OperatingPanel5Lamp, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door Open PB Operating Panel 1 Lamp", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].OutputControlStates.RightDoorOpenPBOperatingPanel1Lamp, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Right Door Open PB Operating Panel 5 Lamp", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].OutputControlStates.RightDoorOpenPBOperatingPanel5Lamp, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SAC1CCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.SAC1CCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SAC2CCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.SAC2CCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SIOCB1 Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.SIOCB1, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SIOCB2 Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.SIOCB2, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SOCB1 Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.SOCB1, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SOCB2 Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.SOCB2, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SP11CB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.SP11CB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SP12CB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.SP12CB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SP1CB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.SP1CB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SP2CB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.SP2CB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SP3CB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.SP3CB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SP4CB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.SP4CB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SP5CB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.SP5CB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SP6CB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.SP6CB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SPCB6 Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.SPCB6, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SPCB7 Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.SPCB7, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SPCB8 Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.SPCB8, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SSCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.SSCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "SSICB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.SSICB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Saloon Door Close Indicator", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].OutputControlStates.SaloonDoorCloseIndicator, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TBCCB1 Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.TBCCB1, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TBCCB2 Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.TBCCB2, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TBNCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.TBNCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TDICB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.TDICB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TERCB1 Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.TERCB1, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TERCB2 Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.TERCB2, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TLLCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.TLLCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TLRCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.TLRCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TRIVCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.TRIVCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TVDUCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.TVDUCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "TWVCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.TWVCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Talk Indicator", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].OutputStates.TalkIndicator, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "UTO Or RM Light", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].OutputControlStates.UTOOrRMLight, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "UTO PB Lamp", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].OutputControlStates.UTOPBLamp, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Uncouple PB Lamp", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].OutputControlStates.UncouplePBLamp, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "VCB Close PB Lamp", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].OutputControlStates.VCBClosePBLamp, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "VCB Open PB Lamp", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].OutputControlStates.VCBOpenPBLamp, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "VCB Trip Indicator", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].OutputControlStates.VCBTripIndicator, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "VCBCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.VCBCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "VCBCCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.VCBCCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "VCCB Or UCCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.VCCBOrUCCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "VIO1CB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.VIO1CB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "VIO2CB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.VIO2CB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Vehicle Bogie Derailed", 0, 0.5, &resource.ModelOutputs().TractionVehicleOut[p0].TractionControl.TCMS.VehicleBogieDerailed, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Vehicle Derailed", 0, 0.5, &resource.ModelOutputs().TractionVehicleOut[p0].TractionControl.TCMS.VehicleDerailed, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "WFL Test PB Lamp", 0, 0.5, &resource.ModelOutputs().ElectricalOutput[p0].OutputControlStates.WFLTestPBLamp, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "WFLCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.WFLCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "WIFICB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.WIFICB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "WWCB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.WWCB, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Wait Indicator", 0, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].OutputStates.WaitIndicator, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Wiper Position Center", 0, 0.001, &resource.ModelOutputs().ElectricalOutput[p0].OutputControlStates.WiperPositionCenter, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Wiper Position Left", 0, 0.001, &resource.ModelOutputs().ElectricalOutput[p0].OutputControlStates.WiperPositionLeft, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Wiper Position Right", 0, 0.001, &resource.ModelOutputs().ElectricalOutput[p0].OutputControlStates.WiperPositionRight, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "Wiper Wash", 0, 0.001, &resource.ModelOutputs().ElectricalOutput[p0].OutputControlStates.WiperWash, true));
            oi.numbers.push_back(ObjectDB::NumberInfo(Sim::Number::ID(number_id++), "ZVBACB Trip", 1, 0.5, &resource.ModelOutputs().IOControlsOutput[p0].MCBTripStates.ZVBACB, true));
            db.AddObject(oi);
        }


        void DefineObjects(ModelResource &resource, ObjectDB &db)
        {
            // Determine the number of objects in advance to avoid resizing.
            size_t object_count = 0;
            ++object_count;
            {
                ++object_count;
                ++object_count;
                for(size_t i0 = 0; i0 < 8; ++i0)
                {
                    ++object_count;
                    {
                        ++object_count;
                        ++object_count;
                        ++object_count;
                        for(size_t i1 = 0; i1 < 2; ++i1)
                        {
                            ++object_count;
                            {
                                ++object_count;
                                ++object_count;
                                ++object_count;
                                ++object_count;
                            }
                        }
                        ++object_count;
                        ++object_count;
                        {
                            ++object_count;
                        }
                        ++object_count;
                        ++object_count;
                        ++object_count;
                        {
                            ++object_count;
                            {
                                for(size_t i1 = 0; i1 < 10; ++i1)
                                {
                                    ++object_count;
                                }
                            }
                        }
                        ++object_count;
                        ++object_count;
                        {
                            ++object_count;
                            ++object_count;
                        }
                        ++object_count;
                    }
                }
            }
            db.Reserve(object_count);

            int object_id = 0;
            int parent_id = 1;
            DefineTrainObject(++object_id, Sim::ROOT_OBJECT, resource, db);
            {
                int parent_id = object_id;
                DefineCBTCTrainInputsObject(++object_id, parent_id, resource, db);
                DefineTrainDebugObject(++object_id, parent_id, resource, db);
                for(size_t i0 = 0; i0 < 8; ++i0)
                {
                    DefineVehicleObject(++object_id, parent_id, i0, resource, db);
                    {
                        int parent_id = object_id;
                        DefineAudioOutputObject(++object_id, parent_id, i0, resource, db);
                        DefineCBTCVehicleInputsObject(++object_id, parent_id, i0, resource, db);
                        DefineCBTCVehicleOutputsObject(++object_id, parent_id, i0, resource, db);
                        for(size_t i1 = 0; i1 < 2; ++i1)
                        {
                            DefineCouplingObject(++object_id, parent_id, i0, i1, resource, db);
                            {
                                int parent_id = object_id;
                                DefineCouplingInputsObject(++object_id, parent_id, i0, i1, resource, db);
                                DefineCouplingOutputsObject(++object_id, parent_id, i0, i1, resource, db);
                                DefineMimicInputsObject(++object_id, parent_id, i0, i1, resource, db);
                                DefineMimicOutputsObject(++object_id, parent_id, i0, i1, resource, db);
                            }
                        }
                        DefineDMIVehicleOutputsObject(++object_id, parent_id, i0, resource, db);
                        DefineMotionBaseObject(++object_id, parent_id, i0, resource, db);
                        {
                            int parent_id = object_id;
                            DefineMotionBaseTuningObject(++object_id, parent_id, i0, resource, db);
                        }
                        DefinePAPISVehicleOutputsObject(++object_id, parent_id, i0, resource, db);
                        DefineTCMSVehicleInputsObject(++object_id, parent_id, i0, resource, db);
                        DefineTCMSVehicleOutputsObject(++object_id, parent_id, i0, resource, db);
                        {
                            int parent_id = object_id;
                            DefineTCMSMessagesObject(++object_id, parent_id, i0, resource, db);
                            {
                                int parent_id = object_id;
                                for(size_t i1 = 0; i1 < 10; ++i1)
                                {
                                    DefineTCMSMessageObject(++object_id, parent_id, i0, i1, resource, db);
                                }
                            }
                        }
                        DefineVehicleDebugObject(++object_id, parent_id, i0, resource, db);
                        DefineVehicleInputsObject(++object_id, parent_id, i0, resource, db);
                        {
                            int parent_id = object_id;
                            DefineVehicleInputsModesObject(++object_id, parent_id, i0, resource, db);
                            DefineVehicleInputsValuesObject(++object_id, parent_id, i0, resource, db);
                        }
                        DefineVehicleOutputsObject(++object_id, parent_id, i0, resource, db);
                    }
                }
            }
        } // DefineObjects

        /// Gets the name of the model.
        ///
        /// @return A pointer to a static string holding the name of the model, null-terminated.

        const char *GetModelTitle()
        {
            return MODEL_TITLE;
        } // GetModelTitle

        /// Gets the version of the model.

        uint64_t GetModelVersion()
        {
            return VERSION.ToValue();
        } // GetModelVersion
    } // namespace Registration
#ifdef MODEL_NAMESPACE
} // namespace MxModel
#endif
