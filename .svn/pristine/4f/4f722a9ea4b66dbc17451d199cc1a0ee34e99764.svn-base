#
# Domain : SCC Power Menu  (powerMenu)
#
# SCC Power Menu properties that are specific to a particular simulator type
#

# The particular simulator that this Power Menu is being used in.
#
# Valid vaues are: 1 = Fixed Set Driver's Cab
powerMenu.simulator.name = Fixed Set Driver's Cab
powerMenu.systemManagers.shutdown=driver

# Plugins
powerMenu.plugin.1=com.sydac.powermenu.plugins.PluginCBus
powerMenu.plugin.2=com.sydac.powermenu.plugins.PluginCommsLayer
powerMenu.plugin.3=com.sydac.powermenu.plugins.PluginDelay
powerMenu.plugin.4=com.sydac.powermenu.plugins.PluginPowerSwitchControllerIPM2
powerMenu.plugin.5=com.sydac.powermenu.plugins.PluginProjector
powerMenu.plugin.6=com.sydac.powermenu.plugins.PluginWakeOnLAN
powerMenu.plugin.7=com.sydac.powermenu.plugins.PluginCmd
powerMenu.plugin.8=com.sydac.powermenu.plugins.PluginProjectorPJLink
powerMenu.plugin.9=com.sydac.powermenu.plugins.PluginProjectorPJLinkWait

# A flag to turn user interaction on or off.
#
# When true, the user is given buttons to turn the simulator on or off.
# When false, power is immediately applied to the simulator.  Once the
# application specified in powerMenu.application has completed power
# is immediately removed and the power menu exits gracefully.
#
powerMenu.allowUserInteraction = true

# If set, the PM displays a solid background colour behind the UI, otherwise the splash screen is displayed.
# powerMenu.backgroundColour = #000000


# The application to run when the "Start..." button is pressed
#
powerMenu.application = cmd.exe /c "start /min /wait cmd.exe /c SCCModules.bat"


# The broadcast IP address for sending a powerup (wake-on-lan) message
#
# The usual way to generate this is to:
# - copy the IP address of the machine running the PM
# - for all of the bytes in the subnet mask that are 0, change the corresponding byte to 255
# The IP address and the subnet mask can be determined by running ipconfig from a command prompt.
#
# More precisely, the broadcast address for an IPv4 host is the bitwise OR
# operation between the bit complement of the subnet mask and the host's
# IP address (ie broadcast = ~netmask | hostAddr).
#
# You can comment out or remove this property to have the PowerMenu determine
# the broadcast address by itself.  This will only work for machines with one
# network interface.
powerMenu.wakeOnLan.broadcast = 172.16.102.255
# powerMenu.wakeOnLan.broadcast = 172.16.11.255

#powerMenu.define.cmd.1 = APC-PDU-ON.bat
#powerMenu.define.cmd.2 = APC-PDU-OFF.bat

# The host address and port of the Clipsal C-Gate server software
powerMenu.cbus.host = 127.0.0.1
powerMenu.cbus.port = 20023

# The IP Address of the Western Telematic Inc (WTI) 2-port Ethernet Power Switch
powerMenu.ethernet.powerswitch.address = 127.0.0.1

# The projector serial communications settings
#
# The format of onCommand and offCommand is sets of 2 hex digits separated by a space
# (eg. FF 01 65 66 FF)
#
powerMenu.projector.serial.port = COM1
powerMenu.projector.serial.baudRate = 9600
powerMenu.projector.serial.onCommand = FE 01 65 66 FF
powerMenu.projector.serial.offCommand = FE 01 66 67 FF


# MAC (ethernet hardware) address definitions for use in the power on/off sequences.
# A MAC address is used when sending a wake-on-lan message to a computer.
#
# The format of the key is powerMenu.define.mac.x, where x increments from 1
# The format of the value is nn:nn:nn:nn:nn:nn.  The MAC address can be found on a PC by running
# ipconfig /all and looking for the Physical Address.
#
powerMenu.define.mac.1  = A4-AE-12-35-03-98
powerMenu.define.mac.2  = 88-AE-DD-03-02-AA
powerMenu.define.mac.3  = 88-AE-DD-03-02-41
powerMenu.define.mac.4  = 1C-69-7A-AE-4C-27
powerMenu.define.mac.5  = A4-AE-12-77-AC-6D
powerMenu.define.mac.6  = A4-AE-12-35-03-0C
powerMenu.define.mac.7  = 88-AE-DD-03-09-A6
powerMenu.define.mac.8  = A4-AE-12-77-07-A7
powerMenu.define.mac.9  = A4-AE-12-35-07-E7
powerMenu.define.mac.10 = 88-AE-DD-04-D7-61

# Ethernet Power Switch definitions for use in the on/off sequences.
# Just the Ethernet Power port needs to be defined.
powerMenu.define.ethernet.1 = 1
powerMenu.define.ethernet.2 = 2

# Clipsal C-Bus address definitions for use in the power on/off sequences.
# A C-Bus address is used to power on/off a particular piece of hardware.
#
# The format of the key is powerMenu.define.cbus.x, where x increments from 1
# The format of the value is n/n/n.  The cbus address can be found on a PC by
# opening a telnet connection to the C-Gate server, running "tree 1" and looking
# for the appropriate groups.
#
#powerMenu.define.cbus.1 = 1/0/0
#powerMenu.define.cbus.2 = 1/0/1
#powerMenu.define.cbus.3 = 1/0/2
#powerMenu.define.cbus.4 = 1/0/3


# Delay definitions for use in the power on/off sequences.
#
# The format of the key is powerMenu.define.delay.x, where x increments from 1
# The format of the value is an integer representing the number of milliseconds of delay
#
powerMenu.define.delay.1 = 2000
powerMenu.define.delay.2 = 3000
powerMenu.define.delay.3 = 50000


# PJlink definitions for use in the power on/off sequences.
# Optional configuration - defaults are per the specification.
#powerMenu.projector.pjlink.port = 4352
#powerMenu.projector.pjlink.onCommand = %1POWR 1
#powerMenu.projector.pjlink.offCommand = %1POWR 0
# Required configuration
#powerMenu.projector.pjlink.password = secret
#powerMenu.define.projector.pjlink.1 = 192.168.1.101
#powerMenu.define.projector.pjlink.2 = 192.168.1.102


# PJLinkWait definitions for use in the power on/off sequences.
# Optional configuration - defaults are as specified here.
#powerMenu.projector.pjlinkwait.port = 4352
# Retry on failure time in milliseconds.  This should be around
# 5000ms to avoid hammering the projector with TCP connections.
#powerMenu.projector.pjlinkwait.retryDelay = 5000
# This response timeout is specified in the standard, and should
# not need modification for standards compliant projectors.
#powerMenu.projector.pjlinkwait.responseTimeout = 2500
# Required configuration
#powerMenu.projector.pjlinkwait.password = secret
#powerMenu.define.project.pjlinkwait.1 = 192.168.1.101
#powerMenu.define.project.pjlinkwait.2 = 192.168.1.101


# Command definitions for use in the power on/off sequences.
#
# The format of the key is powerMenu.define.cmd.x, whene x increments from 1
# The format of the value can be any suitable operating system command
#
#powerMenu.define.cmd.1 = wget http://projector/power.cgi?on=1
#powerMenu.define.cmd.2 = wget http://projector/power.cgi?off=1

# The power on sequence for the simulator.
#
# The format of the key is powerMenu.sim.poweron.sequence.x, where x increments from 1
# The format of the value is {cbus.x, delay.x, mac.x, ethernet.x}, matching any of the definitions above,
# {comms} to start the comms system or {projector} to turn on the overhead projector.
#
powerMenu.sim.poweron.sequence.1 = cmd.1
powerMenu.sim.poweron.sequence.2 = delay.3
powerMenu.sim.poweron.sequence.3 = mac.1
powerMenu.sim.poweron.sequence.4 = mac.2
powerMenu.sim.poweron.sequence.5 = mac.3
powerMenu.sim.poweron.sequence.6 = mac.4
powerMenu.sim.poweron.sequence.7 = mac.5
powerMenu.sim.poweron.sequence.8 = mac.6
powerMenu.sim.poweron.sequence.9 = mac.7
powerMenu.sim.poweron.sequence.10 = mac.8
powerMenu.sim.poweron.sequence.11 = mac.9
powerMenu.sim.poweron.sequence.12 = mac.10
powerMenu.sim.poweron.sequence.13 = delay.3
powerMenu.sim.poweron.sequence.14 = comms

#powerMenu.sim.poweron.sequence.1 = projector
#powerMenu.sim.poweron.sequence.2 = cbus.1
#powerMenu.sim.poweron.sequence.3 = cbus.2
#powerMenu.sim.poweron.sequence.4 = delay.1
#powerMenu.sim.poweron.sequence.5 = mac.1
#powerMenu.sim.poweron.sequence.6 = delay.2
#powerMenu.sim.poweron.sequence.7 = cbus.3
#powerMenu.sim.poweron.sequence.8 = cbus.4


# The power off sequence for the simulator.
#
# The format of the key is powerMenu.sim.poweroff.sequence.x, where x increments from 1
# The format of the value is {cbus.x, delay.x, mac.x, ethernet.x}, matching any of the definitions above,
# {comms} to shutdown the comms system (which will in turn kill all comms applications and
# perform a windows shutdown on any machine running the Shutdown utility application) or
# {projector} to turn off the overhead projector.
#
powerMenu.sim.poweroff.sequence.1 = comms
powerMenu.sim.poweroff.sequence.2 = delay.3
#powerMenu.sim.poweroff.sequence.3 = cmd.2
powerMenu.sim.poweroff.sequence.4 = delay.3

#powerMenu.sim.poweroff.sequence.1 = projector
#powerMenu.sim.poweroff.sequence.2 = cbus.4
#powerMenu.sim.poweroff.sequence.3 = cbus.3
#powerMenu.sim.poweroff.sequence.4 = delay.1
#powerMenu.sim.poweroff.sequence.5 = comms
#powerMenu.sim.poweroff.sequence.6 = delay.2
#powerMenu.sim.poweroff.sequence.7 = cbus.2
#powerMenu.sim.poweroff.sequence.8 = cbus.1
