<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           targetNamespace="http://www.sydac.com.au/GMI/1.0/"
           xmlns="http://www.sydac.com.au/GMI/1.0/"
           elementFormDefault="qualified">
  <xs:include schemaLocation="common.xsd"/>
  <xs:element name="objects" type="modelled_object_definitions"/>
  <xs:complexType name="modelled_object_definitions">
    <xs:annotation>
      <xs:documentation>
        All objects that appear on the screens are defined here and attached to
        the screens by referencing their names. This means we can reuse the
        information used to render them and place control hotspots.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="screen_object_type" type="screen_object_type" maxOccurs="unbounded" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="screen_object_type" abstract="true">
    <xs:annotation>
      <xs:documentation>
        A type of object that appears on the screen.
        Objects are referenced by name in screens and given comms numbers to map
        to their internal variables. Depending on how they are rendered, the
        numbers are used to decide how the object is drawn.
        Vehicle Variables are mapped to the Vehicle object and are used to send
        a request from the user directly to the vehicle (eg for tripping circuit breakers).
        In order to map Comms numbers to Vehicle Variables you must use the names of constants
        defined in ProjectObjectConstants.Vehicle.
        Value Variables are mapped to the HubValue object and are used to send
        input from the user which may or may not be used by the model.
        In order to map Comms numbers to Value Variables you must use the names of constants
        defined in ProjectObjectConstants.VehicleInputValues.
        Input Variables are mapped to the HubInput object and are used to show
        the state of an input device.
        In order to map Comms numbers to Input Variables you must use the names of constants
        defined in ProjectObjectConstants.VehicleInputs.
        Output Variables are mapped to the HubOutput object and are used to show
        the state of an output device.
        In order to map Comms numbers to Output Variables you must use the names of constants
        defined in ProjectObjectConstants.VehicleOutputs.
        It is recommended to give your variables names which indicate what type they are,
        so it is easier to map the correct constant name when you define your screen_objects.
        The point of interest is a point, relative to the top left of the
        bounds of the object, that the label will point towards. If this isn't
        supplied generally the label will point at the centre.
        These objects may be reused.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="vehicle_variable" type="variable" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="value_variable"   type="variable" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="input_variable"   type="variable" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="output_variable"  type="variable" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="point_of_interest" type="coordinate_2d" minOccurs="0" maxOccurs="1"/>
      <xs:element name="bounds" type="region_2d" minOccurs="0" maxOccurs="1"/>
    </xs:sequence>
  <xs:attribute name="name" type="xs:string" use="required"/>
  </xs:complexType>
  <xs:complexType name="variable">
    <xs:annotation>
      <xs:documentation>
        A variable name in an object. Must be defined before they are used.
      </xs:documentation>
    </xs:annotation>
    <xs:attribute name="name" type="xs:string" use="required"/>
  </xs:complexType>
  <xs:complexType name="state_object">
    <xs:annotation>
      <xs:documentation>
        An object that is drawn using discrete states as inputs.
        Note that if you define two groups of the same name, that is
        equivalent to having an "or" statement with different variable states
        defined. The variable states inside a state group are like "and"s.
        Hotspots are also defined to allow the user to interact with the model.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="screen_object_type">
        <xs:sequence>
          <xs:element name="state_group" type="state_group" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="button"      type="object_state_button" minOccurs="0" maxOccurs="1"/>
          <xs:element name="no_image"    type="object_state_no_image" minOccurs="0" maxOccurs="1"/>
          <xs:element name="image"       type="object_state_image"  minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="flashing_image" type="object_state_flashing_image" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="auto_image"  type="object_state_auto_image" minOccurs="0" maxOccurs="1"/>
          <xs:element name="hotspot"     type="object_control_hotspot"  minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="extends" type="xs:string" use="optional"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="transform_object">
    <xs:annotation>
      <xs:documentation>
        A object that is an image that transforms itself as the value changes.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="screen_object_type">
        <xs:attribute name="image"         type="xs:string"  use="required"/>
        <xs:attribute name="pivot_x"       type="xs:integer" use="optional"/>
        <xs:attribute name="pivot_y"       type="xs:integer" use="optional"/>
        <xs:attribute name="clockwise"     type="xs:boolean" use="optional"/>
        <xs:attribute name="min_angle"     type="xs:integer" use="optional"/>
        <xs:attribute name="max_angle"     type="xs:integer" use="optional"/>
        <xs:attribute name="max_offset_x"  type="xs:integer" use="optional"/>
        <xs:attribute name="max_offset_y"  type="xs:integer" use="optional"/>
        <xs:attribute name="min_scale_x"   type="xs:string"  use="optional"/>
        <xs:attribute name="min_scale_y"   type="xs:string"  use="optional"/>
        <xs:attribute name="max_scale_x"   type="xs:string"  use="optional"/>
        <xs:attribute name="max_scale_y"   type="xs:string"  use="optional"/>
        <xs:attribute name="min_value"     type="xs:double"  use="required"/>
        <xs:attribute name="max_value"     type="xs:double"  use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="gauge_object">
    <xs:annotation>
      <xs:documentation>
        A gauge needle. It is typically better to use a transform_object instead.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="screen_object_type">
        <xs:sequence>
          <xs:element name="colour" type="colour" minOccurs="1" maxOccurs="1"/>
        </xs:sequence>
        <xs:attribute name="clockwise"     type="xs:boolean" use="required"/>
        <xs:attribute name="min_angle"     type="xs:integer" use="required"/>
        <xs:attribute name="max_angle"     type="xs:integer" use="required"/>
        <xs:attribute name="front_length"  type="xs:integer" use="required"/>
        <xs:attribute name="front_width"   type="xs:integer" use="required"/>
        <xs:attribute name="centre_radius" type="xs:integer" use="required"/>
        <xs:attribute name="centre_width"  type="xs:integer" use="required"/>
        <xs:attribute name="back_length"   type="xs:integer" use="required"/>
        <xs:attribute name="back_width"    type="xs:integer" use="required"/>
        <xs:attribute name="min_value"     type="xs:double"  use="required"/>
        <xs:attribute name="max_value"     type="xs:double"  use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="linear_gauge_object">
    <xs:annotation>
      <xs:documentation>
        A linear gauge. It is typically better to use a transform_object instead.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="screen_object_type">
        <xs:sequence>
          <xs:element name="colour" type="colour" minOccurs="1" maxOccurs="1"/>
        </xs:sequence>
        <xs:attribute name="angle"       type="xs:integer" use="required"/>
        <xs:attribute name="max_x"       type="xs:integer" use="required"/>
        <xs:attribute name="max_y"       type="xs:integer" use="required"/>
        <xs:attribute name="length"      type="xs:integer" use="required"/>
        <xs:attribute name="front_width" type="xs:integer" use="required"/>
        <xs:attribute name="back_width"  type="xs:integer" use="required"/>
        <xs:attribute name="min_value"   type="xs:double"  use="required"/>
        <xs:attribute name="max_value"   type="xs:double"  use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="peripheral_gauge_object">
    <xs:annotation>
      <xs:documentation>
        A peripheral gauge needle. It is typically better to use a transform_object instead.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="screen_object_type">
        <xs:sequence>
          <xs:element name="colour" type="colour" minOccurs="1" maxOccurs="1"/>
        </xs:sequence>
        <xs:attribute name="clockwise" type="xs:boolean" use="required"/>
        <xs:attribute name="min_angle" type="xs:integer" use="required"/>
        <xs:attribute name="max_angle" type="xs:integer" use="required"/>
        <xs:attribute name="inward"    type="xs:boolean" use="required"/>
        <xs:attribute name="height"    type="xs:integer" use="required"/>
        <xs:attribute name="width"     type="xs:integer" use="required"/>
        <xs:attribute name="radius"    type="xs:integer" use="required"/>
        <xs:attribute name="min_value" type="xs:double"  use="required"/>
        <xs:attribute name="max_value" type="xs:double"  use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="linear_display_object">
    <xs:annotation>
      <xs:documentation>
        A linear display.
        This will render a number of rectangular segments a distance of
        separator apart up to a specified total length depending on what the
        current value is with respect to the minimum and maximum values.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="screen_object_type">
        <xs:sequence>
          <xs:element name="colour" type="colour" minOccurs="1" maxOccurs="1"/>
        </xs:sequence>
        <xs:attribute name="left_to_right" type="xs:boolean" use="required"/>
        <xs:attribute name="length"        type="xs:float"   use="required"/>
        <xs:attribute name="height"        type="xs:float"   use="required"/>
        <xs:attribute name="segments"      type="xs:integer" use="required"/>
        <xs:attribute name="seperator"     type="xs:integer" use="required"/>
        <xs:attribute name="min_value"     type="xs:double"  use="required"/>
        <xs:attribute name="max_value"     type="xs:double"  use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="state_group">
    <xs:annotation>
      <xs:documentation>
        A group of variable values that define a state represented by an image.
        The state group is defined by the value of all variables in the object.
        If you specify an auto image type (like png or jpg) the parser will
        attempt to auto generate the image file name from
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="state" type="state_variable_value_range" maxOccurs="unbounded"/>
    </xs:sequence>
    <xs:attribute name="name" type="xs:string" use="required"/>
  </xs:complexType>
  <xs:complexType name="state_variable_value_range">
    <xs:annotation>
      <xs:documentation>
        An object variable's value or range of values.
        If no value range is specified, any value is valid.
      </xs:documentation>
    </xs:annotation>
    <xs:attribute name="variable" type="xs:string" use="required"/>
    <xs:attribute name="value" type="xs:integer" use="optional"/>
    <xs:attribute name="greater_than" type="xs:double" use="optional"/>
    <xs:attribute name="greater_than_or_equal_to" type="xs:double" use="optional"/>
    <xs:attribute name="less_than" type="xs:double" use="optional"/>
    <xs:attribute name="less_than_or_equal_to" type="xs:double" use="optional"/>
  </xs:complexType>
  <xs:complexType name="object_state_button">
    <xs:annotation>
      <xs:documentation>
        A button used to show the state of an object.
        They would usually be used for objects that have some sort of
        functionality that would be tricky/unintuitive to show and use with a
        normal image and region-based hotspot.
        The State Group References connect the text on the button to the state
        groups defined for the object.
        Buttons need to be made big enough to fit the text from all of the state
        group refs.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="state_group_ref" type="state_group_button_ref" maxOccurs="unbounded"/>
    </xs:sequence>
    <xs:attribute name="x" type="xs:string" use="required"/>
    <xs:attribute name="y" type="xs:string" use="required"/>
    <xs:attribute name="width" type="xs:string" use="required"/>
    <xs:attribute name="height" type="xs:string" use="required"/>
  </xs:complexType>
  <xs:complexType name="state_group_button_ref">
    <xs:annotation>
      <xs:documentation>
        A reference to a state group and text to describe it.
      </xs:documentation>
    </xs:annotation>
    <xs:attribute name="name" type="xs:string" use="required"/>
    <xs:attribute name="text" type="xs:string" use="required"/>
  </xs:complexType>
  <xs:complexType name="object_state_auto_image">
    <xs:annotation>
      <xs:documentation>
        Defines a directory and file extension for the images associated with
        the states of a state object so that their files can be loaded
        automagically. The directory is only optional.
        The images' path and file names must be of the form
        directory/object_type_name_state_name.file_type
        where directory and file_type are defined in this element,
        object_type_name is defined in the state_object_type element
        and state_name is defined in the state_group element.
      </xs:documentation>
    </xs:annotation>
    <xs:attribute name="directory" type="xs:string" use="optional"/>
    <xs:attribute name="file_type" type="xs:string" use="required"/>
  </xs:complexType>
  <xs:complexType name="object_state_image">
    <xs:annotation>
      <xs:documentation>
        An image file used to show the state of an object.
        There can be a single state image in a file.
        (soon we plan to support a sequence of images in a file (side by side and the same size as one another - called a line graphic).)
        The State Group References connect this file to the state groups defined
        for the object. If there is a single reference the image represents a
        single state.
        (soon the following will apply: Multiple State Group References match up to the states in the image from
        left to right.
        If there is an unused state in a line graphic you must have a dummy state
        in the corresponding spot in your state group reference list. (The ideal
        solution is to amend the graphic).
        It is recommended to use separate images for each state for ease of
        maintenance. )
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="state_group_ref" type="state_group_image_ref" maxOccurs="unbounded"/>
    </xs:sequence>
    <xs:attribute name="file" type="xs:string" use="required"/>
  </xs:complexType>
  <xs:complexType name="object_state_no_image">
    <xs:annotation>
      <xs:documentation>
        An element that indicates states don't display images.
        The State Group References connect this file to the state groups defined
        for the object.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="state_group_ref" type="state_group_image_ref" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="object_state_flashing_image">
    <xs:annotation>
      <xs:documentation>
        Definition for a flashing image to show the state of an object.
        The pool name allows synchronisation of flashing. Note that the pool
        name AND the period have to be the same.
        The period is in milliseconds.
        The State Group Reference connects this flashing image to the state
        group defined for the object.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="frame" type="flashing_image_frame" minOccurs="2" maxOccurs="unbounded"/>
      <xs:element name="state_group_ref" type="state_group_image_ref" minOccurs="1" maxOccurs="1"/>
    </xs:sequence>
    <xs:attribute name="pool_name" type="xs:string" use="optional"/>
    <xs:attribute name="period" type="xs:integer" use="required"/>
  </xs:complexType>
  <xs:complexType name="flashing_image_frame">
    <xs:annotation>
      <xs:documentation>
        A frame in a flashing sequence.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence/>
    <xs:attribute name="file" type="xs:string" use="required"/>
    <xs:attribute name="multiple" type="xs:integer" use="optional"/>
  </xs:complexType>
  <xs:complexType name="state_group_image_ref">
    <xs:annotation>
      <xs:documentation>
        A reference to a state group.
      </xs:documentation>
    </xs:annotation>
    <xs:attribute name="name" type="xs:string" use="required"/>
  </xs:complexType>
  <xs:complexType name="object_control_hotspot" abstract="true">
    <xs:annotation>
      <xs:documentation>
        A hotspot that sends information to the model.
        Represents a user doing something with this object.
        Usually there would be only a single behaviour variable defined for each
        hotspot.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="behaviour" type="object_behaviour" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="object_behaviour">
    <xs:annotation>
      <xs:documentation>
        Describes hotspot behaviour.
        Note that the state variable is not required for momentary action type behaviour.
        Note that the limit is only required for increase/decrease state type behaviour.
      </xs:documentation>
    </xs:annotation>
    <xs:attribute name="input_variable" type="xs:string" use="required"/>
    <xs:attribute name="type" type="object_behaviour_types" use="required"/>
    <xs:attribute name="state_variable" type="xs:string" use="optional"/>
    <xs:attribute name="limit" type="xs:integer" use="optional"/>
  </xs:complexType>
  <xs:simpleType name="object_behaviour_types">
    <xs:annotation>
      <xs:documentation>
        Types of input we can receive from a user.
        Note that "momentary action" and "momentary action up" are basically the same.
        Use "up" if you are also using "down".
      </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="increase state"/>
      <xs:enumeration value="decrease state"/>
      <xs:enumeration value="binary toggle"/>
      <xs:enumeration value="momentary action"/>
      <xs:enumeration value="momentary action up"/>
      <xs:enumeration value="momentary action down"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="region_hotspot">
    <xs:annotation>
      <xs:documentation>
        A hotspot that is simply a region on the screen.
        They would usually be placed over buttons, circuit breakers, etc.
        You can specify multiple locations to make the hotspot different shapes.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="object_control_hotspot">
        <xs:sequence>
          <xs:element name="region" type="region_2d" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="directional_button_hotspot">
    <xs:annotation>
      <xs:documentation>
        A hotspot that is a button with an arrow on it.
        They would usually be placed next to multiple state levers.
        You can specify multiple locations to make the hotspot different shapes.
        You only need to specify the centre coordinates and direction of the
        button.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="object_control_hotspot">
        <xs:sequence>
          <xs:element name="centre" type="coordinate_2d"/>
        </xs:sequence>
        <xs:attribute name="direction" type="direction" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="button_hotspot">
    <xs:annotation>
      <xs:documentation>
        A hotspot that is associated with a button.
        Attaches itself to the button defined in a state object.
        The text is defined as part of state behaviour as the text may change
        depending on state, eg. "Press Hillstart" would be displayed when the
        hill start button is not pressed and "Release Hillstart" would be
        displayed when it is.
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="object_control_hotspot">
        <xs:sequence/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:schema>
