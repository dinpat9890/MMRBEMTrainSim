<?xml version="1.0" ?>

<!-- ======================================================================= -->
<!-- Build file for BJMMTS Simulator Localisation                             -->
<!-- ======================================================================= -->
<project name="Localisation Config" xmlns:ac="antlib:net.sf.antcontrib" basedir="." default="build.all">
  <!-- Load all of our properties -->
  <property file="${basedir}/build.properties"/>
  <property name="software.basedir" value="${sw.dir}"/>
  <import file="../../ant.common_properties.xml"/>
  <import file="${sw.dir}/ant.paths.xml" as="paths" />

  <path id="coretrain.l10n">
    <pathelement path="${train.modules.dir}/procedural_trainer"/>
  </path>

   <path id="java.apps">
  
   <pathelement path="${dir.software.libraries}/gmi_config"/>

  </path>


  <path id="all.l10n">
    <path refid="coretrain.l10n"/>
    <path refid="java.apps"/>
  </path>

  <target name="build.all" depends="build.pot,build.po,build.mo" description="Builds all localisation artefacts.">
  </target>

  <target name="clean.all" description="Cleans all intermediate localisation artefacts.">
    <delete dir="${project.pot}"/>
	<delete dir="${Template.dir}"/>
  </target>

  <target name="deploy.all" depends="build.mo" description="Builds all localisation artefacts.">
  </target>

  <!-- Building POT Files
       Note that POT files generated from project source are created as part of the software build. -->

  <target name="build.pot" depends="build.pot.content"
          description="Builds all Project POT files required for localisation (not including those generated by modules as a release artefact)">
  </target>

  <target name="build.pot.content" description="Builds all POT files required for localising Content">
    <echo message="Building POT files for Content XML"/>
   <!-- <mkdir dir="${project.pot.content}" />
	 <BuildContentPOTFiles Description="Hardware Names"  Class="HardwareNamesPotGenerator"  SourceXML="${config.dir}/database/data/simulators.xml" />
    <BuildContentPOTFiles Description="Sim Properties"  Class="SimPropertiesPotGenerator"  SourceXML="${config.dir}/database/data" />
    <BuildContentPOTFiles Description="Trains"          Class="TrainsPotGenerator"         SourceXML="${config.dir}/database/trains" />

    <ant antfile="${dir.software}/config/project_features/build.xml" inheritAll="false" target="update.featuretype">
    </ant>
    <BuildContentPOTFiles Description="Feature Types"   Class="FeatureTypesPotGenerator"   SourceXML="${config.dir}/source/features" />
	-->
    <!-- Need to gather tracks into one place for the tool to use, then clean them up. -->
   <!-- <copy todir="tracks" flatten="true">
      <fileset dir="${dir.content.project.worlds}" excludes="track_icons.xml,world_types.xml" >
	        <include name="**/definition/*_Track.xml"/>
	  </fileset>
    </copy>

	<BuildContentPOTFiles Description="Track Networks"  Class="TrackNetworksPotGenerator"  SourceXML="tracks" />
	<delete dir="tracks" /> -->
  </target>

  <macrodef name="BuildContentPOTFiles">
    <attribute name="Description"/>
    <attribute name="Class"/>
    <attribute name="SourceXML"/>
    <sequential>
      <echo message="Building POT files for @{Description}"/>
      <java classname="com.sydac.i18ntools.content.@{Class}"      classpath="${train.tools.dir}/i18n_tools/jar/i18ntools.jar" failonerror="true" fork="true">
        <!-- Note that the working directory depends where ant was invoked from, so we need to use basedir in paths -->
        <arg value="${basedir}/@{SourceXML}"/>
        <arg value="${basedir}/${project.pot.content}/"/>
        <arg value="${version.number}"/>
      </java>
    </sequential>
  </macrodef>

  <!-- Building PO Files -->

  <target name="build.po" depends="build.po.content, build.po.java" description="Builds PO files from POT files">
  </target>

  <target name="build.po.content" description="Creates/merges PO files for localised text. Requires POT files to have been created.">
    <echo message="Building content XMLs' PO files"/>
    <antcall target="build.po.worker">
      <param name="pot.dir" value="${project.pot.content}"/>
      <param name="po.dir" value="${l10n.config.content.dir}"/>
    </antcall>
  </target>

  <target name="build.po.java" description="Creates/merges PO files for localised text. Requires POT files to have been created.">
    <echo message="Building Java modules' PO files"/>
    <ac:for param="app.dir" trim="true">
      <path refid="java.apps"/>
	  <sequential>
			<antcall target="build.po.worker">
          <param name="pot.dir" value="@{app.dir}/${l10n.dir}"/>
          <param name="po.dir"  value="${l10n.config.java.dir}"/>
        </antcall>
      </sequential>
    </ac:for>
    <echo message="Building Core Java modules' PO files"/>
    <ac:for param="app.dir" trim="true">
      <path refid="coretrain.l10n"/>
      <sequential>
        <antcall target="build.po.worker">
          <param name="pot.dir" value="@{app.dir}"/>
          <param name="po.dir"  value="${l10n.config.java.dir}"/>
        </antcall>
      </sequential>
    </ac:for>

  </target>

  <!-- Calls build.module.po for all files in pot.dir
       Must have module.pot, pot.dir, po.dir set before calling -->
  <target name="build.po.worker">
    <ac:if>
      <available file="${pot.dir}" type="dir" />
      <then>
        <fileset id="files" dir="${pot.dir}" includes="*.pot"/>
        <pathconvert pathsep=" " property="pot.list" refid="files">
          <mapper type="flatten"/>
        </pathconvert>

        <ac:foreach list="${pot.list}" delimiter=" " target="build.module.po" param="module.pot" inheritall="true"/>
      </then>
    </ac:if>
  </target>

  <!-- Calls build.module.locale.po for all supported locales
       Must have module.pot, pot.dir, po.dir set before calling -->
  <target name="build.module.po">
    <ac:foreach list="${supported.locales}" delimiter=" " target="build.module.locale.po" param="target.locale" inheritall="true"/>
  </target>

  <!-- Creates/merges a PO file for module.pot
       Must have module.pot, target.locale, pot.dir, po.dir set before calling -->
  <target name="build.module.locale.po">
    <property name="po.locale.dir" value="${po.dir}/${target.locale}"/>
    <mkdir dir="${po.locale.dir}"/>
    <ac:propertyregex property="module.name" input="${module.pot}" regexp=".pot" replace=""/>
    <property name="pot.file" value="${pot.dir}/${module.name}.pot"/>
    <property name="po.file" value="${po.locale.dir}/${module.name}.${target.locale}.po"/>

    <available file="${po.file}" property="${po.file}.present"/>
    <!-- these targets use if/unless on the same conditional so only one will actually execute -->
    <antcall target="create.po"/>
    <antcall target="merge.po"/>
  </target>

  <!-- Create a PO file based on pot.file
       Must have target.locale, pot.file, po.file set before calling -->
  <target name="create.po" unless="${po.file}.present">
    <echo message="Creating ${po.file}"/>
    <exec executable="${basedir}/${gnugettext.msginit}" failonerror="true">
      <arg value="-i${pot.file}"/>
      <arg value="-l${target.locale}"/>
      <arg value="--no-translator"/> <!-- don't attempt to guess the translations -->
      <arg value="-o${po.file}"/>
    </exec>
  </target>

  <!-- Merges po.file with the updated pot.file
       Must have target.locale, pot.file, po.file set before calling -->
  <target name="merge.po" if="${po.file}.present">
    <echo message="Updating ${po.file}"/>
    <exec executable="${basedir}\${gnugettext.msgmerge}" failonerror="true">
      <arg value="-U"/> <!-- update mode -->
      <arg value="-N"/> <!-- don't attempt to guess the translations using fuzzy matching -->
      <arg value="${po.file}"/>
      <arg value="${pot.file}"/>
    </exec>
  </target>

  <!-- Building MO Files -->

  <target name="build.mo" depends="build.mo.java" description="Builds machine-readable files from the PO files">
    <mkdir dir="${build.mo.dir}"/> <!-- this directory needs to exist for mo file generation -->
  </target>

  <target name="build.mo.java" description="Builds resource bundles for Java modules">
    <echo message="Building content MO files for Java apps"/>
    <antcall target="build.mo.worker">
      <param name="target.name" value="build.module.locale.mo"/>
      <param name="po.dir" value="${l10n.config.content.dir}"/>
    </antcall>

    <echo message="Building Java modules' MO files"/>
    <antcall target="build.mo.worker">
      <param name="target.name" value="build.module.locale.mo"/>
      <param name="po.dir" value="${l10n.config.java.dir}"/>
    </antcall>
  </target>

  <!-- Calls build.module.po for all files in pot.dir
       Must have target.name, po.dir set before calling -->
  <target name="build.mo.worker">
    <ac:foreach list="${supported.locales}" delimiter=" " target="build.locale.mo" param="target.locale" inheritAll="true"/>
  </target>

  <!-- Creates a MO file for module.pot
       Must have target.name, target.locale, po.dir set before calling -->
  <target name="build.locale.mo">
    <echo message="Building resources for ${target.locale}"/>
    <ac:foreach param="resource.name" inheritall="true" target="${target.name}">
      <path>
        <fileset dir="${po.dir}/${target.locale}">
          <filename name="**/*" />
        </fileset>
      </path>
    </ac:foreach>
  </target>

  <property name="find.module.name.regex" value="\.[a-z][a-z](_[A-Z][A-Z]){0,1}\.po"/>

  <!-- Generates a MO file based on a PO file.
       Must have target.locale, resource.name, po.dir set before calling -->
  <target name="build.module.locale.mo">
    <basename property="pofilename" file="${resource.name}" />
    <ac:propertyregex property="module.name" input="${pofilename}" regexp="${find.module.name.regex}" replace=""/>
    <echo message="Creating MO file for ${pofilename} in ${build.mo.dir}/${module.name}.mo" />

    <!-- a place for temporary files -->
    <property name="temp.dir" value="${build.mo.dir}/temp"/>
    <mkdir dir="${temp.dir}"/>

    <!-- output directory -->
    <property name="out.dir" value="${build.mo.dir}/${target.locale}/LC_MESSAGES"/>
    <mkdir dir="${out.dir}"/>

    <exec executable="${basedir}\${gnugettext.msgfmt}" failonerror="true" newenvironment="true">
      <!-- Use ../bin as well, in case java.home is a JRE installed under a JDK -->
      <env key="PATH" path="${java.home}/bin:${java.home}/../bin"/>
      <!-- Tell msgfmt where to put its temporary directories so we can clean them up (since it doesn't) -->
      <env key="TMPDIR" file="${temp.dir}"/>
      <arg value="${po.dir}/${target.locale}/${pofilename}"/> <!-- Source PO file-->
      <arg value="-o${out.dir}/${module.name}.mo"/> <!-- location/name of the generated file -->
    </exec>

    <!-- nuke temp files -->
    <delete dir="${temp.dir}" />
  </target>

</project>