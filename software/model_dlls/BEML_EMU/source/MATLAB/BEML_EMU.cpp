/*
 * BEML_EMU.cpp
 *
 * Code generation for model "BEML_EMU".
 *
 * Model version              : 1.1244
 * Simulink Coder version : 9.2 (R2019b) 18-Jul-2019
 *
 * Target selection: grt.tlc
 * Note: GRT includes extra infrastructure and instrumentation for prototyping
 * Embedded hardware selection: 32-bit Generic
 * Code generation objectives: Unspecified
 * Validation result: Not run
 */

#include "BEML_EMU_capi.h"
#include "BEML_EMU.h"
#include "BEML_EMU_private.h"
#include "LookUp_real_T_real_T.h"
#include "look1_binlcapw.h"
#include "look1_binlcpw.h"
#include "rt_nrand_Upu32_Yd_f_pw_snf.h"

/* Named constants for Chart: '<S448>/IRQRequestStateMachine' */
const uint8_T BEML_EMU_IN_ApplyFault = 1U;
const uint8_T BEML_EMU_IN_ChangeIOControlState = 1U;
const uint8_T BEML_EMU_IN_FaultStateSet = 1U;
const uint8_T BEML_EMU_IN_Idle = 2U;
const uint8_T BEML_EMU_IN_NO_ACTIVE_CHILD = 0U;
const uint8_T BEML_EMU_IN_RemovingFault = 2U;
const uint8_T BEML_EMU_IN_SetFaultState = 2U;

/* Named constants for Chart: '<S426>/Chart' */
const uint8_T BEML_EMU_IN_ApplyFault_i = 1U;
const uint8_T BEML_EMU_IN_ChangeIOControlState_d = 1U;
const uint8_T BEML_EMU_IN_FaultStateSet_d = 1U;
const uint8_T BEML_EMU_IN_Idle_o = 2U;
const uint8_T BEML_EMU_IN_NO_ACTIVE_CHILD_l = 0U;
const uint8_T BEML_EMU_IN_RemovingFault_a = 2U;
const uint8_T BEML_EMU_IN_SetFaultState_k = 2U;
static void rate_scheduler(RT_MODEL_BEML_EMU_T *const BEML_EMU_M);
const BD_SimIntegration_Cfg_Vehicle BEML_EMU_rtZBD_SimIntegration_Cfg_Vehicle =
  { { false,                           /* Enabled */
    0U,                                /* VehicleID */
    VehicleType_NoVehicleType,         /* Type */
    0.0,                               /* Class */
    0.0,                               /* Orientation */
    0.0,                               /* Length */
    0.0,                               /* Height */
    0.0,                               /* Width */
    0.0,                               /* TareMass */
    0.0,                               /* GrossMass */
    0.0,                               /* LoadingMass */
    0.0,                               /* NumberOfAxles */
    0.0,                               /* NumberOfDrivenAxles */
    0.0,                               /* NumberOfBrakedAxles */
    0.0                                /* WheelDiameter */
  },                                   /* Common */
  { false,                             /* IsFirstVehicle */
    false,                             /* IsLastVehicle */
    { false,                           /* UnitConnection */
      0,                               /* UnitID */
      0.0                              /* VehiclesPerUnit */
    }                                  /* UnitConfig */
  },                                   /* Location */
  { false,                             /* HasCab */
    false,                             /* HasBogie */
    false,                             /* HasMotors */
    false,                             /* HasPneumaticPanto */
    false,                             /* HasElectricPanto */
    false,                             /* HasMainCompressor */
    false,                             /* HasMainReservoir */
    false,                             /* HasPantoReservoir */
    false,                             /* HasBrakeSystem */
    false,                             /* NumberOfDoors */
    0.0,                               /* NumberOfTractionBogies */
    0.0                                /* NumberOfBrakingBogies */
  },                                   /* Equipment */
  { 0.0,                               /* AerodynamicDragCoeff_Front */
    0.0,                               /* AerodynamicDragCoeff_Trail */
    0.0,                               /* BearingFrictionCoeff */
    0.0,                               /* BearingDynamicFrictionCoeff */
    0.0,                               /* LateralFrictionCoeff */
    0.0,                               /* RailStaticFrictionCoeff */
    0.0,                               /* RailDynamicFrictionCoeff */
    0.0,                               /* RailSandedStaticFrictionCoeff */
    0.0,                               /* RailSandedDynamicFrictionCoeff */
    0.0,                               /* SpringRate */
    0.0,                               /* SlackSpringRate */
    0.0,                               /* DampingRate */
    0.0,                               /* SlackDampingRate */
    false,                             /* EnableDampingAdjustmentByMass */
    0.0,                               /* DampingAdjustmentDesignMass */
    0.0,                               /* SlackLength */
    0.0,                               /* DampingLeadIn */
    0.0,                               /* CouplerShockTime */
    DragCalculationMethod_Fundamental, /* DragCalculationMethod */
    { 0.0,                             /* DavisCoeffA1 */
      0.0,                             /* DavisCoeffA2 */
      0.0,                             /* DavisCoeffB1 */
      0.0,                             /* DavisCoeffB2 */
      0.0,                             /* DavisCoeffLeadCarC */
      0.0                              /* DavisCoeffTailCarC */
    },                                 /* DavisCoefficients */
    0.0,                               /* UseSandFrictionCoeffs */
    0.0,                               /* SandStaticFrictionFactor */
    0.0,                               /* SandDynamicFrictionFactor */
    0.0                                /* InitialVelocity */
  },                                   /* Dynamics */
  { BrakeShoeCoefficientCalculationMethod_ConstantBSC,
                                     /* BrakeShoeCoefficientCalculationMethod */
    0.0,                               /* BrakeShoeFrictionCoeff */
    0.0,                               /* BrakeFadeEnable */
    0.0                                /* BrakeTemperatureEnable */
  },                                   /* Brakes */
  { { 0.0,                             /* HasDriverCab */
      0.0,                             /* HasBogie */
      0.0,                             /* HasCompressor */
      0.0,                             /* HasMainReservoir */
      0.0,                             /* HasBrakeSystem */
      0.0                              /* HasPantograph */
    }                                  /* Equipment */
  },                                   /* Pneumatics */
  { false                              /* HasMotors */
  },                                   /* Traction */
  { false,                             /* HasPanto */
    false,                             /* PneumaticsPoweredPanto */
    false                              /* ElectricPoweredPanto */
  },                                   /* Pantograph */
  { 0.0,                               /* isLeft */
    0.0                                /* NumberOfDoors */
  },                                   /* Doors */
  { false,                             /* HasPanto */
    false,                             /* HasCab */
    false,                             /* IsNonCab */
    false,                             /* HasMotor */
    false,                             /* HasMainCompressor */
    false,                             /* HasPantoReservoir */
    false,                             /* IsT1 */
    false,                             /* IsT2 */
    false,                             /* IsT3 */
    false,                             /* IsM1 */
    false,                             /* IsM2 */
    false,                             /* IsM3 */
    false,                             /* IsDM1 */
    false,                             /* IsDM2 */
    false,                             /* IsDM3 */
    false,                             /* UnitConnection */
    0                                  /* UnitID */
  }                                    /* Electrical */
};

/*
 *   This function updates active task flag for each subrate.
 * The function is called at model base rate, hence the
 * generated code self-manages all its subrates.
 */
static void rate_scheduler(RT_MODEL_BEML_EMU_T *const BEML_EMU_M)
{
  /* Compute which subrates run during the next base time step.  Subrates
   * are an integer multiple of the base rate counter.  Therefore, the subtask
   * counter is reset when it reaches its limit (zero means run).
   */
  (BEML_EMU_M->Timing.TaskCounters.TID[1])++;
  if ((BEML_EMU_M->Timing.TaskCounters.TID[1]) > 9) {/* Sample time: [0.01s, 0.0s] */
    BEML_EMU_M->Timing.TaskCounters.TID[1] = 0;
  }

  (BEML_EMU_M->Timing.TaskCounters.TID[2])++;
  if ((BEML_EMU_M->Timing.TaskCounters.TID[2]) > 49) {/* Sample time: [0.05s, 0.0s] */
    BEML_EMU_M->Timing.TaskCounters.TID[2] = 0;
  }

  (BEML_EMU_M->Timing.TaskCounters.TID[3])++;
  if ((BEML_EMU_M->Timing.TaskCounters.TID[3]) > 99) {/* Sample time: [0.1s, 0.0s] */
    BEML_EMU_M->Timing.TaskCounters.TID[3] = 0;
  }

  (BEML_EMU_M->Timing.TaskCounters.TID[4])++;
  if ((BEML_EMU_M->Timing.TaskCounters.TID[4]) > 499) {/* Sample time: [0.5s, 0.0s] */
    BEML_EMU_M->Timing.TaskCounters.TID[4] = 0;
  }
}

/*
 * Output and update for action system:
 *    '<S130>/If Action Subsystem'
 *    '<S130>/If Action Subsystem1'
 *    '<S130>/If Action Subsystem2'
 *    '<S130>/If Action Subsystem4'
 *    '<S130>/If Action Subsystem5'
 *    '<S130>/If Action Subsystem6'
 *    '<S130>/If Action Subsystem7'
 *    '<S130>/If Action Subsystem3'
 */
void BEML_EMUModelClass::BEML_EMU_IfActionSubsystem(real_T rtu_In1, real_T
  *rty_Out1)
{
  /* Inport: '<S132>/In1' */
  *rty_Out1 = rtu_In1;
}

/*
 * Output and update for action system:
 *    '<S23>/NotInATO'
 *    '<S23>/Brake When Close to Stopping Point'
 *    '<S23>/Coasting'
 */
void BEML_EMUModelClass::BEML_EMU_NotInATO(real_T *rty_Out1,
  P_NotInATO_BEML_EMU_T *localP)
{
  /* SignalConversion generated from: '<S39>/Out1' incorporates:
   *  Constant: '<S39>/Constant'
   */
  *rty_Out1 = localP->Constant_Value;
}

/*
 * System initialize for atomic system:
 *    '<S448>/IRQRequestStateMachine'
 *    '<S447>/IRQRequestStateMachine'
 *    '<S446>/IRQRequestStateMachine'
 *    '<S445>/IRQRequestStateMachine'
 *    '<S444>/IRQRequestStateMachine'
 *    '<S443>/IRQRequestStateMachine'
 *    '<S442>/IRQRequestStateMachine'
 *    '<S441>/IRQRequestStateMachine'
 *    '<S440>/IRQRequestStateMachine'
 *    '<S439>/IRQRequestStateMachine'
 *    ...
 */
void BEML_EMUModelClass::BEML_EMU_IRQRequestStateMachine_Init
  (DW_IRQRequestStateMachine_BEML_EMU_T *localDW)
{
  localDW->is_ChangeIOControlState = BEML_EMU_IN_NO_ACTIVE_CHILD;
  localDW->is_ApplyFault = BEML_EMU_IN_NO_ACTIVE_CHILD;
  localDW->is_active_c5_IOStateMachinesLib = 0U;
  localDW->is_c5_IOStateMachinesLib = BEML_EMU_IN_NO_ACTIVE_CHILD;
  localDW->chartAbsoluteTimeCounter = 0;
}

/*
 * Start for atomic system:
 *    '<S448>/IRQRequestStateMachine'
 *    '<S447>/IRQRequestStateMachine'
 *    '<S446>/IRQRequestStateMachine'
 *    '<S445>/IRQRequestStateMachine'
 *    '<S444>/IRQRequestStateMachine'
 *    '<S443>/IRQRequestStateMachine'
 *    '<S442>/IRQRequestStateMachine'
 *    '<S441>/IRQRequestStateMachine'
 *    '<S440>/IRQRequestStateMachine'
 *    '<S439>/IRQRequestStateMachine'
 *    ...
 */
void BEML_EMUModelClass::BEML_EMU_IRQRequestStateMachine_Start
  (B_IRQRequestStateMachine_BEML_EMU_T *localB)
{
  localB->TriggerFaultRequest = false;
  localB->TargetStateValue = 0.0;
}

/*
 * Output and update for atomic system:
 *    '<S448>/IRQRequestStateMachine'
 *    '<S447>/IRQRequestStateMachine'
 *    '<S446>/IRQRequestStateMachine'
 *    '<S445>/IRQRequestStateMachine'
 *    '<S444>/IRQRequestStateMachine'
 *    '<S443>/IRQRequestStateMachine'
 *    '<S442>/IRQRequestStateMachine'
 *    '<S441>/IRQRequestStateMachine'
 *    '<S440>/IRQRequestStateMachine'
 *    '<S439>/IRQRequestStateMachine'
 *    ...
 */
void BEML_EMUModelClass::BEML_EMU_IRQRequestStateMachine(boolean_T
  rtu_FaultApplied, real_T rtu_FaultStateValue, real_T rtu_NormalStateValue,
  real_T rtu_ControlState, B_IRQRequestStateMachine_BEML_EMU_T *localB,
  DW_IRQRequestStateMachine_BEML_EMU_T *localDW,
  P_IRQRequestStateMachine_BEML_EMU_T *localP)
{
  boolean_T ControlsRequestComplete;
  boolean_T ControlsRequestComplete_tmp;
  localDW->chartAbsoluteTimeCounter++;
  ControlsRequestComplete_tmp = !rtu_FaultApplied;
  if ((!ControlsRequestComplete_tmp) || (!localDW->condWasTrueAtLastTimeStep_1))
  {
    localDW->durationLastReferenceTick_1 = localDW->chartAbsoluteTimeCounter;
  }

  localDW->condWasTrueAtLastTimeStep_1 = ControlsRequestComplete_tmp;

  /* Chart: '<S448>/IRQRequestStateMachine' */
  if (localDW->is_active_c5_IOStateMachinesLib == 0U) {
    localDW->chartAbsoluteTimeCounter = 0;
    localDW->is_active_c5_IOStateMachinesLib = 1U;
    localDW->is_c5_IOStateMachinesLib = BEML_EMU_IN_Idle;
    localB->TriggerFaultRequest = false;
    localB->TargetStateValue = rtu_NormalStateValue;
  } else if (localDW->is_c5_IOStateMachinesLib ==
             BEML_EMU_IN_ChangeIOControlState) {
    if ((!ControlsRequestComplete_tmp) || (!localDW->condWasTrueAtLastTimeStep_1))
    {
      localDW->durationLastReferenceTick_1 = localDW->chartAbsoluteTimeCounter;
    }

    localDW->condWasTrueAtLastTimeStep_1 = ControlsRequestComplete_tmp;
    if (10000 < localDW->chartAbsoluteTimeCounter -
        localDW->durationLastReferenceTick_1) {
      localDW->is_ApplyFault = BEML_EMU_IN_NO_ACTIVE_CHILD;
      localDW->is_ChangeIOControlState = BEML_EMU_IN_NO_ACTIVE_CHILD;
      localDW->is_c5_IOStateMachinesLib = BEML_EMU_IN_Idle;
      localB->TriggerFaultRequest = false;
      localB->TargetStateValue = rtu_NormalStateValue;
    } else {
      ControlsRequestComplete = (localB->TargetStateValue == rtu_ControlState);
      if (localDW->is_ChangeIOControlState == BEML_EMU_IN_ApplyFault) {
        if (localDW->is_ApplyFault == BEML_EMU_IN_FaultStateSet) {
          localB->TriggerFaultRequest = false;
          if (ControlsRequestComplete_tmp &&
              (!(localP->IRQRequestStateMachine_ReturnToNormalState != 0.0))) {
            localDW->is_ApplyFault = BEML_EMU_IN_NO_ACTIVE_CHILD;
            localDW->is_ChangeIOControlState = BEML_EMU_IN_NO_ACTIVE_CHILD;
            localDW->is_c5_IOStateMachinesLib = BEML_EMU_IN_Idle;
            localB->TriggerFaultRequest = false;
            localB->TargetStateValue = rtu_NormalStateValue;
          } else if ((!ControlsRequestComplete) &&
                     (localP->IRQRequestStateMachine_TriggerContinously != 0.0))
          {
            localDW->is_ApplyFault = BEML_EMU_IN_SetFaultState;
            localB->TriggerFaultRequest = true;
          } else {
            if (ControlsRequestComplete_tmp &&
                (localP->IRQRequestStateMachine_ReturnToNormalState != 0.0)) {
              localDW->is_ApplyFault = BEML_EMU_IN_NO_ACTIVE_CHILD;
              localDW->is_ChangeIOControlState = BEML_EMU_IN_RemovingFault;
              localB->TriggerFaultRequest = true;
              localB->TargetStateValue = rtu_NormalStateValue;
            }
          }
        } else {
          /* case IN_SetFaultState: */
          localB->TriggerFaultRequest = true;
          if (ControlsRequestComplete) {
            localDW->is_ApplyFault = BEML_EMU_IN_FaultStateSet;
            localB->TriggerFaultRequest = false;
          }
        }
      } else {
        /* case IN_RemovingFault: */
        localB->TriggerFaultRequest = true;
        if (rtu_FaultApplied) {
          localDW->is_ChangeIOControlState = BEML_EMU_IN_ApplyFault;
          localB->TargetStateValue = rtu_FaultStateValue;
          localDW->is_ApplyFault = BEML_EMU_IN_SetFaultState;
          localB->TriggerFaultRequest = true;
        } else {
          if (ControlsRequestComplete) {
            localDW->is_ChangeIOControlState = BEML_EMU_IN_NO_ACTIVE_CHILD;
            localDW->is_c5_IOStateMachinesLib = BEML_EMU_IN_Idle;
            localB->TriggerFaultRequest = false;
            localB->TargetStateValue = rtu_NormalStateValue;
          }
        }
      }
    }
  } else {
    /* case IN_Idle: */
    localB->TriggerFaultRequest = false;
    if (rtu_FaultApplied) {
      localDW->durationLastReferenceTick_1 = localDW->chartAbsoluteTimeCounter;
      localDW->is_c5_IOStateMachinesLib = BEML_EMU_IN_ChangeIOControlState;
      localDW->condWasTrueAtLastTimeStep_1 = false;
      localDW->is_ChangeIOControlState = BEML_EMU_IN_ApplyFault;
      localB->TargetStateValue = rtu_FaultStateValue;
      localDW->is_ApplyFault = BEML_EMU_IN_SetFaultState;
      localB->TriggerFaultRequest = true;
    }
  }

  /* End of Chart: '<S448>/IRQRequestStateMachine' */
}

/*
 * System initialize for enable system:
 *    '<S426>/ControlStateRequest'
 *    '<S425>/ControlStateRequest'
 *    '<S424>/ControlStateRequest'
 *    '<S423>/ControlStateRequest'
 */
void BEML_EMUModelClass::BEML_EMU_ControlStateRequest_Init
  (B_ControlStateRequest_BEML_EMU_T *localB, DW_ControlStateRequest_BEML_EMU_T
   *localDW, P_ControlStateRequest_BEML_EMU_T *localP)
{
  /* InitializeConditions for DiscreteIntegrator: '<S482>/Discrete-Time Integrator' */
  localDW->DiscreteTimeIntegrator_DSTATE = localP->DiscreteTimeIntegrator_IC;

  /* SystemInitialize for Outport: '<S478>/ControlStateRq' */
  localB->Switch1 = localP->ControlStateRq_Y0;

  /* SystemInitialize for Outport: '<S478>/Complete' */
  localB->RelationalOperator = localP->Complete_Y0;
}

/*
 * System reset for enable system:
 *    '<S426>/ControlStateRequest'
 *    '<S425>/ControlStateRequest'
 *    '<S424>/ControlStateRequest'
 *    '<S423>/ControlStateRequest'
 */
void BEML_EMUModelClass::BEML_EMU_ControlStateRequest_Reset
  (DW_ControlStateRequest_BEML_EMU_T *localDW, P_ControlStateRequest_BEML_EMU_T *
   localP)
{
  /* InitializeConditions for DiscreteIntegrator: '<S482>/Discrete-Time Integrator' */
  localDW->DiscreteTimeIntegrator_DSTATE = localP->DiscreteTimeIntegrator_IC;
}

/*
 * Disable for enable system:
 *    '<S426>/ControlStateRequest'
 *    '<S425>/ControlStateRequest'
 *    '<S424>/ControlStateRequest'
 *    '<S423>/ControlStateRequest'
 */
void BEML_EMUModelClass::BEML_EMU_ControlStateRequest_Disable
  (DW_ControlStateRequest_BEML_EMU_T *localDW)
{
  localDW->ControlStateRequest_MODE = false;
}

/*
 * Start for enable system:
 *    '<S426>/ControlStateRequest'
 *    '<S425>/ControlStateRequest'
 *    '<S424>/ControlStateRequest'
 *    '<S423>/ControlStateRequest'
 */
void BEML_EMUModelClass::BEML_EMU_ControlStateRequest_Start
  (B_ControlStateRequest_BEML_EMU_T *localB, DW_ControlStateRequest_BEML_EMU_T
   *localDW)
{
  localDW->DiscreteTimeIntegrator_DSTATE = 0.0;
  localB->RelationalOperator = false;
  localB->Switch1 = 0.0;
}

/*
 * Output and update for enable system:
 *    '<S426>/ControlStateRequest'
 *    '<S425>/ControlStateRequest'
 *    '<S424>/ControlStateRequest'
 *    '<S423>/ControlStateRequest'
 */
void BEML_EMUModelClass::BEML_EMU_ControlStateRequest(boolean_T rtu_Enable,
  real_T rtu_TargetState, real_T rtu_ControlState,
  B_ControlStateRequest_BEML_EMU_T *localB, DW_ControlStateRequest_BEML_EMU_T
  *localDW, P_ControlStateRequest_BEML_EMU_T *localP, real_T rtp_ControlType)
{
  real_T rtb_PulseGenerator;
  real_T ratio;
  uint32_T numCycles;
  int16_T rtb_DataTypeConversion1_e;
  int16_T rtb_DataTypeConversion2_oy;

  /* Outputs for Enabled SubSystem: '<S426>/ControlStateRequest' incorporates:
   *  EnablePort: '<S478>/Enable'
   */
  if (rtu_Enable) {
    if (!localDW->ControlStateRequest_MODE) {
      BEML_EMU_ControlStateRequest_Reset(localDW, localP);
      localDW->ControlStateRequest_MODE = true;
    }

    /* DiscretePulseGenerator: '<S482>/Pulse Generator' incorporates:
     *  DiscreteIntegrator: '<S482>/Discrete-Time Integrator'
     */
    if (localDW->DiscreteTimeIntegrator_DSTATE >=
        localP->PulseGenerator_PhaseDelay) {
      rtb_PulseGenerator = localDW->DiscreteTimeIntegrator_DSTATE -
        localP->PulseGenerator_PhaseDelay;
      ratio = rtb_PulseGenerator / localP->PulseGenerator_Period;
      numCycles = static_cast<uint32_T>(floor(ratio));
      if (fabs(static_cast<real_T>((numCycles + 1U)) - ratio) < DBL_EPSILON *
          ratio) {
        numCycles++;
      }

      if (rtb_PulseGenerator < localP->PulseGenerator_Duty / 100.0 *
          localP->PulseGenerator_Period + localP->PulseGenerator_Period *
          static_cast<real_T>(numCycles)) {
        rtb_PulseGenerator = localP->PulseGenerator_Amp;
      } else {
        rtb_PulseGenerator = 0.0;
      }
    } else {
      rtb_PulseGenerator = 0.0;
    }

    /* End of DiscretePulseGenerator: '<S482>/Pulse Generator' */

    /* DataTypeConversion: '<S478>/Data Type Conversion1' */
    ratio = floor(rtu_TargetState);
    if (rtIsNaN(ratio) || rtIsInf(ratio)) {
      ratio = 0.0;
    } else {
      ratio = fmod(ratio, 65536.0);
    }

    rtb_DataTypeConversion1_e = static_cast<int16_T>((ratio < 0.0 ?
      static_cast<int32_T>(static_cast<int16_T>(-static_cast<int16_T>(
      static_cast<uint16_T>(-ratio)))) : static_cast<int32_T>
      (static_cast<int16_T>(static_cast<uint16_T>(ratio)))));

    /* End of DataTypeConversion: '<S478>/Data Type Conversion1' */

    /* DataTypeConversion: '<S478>/Data Type Conversion2' */
    ratio = floor(rtu_ControlState);
    if (rtIsNaN(ratio) || rtIsInf(ratio)) {
      ratio = 0.0;
    } else {
      ratio = fmod(ratio, 65536.0);
    }

    rtb_DataTypeConversion2_oy = static_cast<int16_T>((ratio < 0.0 ?
      static_cast<int32_T>(static_cast<int16_T>(-static_cast<int16_T>(
      static_cast<uint16_T>(-ratio)))) : static_cast<int32_T>
      (static_cast<int16_T>(static_cast<uint16_T>(ratio)))));

    /* End of DataTypeConversion: '<S478>/Data Type Conversion2' */

    /* RelationalOperator: '<S478>/Relational Operator' */
    localB->RelationalOperator = (rtb_DataTypeConversion1_e ==
      rtb_DataTypeConversion2_oy);

    /* Switch: '<S478>/Switch1' incorporates:
     *  Constant: '<S478>/Constant'
     *  Constant: '<S480>/Constant'
     *  Constant: '<S481>/Constant'
     *  RelationalOperator: '<S480>/Compare'
     *  RelationalOperator: '<S481>/Compare'
     *  Switch: '<S478>/Switch'
     */
    if (rtp_ControlType == localP->Momentary_const) {
      localB->Switch1 = rtu_TargetState;
    } else if (rtp_ControlType == localP->Increment_const) {
      /* Sum: '<S478>/Sum' */
      rtb_DataTypeConversion1_e = static_cast<int16_T>
        ((rtb_DataTypeConversion1_e - rtb_DataTypeConversion2_oy));

      /* Signum: '<S478>/Sign' */
      if (rtb_DataTypeConversion1_e < 0) {
        rtb_DataTypeConversion1_e = -1;
      } else {
        rtb_DataTypeConversion1_e = (rtb_DataTypeConversion1_e > 0);
      }

      /* Switch: '<S478>/Switch' incorporates:
       *  DataTypeConversion: '<S478>/Data Type Conversion5'
       *  Product: '<S478>/Product1'
       */
      localB->Switch1 = rtb_PulseGenerator * static_cast<real_T>
        (rtb_DataTypeConversion1_e);
    } else {
      /* Sum: '<S478>/Sum' */
      rtb_DataTypeConversion1_e = static_cast<int16_T>
        ((rtb_DataTypeConversion1_e - rtb_DataTypeConversion2_oy));

      /* Signum: '<S478>/Sign' */
      if (rtb_DataTypeConversion1_e < 0) {
        rtb_DataTypeConversion1_e = -1;
      } else {
        rtb_DataTypeConversion1_e = (rtb_DataTypeConversion1_e > 0);
      }

      /* Switch: '<S478>/Switch' incorporates:
       *  Abs: '<S478>/Abs'
       *  DataTypeConversion: '<S478>/Data Type Conversion5'
       *  Product: '<S478>/Product1'
       */
      localB->Switch1 = fabs(rtb_PulseGenerator * static_cast<real_T>
        (rtb_DataTypeConversion1_e));
    }

    /* End of Switch: '<S478>/Switch1' */

    /* Update for DiscreteIntegrator: '<S482>/Discrete-Time Integrator' incorporates:
     *  SampleTimeMath: '<S482>/Weighted Sample Time'
     *
     * About '<S482>/Weighted Sample Time':
     *  y = K where K = ( w * Ts )
     */
    localDW->DiscreteTimeIntegrator_DSTATE +=
      localP->DiscreteTimeIntegrator_gainval * localP->WeightedSampleTime_WtEt;
  } else {
    if (localDW->ControlStateRequest_MODE) {
      BEML_EMU_ControlStateRequest_Disable(localDW);
    }
  }

  /* End of Outputs for SubSystem: '<S426>/ControlStateRequest' */
}

/*
 * System initialize for atomic system:
 *    '<S426>/Chart'
 *    '<S425>/Chart'
 *    '<S424>/Chart'
 *    '<S423>/Chart'
 */
void BEML_EMUModelClass::BEML_EMU_Chart_Init(DW_Chart_BEML_EMU_T *localDW)
{
  localDW->is_ChangeIOControlState = BEML_EMU_IN_NO_ACTIVE_CHILD_l;
  localDW->is_ApplyFault = BEML_EMU_IN_NO_ACTIVE_CHILD_l;
  localDW->is_active_c3_IOStateMachinesLib = 0U;
  localDW->is_c3_IOStateMachinesLib = BEML_EMU_IN_NO_ACTIVE_CHILD_l;
}

/*
 * Start for atomic system:
 *    '<S426>/Chart'
 *    '<S425>/Chart'
 *    '<S424>/Chart'
 *    '<S423>/Chart'
 */
void BEML_EMUModelClass::BEML_EMU_Chart_Start(B_Chart_BEML_EMU_T *localB)
{
  localB->TriggerFaultRequest = false;
  localB->UseFaultedTarget = false;
}

/*
 * Output and update for atomic system:
 *    '<S426>/Chart'
 *    '<S425>/Chart'
 *    '<S424>/Chart'
 *    '<S423>/Chart'
 */
void BEML_EMUModelClass::BEML_EMU_Chart(boolean_T rtu_FaultApplied, boolean_T
  rtu_ControlsRequestComplete, B_Chart_BEML_EMU_T *localB, DW_Chart_BEML_EMU_T
  *localDW, P_Chart_BEML_EMU_T *localP)
{
  /* Chart: '<S426>/Chart' */
  if (localDW->is_active_c3_IOStateMachinesLib == 0U) {
    localDW->is_active_c3_IOStateMachinesLib = 1U;
    localDW->is_c3_IOStateMachinesLib = BEML_EMU_IN_Idle_o;
    localB->TriggerFaultRequest = false;
    localB->UseFaultedTarget = false;
  } else if (localDW->is_c3_IOStateMachinesLib ==
             BEML_EMU_IN_ChangeIOControlState_d) {
    if (localDW->is_ChangeIOControlState == BEML_EMU_IN_ApplyFault_i) {
      localB->UseFaultedTarget = true;
      if ((!rtu_FaultApplied) && (!(localP->Chart_ReturnToNormalState != 0.0)))
      {
        localDW->is_ApplyFault = BEML_EMU_IN_NO_ACTIVE_CHILD_l;
        localDW->is_ChangeIOControlState = BEML_EMU_IN_NO_ACTIVE_CHILD_l;
        localDW->is_c3_IOStateMachinesLib = BEML_EMU_IN_Idle_o;
        localB->TriggerFaultRequest = false;
        localB->UseFaultedTarget = false;
      } else if (!rtu_FaultApplied) {
        localDW->is_ApplyFault = BEML_EMU_IN_NO_ACTIVE_CHILD_l;
        localDW->is_ChangeIOControlState = BEML_EMU_IN_RemovingFault_a;
        localB->UseFaultedTarget = false;
        localB->TriggerFaultRequest = true;
      } else if (localDW->is_ApplyFault == BEML_EMU_IN_FaultStateSet_d) {
        localB->TriggerFaultRequest = false;
      } else {
        /* case IN_SetFaultState: */
        localB->TriggerFaultRequest = true;
        if (rtu_ControlsRequestComplete) {
          localDW->is_ApplyFault = BEML_EMU_IN_FaultStateSet_d;
          localB->TriggerFaultRequest = false;
        }
      }
    } else {
      /* case IN_RemovingFault: */
      localB->UseFaultedTarget = false;
      localB->TriggerFaultRequest = true;
      if (rtu_FaultApplied) {
        localDW->is_ChangeIOControlState = BEML_EMU_IN_ApplyFault_i;
        localB->UseFaultedTarget = true;
        localDW->is_ApplyFault = BEML_EMU_IN_SetFaultState_k;
        localB->TriggerFaultRequest = true;
      } else {
        if (rtu_ControlsRequestComplete) {
          localDW->is_ChangeIOControlState = BEML_EMU_IN_NO_ACTIVE_CHILD_l;
          localDW->is_c3_IOStateMachinesLib = BEML_EMU_IN_Idle_o;
          localB->TriggerFaultRequest = false;
          localB->UseFaultedTarget = false;
        }
      }
    }
  } else {
    /* case IN_Idle: */
    localB->TriggerFaultRequest = false;
    localB->UseFaultedTarget = false;
    if (rtu_FaultApplied) {
      localDW->is_c3_IOStateMachinesLib = BEML_EMU_IN_ChangeIOControlState_d;
      localDW->is_ChangeIOControlState = BEML_EMU_IN_ApplyFault_i;
      localB->UseFaultedTarget = true;
      localDW->is_ApplyFault = BEML_EMU_IN_SetFaultState_k;
      localB->TriggerFaultRequest = true;
    }
  }

  /* End of Chart: '<S426>/Chart' */
}

/*
 * Output and update for action system:
 *    '<S686>/VehicleEquipment'
 *    '<S686>/VehicleEquipment1'
 *    '<S686>/VehicleEquipment2'
 *    '<S686>/VehicleEquipment3'
 */
void BEML_EMUModelClass::BEML_EMU_VehicleEquipment
  (self_VehicleEquipment_BEML_EMU_T *BEML_EMU_self_arg,
   BD_TractionSystem_Cfg_Vehicle *rty_EquipmentBus, real_T rtp_HasMotors)
{
  P_VehicleEquipment_BEML_EMU_T *localP_0;
  localP_0 = BEML_EMU_self_arg->defaultParam;

  /* BusAssignment: '<S719>/Bus Assignment3' incorporates:
   *  Constant: '<S719>/Constant6'
   *  Constant: '<S719>/HasPantograph'
   *  DataTypeConversion: '<S719>/Data Type Conversion5'
   */
  *rty_EquipmentBus = localP_0->Constant6_Value;
  rty_EquipmentBus->HasMotors = (rtp_HasMotors != 0.0);
}

/*
 * Output and update for action system:
 *    '<S685>/VehicleEquipment'
 *    '<S685>/VehicleEquipment1'
 *    '<S685>/VehicleEquipment2'
 *    '<S685>/VehicleEquipment3'
 */
void BEML_EMUModelClass::BEML_EMU_VehicleEquipment_c
  (self_VehicleEquipment_BEML_EMU_m_T *BEML_EMU_self_arg,
   BD_PneumaticsSystem_Cfg_Vehicle *rty_EquipmentBus, real_T rtp_HasCab, real_T
   rtp_HasBogie, real_T rtp_HasCompressor, real_T rtp_HasMainReservoir, real_T
   rtp_HasBrakeSystem, real_T rtp_HasPantograph)
{
  P_VehicleEquipment_BEML_EMU_b_T *localP_1;
  localP_1 = BEML_EMU_self_arg->defaultParam;

  /* BusAssignment: '<S715>/Bus Assignment3' incorporates:
   *  Constant: '<S715>/Constant6'
   *  Constant: '<S715>/HasCab'
   *  Constant: '<S715>/HasMotors'
   *  Constant: '<S715>/HasPantoReservoir'
   *  Constant: '<S715>/HasPantograph'
   *  Constant: '<S715>/HasSimpleCab'
   *  Constant: '<S715>/HasStaticInverter'
   */
  *rty_EquipmentBus = localP_1->Constant6_Value;
  rty_EquipmentBus->Equipment.HasDriverCab = rtp_HasCab;
  rty_EquipmentBus->Equipment.HasBogie = rtp_HasBogie;
  rty_EquipmentBus->Equipment.HasCompressor = rtp_HasCompressor;
  rty_EquipmentBus->Equipment.HasMainReservoir = rtp_HasMainReservoir;
  rty_EquipmentBus->Equipment.HasBrakeSystem = rtp_HasBrakeSystem;
  rty_EquipmentBus->Equipment.HasPantograph = rtp_HasPantograph;
}

/*
 * Output and update for action system:
 *    '<S684>/VehicleEquipment'
 *    '<S684>/VehicleEquipment1'
 *    '<S684>/VehicleEquipment3'
 *    '<S684>/VehicleEquipment2'
 */
void BEML_EMUModelClass::BEML_EMU_VehicleEquipment_g
  (self_VehicleEquipment_BEML_EMU_p_T *BEML_EMU_self_arg,
   BD_PantographSystem_Cfg_Vehicle *rty_EquipmentBus, real_T rtp_HasPanto,
   real_T rtp_PenumaticsPoweredPanto, real_T rtp_ElectricPoweredPanto)
{
  P_VehicleEquipment_BEML_EMU_e_T *localP_2;
  localP_2 = BEML_EMU_self_arg->defaultParam;

  /* BusAssignment: '<S711>/Bus Assignment3' incorporates:
   *  Constant: '<S711>/Constant6'
   *  Constant: '<S711>/HasCab'
   *  Constant: '<S711>/HasMotors'
   *  Constant: '<S711>/HasPantograph'
   *  DataTypeConversion: '<S711>/Data Type Conversion2'
   *  DataTypeConversion: '<S711>/Data Type Conversion3'
   *  DataTypeConversion: '<S711>/Data Type Conversion5'
   */
  *rty_EquipmentBus = localP_2->Constant6_Value;
  rty_EquipmentBus->HasPanto = (rtp_HasPanto != 0.0);
  rty_EquipmentBus->PneumaticsPoweredPanto = (rtp_PenumaticsPoweredPanto != 0.0);
  rty_EquipmentBus->ElectricPoweredPanto = (rtp_ElectricPoweredPanto != 0.0);
}

/*
 * Output and update for action system:
 *    '<S683>/VehicleEquipment'
 *    '<S683>/VehicleEquipment1'
 *    '<S683>/VehicleEquipment2'
 *    '<S683>/VehicleEquipment3'
 */
void BEML_EMUModelClass::BEML_EMU_VehicleEquipment_o
  (self_VehicleEquipment_BEML_EMU_l_T *BEML_EMU_self_arg,
   BD_SimIntegration_Cfg_Vehicle_Equipment *rty_EquipmentBus, real_T rtp_HasCab,
   real_T rtp_HasBogie, real_T rtp_HasMotors, real_T rtp_HasPneumaticPanto,
   real_T rtp_HasElectricPanto, real_T rtp_HasMainCompressor, real_T
   rtp_HasMainReservoir, real_T rtp_HasPantoReservoir, real_T rtp_HasBrakeSystem,
   real_T rtp_NumberOfDoors, real_T rtp_NumberOfTractionBogies, real_T
   rtp_NumberOfBrakingBogies)
{
  P_VehicleEquipment_BEML_EMU_n_T *localP_3;
  localP_3 = BEML_EMU_self_arg->defaultParam;

  /* BusAssignment: '<S707>/Bus Assignment3' incorporates:
   *  Constant: '<S707>/Constant6'
   *  Constant: '<S707>/HasCab'
   *  Constant: '<S707>/HasMotors'
   *  Constant: '<S707>/HasPantoReservoir'
   *  Constant: '<S707>/HasPantoReservoir1'
   *  Constant: '<S707>/HasPantoReservoir2'
   *  Constant: '<S707>/HasPantoReservoir3'
   *  Constant: '<S707>/HasPantoReservoir4'
   *  Constant: '<S707>/HasPantograph'
   *  Constant: '<S707>/HasPantograph1'
   *  Constant: '<S707>/HasSimpleCab'
   *  Constant: '<S707>/HasSimpleCab1'
   *  Constant: '<S707>/HasStaticInverter'
   *  DataTypeConversion: '<S707>/Data Type Conversion1'
   *  DataTypeConversion: '<S707>/Data Type Conversion12'
   *  DataTypeConversion: '<S707>/Data Type Conversion2'
   *  DataTypeConversion: '<S707>/Data Type Conversion3'
   *  DataTypeConversion: '<S707>/Data Type Conversion4'
   *  DataTypeConversion: '<S707>/Data Type Conversion5'
   *  DataTypeConversion: '<S707>/Data Type Conversion6'
   *  DataTypeConversion: '<S707>/Data Type Conversion7'
   *  DataTypeConversion: '<S707>/Data Type Conversion8'
   *  DataTypeConversion: '<S707>/Data Type Conversion9'
   */
  *rty_EquipmentBus = localP_3->Constant6_Value;
  rty_EquipmentBus->HasCab = (rtp_HasCab != 0.0);
  rty_EquipmentBus->HasBogie = (rtp_HasBogie != 0.0);
  rty_EquipmentBus->HasMotors = (rtp_HasMotors != 0.0);
  rty_EquipmentBus->HasPneumaticPanto = (rtp_HasPneumaticPanto != 0.0);
  rty_EquipmentBus->HasElectricPanto = (rtp_HasElectricPanto != 0.0);
  rty_EquipmentBus->HasMainCompressor = (rtp_HasMainCompressor != 0.0);
  rty_EquipmentBus->HasMainReservoir = (rtp_HasMainReservoir != 0.0);
  rty_EquipmentBus->HasPantoReservoir = (rtp_HasPantoReservoir != 0.0);
  rty_EquipmentBus->HasBrakeSystem = (rtp_HasBrakeSystem != 0.0);
  rty_EquipmentBus->NumberOfDoors = (rtp_NumberOfDoors != 0.0);
  rty_EquipmentBus->NumberOfTractionBogies = rtp_NumberOfTractionBogies;
  rty_EquipmentBus->NumberOfBrakingBogies = rtp_NumberOfBrakingBogies;
}

/*
 * Output and update for action system:
 *    '<S681>/VehicleEquipment4'
 *    '<S681>/VehicleEquipment1'
 *    '<S681>/VehicleEquipment2'
 *    '<S681>/VehicleEquipment3'
 */
void BEML_EMUModelClass::BEML_EMU_VehicleEquipment4
  (self_VehicleEquipment4_BEML_EMU_T *BEML_EMU_self_arg, BD_DoorSystem_Cfg_Door *
   rty_EquipmentBus, real_T rtp_IsLeft, real_T rtp_NumberOfDoors)
{
  P_VehicleEquipment4_BEML_EMU_T *localP_4;
  localP_4 = BEML_EMU_self_arg->defaultParam;

  /* BusAssignment: '<S693>/Bus Assignment3' incorporates:
   *  Constant: '<S693>/Constant6'
   *  Constant: '<S693>/HasCab'
   *  Constant: '<S693>/HasMotors'
   */
  *rty_EquipmentBus = localP_4->Constant6_Value;
  rty_EquipmentBus->isLeft = rtp_IsLeft;
  rty_EquipmentBus->NumberOfDoors = rtp_NumberOfDoors;
}

/*
 * System initialize for atomic system:
 *    '<S782>/Jolt Duration'
 *    '<S781>/Jolt Duration'
 *    '<S780>/Jolt Duration'
 *    '<S779>/Jolt Duration'
 */
void BEML_EMUModelClass::BEML_EMU_JoltDuration_Init(DW_JoltDuration_BEML_EMU_T
  *localDW)
{
  /* InitializeConditions for DiscreteIntegrator: '<S793>/Discrete-Time Integrator' */
  localDW->DiscreteTimeIntegrator_IC_LOADING = 1U;
  localDW->DiscreteTimeIntegrator_PrevResetState = 0;
}

/*
 * Start for atomic system:
 *    '<S782>/Jolt Duration'
 *    '<S781>/Jolt Duration'
 *    '<S780>/Jolt Duration'
 *    '<S779>/Jolt Duration'
 */
void BEML_EMUModelClass::BEML_EMU_JoltDuration_Start(B_JoltDuration_BEML_EMU_T
  *localB, DW_JoltDuration_BEML_EMU_T *localDW)
{
  localDW->DiscreteTimeIntegrator_DSTATE = 0.0;
  localB->LogicalOperator1 = false;

  /* Start for InitialCondition: '<S793>/IC' */
  localDW->IC_FirstOutputTime = true;
}

/*
 * Output and update for atomic system:
 *    '<S782>/Jolt Duration'
 *    '<S781>/Jolt Duration'
 *    '<S780>/Jolt Duration'
 *    '<S779>/Jolt Duration'
 */
void BEML_EMUModelClass::BEML_EMU_JoltDuration(boolean_T rtu_In,
  B_JoltDuration_BEML_EMU_T *localB, DW_JoltDuration_BEML_EMU_T *localDW,
  P_JoltDuration_BEML_EMU_T *localP)
{
  real_T rtb_DiscreteTimeIntegrator_o2;
  real_T DiscreteTimeIntegrator_o1;

  /* InitialCondition: '<S793>/IC' incorporates:
   *  Constant: '<S793>/Initialise'
   */
  if (localDW->IC_FirstOutputTime) {
    localDW->IC_FirstOutputTime = false;
    rtb_DiscreteTimeIntegrator_o2 = localP->IC_Value;
  } else {
    rtb_DiscreteTimeIntegrator_o2 = localP->Initialise_Value;
  }

  /* End of InitialCondition: '<S793>/IC' */

  /* Switch: '<S793>/Switch2' incorporates:
   *  Constant: '<S793>/Initialise'
   *  Constant: '<S793>/OffTime'
   */
  if (rtb_DiscreteTimeIntegrator_o2 != 0.0) {
    rtb_DiscreteTimeIntegrator_o2 = localP->Initialise_Value;
  } else {
    rtb_DiscreteTimeIntegrator_o2 = localP->OffTime_Value;
  }

  /* End of Switch: '<S793>/Switch2' */

  /* DiscreteIntegrator: '<S793>/Discrete-Time Integrator' incorporates:
   *  DataTypeConversion: '<S793>/Data Type Conversion'
   *  Gain: '<S793>/Gain'
   *  Logic: '<S793>/Logical Operator'
   */
  if (localDW->DiscreteTimeIntegrator_IC_LOADING != 0) {
    localDW->DiscreteTimeIntegrator_DSTATE = rtb_DiscreteTimeIntegrator_o2;
    if (localDW->DiscreteTimeIntegrator_DSTATE >=
        localP->DiscreteTimeIntegrator_UpperSat) {
      localDW->DiscreteTimeIntegrator_DSTATE =
        localP->DiscreteTimeIntegrator_UpperSat;
    } else {
      if (localDW->DiscreteTimeIntegrator_DSTATE <=
          localP->DiscreteTimeIntegrator_LowerSat) {
        localDW->DiscreteTimeIntegrator_DSTATE =
          localP->DiscreteTimeIntegrator_LowerSat;
      }
    }
  }

  if (rtu_In || (localDW->DiscreteTimeIntegrator_PrevResetState != 0)) {
    localDW->DiscreteTimeIntegrator_DSTATE = rtb_DiscreteTimeIntegrator_o2;
    if (localDW->DiscreteTimeIntegrator_DSTATE >=
        localP->DiscreteTimeIntegrator_UpperSat) {
      localDW->DiscreteTimeIntegrator_DSTATE =
        localP->DiscreteTimeIntegrator_UpperSat;
    } else {
      if (localDW->DiscreteTimeIntegrator_DSTATE <=
          localP->DiscreteTimeIntegrator_LowerSat) {
        localDW->DiscreteTimeIntegrator_DSTATE =
          localP->DiscreteTimeIntegrator_LowerSat;
      }
    }
  }

  DiscreteTimeIntegrator_o1 = localP->Gain_Gain * static_cast<real_T>(!rtu_In) *
    localP->DiscreteTimeIntegrator_gainval +
    localDW->DiscreteTimeIntegrator_DSTATE;
  if (DiscreteTimeIntegrator_o1 >= localP->DiscreteTimeIntegrator_UpperSat) {
    DiscreteTimeIntegrator_o1 = localP->DiscreteTimeIntegrator_UpperSat;
    rtb_DiscreteTimeIntegrator_o2 = 1.0;
  } else if (DiscreteTimeIntegrator_o1 <=
             localP->DiscreteTimeIntegrator_LowerSat) {
    DiscreteTimeIntegrator_o1 = localP->DiscreteTimeIntegrator_LowerSat;
    rtb_DiscreteTimeIntegrator_o2 = -1.0;
  } else {
    rtb_DiscreteTimeIntegrator_o2 = 0.0;
  }

  /* End of DiscreteIntegrator: '<S793>/Discrete-Time Integrator' */

  /* Logic: '<S793>/Logical Operator1' incorporates:
   *  Constant: '<S794>/Constant'
   *  RelationalOperator: '<S794>/Compare'
   */
  localB->LogicalOperator1 = ((rtb_DiscreteTimeIntegrator_o2 >=
    localP->Constant_Value) || rtu_In);

  /* Update for DiscreteIntegrator: '<S793>/Discrete-Time Integrator' */
  localDW->DiscreteTimeIntegrator_IC_LOADING = 0U;
  localDW->DiscreteTimeIntegrator_DSTATE = DiscreteTimeIntegrator_o1;
  localDW->DiscreteTimeIntegrator_PrevResetState = static_cast<int8_T>(rtu_In);
}

/* Model step function */
void BEML_EMUModelClass::step()
{
  /* local block i/o variables */
  BD_MotionBase_In_Vehicle rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0;
  real_T rtb_DataTypeConversion7;
  real_T rtb_DataTypeConversion7_a;
  real_T rtb_DataTypeConversion7_d;
  real_T rtb_DataTypeConversion7_dv;
  real_T rtb_DataTypeConversion7_e;
  real_T rtb_DataTypeConversion7_l;
  real_T rtb_DataTypeConversion7_h;
  real_T rtb_DataTypeConversion7_ae;
  real_T rtb_DataTypeConversion7_m;
  real_T rtb_DataTypeConversion7_ac;
  real_T rtb_DataTypeConversion7_k;
  real_T rtb_DataTypeConversion7_kp;
  real_T rtb_DataTypeConversion7_c;
  real_T rtb_DataTypeConversion7_n;
  real_T rtb_DataTypeConversion7_k3;
  real_T rtb_DataTypeConversion7_cp;
  real_T rtb_DataTypeConversion7_dh;
  real_T rtb_DataTypeConversion7_kv;
  real_T rtb_DataTypeConversion7_j;
  real_T rtb_DataTypeConversion7_hx;
  real_T rtb_DataTypeConversion7_jq;
  real_T rtb_DataTypeConversion7_nv;
  real_T rtb_DataTypeConversion7_et;
  real_T rtb_DataTypeConversion7_j5;
  real_T rtb_VectorConcatenate[2];
  real_T rtb_LookupTableDynamic;
  real_T rtb_VectorConcatenate_d[2];
  real_T rtb_LookupTableDynamic_e;
  real_T rtb_Abs_aar;
  real_T rtb_Abs_g1;
  boolean_T rtb_FixPtRelationalOperator;
  boolean_T rtb_FixPtRelationalOperator_d;
  boolean_T rtb_FixPtRelationalOperator_n;
  boolean_T rtb_FixPtRelationalOperator_o;
  boolean_T rtb_LogicalOperator1;
  boolean_T rtb_DataTypeConversion_gb;
  boolean_T rtb_DataTypeConversion1_j;
  boolean_T rtb_DataTypeConversion2_n;
  boolean_T rtb_DataTypeConversion3_o;
  boolean_T rtb_DataTypeConversion7_ls;
  boolean_T rtb_DataTypeConversion9;
  boolean_T rtb_DataTypeConversion12_i;
  boolean_T rtb_DataTypeConversion14;
  boolean_T rtb_DataTypeConversion16_h;
  boolean_T rtb_DataTypeConversion18_o;
  boolean_T rtb_DataTypeConversion20;
  boolean_T rtb_DataTypeConversion22;
  boolean_T rtb_DataTypeConversion24;
  boolean_T rtb_DataTypeConversion26;
  boolean_T rtb_DataTypeConversion28;
  boolean_T rtb_DataTypeConversion30;
  boolean_T rtb_DataTypeConversion32;
  boolean_T rtb_DataTypeConversion34;
  boolean_T rtb_DataTypeConversion36;
  boolean_T rtb_DataTypeConversion38;
  boolean_T rtb_DataTypeConversion40;
  boolean_T rtb_DataTypeConversion42;
  real_T rtb_Merge;
  real_T rtb_ATOTBDemand;
  BD_IOControls_Out_Vehicle_InputStates
    rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0;
  BD_PneumaticsSystem_Cfg_Vehicle rtb_Merge1;
  BD_PantographSystem_In_Vehicle
    rtb_ImpAsg_InsertedFor_PantographVehicleInput_at_inport_0[8];
  BD_SimIntegration_Cfg_Vehicle_Equipment rtb_Merge1_h;
  BD_DoorSystem_Cfg_Door rtb_Merge1_a;
  real_T rtb_IOControlsModel_o2;
  real_T rtb_Switch_l;
  real_T rtb_Switch_n;
  real_T rtb_Switch_o;
  real_T rtb_Switch_ow;
  real_T rtb_TmpSignalConversionAtModelInport3[8];
  BD_TractionSystem_Cfg_Vehicle rtb_Merge1_l;
  BD_TCMSSystem_In_Vehicle_Overrides
    rtb_ImpAsg_InsertedFor_Overrides_at_inport_0[8];
  BD_PantographSystem_In_Vehicle_Overrides
    rtb_ImpAsg_InsertedFor_Overrides_at_inport_0_j[8];
  BD_PantographSystem_In_Vehicle_Faults
    rtb_ImpAsg_InsertedFor_PantographFaults_at_inport_0[8];
  BD_PantographSystem_Cfg_Vehicle rtb_Merge1_m;
  BD_ElectricalSystem_In_Overrides
    rtb_ImpAsg_InsertedFor_Overrides_at_inport_0_o[8];
  boolean_T rtb_DataTypeConversion44;
  boolean_T rtb_UnitDelay_g;
  boolean_T rtb_DataTypeConversion46;
  boolean_T rtb_UnitDelay_j;
  boolean_T rtb_DataTypeConversion48;
  boolean_T rtb_UnitDelay_h;
  boolean_T rtb_DataTypeConversion51;
  boolean_T rtb_UnitDelay_i;

  /* local scratch DWork variables */
  int32_T ForEach_itr;
  int32_T ForEach_itr_k;
  int32_T ForEach_itr_oc;
  int32_T ForEach_itr_ae;
  int32_T ForEach_itr_jt;
  int32_T ForEach_itr_ah;
  int32_T ForEach_itr_eh;
  int32_T ForEach_itr_iy;
  int32_T ForEach_itr_as;
  int32_T ForEach_itr_b4;
  int32_T ForEach_itr_jp;
  int32_T ForEach_itr_l;
  int32_T ForEach_itr_hc;
  int32_T ForEach_itr_jn;
  int32_T ForEach_itr_pt;
  int32_T ForEach_itr_ad;
  int32_T ForEach_itr_kg;
  int32_T ForEach_itr_mu;
  int32_T ForEach_itr_jw;
  int32_T ForEach_itr_im;
  int32_T ForEach_itr_ap;
  int32_T ForEach_itr_p;
  int32_T ForEach_itr_b;
  int32_T ForEach_itr_a;
  int32_T ForEach_itr_h;
  int32_T ForEach_itr_m;
  int32_T ForEach_itr_d;
  int32_T ForEach_itr_e;
  int32_T ForEach_itr_j;
  int32_T ForEach_itr_o;
  int32_T ForEach_itr_i;
  int32_T ForEach_itr_f;
  int32_T ForEach_itr_ho;
  int32_T ForEach_itr_c;
  int32_T ForEach_itr_jg;
  int32_T ForEach_itr_od;
  int32_T ForEach_itr_ix;
  int32_T ForEach_itr_mf;
  int32_T ForEach_itr_ok;
  int32_T ForEach_itr_da;
  int32_T ForEach_itr_lw;
  int32_T ForEach_itr_cb;
  int32_T ForEach_itr_g;
  int32_T ForEach_itr_o1;
  int32_T ForEach_itr_hg;
  int32_T ForEach_itr_ag;
  int32_T ForEach_itr_ia;
  int32_T ForEach_itr_de;
  int32_T ForEach_itr_pi;
  int32_T ForEach_itr_n;
  int32_T ForEach_itr_gr;
  int32_T ForEach_itr_kt;
  int32_T ForEach_itr_be;
  BD_SimIntegration_Out_Vehicle_Audio
    rtb_ImpAsg_InsertedFor_AudioOut_at_inport_0[8];
  BD_SimIntegration_Out_Vehicle_Scoring
    rtb_ImpAsg_InsertedFor_Scoring_at_inport_0[8];
  BD_SimIntegration_Faults_Train rtb_Faults;
  BD_PantographSystem_Out_Vehicle rtb_UnitDelay2[8];
  real_T rtb_ImpAsg_InsertedFor_VehicleTractiveEnergy_at_inport_0[8];
  real_T rtb_Abs1_h[8];
  real_T rtb_DataTypeConversion1_gv;
  real_T rtb_DataTypeConversion_d;
  real_T rtb_ImpAsg_InsertedFor_Out1_at_inport_0_cy[8];
  BD_SimIntegration_Faults_IOControls rtb_IOControlsModelFaults_CoreSubsysCanOut;
  boolean_T rtb_RelationalOperator[21];
  boolean_T rtb_Compare[2];
  boolean_T rtb_CollisionDetected;
  real_T rtb_Switch2_o[3];
  real_T rtb_Switch2_m[3];
  real_T rtb_DeadZone[3];
  real_T rtb_Switch2_ps[3];
  int32_T uElOffset1;
  int32_T ntIdx1;
  int32_T uElOffset0;
  real_T rtb_ImpAsg_InsertedFor_Enable_at_inport_0[8];
  boolean_T rtb_VectorConcatenate_m[10];
  int32_T rtb_VectorConcatenate1[10];
  real_T rtb_ImpAsg_InsertedFor_Class_at_inport_0[8];
  boolean_T rtb_ImpAsg_InsertedFor_DoorsOpen_at_inport_0[16];
  BD_CouplingSystem_In_Vehicle_Coupler_Dynamics
    rtb_ImpAsg_InsertedFor_Out1_at_inport_0[2];
  boolean_T rtb_AND_p;
  real_T rtb_ImpAsg_InsertedFor_Out1_at_inport_0_k[2];
  boolean_T rtb_ImpAsg_InsertedFor_Forward_at_inport_0[2];
  boolean_T rtb_ImpAsg_InsertedFor_Reverse_at_inport_0[2];
  real_T rtb_ImpAsg_InsertedFor_Out1_at_inport_0_e[6];
  BD_TCMSSystem_In_Vehicle_PneumaticsSystem_Bogie
    rtb_ImpAsg_InsertedFor_TCMSBogie_at_inport_0_h[2];
  BD_TCMSSystem_In_Vehicle_DoorSystem_Door
    rtb_ImpAsg_InsertedFor_TCMSDoors_at_inport_0[16];
  BD_TCMSSystem_In_Vehicle_TractionSystem_Bogie
    rtb_ImpAsg_InsertedFor_TCMSBogie_at_inport_0[2];
  real_T rtb_ImpAsg_InsertedFor_signal1_at_inport_0[6];
  real_T rtb_ImpAsg_InsertedFor_MechanicalCouplerState_at_inport_0[2];
  boolean_T rtb_ImpAsg_InsertedFor_RescueModeCondition_at_inport_0[2];
  BD_PneumaticsSystem_In_Vehicle_ElectricalSignals_Bogie
    rtb_ImpAsg_InsertedFor_Out1_at_inport_0_f[2];
  real_T rtb_ImpAsg_InsertedFor_PneumaticallyCoupled_at_inport_0[2];
  BD_DoorSystem_In_Door rtb_ElectricalComputer_k;
  boolean_T rtb_Compare_g42;
  boolean_T rtb_Compare_ja;
  boolean_T rtb_Compare_kq;
  boolean_T rtb_Compare_nsw;
  boolean_T rtb_Compare_nn;
  boolean_T rtb_Compare_pg;
  boolean_T rtb_Compare_or;
  BD_DoorSystem_In_Door rtb_ElectricalComputer_n;
  boolean_T rtb_Compare_mk;
  boolean_T rtb_Compare_ll;
  boolean_T rtb_Compare_gd;
  boolean_T rtb_Compare_eib;
  boolean_T rtb_Compare_ha;
  boolean_T rtb_Compare_j1;
  boolean_T rtb_Compare_lx1;
  boolean_T rtb_Compare_og;
  boolean_T rtb_Compare_nf2;
  boolean_T rtb_Compare_oi;
  boolean_T rtb_Compare_jb;
  boolean_T rtb_Compare_ig;
  boolean_T rtb_Compare_pr;
  boolean_T rtb_Compare_h1i;
  boolean_T rtb_Compare_cy;
  boolean_T rtb_Compare_oj;
  boolean_T rtb_Compare_hg;
  boolean_T rtb_Compare_ec;
  boolean_T rtb_Compare_pw;
  boolean_T rtb_Compare_co;
  boolean_T rtb_Compare_ld;
  boolean_T rtb_Compare_gt;
  boolean_T rtb_Compare_a5;
  boolean_T rtb_Compare_jzm;
  boolean_T rtb_Compare_fig;
  boolean_T rtb_Compare_mn;
  boolean_T rtb_Compare_gni;
  boolean_T rtb_Compare_ev;
  boolean_T rtb_Compare_ky;
  boolean_T rtb_Compare_ej;
  boolean_T rtb_Compare_bd;
  boolean_T rtb_Compare_cv2;
  boolean_T rtb_Compare_b4;
  boolean_T rtb_Compare_d1;
  boolean_T rtb_Compare_l;
  boolean_T rtb_Compare_ef;
  boolean_T rtb_Compare_mq;
  boolean_T rtb_Compare_fz;
  boolean_T rtb_Compare_bw;
  boolean_T rtb_Compare_px;
  boolean_T rtb_Compare_hut;
  boolean_T rtb_Compare_fk;
  boolean_T rtb_Compare_ot;
  boolean_T rtb_Compare_bp;
  boolean_T rtb_Compare_kxn;
  boolean_T rtb_Compare_ds;
  boolean_T rtb_Compare_hcg;
  boolean_T rtb_Compare_h1;
  boolean_T rtb_Compare_mg;
  boolean_T rtb_Compare_j1h;
  boolean_T rtb_Compare_fb;
  boolean_T rtb_Compare_bo;
  boolean_T rtb_Compare_aj;
  boolean_T rtb_Compare_ct;
  boolean_T rtb_Compare_np;
  boolean_T rtb_Compare_dw;
  boolean_T rtb_Compare_ogo;
  boolean_T rtb_Compare_h4;
  boolean_T rtb_Compare_c4;
  boolean_T rtb_Compare_by;
  boolean_T rtb_Compare_ff;
  boolean_T rtb_Compare_pwe;
  boolean_T rtb_Compare_is;
  boolean_T rtb_Compare_bj1;
  boolean_T rtb_Compare_ioy;
  boolean_T rtb_Compare_el;
  boolean_T rtb_Compare_i0r;
  boolean_T rtb_Compare_da;
  boolean_T rtb_Compare_em;
  boolean_T rtb_Compare_nz;
  boolean_T rtb_Compare_mp;
  boolean_T rtb_Compare_a0;
  boolean_T rtb_Compare_j3m;
  boolean_T rtb_Compare_of;
  boolean_T rtb_Compare_jc;
  boolean_T rtb_Compare_mvr;
  boolean_T rtb_Compare_gh;
  boolean_T rtb_Compare_hs;
  boolean_T rtb_Compare_oc;
  boolean_T rtb_Compare_ca;
  boolean_T rtb_Compare_h3;
  boolean_T rtb_Compare_nk;
  boolean_T rtb_Compare_kf;
  boolean_T rtb_Compare_lv;
  boolean_T rtb_Compare_n2g;
  boolean_T rtb_Compare_po;
  boolean_T rtb_Compare_kn;
  boolean_T rtb_Compare_oy;
  boolean_T rtb_Compare_ch;
  boolean_T rtb_Compare_jkj;
  boolean_T rtb_Compare_dnu;
  boolean_T rtb_Compare_prw;
  boolean_T rtb_Compare_aw;
  boolean_T rtb_Compare_e2;
  boolean_T rtb_Compare_gu;
  boolean_T rtb_Compare_kz;
  boolean_T rtb_Compare_od;
  boolean_T rtb_Compare_bdp;
  boolean_T rtb_Compare_fp;
  boolean_T rtb_Compare_lx;
  boolean_T rtb_Compare_hi;
  boolean_T rtb_Compare_eb;
  boolean_T rtb_Compare_bt;
  boolean_T rtb_Compare_oyf;
  boolean_T rtb_Compare_n3;
  boolean_T rtb_Compare_ht;
  boolean_T rtb_Compare_am;
  boolean_T rtb_Compare_ges;
  boolean_T rtb_Compare_hj;
  boolean_T rtb_Compare_hrr;
  boolean_T rtb_Compare_dy;
  boolean_T rtb_Compare_au;
  boolean_T rtb_Compare_nb;
  boolean_T rtb_Compare_mw;
  boolean_T rtb_Compare_i1;
  boolean_T rtb_Compare_hu;
  boolean_T rtb_Compare_cf;
  boolean_T rtb_Compare_eh;
  boolean_T rtb_Compare_eb2;
  boolean_T rtb_Compare_k01;
  real_T rtb_ImpAsg_InsertedFor_WheelSpeed_at_inport_0_c[6];
  BD_TractionSystem_In_Vehicle_ElectricalSystem_Bogie
    rtb_ImpAsg_InsertedFor_BogieSignals_at_inport_0[2];
  BD_TractionSystem_In_Vehicle_TCMS_Bogie
    rtb_ImpAsg_InsertedFor_TractionBogieControl_at_inport_0[2];
  real_T rtb_ImpAsg_InsertedFor_WheelSpeed_at_inport_0[6];
  real_T rtb_ImpAsg_InsertedFor_WheelSlip_at_inport_0[6];
  real_T rtb_ImpAsg_InsertedFor_WheelSlide_at_inport_0[6];
  real_T rtb_ImpAsg_InsertedFor_BrakingForce_at_inport_0[6];
  BD_TrainDynamics_In_Coupler rtb_ImpAsg_InsertedFor_CouplersOut_at_inport_0[2];
  real_T rtb_ImpAsg_InsertedFor_Opening_at_inport_0[16];
  real_T rtb_ImpAsg_InsertedFor_Closing_at_inport_0[16];
  boolean_T rtb_ImpAsg_InsertedFor_OpeningorClosingAlarm_at_inport_0[16];
  real_T rtb_ImpAsg_InsertedFor_EED_EADOperated_at_inport_0[16];
  real_T rtb_ImpAsg_InsertedFor_Out2_at_inport_0[2];
  real_T rtb_ImpAsg_InsertedFor_Out1_at_inport_0_d[2];
  real_T rtb_Switch4_f;
  real_T rtb_Product_cv;
  real_T rtb_Output_i;
  real_T diff;
  real_T ratio;
  uint32_T numCycles;
  boolean_T rtb_ImpAsg_InsertedFor_UnitConn_at_inport_0[8];
  int8_T rtPrevAction;
  int8_T rtAction;
  real_T rtb_ImpAsg_InsertedFor_BCPressures_at_inport_0[6];
  boolean_T rtb_ImpAsg_InsertedFor_Slide_at_inport_0[2];
  real_T rtb_ImpAsg_InsertedFor_ServiceBrakeApplySwitches_at_inport_0[2];
  real_T rtb_ImpAsg_InsertedFor_ParkBrakeApplySwitches_at_inport_0[2];
  real_T rtb_DiscreteTransferFcn_l;
  real_T rtb_Switch_g;
  real_T rtb_Switch_h;
  real_T rtb_Switch_p0;
  BD_SimIntegration_Out_Vehicle_MotionBaseController
    rtb_ImpAsg_InsertedFor_MotionBaseOutputs_at_inport_0[8];
  real_T rtb_PermuteDimensions[9];
  real_T DiscreteTimeIntegrator_nx;
  real_T DiscreteTimeIntegrator_g;
  real_T DiscreteTimeIntegrator_p;
  real_T DiscreteTimeIntegrator_b;
  real_T DiscreteTimeIntegrator_ku;
  real_T DiscreteTimeIntegrator_iy;
  real_T DiscreteTimeIntegrator_nd;
  real_T DiscreteTimeIntegrator_mt;
  real_T DiscreteTransferFcn_tmp_j;
  real_T DiscreteTransferFcn_tmp_f;
  real_T DiscreteTimeIntegrator_a;
  real_T DiscreteTransferFcn_tmp_e;
  real_T DiscreteTransferFcn_tmp_m;
  int32_T i;
  real_T tmp[9];
  TrackEffectType tmp_0;
  boolean_T tmp_1;
  if ((&BEML_EMU_M)->Timing.TaskCounters.TID[4] == 0) {
    /* Outputs for Atomic SubSystem: '<Root>/InitialiseModel' */
    /* Step: '<S2>/Step' */
    if (((((&BEML_EMU_M)->Timing.clockTick4+(&BEML_EMU_M)->Timing.clockTickH4*
           4294967296.0)) * 0.5) < BEML_EMU_P.Step_Time_l) {
      /* DataTypeConversion: '<S2>/double to boolean' */
      BEML_EMU_Y.ModelStatus.IsInitialized = (BEML_EMU_P.Step_Y0_gx != 0.0);
    } else {
      /* DataTypeConversion: '<S2>/double to boolean' */
      BEML_EMU_Y.ModelStatus.IsInitialized = (BEML_EMU_P.Step_YFinal_m != 0.0);
    }

    /* End of Step: '<S2>/Step' */
    /* End of Outputs for SubSystem: '<Root>/InitialiseModel' */
  }

  if ((&BEML_EMU_M)->Timing.TaskCounters.TID[2] == 0) {
    /* UnitDelay: '<Root>/Unit Delay' */
    memcpy(&BEML_EMU_B.UnitDelay_n[0], &BEML_EMU_DW.UnitDelay_DSTATE_i[0],
           sizeof(BD_ElectricalSystem_Out_Vehicle) << 3U);

    /* UnitDelay: '<Root>/Unit Delay1' */
    memcpy(&BEML_EMU_B.UnitDelay1[0], &BEML_EMU_DW.UnitDelay1_DSTATE[0], sizeof
           (BD_DoorSystem_Out_Vehicle) << 3U);

    /* UnitDelay: '<Root>/Unit Delay3' */
    memcpy(&BEML_EMU_B.UnitDelay3[0], &BEML_EMU_DW.UnitDelay3_DSTATE[0], sizeof
           (BD_TCMSSystem_Out_Vehicle) << 3U);
  }

  if ((&BEML_EMU_M)->Timing.TaskCounters.TID[1] == 0) {
    /* UnitDelay: '<Root>/Unit Delay2' */
    memcpy(&BEML_EMU_B.UnitDelay2[0], &BEML_EMU_DW.UnitDelay2_DSTATE[0], sizeof
           (BD_PneumaticsSystem_Out_Vehicle) << 3U);
  }

  /* Outputs for Atomic SubSystem: '<Root>/InputsInterface' */
  /* SignalConversion generated from: '<S3>/ProcessedInputs_Outport_1' incorporates:
   *  Inport: '<Root>/VehicleInput'
   */
  memcpy(&BEML_EMU_B.ProcessedVehicleInput[0], &BEML_EMU_U.VehicleInput[0],
         sizeof(BD_SimIntegration_In_Vehicle) << 3U);
  if ((&BEML_EMU_M)->Timing.TaskCounters.TID[2] == 0) {
    /* Outputs for Atomic SubSystem: '<S3>/VehicleConfigProcessing' */
    /* Step: '<S403>/Step' */
    if (((((&BEML_EMU_M)->Timing.clockTick2+(&BEML_EMU_M)->Timing.clockTickH2*
           4294967296.0)) * 0.05) < BEML_EMU_P.Step_Time_k) {
      rtb_Switch4_f = BEML_EMU_P.Step_Y0_l;
    } else {
      rtb_Switch4_f = BEML_EMU_P.Step_YFinal_lp;
    }

    /* End of Step: '<S403>/Step' */

    /* Outputs for Enabled SubSystem: '<S403>/VehicleConfigInterface' incorporates:
     *  EnablePort: '<S675>/Enable'
     */
    if (rtb_Switch4_f > 0.0) {
      /* SignalConversion generated from: '<S678>/Vector Concatenate' incorporates:
       *  Constant: '<S678>/Constant'
       */
      rtb_VectorConcatenate_m[0] = BEML_EMU_P.Constant_Value_g;

      /* Outputs for Iterator SubSystem: '<S678>/Subsystem' incorporates:
       *  ForEach: '<S732>/For Each'
       */
      for (ForEach_itr_i = 0; ForEach_itr_i < 8; ForEach_itr_i++) {
        /* ForEachSliceAssignment generated from: '<S732>/Enabled' incorporates:
         *  ForEachSliceSelector generated from: '<S732>/VehicleConfig'
         *  Inport: '<Root>/VehicleConfig'
         */
        rtb_VectorConcatenate_m[ForEach_itr_i + 1] =
          BEML_EMU_U.VehicleConfig[ForEach_itr_i].Common.Enabled;
      }

      /* End of Outputs for SubSystem: '<S678>/Subsystem' */

      /* SignalConversion generated from: '<S678>/Vector Concatenate' incorporates:
       *  Constant: '<S678>/Constant'
       */
      rtb_VectorConcatenate_m[9] = BEML_EMU_P.Constant_Value_g;

      /* SignalConversion generated from: '<S678>/Vector Concatenate1' incorporates:
       *  Constant: '<S678>/Constant1'
       */
      rtb_VectorConcatenate1[0] = BEML_EMU_P.Constant1_Value_f;

      /* Outputs for Iterator SubSystem: '<S678>/Subsystem1' incorporates:
       *  ForEach: '<S733>/For Each'
       */
      for (ForEach_itr_o = 0; ForEach_itr_o < 8; ForEach_itr_o++) {
        /* ForEachSliceAssignment generated from: '<S733>/Class' incorporates:
         *  ForEachSliceSelector generated from: '<S733>/VehicleConfig'
         *  Inport: '<Root>/VehicleConfig'
         */
        rtb_ImpAsg_InsertedFor_Class_at_inport_0[ForEach_itr_o] =
          BEML_EMU_U.VehicleConfig[ForEach_itr_o].Common.Class;
      }

      /* End of Outputs for SubSystem: '<S678>/Subsystem1' */

      /* DataTypeConversion: '<S678>/Data Type Conversion' */
      for (i = 0; i < 8; i++) {
        rtb_Switch4_f = floor(rtb_ImpAsg_InsertedFor_Class_at_inport_0[i]);
        if (rtIsNaN(rtb_Switch4_f) || rtIsInf(rtb_Switch4_f)) {
          rtb_Switch4_f = 0.0;
        } else {
          rtb_Switch4_f = fmod(rtb_Switch4_f, 4.294967296E+9);
        }

        rtb_VectorConcatenate1[i + 1] = rtb_Switch4_f < 0.0 ?
          -static_cast<int32_T>(static_cast<uint32_T>(-rtb_Switch4_f)) :
          static_cast<int32_T>(static_cast<uint32_T>(rtb_Switch4_f));
      }

      /* End of DataTypeConversion: '<S678>/Data Type Conversion' */

      /* SignalConversion generated from: '<S678>/Vector Concatenate1' incorporates:
       *  Constant: '<S678>/Constant1'
       */
      rtb_VectorConcatenate1[9] = BEML_EMU_P.Constant1_Value_f;

      /* MinMax: '<S675>/Max' incorporates:
       *  UnitDelay: '<S675>/Unit Delay'
       */
      i = BEML_EMU_DW.UnitDelay_DSTATE_h[0];
      for (uElOffset1 = 0; uElOffset1 < 7; uElOffset1++) {
        ntIdx1 = BEML_EMU_DW.UnitDelay_DSTATE_h[uElOffset1 + 1];
        if (i <= ntIdx1) {
          i = ntIdx1;
        }
      }

      /* Outputs for Iterator SubSystem: '<S675>/VehicleConfigInterface' incorporates:
       *  ForEach: '<S677>/For Each'
       */
      for (ForEach_itr_f = 0; ForEach_itr_f < 8; ForEach_itr_f++) {
        /* SwitchCase: '<S681>/Switch Case2' incorporates:
         *  ForEachSliceSelector generated from: '<S677>/VehicleConfig'
         *  Inport: '<Root>/VehicleConfig'
         */
        if (BEML_EMU_U.VehicleConfig[ForEach_itr_f].Common.Class < 0.0) {
          rtb_Switch4_f = ceil(BEML_EMU_U.VehicleConfig[ForEach_itr_f].
                               Common.Class);
        } else {
          rtb_Switch4_f = floor(BEML_EMU_U.VehicleConfig[ForEach_itr_f].
                                Common.Class);
        }

        if (rtIsNaN(rtb_Switch4_f) || rtIsInf(rtb_Switch4_f)) {
          rtb_Switch4_f = 0.0;
        } else {
          rtb_Switch4_f = fmod(rtb_Switch4_f, 4.294967296E+9);
        }

        switch (rtb_Switch4_f < 0.0 ? -static_cast<int32_T>(static_cast<uint32_T>
                 (-rtb_Switch4_f)) : static_cast<int32_T>(static_cast<uint32_T>
                 (rtb_Switch4_f))) {
         case 101:
          /* Outputs for IfAction SubSystem: '<S681>/VehicleEquipment4' incorporates:
           *  ActionPort: '<S693>/Action Port'
           */
          BEML_EMU_VehicleEquipment4(&self_CoreSubsys_pnae[ForEach_itr_f].
            self_VehicleEquipment4, &rtb_Merge1_a,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment4_IsLeft,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment4_NumberOfDoors);

          /* End of Outputs for SubSystem: '<S681>/VehicleEquipment4' */
          break;

         case 102:
          /* Outputs for IfAction SubSystem: '<S681>/VehicleEquipment1' incorporates:
           *  ActionPort: '<S690>/Action Port'
           */
          BEML_EMU_VehicleEquipment4(&self_CoreSubsys_pnae[ForEach_itr_f].
            self_VehicleEquipment1_n, &rtb_Merge1_a,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment1_IsLeft,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment1_NumberOfDoors);

          /* End of Outputs for SubSystem: '<S681>/VehicleEquipment1' */
          break;

         case 103:
          /* Outputs for IfAction SubSystem: '<S681>/VehicleEquipment2' incorporates:
           *  ActionPort: '<S691>/Action Port'
           */
          BEML_EMU_VehicleEquipment4(&self_CoreSubsys_pnae[ForEach_itr_f].
            self_VehicleEquipment2_f, &rtb_Merge1_a,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment2_IsLeft,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment2_NumberOfDoors);

          /* End of Outputs for SubSystem: '<S681>/VehicleEquipment2' */
          break;

         default:
          /* Outputs for IfAction SubSystem: '<S681>/VehicleEquipment3' incorporates:
           *  ActionPort: '<S692>/Action Port'
           */
          BEML_EMU_VehicleEquipment4(&self_CoreSubsys_pnae[ForEach_itr_f].
            self_VehicleEquipment3_o, &rtb_Merge1_a,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment3_IsLeft,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment3_NumberOfDoors);

          /* End of Outputs for SubSystem: '<S681>/VehicleEquipment3' */
          break;
        }

        /* End of SwitchCase: '<S681>/Switch Case2' */

        /* SwitchCase: '<S682>/Switch Case2' incorporates:
         *  ForEachSliceSelector generated from: '<S677>/VehicleConfig'
         *  Inport: '<Root>/VehicleConfig'
         */
        if (BEML_EMU_U.VehicleConfig[ForEach_itr_f].Common.Class < 0.0) {
          rtb_Switch4_f = ceil(BEML_EMU_U.VehicleConfig[ForEach_itr_f].
                               Common.Class);
        } else {
          rtb_Switch4_f = floor(BEML_EMU_U.VehicleConfig[ForEach_itr_f].
                                Common.Class);
        }

        if (rtIsNaN(rtb_Switch4_f) || rtIsInf(rtb_Switch4_f)) {
          rtb_Switch4_f = 0.0;
        } else {
          rtb_Switch4_f = fmod(rtb_Switch4_f, 4.294967296E+9);
        }

        switch (rtb_Switch4_f < 0.0 ? -static_cast<int32_T>(static_cast<uint32_T>
                 (-rtb_Switch4_f)) : static_cast<int32_T>(static_cast<uint32_T>
                 (rtb_Switch4_f))) {
         case 101:
          /* Outputs for IfAction SubSystem: '<S682>/VehicleEquipment' incorporates:
           *  ActionPort: '<S694>/Action Port'
           */
          /* Logic: '<S694>/NOT' incorporates:
           *  DataTypeConversion: '<S694>/Data Type Conversion3'
           */
          rtb_Compare_kq = !(BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment_HasCab
                             != 0.0);

          /* If: '<S694>/If' */
          if (ForEach_itr_f <= 1) {
            /* Outputs for IfAction SubSystem: '<S694>/If Action Subsystem' incorporates:
             *  ActionPort: '<S698>/Action Port'
             */
            /* ForEachSliceAssignment generated from: '<S677>/VehicleConfigProcessed' incorporates:
             *  BusAssignment: '<S694>/Bus Assignment3'
             *  BusAssignment: '<S698>/Bus Assignment3'
             *  Constant: '<S694>/Constant6'
             *  Constant: '<S698>/Constant'
             *  DataTypeConversion: '<S694>/Data Type Conversion1'
             *  DataTypeConversion: '<S694>/Data Type Conversion2'
             *  DataTypeConversion: '<S694>/Data Type Conversion3'
             *  DataTypeConversion: '<S694>/Data Type Conversion5'
             *  DataTypeConversion: '<S694>/Data Type Conversion9'
             *  Outport: '<Root>/ProcessedVehConf'
             */
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.HasPanto =
              (BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment_HasPantograph != 0.0);
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.HasCab =
              (BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment_HasCab != 0.0);
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsNonCab =
              rtb_Compare_kq;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.HasMotor =
              (BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment_HasMotors != 0.0);
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].
              Electrical.HasMainCompressor =
              (BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment_HasMainCompressor !=
               0.0);
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].
              Electrical.HasPantoReservoir =
              (BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment_HasPantoReservoir !=
               0.0);
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsT1 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_e.IsT1;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsT2 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_e.IsT2;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsT3 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_e.IsT3;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsM1 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_e.IsM1;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsM2 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_e.IsM2;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsM3 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_e.IsM3;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsDM2 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_e.IsDM2;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsDM3 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_e.IsDM3;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.UnitConnection
              = BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_e.UnitConnection;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.UnitID =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_e.UnitID;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsDM1 =
              BEML_EMU_P.CoreSubsys_pnae.Constant_Value_e;

            /* End of Outputs for SubSystem: '<S694>/If Action Subsystem' */
          } else if (ForEach_itr_f <= 5) {
            /* Outputs for IfAction SubSystem: '<S694>/If Action Subsystem2' incorporates:
             *  ActionPort: '<S700>/Action Port'
             */
            /* ForEachSliceAssignment generated from: '<S677>/VehicleConfigProcessed' incorporates:
             *  BusAssignment: '<S694>/Bus Assignment3'
             *  BusAssignment: '<S700>/Bus Assignment3'
             *  Constant: '<S694>/Constant6'
             *  Constant: '<S700>/Constant'
             *  DataTypeConversion: '<S694>/Data Type Conversion1'
             *  DataTypeConversion: '<S694>/Data Type Conversion2'
             *  DataTypeConversion: '<S694>/Data Type Conversion3'
             *  DataTypeConversion: '<S694>/Data Type Conversion5'
             *  DataTypeConversion: '<S694>/Data Type Conversion9'
             *  Outport: '<Root>/ProcessedVehConf'
             */
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.HasPanto =
              (BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment_HasPantograph != 0.0);
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.HasCab =
              (BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment_HasCab != 0.0);
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsNonCab =
              rtb_Compare_kq;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.HasMotor =
              (BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment_HasMotors != 0.0);
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].
              Electrical.HasMainCompressor =
              (BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment_HasMainCompressor !=
               0.0);
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].
              Electrical.HasPantoReservoir =
              (BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment_HasPantoReservoir !=
               0.0);
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsT1 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_e.IsT1;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsT2 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_e.IsT2;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsT3 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_e.IsT3;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsM1 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_e.IsM1;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsM2 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_e.IsM2;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsM3 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_e.IsM3;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsDM1 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_e.IsDM1;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsDM3 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_e.IsDM3;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.UnitConnection
              = BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_e.UnitConnection;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.UnitID =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_e.UnitID;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsDM2 =
              BEML_EMU_P.CoreSubsys_pnae.Constant_Value_o;

            /* End of Outputs for SubSystem: '<S694>/If Action Subsystem2' */
          } else {
            /* Outputs for IfAction SubSystem: '<S694>/If Action Subsystem1' incorporates:
             *  ActionPort: '<S699>/Action Port'
             */
            /* ForEachSliceAssignment generated from: '<S677>/VehicleConfigProcessed' incorporates:
             *  BusAssignment: '<S694>/Bus Assignment3'
             *  BusAssignment: '<S699>/Bus Assignment3'
             *  Constant: '<S694>/Constant6'
             *  Constant: '<S699>/Constant'
             *  DataTypeConversion: '<S694>/Data Type Conversion1'
             *  DataTypeConversion: '<S694>/Data Type Conversion2'
             *  DataTypeConversion: '<S694>/Data Type Conversion3'
             *  DataTypeConversion: '<S694>/Data Type Conversion5'
             *  DataTypeConversion: '<S694>/Data Type Conversion9'
             *  Outport: '<Root>/ProcessedVehConf'
             */
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.HasPanto =
              (BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment_HasPantograph != 0.0);
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.HasCab =
              (BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment_HasCab != 0.0);
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsNonCab =
              rtb_Compare_kq;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.HasMotor =
              (BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment_HasMotors != 0.0);
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].
              Electrical.HasMainCompressor =
              (BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment_HasMainCompressor !=
               0.0);
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].
              Electrical.HasPantoReservoir =
              (BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment_HasPantoReservoir !=
               0.0);
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsT1 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_e.IsT1;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsT2 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_e.IsT2;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsT3 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_e.IsT3;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsM1 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_e.IsM1;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsM2 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_e.IsM2;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsM3 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_e.IsM3;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsDM1 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_e.IsDM1;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsDM2 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_e.IsDM2;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.UnitConnection
              = BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_e.UnitConnection;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.UnitID =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_e.UnitID;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsDM3 =
              BEML_EMU_P.CoreSubsys_pnae.Constant_Value_eu;

            /* End of Outputs for SubSystem: '<S694>/If Action Subsystem1' */
          }

          /* End of If: '<S694>/If' */
          /* End of Outputs for SubSystem: '<S682>/VehicleEquipment' */
          break;

         case 102:
          /* Outputs for IfAction SubSystem: '<S682>/VehicleEquipment1' incorporates:
           *  ActionPort: '<S695>/Action Port'
           */
          /* Logic: '<S695>/NOT' incorporates:
           *  DataTypeConversion: '<S695>/Data Type Conversion3'
           */
          rtb_Compare_kq = !(BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment1_HasCab
                             != 0.0);

          /* If: '<S695>/If' */
          if (ForEach_itr_f <= 2) {
            /* Outputs for IfAction SubSystem: '<S695>/If Action Subsystem' incorporates:
             *  ActionPort: '<S701>/Action Port'
             */
            /* ForEachSliceAssignment generated from: '<S677>/VehicleConfigProcessed' incorporates:
             *  BusAssignment: '<S695>/Bus Assignment3'
             *  BusAssignment: '<S701>/Bus Assignment3'
             *  Constant: '<S695>/Constant6'
             *  Constant: '<S701>/Constant'
             *  DataTypeConversion: '<S695>/Data Type Conversion1'
             *  DataTypeConversion: '<S695>/Data Type Conversion2'
             *  DataTypeConversion: '<S695>/Data Type Conversion3'
             *  DataTypeConversion: '<S695>/Data Type Conversion5'
             *  DataTypeConversion: '<S695>/Data Type Conversion9'
             *  Outport: '<Root>/ProcessedVehConf'
             */
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.HasPanto =
              (BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment1_HasPantograph != 0.0);
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.HasCab =
              (BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment1_HasCab != 0.0);
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsNonCab =
              rtb_Compare_kq;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.HasMotor =
              (BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment1_HasMotors != 0.0);
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].
              Electrical.HasMainCompressor =
              (BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment1_HasMainCompressor !=
               0.0);
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].
              Electrical.HasPantoReservoir =
              (BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment1_HasPantoReservoir !=
               0.0);
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsT2 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_l.IsT2;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsT3 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_l.IsT3;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsM1 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_l.IsM1;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsM2 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_l.IsM2;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsM3 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_l.IsM3;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsDM1 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_l.IsDM1;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsDM2 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_l.IsDM2;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsDM3 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_l.IsDM3;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.UnitConnection
              = BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_l.UnitConnection;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.UnitID =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_l.UnitID;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsT1 =
              BEML_EMU_P.CoreSubsys_pnae.Constant_Value_c;

            /* End of Outputs for SubSystem: '<S695>/If Action Subsystem' */
          } else if (ForEach_itr_f <= 4) {
            /* Outputs for IfAction SubSystem: '<S695>/If Action Subsystem1' incorporates:
             *  ActionPort: '<S702>/Action Port'
             */
            /* ForEachSliceAssignment generated from: '<S677>/VehicleConfigProcessed' incorporates:
             *  BusAssignment: '<S695>/Bus Assignment3'
             *  BusAssignment: '<S702>/Bus Assignment3'
             *  Constant: '<S695>/Constant6'
             *  Constant: '<S702>/Constant'
             *  DataTypeConversion: '<S695>/Data Type Conversion1'
             *  DataTypeConversion: '<S695>/Data Type Conversion2'
             *  DataTypeConversion: '<S695>/Data Type Conversion3'
             *  DataTypeConversion: '<S695>/Data Type Conversion5'
             *  DataTypeConversion: '<S695>/Data Type Conversion9'
             *  Outport: '<Root>/ProcessedVehConf'
             */
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.HasPanto =
              (BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment1_HasPantograph != 0.0);
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.HasCab =
              (BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment1_HasCab != 0.0);
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsNonCab =
              rtb_Compare_kq;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.HasMotor =
              (BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment1_HasMotors != 0.0);
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].
              Electrical.HasMainCompressor =
              (BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment1_HasMainCompressor !=
               0.0);
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].
              Electrical.HasPantoReservoir =
              (BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment1_HasPantoReservoir !=
               0.0);
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsT1 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_l.IsT1;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsT3 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_l.IsT3;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsM1 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_l.IsM1;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsM2 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_l.IsM2;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsM3 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_l.IsM3;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsDM1 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_l.IsDM1;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsDM2 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_l.IsDM2;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsDM3 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_l.IsDM3;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.UnitConnection
              = BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_l.UnitConnection;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.UnitID =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_l.UnitID;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsT2 =
              BEML_EMU_P.CoreSubsys_pnae.Constant_Value_d;

            /* End of Outputs for SubSystem: '<S695>/If Action Subsystem1' */
          } else {
            /* Outputs for IfAction SubSystem: '<S695>/If Action Subsystem2' incorporates:
             *  ActionPort: '<S703>/Action Port'
             */
            /* ForEachSliceAssignment generated from: '<S677>/VehicleConfigProcessed' incorporates:
             *  BusAssignment: '<S695>/Bus Assignment3'
             *  BusAssignment: '<S703>/Bus Assignment3'
             *  Constant: '<S695>/Constant6'
             *  Constant: '<S703>/Constant'
             *  DataTypeConversion: '<S695>/Data Type Conversion1'
             *  DataTypeConversion: '<S695>/Data Type Conversion2'
             *  DataTypeConversion: '<S695>/Data Type Conversion3'
             *  DataTypeConversion: '<S695>/Data Type Conversion5'
             *  DataTypeConversion: '<S695>/Data Type Conversion9'
             *  Outport: '<Root>/ProcessedVehConf'
             */
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.HasPanto =
              (BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment1_HasPantograph != 0.0);
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.HasCab =
              (BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment1_HasCab != 0.0);
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsNonCab =
              rtb_Compare_kq;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.HasMotor =
              (BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment1_HasMotors != 0.0);
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].
              Electrical.HasMainCompressor =
              (BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment1_HasMainCompressor !=
               0.0);
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].
              Electrical.HasPantoReservoir =
              (BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment1_HasPantoReservoir !=
               0.0);
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsT1 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_l.IsT1;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsT2 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_l.IsT2;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsM1 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_l.IsM1;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsM2 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_l.IsM2;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsM3 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_l.IsM3;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsDM1 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_l.IsDM1;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsDM2 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_l.IsDM2;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsDM3 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_l.IsDM3;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.UnitConnection
              = BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_l.UnitConnection;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.UnitID =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_l.UnitID;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsT3 =
              BEML_EMU_P.CoreSubsys_pnae.Constant_Value_oq;

            /* End of Outputs for SubSystem: '<S695>/If Action Subsystem2' */
          }

          /* End of If: '<S695>/If' */
          /* End of Outputs for SubSystem: '<S682>/VehicleEquipment1' */
          break;

         case 103:
          /* Outputs for IfAction SubSystem: '<S682>/VehicleEquipment3' incorporates:
           *  ActionPort: '<S697>/Action Port'
           */
          /* Logic: '<S697>/NOT' incorporates:
           *  DataTypeConversion: '<S697>/Data Type Conversion3'
           */
          rtb_Compare_kq = !(BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment3_HasCab
                             != 0.0);

          /* If: '<S697>/If' */
          if (ForEach_itr_f <= 2) {
            /* Outputs for IfAction SubSystem: '<S697>/If Action Subsystem' incorporates:
             *  ActionPort: '<S704>/Action Port'
             */
            /* ForEachSliceAssignment generated from: '<S677>/VehicleConfigProcessed' incorporates:
             *  BusAssignment: '<S697>/Bus Assignment3'
             *  BusAssignment: '<S704>/Bus Assignment3'
             *  Constant: '<S697>/Constant6'
             *  Constant: '<S704>/Constant'
             *  DataTypeConversion: '<S697>/Data Type Conversion1'
             *  DataTypeConversion: '<S697>/Data Type Conversion2'
             *  DataTypeConversion: '<S697>/Data Type Conversion3'
             *  DataTypeConversion: '<S697>/Data Type Conversion5'
             *  DataTypeConversion: '<S697>/Data Type Conversion9'
             *  Outport: '<Root>/ProcessedVehConf'
             */
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.HasPanto =
              (BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment3_HasPantograph != 0.0);
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.HasCab =
              (BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment3_HasCab != 0.0);
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsNonCab =
              rtb_Compare_kq;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.HasMotor =
              (BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment3_HasMotors != 0.0);
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].
              Electrical.HasMainCompressor =
              (BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment3_HasMainCompressor !=
               0.0);
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].
              Electrical.HasPantoReservoir =
              (BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment3_HasPantoReservoir !=
               0.0);
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsT1 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_i.IsT1;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsT2 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_i.IsT2;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsT3 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_i.IsT3;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsM2 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_i.IsM2;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsM3 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_i.IsM3;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsDM1 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_i.IsDM1;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsDM2 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_i.IsDM2;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsDM3 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_i.IsDM3;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.UnitConnection
              = BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_i.UnitConnection;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.UnitID =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_i.UnitID;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsM1 =
              BEML_EMU_P.CoreSubsys_pnae.Constant_Value_l;

            /* End of Outputs for SubSystem: '<S697>/If Action Subsystem' */
          } else if (ForEach_itr_f <= 4) {
            /* Outputs for IfAction SubSystem: '<S697>/If Action Subsystem1' incorporates:
             *  ActionPort: '<S705>/Action Port'
             */
            /* ForEachSliceAssignment generated from: '<S677>/VehicleConfigProcessed' incorporates:
             *  BusAssignment: '<S697>/Bus Assignment3'
             *  BusAssignment: '<S705>/Bus Assignment3'
             *  Constant: '<S697>/Constant6'
             *  Constant: '<S705>/Constant'
             *  DataTypeConversion: '<S697>/Data Type Conversion1'
             *  DataTypeConversion: '<S697>/Data Type Conversion2'
             *  DataTypeConversion: '<S697>/Data Type Conversion3'
             *  DataTypeConversion: '<S697>/Data Type Conversion5'
             *  DataTypeConversion: '<S697>/Data Type Conversion9'
             *  Outport: '<Root>/ProcessedVehConf'
             */
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.HasPanto =
              (BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment3_HasPantograph != 0.0);
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.HasCab =
              (BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment3_HasCab != 0.0);
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsNonCab =
              rtb_Compare_kq;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.HasMotor =
              (BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment3_HasMotors != 0.0);
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].
              Electrical.HasMainCompressor =
              (BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment3_HasMainCompressor !=
               0.0);
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].
              Electrical.HasPantoReservoir =
              (BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment3_HasPantoReservoir !=
               0.0);
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsT1 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_i.IsT1;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsT2 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_i.IsT2;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsT3 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_i.IsT3;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsM1 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_i.IsM1;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsM3 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_i.IsM3;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsDM1 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_i.IsDM1;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsDM2 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_i.IsDM2;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsDM3 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_i.IsDM3;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.UnitConnection
              = BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_i.UnitConnection;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.UnitID =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_i.UnitID;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsM2 =
              BEML_EMU_P.CoreSubsys_pnae.Constant_Value_f;

            /* End of Outputs for SubSystem: '<S697>/If Action Subsystem1' */
          } else {
            /* Outputs for IfAction SubSystem: '<S697>/If Action Subsystem2' incorporates:
             *  ActionPort: '<S706>/Action Port'
             */
            /* ForEachSliceAssignment generated from: '<S677>/VehicleConfigProcessed' incorporates:
             *  BusAssignment: '<S697>/Bus Assignment3'
             *  BusAssignment: '<S706>/Bus Assignment3'
             *  Constant: '<S697>/Constant6'
             *  Constant: '<S706>/Constant'
             *  DataTypeConversion: '<S697>/Data Type Conversion1'
             *  DataTypeConversion: '<S697>/Data Type Conversion2'
             *  DataTypeConversion: '<S697>/Data Type Conversion3'
             *  DataTypeConversion: '<S697>/Data Type Conversion5'
             *  DataTypeConversion: '<S697>/Data Type Conversion9'
             *  Outport: '<Root>/ProcessedVehConf'
             */
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.HasPanto =
              (BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment3_HasPantograph != 0.0);
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.HasCab =
              (BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment3_HasCab != 0.0);
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsNonCab =
              rtb_Compare_kq;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.HasMotor =
              (BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment3_HasMotors != 0.0);
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].
              Electrical.HasMainCompressor =
              (BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment3_HasMainCompressor !=
               0.0);
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].
              Electrical.HasPantoReservoir =
              (BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment3_HasPantoReservoir !=
               0.0);
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsT1 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_i.IsT1;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsT2 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_i.IsT2;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsT3 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_i.IsT3;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsM1 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_i.IsM1;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsM2 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_i.IsM2;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsDM1 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_i.IsDM1;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsDM2 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_i.IsDM2;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsDM3 =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_i.IsDM3;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.UnitConnection
              = BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_i.UnitConnection;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.UnitID =
              BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_i.UnitID;
            BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsM3 =
              BEML_EMU_P.CoreSubsys_pnae.Constant_Value_p;

            /* End of Outputs for SubSystem: '<S697>/If Action Subsystem2' */
          }

          /* End of If: '<S697>/If' */
          /* End of Outputs for SubSystem: '<S682>/VehicleEquipment3' */
          break;

         default:
          /* Outputs for IfAction SubSystem: '<S682>/VehicleEquipment2' incorporates:
           *  ActionPort: '<S696>/Action Port'
           */
          /* ForEachSliceAssignment generated from: '<S677>/VehicleConfigProcessed' incorporates:
           *  BusAssignment: '<S696>/Bus Assignment3'
           *  Constant: '<S696>/Constant6'
           *  DataTypeConversion: '<S696>/Data Type Conversion1'
           *  DataTypeConversion: '<S696>/Data Type Conversion2'
           *  DataTypeConversion: '<S696>/Data Type Conversion3'
           *  DataTypeConversion: '<S696>/Data Type Conversion5'
           *  DataTypeConversion: '<S696>/Data Type Conversion9'
           *  Logic: '<S696>/NOT'
           *  Outport: '<Root>/ProcessedVehConf'
           */
          BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsT1 =
            BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_j.IsT1;
          BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsT2 =
            BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_j.IsT2;
          BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsT3 =
            BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_j.IsT3;
          BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsM1 =
            BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_j.IsM1;
          BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsM2 =
            BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_j.IsM2;
          BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsM3 =
            BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_j.IsM3;
          BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsDM1 =
            BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_j.IsDM1;
          BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsDM2 =
            BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_j.IsDM2;
          BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsDM3 =
            BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_j.IsDM3;
          BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.UnitConnection =
            BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_j.UnitConnection;
          BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.UnitID =
            BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_j.UnitID;
          BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.HasPanto =
            (BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment2_HasPantograph != 0.0);
          BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.HasCab =
            (BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment2_HasCab != 0.0);
          BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.IsNonCab =
            !(BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment2_HasCab != 0.0);
          BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Electrical.HasMotor =
            (BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment2_HasMotors != 0.0);
          BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].
            Electrical.HasMainCompressor =
            (BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment2_HasMainCompressor !=
             0.0);
          BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].
            Electrical.HasPantoReservoir =
            (BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment2_HasPantoReservoir !=
             0.0);

          /* End of Outputs for SubSystem: '<S682>/VehicleEquipment2' */
          break;
        }

        /* End of SwitchCase: '<S682>/Switch Case2' */

        /* SwitchCase: '<S683>/Switch Case2' incorporates:
         *  ForEachSliceSelector generated from: '<S677>/VehicleConfig'
         *  Inport: '<Root>/VehicleConfig'
         */
        if (BEML_EMU_U.VehicleConfig[ForEach_itr_f].Common.Class < 0.0) {
          rtb_Switch4_f = ceil(BEML_EMU_U.VehicleConfig[ForEach_itr_f].
                               Common.Class);
        } else {
          rtb_Switch4_f = floor(BEML_EMU_U.VehicleConfig[ForEach_itr_f].
                                Common.Class);
        }

        if (rtIsNaN(rtb_Switch4_f) || rtIsInf(rtb_Switch4_f)) {
          rtb_Switch4_f = 0.0;
        } else {
          rtb_Switch4_f = fmod(rtb_Switch4_f, 4.294967296E+9);
        }

        switch (rtb_Switch4_f < 0.0 ? -static_cast<int32_T>(static_cast<uint32_T>
                 (-rtb_Switch4_f)) : static_cast<int32_T>(static_cast<uint32_T>
                 (rtb_Switch4_f))) {
         case 101:
          /* Outputs for IfAction SubSystem: '<S683>/VehicleEquipment' incorporates:
           *  ActionPort: '<S707>/Action Port'
           */
          BEML_EMU_VehicleEquipment_o(&self_CoreSubsys_pnae[ForEach_itr_f].
            self_VehicleEquipment_o, &rtb_Merge1_h,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment_HasCab_p,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment_HasBogie,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment_HasMotors_n,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment_HasPneumaticPanto,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment_HasElectricPanto,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment_HasMainCompressor_g,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment_HasMainReservoir,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment_HasPantoReservoir_l,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment_HasBrakeSystem,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment_NumberOfDoors,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment_NumberOfTractionBogies,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment_NumberOfBrakingBogies);

          /* End of Outputs for SubSystem: '<S683>/VehicleEquipment' */
          break;

         case 102:
          /* Outputs for IfAction SubSystem: '<S683>/VehicleEquipment1' incorporates:
           *  ActionPort: '<S708>/Action Port'
           */
          BEML_EMU_VehicleEquipment_o(&self_CoreSubsys_pnae[ForEach_itr_f].
            self_VehicleEquipment1_m, &rtb_Merge1_h,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment1_HasCab_c,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment1_HasBogie,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment1_HasMotors_i,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment1_HasPneumaticPanto,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment1_HasElectricPanto,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment1_HasMainCompressor_n,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment1_HasMainReservoir,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment1_HasPantoReservoir_d,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment1_HasBrakeSystem,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment1_NumberOfDoors_g,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment1_NumberOfTractionBogies,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment1_NumberOfBrakingBogies);

          /* End of Outputs for SubSystem: '<S683>/VehicleEquipment1' */
          break;

         case 103:
          /* Outputs for IfAction SubSystem: '<S683>/VehicleEquipment2' incorporates:
           *  ActionPort: '<S709>/Action Port'
           */
          BEML_EMU_VehicleEquipment_o(&self_CoreSubsys_pnae[ForEach_itr_f].
            self_VehicleEquipment2_m, &rtb_Merge1_h,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment2_HasCab_g,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment2_HasBogie,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment2_HasMotors_o,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment2_HasPneumaticPanto,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment2_HasElectricPanto,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment2_HasMainCompressor_h,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment2_HasMainReservoir,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment2_HasPantoReservoir_d,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment2_HasBrakeSystem,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment2_NumberOfDoors_i,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment2_NumberOfTractionBogies,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment2_NumberOfBrakingBogies);

          /* End of Outputs for SubSystem: '<S683>/VehicleEquipment2' */
          break;

         default:
          /* Outputs for IfAction SubSystem: '<S683>/VehicleEquipment3' incorporates:
           *  ActionPort: '<S710>/Action Port'
           */
          BEML_EMU_VehicleEquipment_o(&self_CoreSubsys_pnae[ForEach_itr_f].
            self_VehicleEquipment3_ly, &rtb_Merge1_h,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment3_HasCab_l,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment3_HasBogie,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment3_HasMotors_n,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment3_HasPneumaticPanto,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment3_HasElectricPanto,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment3_HasMainCompressor_e,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment3_HasMainReservoir,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment3_HasPantoReservoir_p,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment3_HasBrakeSystem,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment3_NumberOfDoors_i,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment3_NumberOfTractionBogies,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment3_NumberOfBrakingBogies);

          /* End of Outputs for SubSystem: '<S683>/VehicleEquipment3' */
          break;
        }

        /* End of SwitchCase: '<S683>/Switch Case2' */

        /* SwitchCase: '<S684>/Switch Case2' incorporates:
         *  ForEachSliceSelector generated from: '<S677>/VehicleConfig'
         *  Inport: '<Root>/VehicleConfig'
         */
        if (BEML_EMU_U.VehicleConfig[ForEach_itr_f].Common.Class < 0.0) {
          rtb_Switch4_f = ceil(BEML_EMU_U.VehicleConfig[ForEach_itr_f].
                               Common.Class);
        } else {
          rtb_Switch4_f = floor(BEML_EMU_U.VehicleConfig[ForEach_itr_f].
                                Common.Class);
        }

        if (rtIsNaN(rtb_Switch4_f) || rtIsInf(rtb_Switch4_f)) {
          rtb_Switch4_f = 0.0;
        } else {
          rtb_Switch4_f = fmod(rtb_Switch4_f, 4.294967296E+9);
        }

        switch (rtb_Switch4_f < 0.0 ? -static_cast<int32_T>(static_cast<uint32_T>
                 (-rtb_Switch4_f)) : static_cast<int32_T>(static_cast<uint32_T>
                 (rtb_Switch4_f))) {
         case 101:
          /* Outputs for IfAction SubSystem: '<S684>/VehicleEquipment' incorporates:
           *  ActionPort: '<S711>/Action Port'
           */
          BEML_EMU_VehicleEquipment_g(&self_CoreSubsys_pnae[ForEach_itr_f].
            self_VehicleEquipment_g, &rtb_Merge1_m,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment_HasPanto,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment_PenumaticsPoweredPanto,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment_ElectricPoweredPanto);

          /* End of Outputs for SubSystem: '<S684>/VehicleEquipment' */
          break;

         case 102:
          /* Outputs for IfAction SubSystem: '<S684>/VehicleEquipment1' incorporates:
           *  ActionPort: '<S712>/Action Port'
           */
          BEML_EMU_VehicleEquipment_g(&self_CoreSubsys_pnae[ForEach_itr_f].
            self_VehicleEquipment1_a, &rtb_Merge1_m,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment1_HasPanto,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment1_PenumaticsPoweredPanto,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment1_ElectricPoweredPanto);

          /* End of Outputs for SubSystem: '<S684>/VehicleEquipment1' */
          break;

         case 103:
          /* Outputs for IfAction SubSystem: '<S684>/VehicleEquipment3' incorporates:
           *  ActionPort: '<S714>/Action Port'
           */
          BEML_EMU_VehicleEquipment_g(&self_CoreSubsys_pnae[ForEach_itr_f].
            self_VehicleEquipment3_l, &rtb_Merge1_m,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment3_HasPanto,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment3_PenumaticsPoweredPanto,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment3_ElectricPoweredPanto);

          /* End of Outputs for SubSystem: '<S684>/VehicleEquipment3' */
          break;

         default:
          /* Outputs for IfAction SubSystem: '<S684>/VehicleEquipment2' incorporates:
           *  ActionPort: '<S713>/Action Port'
           */
          BEML_EMU_VehicleEquipment_g(&self_CoreSubsys_pnae[ForEach_itr_f].
            self_VehicleEquipment2_h, &rtb_Merge1_m,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment2_HasPanto,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment2_PenumaticsPoweredPanto,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment2_ElectricPoweredPanto);

          /* End of Outputs for SubSystem: '<S684>/VehicleEquipment2' */
          break;
        }

        /* End of SwitchCase: '<S684>/Switch Case2' */

        /* SwitchCase: '<S685>/Switch Case2' incorporates:
         *  ForEachSliceSelector generated from: '<S677>/VehicleConfig'
         *  Inport: '<Root>/VehicleConfig'
         */
        if (BEML_EMU_U.VehicleConfig[ForEach_itr_f].Common.Class < 0.0) {
          rtb_Switch4_f = ceil(BEML_EMU_U.VehicleConfig[ForEach_itr_f].
                               Common.Class);
        } else {
          rtb_Switch4_f = floor(BEML_EMU_U.VehicleConfig[ForEach_itr_f].
                                Common.Class);
        }

        if (rtIsNaN(rtb_Switch4_f) || rtIsInf(rtb_Switch4_f)) {
          rtb_Switch4_f = 0.0;
        } else {
          rtb_Switch4_f = fmod(rtb_Switch4_f, 4.294967296E+9);
        }

        switch (rtb_Switch4_f < 0.0 ? -static_cast<int32_T>(static_cast<uint32_T>
                 (-rtb_Switch4_f)) : static_cast<int32_T>(static_cast<uint32_T>
                 (rtb_Switch4_f))) {
         case 101:
          /* Outputs for IfAction SubSystem: '<S685>/VehicleEquipment' incorporates:
           *  ActionPort: '<S715>/Action Port'
           */
          BEML_EMU_VehicleEquipment_c(&self_CoreSubsys_pnae[ForEach_itr_f].
            self_VehicleEquipment_c, &rtb_Merge1,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment_HasCab_d,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment_HasBogie_m,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment_HasCompressor,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment_HasMainReservoir_d,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment_HasBrakeSystem_e,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment_HasPantograph_e);

          /* End of Outputs for SubSystem: '<S685>/VehicleEquipment' */
          break;

         case 102:
          /* Outputs for IfAction SubSystem: '<S685>/VehicleEquipment1' incorporates:
           *  ActionPort: '<S716>/Action Port'
           */
          BEML_EMU_VehicleEquipment_c(&self_CoreSubsys_pnae[ForEach_itr_f].
            self_VehicleEquipment1_c, &rtb_Merge1,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment1_HasCab_l,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment1_HasBogie_d,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment1_HasCompressor,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment1_HasMainReservoir_c,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment1_HasBrakeSystem_o,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment1_HasPantograph_a);

          /* End of Outputs for SubSystem: '<S685>/VehicleEquipment1' */
          break;

         case 103:
          /* Outputs for IfAction SubSystem: '<S685>/VehicleEquipment2' incorporates:
           *  ActionPort: '<S717>/Action Port'
           */
          BEML_EMU_VehicleEquipment_c(&self_CoreSubsys_pnae[ForEach_itr_f].
            self_VehicleEquipment2_n, &rtb_Merge1,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment2_HasCab_b,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment2_HasBogie_k,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment2_HasCompressor,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment2_HasMainReservoir_m,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment2_HasBrakeSystem_j,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment2_HasPantograph_p);

          /* End of Outputs for SubSystem: '<S685>/VehicleEquipment2' */
          break;

         default:
          /* Outputs for IfAction SubSystem: '<S685>/VehicleEquipment3' incorporates:
           *  ActionPort: '<S718>/Action Port'
           */
          BEML_EMU_VehicleEquipment_c(&self_CoreSubsys_pnae[ForEach_itr_f].
            self_VehicleEquipment3_f, &rtb_Merge1,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment3_HasCab_c,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment3_HasBogie_l,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment3_HasCompressor,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment3_HasMainReservoir_f,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment3_HasBrakeSystem_n,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment3_HasPantograph_n);

          /* End of Outputs for SubSystem: '<S685>/VehicleEquipment3' */
          break;
        }

        /* End of SwitchCase: '<S685>/Switch Case2' */

        /* SwitchCase: '<S686>/Switch Case2' incorporates:
         *  ForEachSliceSelector generated from: '<S677>/VehicleConfig'
         *  Inport: '<Root>/VehicleConfig'
         */
        if (BEML_EMU_U.VehicleConfig[ForEach_itr_f].Common.Class < 0.0) {
          rtb_Switch4_f = ceil(BEML_EMU_U.VehicleConfig[ForEach_itr_f].
                               Common.Class);
        } else {
          rtb_Switch4_f = floor(BEML_EMU_U.VehicleConfig[ForEach_itr_f].
                                Common.Class);
        }

        if (rtIsNaN(rtb_Switch4_f) || rtIsInf(rtb_Switch4_f)) {
          rtb_Switch4_f = 0.0;
        } else {
          rtb_Switch4_f = fmod(rtb_Switch4_f, 4.294967296E+9);
        }

        switch (rtb_Switch4_f < 0.0 ? -static_cast<int32_T>(static_cast<uint32_T>
                 (-rtb_Switch4_f)) : static_cast<int32_T>(static_cast<uint32_T>
                 (rtb_Switch4_f))) {
         case 101:
          /* Outputs for IfAction SubSystem: '<S686>/VehicleEquipment' incorporates:
           *  ActionPort: '<S719>/Action Port'
           */
          BEML_EMU_VehicleEquipment(&self_CoreSubsys_pnae[ForEach_itr_f].
            self_VehicleEquipment, &rtb_Merge1_l,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment_HasMotors_j);

          /* End of Outputs for SubSystem: '<S686>/VehicleEquipment' */
          break;

         case 102:
          /* Outputs for IfAction SubSystem: '<S686>/VehicleEquipment1' incorporates:
           *  ActionPort: '<S720>/Action Port'
           */
          BEML_EMU_VehicleEquipment(&self_CoreSubsys_pnae[ForEach_itr_f].
            self_VehicleEquipment1, &rtb_Merge1_l,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment1_HasMotors_a);

          /* End of Outputs for SubSystem: '<S686>/VehicleEquipment1' */
          break;

         case 103:
          /* Outputs for IfAction SubSystem: '<S686>/VehicleEquipment2' incorporates:
           *  ActionPort: '<S721>/Action Port'
           */
          BEML_EMU_VehicleEquipment(&self_CoreSubsys_pnae[ForEach_itr_f].
            self_VehicleEquipment2, &rtb_Merge1_l,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment2_HasMotors_d);

          /* End of Outputs for SubSystem: '<S686>/VehicleEquipment2' */
          break;

         default:
          /* Outputs for IfAction SubSystem: '<S686>/VehicleEquipment3' incorporates:
           *  ActionPort: '<S722>/Action Port'
           */
          BEML_EMU_VehicleEquipment(&self_CoreSubsys_pnae[ForEach_itr_f].
            self_VehicleEquipment3, &rtb_Merge1_l,
            BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment3_HasMotors_k);

          /* End of Outputs for SubSystem: '<S686>/VehicleEquipment3' */
          break;
        }

        /* End of SwitchCase: '<S686>/Switch Case2' */

        /* Switch: '<S723>/Switch' incorporates:
         *  Constant: '<S723>/Constant'
         *  Constant: '<S723>/Constant1'
         *  ForEachSliceSelector generated from: '<S677>/UnitID'
         *  Logic: '<S723>/Logical Operator'
         *  MinMax: '<S675>/Max'
         *  RelationalOperator: '<S723>/Relational Operator1'
         *  RelationalOperator: '<S723>/Relational Operator2'
         *  Sum: '<S723>/Add'
         *  UnitDelay: '<S675>/Unit Delay'
         */
        if ((i == BEML_EMU_P.CoreSubsys_pnae.Constant1_Value_l) &&
            (BEML_EMU_DW.UnitDelay_DSTATE_h[ForEach_itr_f] ==
             BEML_EMU_P.CoreSubsys_pnae.Constant1_Value_l)) {
          rtb_Switch4_f = floor(BEML_EMU_P.CoreSubsys_pnae.Constant_Value_n +
                                static_cast<real_T>
                                (BEML_EMU_DW.UnitDelay_DSTATE_h[ForEach_itr_f]));
          if (rtIsNaN(rtb_Switch4_f) || rtIsInf(rtb_Switch4_f)) {
            rtb_Switch4_f = 0.0;
          } else {
            rtb_Switch4_f = fmod(rtb_Switch4_f, 4.294967296E+9);
          }

          /* ForEachSliceAssignment generated from: '<S677>/VehicleConfigProcessed' incorporates:
           *  Constant: '<S723>/Constant'
           *  Outport: '<Root>/ProcessedVehConf'
           *  Sum: '<S723>/Add'
           */
          BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Location.UnitConfig.UnitID =
            rtb_Switch4_f < 0.0 ? -static_cast<int32_T>(static_cast<uint32_T>
            (-rtb_Switch4_f)) : static_cast<int32_T>(static_cast<uint32_T>
            (rtb_Switch4_f));
        } else {
          /* ForEachSliceAssignment generated from: '<S677>/VehicleConfigProcessed' incorporates:
           *  Outport: '<Root>/ProcessedVehConf'
           */
          BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Location.UnitConfig.UnitID =
            BEML_EMU_DW.UnitDelay_DSTATE_h[ForEach_itr_f];
        }

        /* End of Switch: '<S723>/Switch' */

        /* ForEachSliceSelector generated from: '<S677>/ClassDown' */
        uElOffset1 = rtb_VectorConcatenate1[ForEach_itr_f + 2];

        /* Logic: '<S724>/Logical Operator6' incorporates:
         *  Constant: '<S725>/Constant'
         *  Constant: '<S726>/Constant'
         *  Constant: '<S727>/Constant'
         *  Constant: '<S728>/Constant'
         *  Constant: '<S729>/Constant'
         *  Constant: '<S730>/Constant'
         *  Constant: '<S731>/Constant'
         *  ForEachSliceSelector generated from: '<S677>/ClassDown'
         *  ForEachSliceSelector generated from: '<S677>/ClassUp'
         *  ForEachSliceSelector generated from: '<S677>/VehicleConfig'
         *  Inport: '<Root>/VehicleConfig'
         *  Logic: '<S724>/Logical Operator'
         *  Logic: '<S724>/Logical Operator2'
         *  Logic: '<S724>/Logical Operator4'
         *  Logic: '<S724>/Logical Operator5'
         *  Logic: '<S724>/Logical Operator7'
         *  RelationalOperator: '<S725>/Compare'
         *  RelationalOperator: '<S726>/Compare'
         *  RelationalOperator: '<S727>/Compare'
         *  RelationalOperator: '<S728>/Compare'
         *  RelationalOperator: '<S729>/Compare'
         *  RelationalOperator: '<S730>/Compare'
         *  RelationalOperator: '<S731>/Compare'
         */
        rtb_Compare_kq = (BEML_EMU_U.VehicleConfig[ForEach_itr_f].Common.Enabled
                          && (((uElOffset1 !=
          BEML_EMU_P.CoreSubsys_pnae.CompareToConstant_const) ||
          (!(BEML_EMU_U.VehicleConfig[ForEach_itr_f].Common.Class ==
             BEML_EMU_P.CoreSubsys_pnae.CompareToConstant1_const))) &&
                              ((uElOffset1 !=
          BEML_EMU_P.CoreSubsys_pnae.CompareToConstant4_const) ||
          (!(BEML_EMU_U.VehicleConfig[ForEach_itr_f].Common.Class ==
             BEML_EMU_P.CoreSubsys_pnae.CompareToConstant5_const)) ||
          (rtb_VectorConcatenate1[ForEach_itr_f] !=
           BEML_EMU_P.CoreSubsys_pnae.CompareToConstant2_const)) &&
                              ((rtb_VectorConcatenate1[ForEach_itr_f] !=
          BEML_EMU_P.CoreSubsys_pnae.CompareToConstant8_const) ||
          (!(BEML_EMU_U.VehicleConfig[ForEach_itr_f].Common.Class ==
             BEML_EMU_P.CoreSubsys_pnae.CompareToConstant9_const)))));

        /* ForEachSliceAssignment generated from: '<S677>/VehicleConfigProcessed' incorporates:
         *  BusAssignment: '<S677>/Bus Assignment1'
         *  BusAssignment: '<S688>/Bus Assignment'
         *  BusAssignment: '<S689>/Bus Assignment'
         *  BusAssignment: '<S689>/Bus Assignment1'
         *  Constant: '<S680>/Constant1'
         *  Constant: '<S687>/Constant1'
         *  Constant: '<S688>/Constant1'
         *  Constant: '<S688>/Constant12'
         *  Constant: '<S688>/Constant2'
         *  Constant: '<S688>/Constant5'
         *  Constant: '<S688>/Constant6'
         *  Constant: '<S688>/Constant7'
         *  Constant: '<S688>/Constant8'
         *  Constant: '<S688>/Constant9'
         *  Constant: '<S688>/UseDavisCoeff'
         *  Constant: '<S689>/Constant1'
         *  ForEachSliceSelector generated from: '<S677>/VehicleConfig'
         *  ForEachSliceSelector generated from: '<S677>/VehicleDownEnabled'
         *  ForEachSliceSelector generated from: '<S677>/VehicleUpEnabled'
         *  Inport: '<Root>/TrainInput'
         *  Inport: '<Root>/VehicleConfig'
         *  Logic: '<S689>/AND2'
         *  Logic: '<S689>/AND3'
         *  Logic: '<S689>/NOT'
         *  Logic: '<S689>/NOT1'
         *  Outport: '<Root>/ProcessedVehConf'
         */
        BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Common.Enabled =
          BEML_EMU_U.VehicleConfig[ForEach_itr_f].Common.Enabled;
        BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Common.VehicleID =
          BEML_EMU_U.VehicleConfig[ForEach_itr_f].Common.VehicleID;
        BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Common.Type =
          BEML_EMU_U.VehicleConfig[ForEach_itr_f].Common.Type;
        BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Common.Class =
          BEML_EMU_U.VehicleConfig[ForEach_itr_f].Common.Class;
        BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Common.Orientation =
          BEML_EMU_U.VehicleConfig[ForEach_itr_f].Common.Orientation;
        BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Common.Length =
          BEML_EMU_U.VehicleConfig[ForEach_itr_f].Common.Length;
        BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Common.Height =
          BEML_EMU_U.VehicleConfig[ForEach_itr_f].Common.Height;
        BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Common.Width =
          BEML_EMU_U.VehicleConfig[ForEach_itr_f].Common.Width;
        BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Common.TareMass =
          BEML_EMU_U.VehicleConfig[ForEach_itr_f].Common.TareMass;
        BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Common.GrossMass =
          BEML_EMU_U.VehicleConfig[ForEach_itr_f].Common.GrossMass;
        BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Common.LoadingMass =
          BEML_EMU_U.VehicleConfig[ForEach_itr_f].Common.LoadingMass;
        BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Common.NumberOfAxles =
          BEML_EMU_P.CoreSubsys_pnae.Constant1_Value_o;
        BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Common.NumberOfDrivenAxles =
          BEML_EMU_U.VehicleConfig[ForEach_itr_f].Common.NumberOfDrivenAxles;
        BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Common.NumberOfBrakedAxles =
          BEML_EMU_U.VehicleConfig[ForEach_itr_f].Common.NumberOfBrakedAxles;
        BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Common.WheelDiameter =
          BEML_EMU_U.VehicleConfig[ForEach_itr_f].Common.WheelDiameter;
        BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Location.IsFirstVehicle =
          (BEML_EMU_U.VehicleConfig[ForEach_itr_f].Common.Enabled &&
           (!rtb_VectorConcatenate_m[ForEach_itr_f]));
        BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Location.IsLastVehicle =
          (BEML_EMU_U.VehicleConfig[ForEach_itr_f].Common.Enabled &&
           (!rtb_VectorConcatenate_m[ForEach_itr_f + 2]));
        BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].
          Location.UnitConfig.UnitConnection = rtb_Compare_kq;
        BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].
          Location.UnitConfig.VehiclesPerUnit =
          BEML_EMU_P.CoreSubsys_pnae.Constant1_Value_g.UnitConfig.VehiclesPerUnit;
        BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Equipment = rtb_Merge1_h;
        BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].
          Dynamics.AerodynamicDragCoeff_Front =
          BEML_EMU_U.VehicleConfig[ForEach_itr_f].
          Dynamics.AerodynamicDragCoeff_Front;
        BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].
          Dynamics.AerodynamicDragCoeff_Trail =
          BEML_EMU_U.VehicleConfig[ForEach_itr_f].
          Dynamics.AerodynamicDragCoeff_Trail;
        BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Dynamics.BearingFrictionCoeff
          = BEML_EMU_U.VehicleConfig[ForEach_itr_f].
          Dynamics.BearingFrictionCoeff;
        BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].
          Dynamics.BearingDynamicFrictionCoeff =
          BEML_EMU_U.VehicleConfig[ForEach_itr_f].
          Dynamics.BearingDynamicFrictionCoeff;
        BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Dynamics.LateralFrictionCoeff
          = BEML_EMU_U.VehicleConfig[ForEach_itr_f].
          Dynamics.LateralFrictionCoeff;
        BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].
          Dynamics.RailStaticFrictionCoeff =
          BEML_EMU_U.VehicleConfig[ForEach_itr_f].
          Dynamics.RailStaticFrictionCoeff;
        BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].
          Dynamics.RailDynamicFrictionCoeff =
          BEML_EMU_U.VehicleConfig[ForEach_itr_f].
          Dynamics.RailDynamicFrictionCoeff;
        BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].
          Dynamics.RailSandedStaticFrictionCoeff =
          BEML_EMU_U.VehicleConfig[ForEach_itr_f].
          Dynamics.RailSandedStaticFrictionCoeff;
        BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].
          Dynamics.RailSandedDynamicFrictionCoeff =
          BEML_EMU_U.VehicleConfig[ForEach_itr_f].
          Dynamics.RailSandedDynamicFrictionCoeff;
        BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Dynamics.SpringRate =
          BEML_EMU_U.VehicleConfig[ForEach_itr_f].Dynamics.SpringRate;
        BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Dynamics.SlackSpringRate =
          BEML_EMU_U.VehicleConfig[ForEach_itr_f].Dynamics.SlackSpringRate;
        BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Dynamics.DampingRate =
          BEML_EMU_U.VehicleConfig[ForEach_itr_f].Dynamics.DampingRate;
        BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Dynamics.SlackDampingRate =
          BEML_EMU_U.VehicleConfig[ForEach_itr_f].Dynamics.SlackDampingRate;
        BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].
          Dynamics.EnableDampingAdjustmentByMass =
          BEML_EMU_P.CoreSubsys_pnae.Constant8_Value;
        BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].
          Dynamics.DampingAdjustmentDesignMass =
          BEML_EMU_P.CoreSubsys_pnae.Constant12_Value;
        BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Dynamics.SlackLength =
          BEML_EMU_U.VehicleConfig[ForEach_itr_f].Dynamics.SlackLength;
        BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Dynamics.DampingLeadIn =
          BEML_EMU_U.VehicleConfig[ForEach_itr_f].Dynamics.DampingLeadIn;
        BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Dynamics.CouplerShockTime =
          BEML_EMU_U.VehicleConfig[ForEach_itr_f].Dynamics.CouplerShockTime;
        BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].
          Dynamics.DragCalculationMethod =
          BEML_EMU_P.CoreSubsys_pnae.UseDavisCoeff_Value;
        BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].
          Dynamics.DavisCoefficients.DavisCoeffA1 =
          BEML_EMU_P.CoreSubsys_pnae.Constant9_Value;
        BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].
          Dynamics.DavisCoefficients.DavisCoeffA2 =
          BEML_EMU_P.CoreSubsys_pnae.Constant2_Value;
        BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].
          Dynamics.DavisCoefficients.DavisCoeffB1 =
          BEML_EMU_P.CoreSubsys_pnae.Constant5_Value;
        BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].
          Dynamics.DavisCoefficients.DavisCoeffB2 =
          BEML_EMU_P.CoreSubsys_pnae.Constant1_Value_c;
        BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].
          Dynamics.DavisCoefficients.DavisCoeffLeadCarC =
          BEML_EMU_P.CoreSubsys_pnae.Constant6_Value_c;
        BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].
          Dynamics.DavisCoefficients.DavisCoeffTailCarC =
          BEML_EMU_P.CoreSubsys_pnae.Constant7_Value;
        BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].
          Dynamics.UseSandFrictionCoeffs =
          BEML_EMU_U.VehicleConfig[ForEach_itr_f].Dynamics.UseSandFrictionCoeffs;
        BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].
          Dynamics.SandStaticFrictionFactor =
          BEML_EMU_U.VehicleConfig[ForEach_itr_f].
          Dynamics.SandStaticFrictionFactor;
        BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].
          Dynamics.SandDynamicFrictionFactor =
          BEML_EMU_U.VehicleConfig[ForEach_itr_f].
          Dynamics.SandDynamicFrictionFactor;
        BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Dynamics.InitialVelocity =
          BEML_EMU_U.TrainInput.Overrides.InitialVelocity;
        BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].
          Brakes.BrakeShoeCoefficientCalculationMethod =
          BEML_EMU_U.VehicleConfig[ForEach_itr_f].
          Brakes.BrakeShoeCoefficientCalculationMethod;
        BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Brakes.BrakeShoeFrictionCoeff
          = BEML_EMU_P.CoreSubsys_pnae.Constant1_Value_a;
        BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Brakes.BrakeFadeEnable =
          BEML_EMU_U.VehicleConfig[ForEach_itr_f].Brakes.BrakeFadeEnable;
        BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Brakes.BrakeTemperatureEnable
          = BEML_EMU_U.VehicleConfig[ForEach_itr_f].
          Brakes.BrakeTemperatureEnable;
        BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Pneumatics = rtb_Merge1;
        BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Traction = rtb_Merge1_l;
        BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Pantograph = rtb_Merge1_m;
        BEML_EMU_Y.ProcessedVehConf[ForEach_itr_f].Doors = rtb_Merge1_a;

        /* ForEachSliceAssignment generated from: '<S677>/UnitConn' */
        rtb_ImpAsg_InsertedFor_UnitConn_at_inport_0[ForEach_itr_f] =
          rtb_Compare_kq;

        /* ForEachSliceAssignment generated from: '<S677>/Enable' incorporates:
         *  DataTypeConversion: '<S724>/Data Type Conversion1'
         *  ForEachSliceSelector generated from: '<S677>/VehicleConfig'
         *  Inport: '<Root>/VehicleConfig'
         */
        rtb_ImpAsg_InsertedFor_Enable_at_inport_0[ForEach_itr_f] =
          BEML_EMU_U.VehicleConfig[ForEach_itr_f].Common.Enabled;
      }

      /* End of Outputs for SubSystem: '<S675>/VehicleConfigInterface' */

      /* MATLAB Function: '<S676>/Enumerated Voltages' */
      memset(&rtb_ImpAsg_InsertedFor_Class_at_inport_0[0], 0, sizeof(real_T) <<
             3U);
      rtb_ImpAsg_InsertedFor_Class_at_inport_0[0] = 1.0;
      for (i = 0; i < 7; i++) {
        if (!rtb_ImpAsg_InsertedFor_UnitConn_at_inport_0[i + 1]) {
          rtb_ImpAsg_InsertedFor_Class_at_inport_0[i + 1] =
            rtb_ImpAsg_InsertedFor_Class_at_inport_0[i] + 1.0;
        } else {
          rtb_ImpAsg_InsertedFor_Class_at_inport_0[i + 1] =
            rtb_ImpAsg_InsertedFor_Class_at_inport_0[i];
        }
      }

      /* End of MATLAB Function: '<S676>/Enumerated Voltages' */

      /* Update for UnitDelay: '<S675>/Unit Delay' incorporates:
       *  DataTypeConversion: '<S675>/Data Type Conversion'
       */
      for (i = 0; i < 8; i++) {
        /* DataTypeConversion: '<S675>/Data Type Conversion' incorporates:
         *  Product: '<S675>/Product'
         */
        rtb_Switch4_f = floor(rtb_ImpAsg_InsertedFor_Enable_at_inport_0[i] *
                              rtb_ImpAsg_InsertedFor_Class_at_inport_0[i]);
        if (rtIsNaN(rtb_Switch4_f) || rtIsInf(rtb_Switch4_f)) {
          rtb_Switch4_f = 0.0;
        } else {
          rtb_Switch4_f = fmod(rtb_Switch4_f, 4.294967296E+9);
        }

        BEML_EMU_DW.UnitDelay_DSTATE_h[i] = rtb_Switch4_f < 0.0 ?
          -static_cast<int32_T>(static_cast<uint32_T>(-rtb_Switch4_f)) :
          static_cast<int32_T>(static_cast<uint32_T>(rtb_Switch4_f));
      }

      /* End of Update for UnitDelay: '<S675>/Unit Delay' */
    }

    /* End of Outputs for SubSystem: '<S403>/VehicleConfigInterface' */
    /* End of Outputs for SubSystem: '<S3>/VehicleConfigProcessing' */

    /* UnitDelay: '<S3>/Unit Delay' */
    memcpy(&BEML_EMU_B.UnitDelay[0], &BEML_EMU_DW.UnitDelay_DSTATE[0], sizeof
           (BD_IOControls_Out_Vehicle_InputStates) << 3U);
  }

  /* SignalConversion generated from: '<S400>/Bus Selector2' incorporates:
   *  Inport: '<Root>/TrainInput'
   */
  rtb_Faults = BEML_EMU_U.TrainInput.Faults;

  /* Outputs for Iterator SubSystem: '<S400>/Subsystem' incorporates:
   *  ForEach: '<S404>/For Each'
   */
  for (ForEach_itr_ae = 0; ForEach_itr_ae < 8; ForEach_itr_ae++) {
    /* ForEachSliceSelector generated from: '<S404>/InputControlStates' */
    rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0 =
      BEML_EMU_B.UnitDelay[ForEach_itr_ae];
    if ((&BEML_EMU_M)->Timing.TaskCounters.TID[2] == 0) {
      /* Logic: '<S404>/OR' incorporates:
       *  ForEachSliceSelector generated from: '<S404>/VehicleConfig'
       *  Outport: '<Root>/ProcessedVehConf'
       */
      self_CoreSubsys_p[ForEach_itr_ae].blockIO.OR =
        (BEML_EMU_Y.ProcessedVehConf[ForEach_itr_ae].Electrical.IsM1 ||
         BEML_EMU_Y.ProcessedVehConf[ForEach_itr_ae].Electrical.IsM2 ||
         BEML_EMU_Y.ProcessedVehConf[ForEach_itr_ae].Electrical.IsM3);

      /* Logic: '<S408>/AND' incorporates:
       *  Constant: '<S414>/Constant'
       *  RelationalOperator: '<S414>/Compare'
       *  RelationalOperator: '<S415>/FixPt Relational Operator'
       *  UnitDelay: '<S415>/Delay Input1'
       */
      self_CoreSubsys_p[ForEach_itr_ae].blockIO.AND =
        ((rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.ModeSelector ==
          BEML_EMU_P.CoreSubsys_p.Constant_Value) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.ModeSelector !=
          self_CoreSubsys_p[ForEach_itr_ae].dwork.DelayInput1_DSTATE_iw));
    }

    /* BusAssignment: '<S406>/Bus Assignment' incorporates:
     *  ForEachSliceSelector generated from: '<S404>/VehicleConfig'
     *  ForEachSliceSelector generated from: '<S404>/VehicleInput'
     *  Inport: '<Root>/VehicleInput'
     *  Logic: '<S406>/AND4'
     *  Logic: '<S406>/AND7'
     *  Outport: '<Root>/ProcessedVehConf'
     */
    rtb_Compare_kq = ((BEML_EMU_U.VehicleInput[ForEach_itr_ae].
                       Faults.VCBMissingClosing != 0.0) &&
                      BEML_EMU_Y.ProcessedVehConf[ForEach_itr_ae].
                      Electrical.HasPanto);
    rtb_Compare_nsw = ((BEML_EMU_U.VehicleInput[ForEach_itr_ae].
                        Faults.VCBMissingOpening != 0.0) &&
                       BEML_EMU_Y.ProcessedVehConf[ForEach_itr_ae].
                       Electrical.HasPanto);

    /* Logic: '<S421>/Logical Operator40' incorporates:
     *  ForEachSliceSelector generated from: '<S404>/VehicleInput'
     *  Inport: '<Root>/VehicleInput'
     *  Logic: '<S408>/AND1'
     *  Logic: '<S421>/Logical Operator39'
     *  Logic: '<S421>/Logical Operator41'
     *  Memory: '<S421>/Memory'
     *  RelationalOperator: '<S416>/FixPt Relational Operator'
     *  RelationalOperator: '<S419>/FixPt Relational Operator'
     *  UnitDelay: '<S416>/Delay Input1'
     *  UnitDelay: '<S419>/Delay Input1'
     */
    rtb_Compare_nn = (((BEML_EMU_U.VehicleInput[ForEach_itr_ae].
                        Faults.BrakeDemandSignalFailure >
                        self_CoreSubsys_p[ForEach_itr_ae].
                        dwork.DelayInput1_DSTATE) ||
                       self_CoreSubsys_p[ForEach_itr_ae].
                       dwork.Memory_PreviousInput) &&
                      ((!(BEML_EMU_U.VehicleInput[ForEach_itr_ae].
                          Faults.BrakeDemandSignalFailure <
                          self_CoreSubsys_p[ForEach_itr_ae].
                          dwork.DelayInput1_DSTATE_i)) &&
                       (!self_CoreSubsys_p[ForEach_itr_ae].blockIO.AND)));

    /* Logic: '<S408>/AND2' incorporates:
     *  ForEachSliceSelector generated from: '<S404>/PneumaticSystemFB'
     *  ForEachSliceSelector generated from: '<S404>/VehicleInput'
     *  Inport: '<Root>/VehicleInput'
     */
    rtb_Compare_pg = ((BEML_EMU_B.UnitDelay2[ForEach_itr_ae].
                       PressureSwitches.PS3 != 0.0) &&
                      (BEML_EMU_U.VehicleInput[ForEach_itr_ae].
                       Faults.PantographDownForORDIntervention != 0.0));
    if ((&BEML_EMU_M)->Timing.TaskCounters.TID[2] == 0) {
      /* RelationalOperator: '<S417>/FixPt Relational Operator' incorporates:
       *  UnitDelay: '<S417>/Delay Input1'
       */
      self_CoreSubsys_p[ForEach_itr_ae].blockIO.FixPtRelationalOperator =
        (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.ORDPlunger <
         self_CoreSubsys_p[ForEach_itr_ae].dwork.DelayInput1_DSTATE_l);
    }

    /* Logic: '<S422>/Logical Operator40' incorporates:
     *  ForEachSliceSelector generated from: '<S404>/VehicleInput'
     *  Inport: '<Root>/VehicleInput'
     *  Logic: '<S408>/AND3'
     *  Logic: '<S422>/Logical Operator39'
     *  Logic: '<S422>/Logical Operator41'
     *  Memory: '<S422>/Memory'
     *  RelationalOperator: '<S418>/FixPt Relational Operator'
     *  RelationalOperator: '<S420>/FixPt Relational Operator'
     *  UnitDelay: '<S418>/Delay Input1'
     *  UnitDelay: '<S420>/Delay Input1'
     */
    rtb_Compare_or = (((static_cast<int32_T>(rtb_Compare_pg) >
                        static_cast<int32_T>(self_CoreSubsys_p[ForEach_itr_ae].
      dwork.DelayInput1_DSTATE_g)) || self_CoreSubsys_p[ForEach_itr_ae].
                       dwork.Memory_PreviousInput_g) &&
                      ((!(BEML_EMU_U.VehicleInput[ForEach_itr_ae].
                          Faults.PantographDownForORDIntervention <
                          self_CoreSubsys_p[ForEach_itr_ae].
                          dwork.DelayInput1_DSTATE_b)) &&
                       (!self_CoreSubsys_p[ForEach_itr_ae].
                        blockIO.FixPtRelationalOperator)));

    /* BusCreator: '<S404>/Bus Creator' incorporates:
     *  ForEachSliceSelector generated from: '<S404>/VehicleConfig'
     *  ForEachSliceSelector generated from: '<S404>/VehicleInput'
     *  Inport: '<Root>/VehicleInput'
     *  Logic: '<S406>/AND12'
     *  Logic: '<S406>/AND13'
     *  Logic: '<S406>/AND2'
     *  Logic: '<S406>/AND5'
     *  Logic: '<S406>/AND6'
     *  Outport: '<Root>/ProcessedVehConf'
     */
    rtb_Compare_mk = ((BEML_EMU_U.VehicleInput[ForEach_itr_ae].
                       Faults.VCBOpenedByACOvercurrent != 0.0) &&
                      BEML_EMU_Y.ProcessedVehConf[ForEach_itr_ae].
                      Electrical.HasPanto);
    rtb_Compare_ll = ((BEML_EMU_U.VehicleInput[ForEach_itr_ae].
                       Faults.VCBOpenedByMTrProtection != 0.0) &&
                      BEML_EMU_Y.ProcessedVehConf[ForEach_itr_ae].
                      Electrical.HasPanto);
    rtb_Compare_gd = ((BEML_EMU_U.VehicleInput[ForEach_itr_ae].
                       Faults.VCBOpenedByAPS != 0.0) &&
                      BEML_EMU_Y.ProcessedVehConf[ForEach_itr_ae].
                      Electrical.HasPanto);
    rtb_Compare_eib = ((BEML_EMU_U.VehicleInput[ForEach_itr_ae].
                        Faults.MCBAPSGroupTripped != 0.0) &&
                       BEML_EMU_Y.ProcessedVehConf[ForEach_itr_ae].
                       Electrical.HasPanto);
    rtb_Compare_ha = ((BEML_EMU_U.VehicleInput[ForEach_itr_ae].
                       Faults.APSCircuitBreakerTripped != 0.0) &&
                      BEML_EMU_Y.ProcessedVehConf[ForEach_itr_ae].
                      Electrical.HasPanto);

    /* DataTypeConversion: '<S409>/Data Type Conversion' incorporates:
     *  Inport: '<Root>/TrainInput'
     *  SignalConversion generated from: '<S400>/Bus Selector2'
     */
    rtb_DataTypeConversion_gb = (BEML_EMU_U.TrainInput.Faults.LowMRPressure !=
      0.0);

    /* Chart: '<S427>/IRQRequestStateMachine' incorporates:
     *  Constant: '<S427>/Constant'
     *  Constant: '<S427>/Constant1'
     */
    BEML_EMU_IRQRequestStateMachine(rtb_DataTypeConversion_gb,
      BEML_EMU_P.CoreSubsys_p.Constant1_Value_m,
      BEML_EMU_P.CoreSubsys_p.Constant_Value_k,
      rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.CMCCB,
      &self_CoreSubsys_p[ForEach_itr_ae].blockIO.sf_IRQRequestStateMachine_in,
      &self_CoreSubsys_p[ForEach_itr_ae].dwork.sf_IRQRequestStateMachine_in,
      &BEML_EMU_P.CoreSubsys_p.sf_IRQRequestStateMachine_in);

    /* DataTypeConversion: '<S490>/Data Type Conversion7' */
    rtb_DataTypeConversion7_d = self_CoreSubsys_p[ForEach_itr_ae].
      blockIO.sf_IRQRequestStateMachine_in.TriggerFaultRequest;

    /* DiscreteIntegrator: '<S490>/Discrete-Time Integrator' */
    if (((rtb_DataTypeConversion7_d > 0.0) && (self_CoreSubsys_p[ForEach_itr_ae]
          .dwork.DiscreteTimeIntegrator_PrevResetState <= 0)) ||
        ((rtb_DataTypeConversion7_d <= 0.0) && (self_CoreSubsys_p[ForEach_itr_ae]
          .dwork.DiscreteTimeIntegrator_PrevResetState == 1))) {
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE =
        BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_IC;
    }

    rtb_Product_cv = BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_gainval *
      rtb_DataTypeConversion7_d + self_CoreSubsys_p[ForEach_itr_ae].
      dwork.DiscreteTimeIntegrator_DSTATE;

    /* End of DiscreteIntegrator: '<S490>/Discrete-Time Integrator' */

    /* DiscretePulseGenerator: '<S490>/Pulse Generator' */
    if (rtb_Product_cv >= BEML_EMU_P.CoreSubsys_p.PulseGenerator_PhaseDelay) {
      diff = rtb_Product_cv - BEML_EMU_P.CoreSubsys_p.PulseGenerator_PhaseDelay;
      ratio = diff / BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period;
      numCycles = static_cast<uint32_T>(floor(ratio));
      if (fabs(static_cast<real_T>((numCycles + 1U)) - ratio) < DBL_EPSILON *
          ratio) {
        numCycles++;
      }

      if (diff < BEML_EMU_P.CoreSubsys_p.PulseGenerator_Duty / 100.0 *
          BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period +
          BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period * static_cast<real_T>
          (numCycles)) {
        diff = BEML_EMU_P.CoreSubsys_p.PulseGenerator_Amp;
      } else {
        diff = 0.0;
      }
    } else {
      diff = 0.0;
    }

    /* End of DiscretePulseGenerator: '<S490>/Pulse Generator' */

    /* Switch: '<S485>/Switch1' incorporates:
     *  Constant: '<S485>/Constant'
     *  Constant: '<S488>/Constant'
     *  Constant: '<S489>/Constant'
     *  RelationalOperator: '<S488>/Compare'
     *  RelationalOperator: '<S489>/Compare'
     *  Switch: '<S485>/Switch'
     */
    if (BEML_EMU_P.CoreSubsys_p.ControlStateRequestLogic_ControlType ==
        BEML_EMU_P.CoreSubsys_p.Momentary_const) {
      rtb_Compare_j1 = (self_CoreSubsys_p[ForEach_itr_ae].
                        blockIO.sf_IRQRequestStateMachine_in.TargetStateValue !=
                        0.0);
    } else {
      if (BEML_EMU_P.CoreSubsys_p.ControlStateRequestLogic_ControlType ==
          BEML_EMU_P.CoreSubsys_p.Increment_const) {
        /* Sum: '<S485>/Sum' */
        ratio = self_CoreSubsys_p[ForEach_itr_ae].
          blockIO.sf_IRQRequestStateMachine_in.TargetStateValue -
          rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.CMCCB;

        /* Signum: '<S485>/Sign' */
        if (ratio < 0.0) {
          ratio = -1.0;
        } else if (ratio > 0.0) {
          ratio = 1.0;
        } else if (ratio == 0.0) {
          ratio = 0.0;
        } else {
          ratio = (rtNaN);
        }

        /* Switch: '<S485>/Switch' incorporates:
         *  Product: '<S485>/Product1'
         *  Product: '<S490>/Product'
         */
        DiscreteTimeIntegrator_a = rtb_DataTypeConversion7_d * diff * ratio;
      } else {
        /* Sum: '<S485>/Sum' */
        ratio = self_CoreSubsys_p[ForEach_itr_ae].
          blockIO.sf_IRQRequestStateMachine_in.TargetStateValue -
          rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.CMCCB;

        /* Signum: '<S485>/Sign' */
        if (ratio < 0.0) {
          ratio = -1.0;
        } else if (ratio > 0.0) {
          ratio = 1.0;
        } else if (ratio == 0.0) {
          ratio = 0.0;
        } else {
          ratio = (rtNaN);
        }

        /* Switch: '<S485>/Switch' incorporates:
         *  Abs: '<S485>/Abs'
         *  Product: '<S485>/Product1'
         *  Product: '<S490>/Product'
         */
        DiscreteTimeIntegrator_a = fabs(rtb_DataTypeConversion7_d * diff * ratio);
      }

      rtb_Compare_j1 = (DiscreteTimeIntegrator_a != 0.0);
    }

    /* End of Switch: '<S485>/Switch1' */

    /* DataTypeConversion: '<S409>/Data Type Conversion1' incorporates:
     *  ForEachSliceSelector generated from: '<S404>/VehicleInput'
     *  Inport: '<Root>/VehicleInput'
     */
    rtb_DataTypeConversion1_j = (BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.WipersNotWorking != 0.0);

    /* Chart: '<S428>/IRQRequestStateMachine' incorporates:
     *  Constant: '<S428>/Constant'
     *  Constant: '<S428>/Constant1'
     */
    BEML_EMU_IRQRequestStateMachine(rtb_DataTypeConversion1_j,
      BEML_EMU_P.CoreSubsys_p.Constant1_Value_j,
      BEML_EMU_P.CoreSubsys_p.Constant_Value_j,
      rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.WWCB,
      &self_CoreSubsys_p[ForEach_itr_ae].blockIO.sf_IRQRequestStateMachine_fm,
      &self_CoreSubsys_p[ForEach_itr_ae].dwork.sf_IRQRequestStateMachine_fm,
      &BEML_EMU_P.CoreSubsys_p.sf_IRQRequestStateMachine_fm);

    /* DataTypeConversion: '<S498>/Data Type Conversion7' */
    rtb_DataTypeConversion7_dv = self_CoreSubsys_p[ForEach_itr_ae].
      blockIO.sf_IRQRequestStateMachine_fm.TriggerFaultRequest;

    /* DiscreteIntegrator: '<S498>/Discrete-Time Integrator' */
    if (((rtb_DataTypeConversion7_dv > 0.0) && (self_CoreSubsys_p[ForEach_itr_ae]
          .dwork.DiscreteTimeIntegrator_PrevResetState_j <= 0)) ||
        ((rtb_DataTypeConversion7_dv <= 0.0) &&
         (self_CoreSubsys_p[ForEach_itr_ae].
          dwork.DiscreteTimeIntegrator_PrevResetState_j == 1))) {
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_p =
        BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_IC_n;
    }

    DiscreteTransferFcn_tmp_e =
      BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_gainval_o *
      rtb_DataTypeConversion7_dv + self_CoreSubsys_p[ForEach_itr_ae].
      dwork.DiscreteTimeIntegrator_DSTATE_p;

    /* End of DiscreteIntegrator: '<S498>/Discrete-Time Integrator' */

    /* DiscretePulseGenerator: '<S498>/Pulse Generator' */
    if (DiscreteTransferFcn_tmp_e >=
        BEML_EMU_P.CoreSubsys_p.PulseGenerator_PhaseDelay_h) {
      diff = DiscreteTransferFcn_tmp_e -
        BEML_EMU_P.CoreSubsys_p.PulseGenerator_PhaseDelay_h;
      ratio = diff / BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_l;
      numCycles = static_cast<uint32_T>(floor(ratio));
      if (fabs(static_cast<real_T>((numCycles + 1U)) - ratio) < DBL_EPSILON *
          ratio) {
        numCycles++;
      }

      if (diff < BEML_EMU_P.CoreSubsys_p.PulseGenerator_Duty_m / 100.0 *
          BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_l +
          BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_l * static_cast<real_T>
          (numCycles)) {
        diff = BEML_EMU_P.CoreSubsys_p.PulseGenerator_Amp_e;
      } else {
        diff = 0.0;
      }
    } else {
      diff = 0.0;
    }

    /* End of DiscretePulseGenerator: '<S498>/Pulse Generator' */

    /* Switch: '<S493>/Switch1' incorporates:
     *  Constant: '<S493>/Constant'
     *  Constant: '<S496>/Constant'
     *  Constant: '<S497>/Constant'
     *  RelationalOperator: '<S496>/Compare'
     *  RelationalOperator: '<S497>/Compare'
     *  Switch: '<S493>/Switch'
     */
    if (BEML_EMU_P.CoreSubsys_p.ControlStateRequestLogic_ControlType_o ==
        BEML_EMU_P.CoreSubsys_p.Momentary_const_g) {
      rtb_Compare_lx1 = (self_CoreSubsys_p[ForEach_itr_ae].
                         blockIO.sf_IRQRequestStateMachine_fm.TargetStateValue
                         != 0.0);
    } else {
      if (BEML_EMU_P.CoreSubsys_p.ControlStateRequestLogic_ControlType_o ==
          BEML_EMU_P.CoreSubsys_p.Increment_const_b) {
        /* Sum: '<S493>/Sum' */
        ratio = self_CoreSubsys_p[ForEach_itr_ae].
          blockIO.sf_IRQRequestStateMachine_fm.TargetStateValue -
          rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.WWCB;

        /* Signum: '<S493>/Sign' */
        if (ratio < 0.0) {
          ratio = -1.0;
        } else if (ratio > 0.0) {
          ratio = 1.0;
        } else if (ratio == 0.0) {
          ratio = 0.0;
        } else {
          ratio = (rtNaN);
        }

        /* Switch: '<S493>/Switch' incorporates:
         *  Product: '<S493>/Product1'
         *  Product: '<S498>/Product'
         */
        DiscreteTimeIntegrator_a = rtb_DataTypeConversion7_dv * diff * ratio;
      } else {
        /* Sum: '<S493>/Sum' */
        ratio = self_CoreSubsys_p[ForEach_itr_ae].
          blockIO.sf_IRQRequestStateMachine_fm.TargetStateValue -
          rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.WWCB;

        /* Signum: '<S493>/Sign' */
        if (ratio < 0.0) {
          ratio = -1.0;
        } else if (ratio > 0.0) {
          ratio = 1.0;
        } else if (ratio == 0.0) {
          ratio = 0.0;
        } else {
          ratio = (rtNaN);
        }

        /* Switch: '<S493>/Switch' incorporates:
         *  Abs: '<S493>/Abs'
         *  Product: '<S493>/Product1'
         *  Product: '<S498>/Product'
         */
        DiscreteTimeIntegrator_a = fabs(rtb_DataTypeConversion7_dv * diff *
          ratio);
      }

      rtb_Compare_lx1 = (DiscreteTimeIntegrator_a != 0.0);
    }

    /* End of Switch: '<S493>/Switch1' */

    /* DataTypeConversion: '<S409>/Data Type Conversion2' incorporates:
     *  ForEachSliceSelector generated from: '<S404>/VehicleInput'
     *  Inport: '<Root>/VehicleInput'
     */
    rtb_DataTypeConversion2_n = (BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.FloodLightNotWorking != 0.0);

    /* Chart: '<S439>/IRQRequestStateMachine' incorporates:
     *  Constant: '<S439>/Constant'
     *  Constant: '<S439>/Constant1'
     */
    BEML_EMU_IRQRequestStateMachine(rtb_DataTypeConversion2_n,
      BEML_EMU_P.CoreSubsys_p.Constant1_Value_f,
      BEML_EMU_P.CoreSubsys_p.Constant_Value_h,
      rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.CELCB,
      &self_CoreSubsys_p[ForEach_itr_ae].blockIO.sf_IRQRequestStateMachine_h,
      &self_CoreSubsys_p[ForEach_itr_ae].dwork.sf_IRQRequestStateMachine_h,
      &BEML_EMU_P.CoreSubsys_p.sf_IRQRequestStateMachine_h);

    /* DataTypeConversion: '<S586>/Data Type Conversion7' */
    rtb_DataTypeConversion7_e = self_CoreSubsys_p[ForEach_itr_ae].
      blockIO.sf_IRQRequestStateMachine_h.TriggerFaultRequest;

    /* DiscreteIntegrator: '<S586>/Discrete-Time Integrator' */
    if (((rtb_DataTypeConversion7_e > 0.0) && (self_CoreSubsys_p[ForEach_itr_ae]
          .dwork.DiscreteTimeIntegrator_PrevResetState_h <= 0)) ||
        ((rtb_DataTypeConversion7_e <= 0.0) && (self_CoreSubsys_p[ForEach_itr_ae]
          .dwork.DiscreteTimeIntegrator_PrevResetState_h == 1))) {
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_o =
        BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_IC_k;
    }

    DiscreteTransferFcn_tmp_m =
      BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_gainval_g *
      rtb_DataTypeConversion7_e + self_CoreSubsys_p[ForEach_itr_ae].
      dwork.DiscreteTimeIntegrator_DSTATE_o;

    /* End of DiscreteIntegrator: '<S586>/Discrete-Time Integrator' */

    /* DiscretePulseGenerator: '<S586>/Pulse Generator' */
    if (DiscreteTransferFcn_tmp_m >=
        BEML_EMU_P.CoreSubsys_p.PulseGenerator_PhaseDelay_m) {
      diff = DiscreteTransferFcn_tmp_m -
        BEML_EMU_P.CoreSubsys_p.PulseGenerator_PhaseDelay_m;
      ratio = diff / BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_k;
      numCycles = static_cast<uint32_T>(floor(ratio));
      if (fabs(static_cast<real_T>((numCycles + 1U)) - ratio) < DBL_EPSILON *
          ratio) {
        numCycles++;
      }

      if (diff < BEML_EMU_P.CoreSubsys_p.PulseGenerator_Duty_mt / 100.0 *
          BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_k +
          BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_k * static_cast<real_T>
          (numCycles)) {
        diff = BEML_EMU_P.CoreSubsys_p.PulseGenerator_Amp_o;
      } else {
        diff = 0.0;
      }
    } else {
      diff = 0.0;
    }

    /* End of DiscretePulseGenerator: '<S586>/Pulse Generator' */

    /* Switch: '<S581>/Switch1' incorporates:
     *  Constant: '<S581>/Constant'
     *  Constant: '<S584>/Constant'
     *  Constant: '<S585>/Constant'
     *  RelationalOperator: '<S584>/Compare'
     *  RelationalOperator: '<S585>/Compare'
     *  Switch: '<S581>/Switch'
     */
    if (BEML_EMU_P.CoreSubsys_p.ControlStateRequestLogic_ControlType_g ==
        BEML_EMU_P.CoreSubsys_p.Momentary_const_f) {
      rtb_Compare_og = (self_CoreSubsys_p[ForEach_itr_ae].
                        blockIO.sf_IRQRequestStateMachine_h.TargetStateValue !=
                        0.0);
    } else {
      if (BEML_EMU_P.CoreSubsys_p.ControlStateRequestLogic_ControlType_g ==
          BEML_EMU_P.CoreSubsys_p.Increment_const_m) {
        /* Sum: '<S581>/Sum' */
        ratio = self_CoreSubsys_p[ForEach_itr_ae].
          blockIO.sf_IRQRequestStateMachine_h.TargetStateValue -
          rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.CELCB;

        /* Signum: '<S581>/Sign' */
        if (ratio < 0.0) {
          ratio = -1.0;
        } else if (ratio > 0.0) {
          ratio = 1.0;
        } else if (ratio == 0.0) {
          ratio = 0.0;
        } else {
          ratio = (rtNaN);
        }

        /* Switch: '<S581>/Switch' incorporates:
         *  Product: '<S581>/Product1'
         *  Product: '<S586>/Product'
         */
        DiscreteTimeIntegrator_a = rtb_DataTypeConversion7_e * diff * ratio;
      } else {
        /* Sum: '<S581>/Sum' */
        ratio = self_CoreSubsys_p[ForEach_itr_ae].
          blockIO.sf_IRQRequestStateMachine_h.TargetStateValue -
          rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.CELCB;

        /* Signum: '<S581>/Sign' */
        if (ratio < 0.0) {
          ratio = -1.0;
        } else if (ratio > 0.0) {
          ratio = 1.0;
        } else if (ratio == 0.0) {
          ratio = 0.0;
        } else {
          ratio = (rtNaN);
        }

        /* Switch: '<S581>/Switch' incorporates:
         *  Abs: '<S581>/Abs'
         *  Product: '<S581>/Product1'
         *  Product: '<S586>/Product'
         */
        DiscreteTimeIntegrator_a = fabs(rtb_DataTypeConversion7_e * diff * ratio);
      }

      rtb_Compare_og = (DiscreteTimeIntegrator_a != 0.0);
    }

    /* End of Switch: '<S581>/Switch1' */

    /* DataTypeConversion: '<S409>/Data Type Conversion3' incorporates:
     *  ForEachSliceSelector generated from: '<S404>/VehicleInput'
     *  Inport: '<Root>/VehicleInput'
     */
    rtb_DataTypeConversion3_o = (BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.HeadlightFailure != 0.0);
    if ((&BEML_EMU_M)->Timing.TaskCounters.TID[2] == 0) {
      /* DataTypeConversion: '<S409>/Data Type Conversion6' incorporates:
       *  DataTypeConversion: '<S409>/Data Type Conversion4'
       *  DataTypeConversion: '<S409>/Data Type Conversion5'
       *  Logic: '<S409>/OR'
       */
      self_CoreSubsys_p[ForEach_itr_ae].blockIO.DataTypeConversion6 =
        ((rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.HLLCB != 0.0) ||
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.HLRCB != 0.0));
    }

    /* Chart: '<S442>/IRQRequestStateMachine' incorporates:
     *  Constant: '<S442>/Constant'
     *  Constant: '<S442>/Constant1'
     */
    BEML_EMU_IRQRequestStateMachine(rtb_DataTypeConversion3_o,
      BEML_EMU_P.CoreSubsys_p.Constant1_Value_mw,
      BEML_EMU_P.CoreSubsys_p.Constant_Value_b, self_CoreSubsys_p[ForEach_itr_ae]
      .blockIO.DataTypeConversion6, &self_CoreSubsys_p[ForEach_itr_ae].
      blockIO.sf_IRQRequestStateMachine_b, &self_CoreSubsys_p[ForEach_itr_ae].
      dwork.sf_IRQRequestStateMachine_b,
      &BEML_EMU_P.CoreSubsys_p.sf_IRQRequestStateMachine_b);

    /* DataTypeConversion: '<S610>/Data Type Conversion7' */
    rtb_DataTypeConversion7_l = self_CoreSubsys_p[ForEach_itr_ae].
      blockIO.sf_IRQRequestStateMachine_b.TriggerFaultRequest;

    /* DiscreteIntegrator: '<S610>/Discrete-Time Integrator' */
    if (((rtb_DataTypeConversion7_l > 0.0) && (self_CoreSubsys_p[ForEach_itr_ae]
          .dwork.DiscreteTimeIntegrator_PrevResetState_h2 <= 0)) ||
        ((rtb_DataTypeConversion7_l <= 0.0) && (self_CoreSubsys_p[ForEach_itr_ae]
          .dwork.DiscreteTimeIntegrator_PrevResetState_h2 == 1))) {
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_j =
        BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_IC_no;
    }

    rtb_Switch4_f = BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_gainval_n *
      rtb_DataTypeConversion7_l + self_CoreSubsys_p[ForEach_itr_ae].
      dwork.DiscreteTimeIntegrator_DSTATE_j;

    /* End of DiscreteIntegrator: '<S610>/Discrete-Time Integrator' */

    /* DiscretePulseGenerator: '<S610>/Pulse Generator' */
    if (rtb_Switch4_f >= BEML_EMU_P.CoreSubsys_p.PulseGenerator_PhaseDelay_f) {
      diff = rtb_Switch4_f - BEML_EMU_P.CoreSubsys_p.PulseGenerator_PhaseDelay_f;
      ratio = diff / BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_d;
      numCycles = static_cast<uint32_T>(floor(ratio));
      if (fabs(static_cast<real_T>((numCycles + 1U)) - ratio) < DBL_EPSILON *
          ratio) {
        numCycles++;
      }

      if (diff < BEML_EMU_P.CoreSubsys_p.PulseGenerator_Duty_k / 100.0 *
          BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_d +
          BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_d * static_cast<real_T>
          (numCycles)) {
        diff = BEML_EMU_P.CoreSubsys_p.PulseGenerator_Amp_m;
      } else {
        diff = 0.0;
      }
    } else {
      diff = 0.0;
    }

    /* End of DiscretePulseGenerator: '<S610>/Pulse Generator' */

    /* Switch: '<S605>/Switch1' incorporates:
     *  Constant: '<S605>/Constant'
     *  Constant: '<S608>/Constant'
     *  Constant: '<S609>/Constant'
     *  RelationalOperator: '<S608>/Compare'
     *  RelationalOperator: '<S609>/Compare'
     *  Switch: '<S605>/Switch'
     */
    if (BEML_EMU_P.CoreSubsys_p.ControlStateRequestLogic_ControlType_n ==
        BEML_EMU_P.CoreSubsys_p.Momentary_const_a) {
      rtb_Compare_nf2 = (self_CoreSubsys_p[ForEach_itr_ae].
                         blockIO.sf_IRQRequestStateMachine_b.TargetStateValue !=
                         0.0);
    } else {
      if (BEML_EMU_P.CoreSubsys_p.ControlStateRequestLogic_ControlType_n ==
          BEML_EMU_P.CoreSubsys_p.Increment_const_a) {
        /* Sum: '<S605>/Sum' */
        ratio = self_CoreSubsys_p[ForEach_itr_ae].
          blockIO.sf_IRQRequestStateMachine_b.TargetStateValue -
          self_CoreSubsys_p[ForEach_itr_ae].blockIO.DataTypeConversion6;

        /* Signum: '<S605>/Sign' */
        if (ratio < 0.0) {
          ratio = -1.0;
        } else if (ratio > 0.0) {
          ratio = 1.0;
        } else if (ratio == 0.0) {
          ratio = 0.0;
        } else {
          ratio = (rtNaN);
        }

        /* Switch: '<S605>/Switch' incorporates:
         *  Product: '<S605>/Product1'
         *  Product: '<S610>/Product'
         */
        DiscreteTimeIntegrator_a = rtb_DataTypeConversion7_l * diff * ratio;
      } else {
        /* Sum: '<S605>/Sum' */
        ratio = self_CoreSubsys_p[ForEach_itr_ae].
          blockIO.sf_IRQRequestStateMachine_b.TargetStateValue -
          self_CoreSubsys_p[ForEach_itr_ae].blockIO.DataTypeConversion6;

        /* Signum: '<S605>/Sign' */
        if (ratio < 0.0) {
          ratio = -1.0;
        } else if (ratio > 0.0) {
          ratio = 1.0;
        } else if (ratio == 0.0) {
          ratio = 0.0;
        } else {
          ratio = (rtNaN);
        }

        /* Switch: '<S605>/Switch' incorporates:
         *  Abs: '<S605>/Abs'
         *  Product: '<S605>/Product1'
         *  Product: '<S610>/Product'
         */
        DiscreteTimeIntegrator_a = fabs(rtb_DataTypeConversion7_l * diff * ratio);
      }

      rtb_Compare_nf2 = (DiscreteTimeIntegrator_a != 0.0);
    }

    /* End of Switch: '<S605>/Switch1' */

    /* DataTypeConversion: '<S409>/Data Type Conversion7' incorporates:
     *  ForEachSliceSelector generated from: '<S404>/VehicleInput'
     *  Inport: '<Root>/VehicleInput'
     */
    rtb_DataTypeConversion7_ls = (BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.MCBPAGroupOpen != 0.0);
    if ((&BEML_EMU_M)->Timing.TaskCounters.TID[2] == 0) {
      /* DataTypeConversion: '<S409>/Data Type Conversion8' incorporates:
       *  Logic: '<S449>/AND'
       */
      self_CoreSubsys_p[ForEach_itr_ae].blockIO.DataTypeConversion8 =
        ((rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.OCCB1 != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.OCCB2 != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.PISCB1 != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.PISCB2 != 0.0));
    }

    /* Chart: '<S443>/IRQRequestStateMachine' incorporates:
     *  Constant: '<S443>/Constant'
     *  Constant: '<S443>/Constant1'
     */
    BEML_EMU_IRQRequestStateMachine(rtb_DataTypeConversion7_ls,
      BEML_EMU_P.CoreSubsys_p.Constant1_Value_jy,
      BEML_EMU_P.CoreSubsys_p.Constant_Value_e, self_CoreSubsys_p[ForEach_itr_ae]
      .blockIO.DataTypeConversion8, &self_CoreSubsys_p[ForEach_itr_ae].
      blockIO.sf_IRQRequestStateMachine_o, &self_CoreSubsys_p[ForEach_itr_ae].
      dwork.sf_IRQRequestStateMachine_o,
      &BEML_EMU_P.CoreSubsys_p.sf_IRQRequestStateMachine_o);

    /* DataTypeConversion: '<S618>/Data Type Conversion7' */
    rtb_DataTypeConversion7_h = self_CoreSubsys_p[ForEach_itr_ae].
      blockIO.sf_IRQRequestStateMachine_o.TriggerFaultRequest;

    /* DiscreteIntegrator: '<S618>/Discrete-Time Integrator' */
    if (((rtb_DataTypeConversion7_h > 0.0) && (self_CoreSubsys_p[ForEach_itr_ae]
          .dwork.DiscreteTimeIntegrator_PrevResetState_l <= 0)) ||
        ((rtb_DataTypeConversion7_h <= 0.0) && (self_CoreSubsys_p[ForEach_itr_ae]
          .dwork.DiscreteTimeIntegrator_PrevResetState_l == 1))) {
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_g =
        BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_IC_c;
    }

    rtb_DataTypeConversion1_gv =
      BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_gainval_d *
      rtb_DataTypeConversion7_h + self_CoreSubsys_p[ForEach_itr_ae].
      dwork.DiscreteTimeIntegrator_DSTATE_g;

    /* End of DiscreteIntegrator: '<S618>/Discrete-Time Integrator' */

    /* DiscretePulseGenerator: '<S618>/Pulse Generator' */
    if (rtb_DataTypeConversion1_gv >=
        BEML_EMU_P.CoreSubsys_p.PulseGenerator_PhaseDelay_b) {
      diff = rtb_DataTypeConversion1_gv -
        BEML_EMU_P.CoreSubsys_p.PulseGenerator_PhaseDelay_b;
      ratio = diff / BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_a;
      numCycles = static_cast<uint32_T>(floor(ratio));
      if (fabs(static_cast<real_T>((numCycles + 1U)) - ratio) < DBL_EPSILON *
          ratio) {
        numCycles++;
      }

      if (diff < BEML_EMU_P.CoreSubsys_p.PulseGenerator_Duty_g / 100.0 *
          BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_a +
          BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_a * static_cast<real_T>
          (numCycles)) {
        diff = BEML_EMU_P.CoreSubsys_p.PulseGenerator_Amp_b;
      } else {
        diff = 0.0;
      }
    } else {
      diff = 0.0;
    }

    /* End of DiscretePulseGenerator: '<S618>/Pulse Generator' */

    /* Switch: '<S613>/Switch1' incorporates:
     *  Constant: '<S613>/Constant'
     *  Constant: '<S616>/Constant'
     *  Constant: '<S617>/Constant'
     *  RelationalOperator: '<S616>/Compare'
     *  RelationalOperator: '<S617>/Compare'
     *  Switch: '<S613>/Switch'
     */
    if (BEML_EMU_P.CoreSubsys_p.ControlStateRequestLogic_ControlType_c ==
        BEML_EMU_P.CoreSubsys_p.Momentary_const_d) {
      rtb_Compare_oi = (self_CoreSubsys_p[ForEach_itr_ae].
                        blockIO.sf_IRQRequestStateMachine_o.TargetStateValue !=
                        0.0);
    } else {
      if (BEML_EMU_P.CoreSubsys_p.ControlStateRequestLogic_ControlType_c ==
          BEML_EMU_P.CoreSubsys_p.Increment_const_d) {
        /* Sum: '<S613>/Sum' */
        ratio = self_CoreSubsys_p[ForEach_itr_ae].
          blockIO.sf_IRQRequestStateMachine_o.TargetStateValue -
          self_CoreSubsys_p[ForEach_itr_ae].blockIO.DataTypeConversion8;

        /* Signum: '<S613>/Sign' */
        if (ratio < 0.0) {
          ratio = -1.0;
        } else if (ratio > 0.0) {
          ratio = 1.0;
        } else if (ratio == 0.0) {
          ratio = 0.0;
        } else {
          ratio = (rtNaN);
        }

        /* Switch: '<S613>/Switch' incorporates:
         *  Product: '<S613>/Product1'
         *  Product: '<S618>/Product'
         */
        DiscreteTimeIntegrator_a = rtb_DataTypeConversion7_h * diff * ratio;
      } else {
        /* Sum: '<S613>/Sum' */
        ratio = self_CoreSubsys_p[ForEach_itr_ae].
          blockIO.sf_IRQRequestStateMachine_o.TargetStateValue -
          self_CoreSubsys_p[ForEach_itr_ae].blockIO.DataTypeConversion8;

        /* Signum: '<S613>/Sign' */
        if (ratio < 0.0) {
          ratio = -1.0;
        } else if (ratio > 0.0) {
          ratio = 1.0;
        } else if (ratio == 0.0) {
          ratio = 0.0;
        } else {
          ratio = (rtNaN);
        }

        /* Switch: '<S613>/Switch' incorporates:
         *  Abs: '<S613>/Abs'
         *  Product: '<S613>/Product1'
         *  Product: '<S618>/Product'
         */
        DiscreteTimeIntegrator_a = fabs(rtb_DataTypeConversion7_h * diff * ratio);
      }

      rtb_Compare_oi = (DiscreteTimeIntegrator_a != 0.0);
    }

    /* End of Switch: '<S613>/Switch1' */

    /* DataTypeConversion: '<S409>/Data Type Conversion9' incorporates:
     *  ForEachSliceSelector generated from: '<S404>/VehicleInput'
     *  Inport: '<Root>/VehicleInput'
     */
    rtb_DataTypeConversion9 = (BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.MCB110VDCGroupTripped != 0.0);
    if ((&BEML_EMU_M)->Timing.TaskCounters.TID[2] == 0) {
      /* DataTypeConversion: '<S409>/Data Type Conversion10' incorporates:
       *  Logic: '<S450>/AND'
       */
      self_CoreSubsys_p[ForEach_itr_ae].blockIO.DataTypeConversion10 =
        ((rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.TBCCB1 != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.TBCCB2 != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.SSICB != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.HCB != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.POCB != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.TVDUCB != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.ODDCB != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.WIFICB != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.WFLCB != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.WWCB != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.VCBCB != 0.0));
    }

    /* Chart: '<S444>/IRQRequestStateMachine' incorporates:
     *  Constant: '<S444>/Constant'
     *  Constant: '<S444>/Constant1'
     */
    BEML_EMU_IRQRequestStateMachine(rtb_DataTypeConversion9,
      BEML_EMU_P.CoreSubsys_p.Constant1_Value_g,
      BEML_EMU_P.CoreSubsys_p.Constant_Value_kj,
      self_CoreSubsys_p[ForEach_itr_ae].blockIO.DataTypeConversion10,
      &self_CoreSubsys_p[ForEach_itr_ae].blockIO.sf_IRQRequestStateMachine_mb,
      &self_CoreSubsys_p[ForEach_itr_ae].dwork.sf_IRQRequestStateMachine_mb,
      &BEML_EMU_P.CoreSubsys_p.sf_IRQRequestStateMachine_mb);

    /* DataTypeConversion: '<S626>/Data Type Conversion7' */
    rtb_DataTypeConversion7_ae = self_CoreSubsys_p[ForEach_itr_ae].
      blockIO.sf_IRQRequestStateMachine_mb.TriggerFaultRequest;

    /* DiscreteIntegrator: '<S626>/Discrete-Time Integrator' */
    if (((rtb_DataTypeConversion7_ae > 0.0) && (self_CoreSubsys_p[ForEach_itr_ae]
          .dwork.DiscreteTimeIntegrator_PrevResetState_p <= 0)) ||
        ((rtb_DataTypeConversion7_ae <= 0.0) &&
         (self_CoreSubsys_p[ForEach_itr_ae].
          dwork.DiscreteTimeIntegrator_PrevResetState_p == 1))) {
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_go =
        BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_IC_ca;
    }

    rtb_DataTypeConversion_d =
      BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_gainval_h *
      rtb_DataTypeConversion7_ae + self_CoreSubsys_p[ForEach_itr_ae].
      dwork.DiscreteTimeIntegrator_DSTATE_go;

    /* End of DiscreteIntegrator: '<S626>/Discrete-Time Integrator' */

    /* DiscretePulseGenerator: '<S626>/Pulse Generator' */
    if (rtb_DataTypeConversion_d >=
        BEML_EMU_P.CoreSubsys_p.PulseGenerator_PhaseDelay_i) {
      diff = rtb_DataTypeConversion_d -
        BEML_EMU_P.CoreSubsys_p.PulseGenerator_PhaseDelay_i;
      ratio = diff / BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_n;
      numCycles = static_cast<uint32_T>(floor(ratio));
      if (fabs(static_cast<real_T>((numCycles + 1U)) - ratio) < DBL_EPSILON *
          ratio) {
        numCycles++;
      }

      if (diff < BEML_EMU_P.CoreSubsys_p.PulseGenerator_Duty_c / 100.0 *
          BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_n +
          BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_n * static_cast<real_T>
          (numCycles)) {
        diff = BEML_EMU_P.CoreSubsys_p.PulseGenerator_Amp_a;
      } else {
        diff = 0.0;
      }
    } else {
      diff = 0.0;
    }

    /* End of DiscretePulseGenerator: '<S626>/Pulse Generator' */

    /* Switch: '<S621>/Switch1' incorporates:
     *  Constant: '<S621>/Constant'
     *  Constant: '<S624>/Constant'
     *  Constant: '<S625>/Constant'
     *  RelationalOperator: '<S624>/Compare'
     *  RelationalOperator: '<S625>/Compare'
     *  Switch: '<S621>/Switch'
     */
    if (BEML_EMU_P.CoreSubsys_p.ControlStateRequestLogic_ControlType_k ==
        BEML_EMU_P.CoreSubsys_p.Momentary_const_c) {
      rtb_Compare_jb = (self_CoreSubsys_p[ForEach_itr_ae].
                        blockIO.sf_IRQRequestStateMachine_mb.TargetStateValue !=
                        0.0);
    } else {
      if (BEML_EMU_P.CoreSubsys_p.ControlStateRequestLogic_ControlType_k ==
          BEML_EMU_P.CoreSubsys_p.Increment_const_c) {
        /* Sum: '<S621>/Sum' */
        ratio = self_CoreSubsys_p[ForEach_itr_ae].
          blockIO.sf_IRQRequestStateMachine_mb.TargetStateValue -
          self_CoreSubsys_p[ForEach_itr_ae].blockIO.DataTypeConversion10;

        /* Signum: '<S621>/Sign' */
        if (ratio < 0.0) {
          ratio = -1.0;
        } else if (ratio > 0.0) {
          ratio = 1.0;
        } else if (ratio == 0.0) {
          ratio = 0.0;
        } else {
          ratio = (rtNaN);
        }

        /* Switch: '<S621>/Switch' incorporates:
         *  Product: '<S621>/Product1'
         *  Product: '<S626>/Product'
         */
        DiscreteTimeIntegrator_a = rtb_DataTypeConversion7_ae * diff * ratio;
      } else {
        /* Sum: '<S621>/Sum' */
        ratio = self_CoreSubsys_p[ForEach_itr_ae].
          blockIO.sf_IRQRequestStateMachine_mb.TargetStateValue -
          self_CoreSubsys_p[ForEach_itr_ae].blockIO.DataTypeConversion10;

        /* Signum: '<S621>/Sign' */
        if (ratio < 0.0) {
          ratio = -1.0;
        } else if (ratio > 0.0) {
          ratio = 1.0;
        } else if (ratio == 0.0) {
          ratio = 0.0;
        } else {
          ratio = (rtNaN);
        }

        /* Switch: '<S621>/Switch' incorporates:
         *  Abs: '<S621>/Abs'
         *  Product: '<S621>/Product1'
         *  Product: '<S626>/Product'
         */
        DiscreteTimeIntegrator_a = fabs(rtb_DataTypeConversion7_ae * diff *
          ratio);
      }

      rtb_Compare_jb = (DiscreteTimeIntegrator_a != 0.0);
    }

    /* End of Switch: '<S621>/Switch1' */

    /* DataTypeConversion: '<S409>/Data Type Conversion12' incorporates:
     *  ForEachSliceSelector generated from: '<S404>/VehicleInput'
     *  Inport: '<Root>/VehicleInput'
     */
    rtb_DataTypeConversion12_i = (BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.MCBLightGroupTripped != 0.0);
    if ((&BEML_EMU_M)->Timing.TaskCounters.TID[2] == 0) {
      /* DataTypeConversion: '<S409>/Data Type Conversion11' incorporates:
       *  Logic: '<S451>/AND'
       */
      self_CoreSubsys_p[ForEach_itr_ae].blockIO.DataTypeConversion11 =
        ((rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.MLCB != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.CELCB != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.HLLCB != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.HLRCB != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.TLLCB != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.TLRCB != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.CILCB != 0.0));
    }

    /* Chart: '<S445>/IRQRequestStateMachine' incorporates:
     *  Constant: '<S445>/Constant'
     *  Constant: '<S445>/Constant1'
     */
    BEML_EMU_IRQRequestStateMachine(rtb_DataTypeConversion12_i,
      BEML_EMU_P.CoreSubsys_p.Constant1_Value_h,
      BEML_EMU_P.CoreSubsys_p.Constant_Value_kw,
      self_CoreSubsys_p[ForEach_itr_ae].blockIO.DataTypeConversion11,
      &self_CoreSubsys_p[ForEach_itr_ae].blockIO.sf_IRQRequestStateMachine_m,
      &self_CoreSubsys_p[ForEach_itr_ae].dwork.sf_IRQRequestStateMachine_m,
      &BEML_EMU_P.CoreSubsys_p.sf_IRQRequestStateMachine_m);

    /* DataTypeConversion: '<S634>/Data Type Conversion7' */
    rtb_DataTypeConversion7_m = self_CoreSubsys_p[ForEach_itr_ae].
      blockIO.sf_IRQRequestStateMachine_m.TriggerFaultRequest;

    /* DiscreteIntegrator: '<S634>/Discrete-Time Integrator' */
    if (((rtb_DataTypeConversion7_m > 0.0) && (self_CoreSubsys_p[ForEach_itr_ae]
          .dwork.DiscreteTimeIntegrator_PrevResetState_d <= 0)) ||
        ((rtb_DataTypeConversion7_m <= 0.0) && (self_CoreSubsys_p[ForEach_itr_ae]
          .dwork.DiscreteTimeIntegrator_PrevResetState_d == 1))) {
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_d =
        BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_IC_l;
    }

    DiscreteTransferFcn_tmp_j =
      BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_gainval_hb *
      rtb_DataTypeConversion7_m + self_CoreSubsys_p[ForEach_itr_ae].
      dwork.DiscreteTimeIntegrator_DSTATE_d;

    /* End of DiscreteIntegrator: '<S634>/Discrete-Time Integrator' */

    /* DiscretePulseGenerator: '<S634>/Pulse Generator' */
    if (DiscreteTransferFcn_tmp_j >=
        BEML_EMU_P.CoreSubsys_p.PulseGenerator_PhaseDelay_hv) {
      diff = DiscreteTransferFcn_tmp_j -
        BEML_EMU_P.CoreSubsys_p.PulseGenerator_PhaseDelay_hv;
      ratio = diff / BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_dh;
      numCycles = static_cast<uint32_T>(floor(ratio));
      if (fabs(static_cast<real_T>((numCycles + 1U)) - ratio) < DBL_EPSILON *
          ratio) {
        numCycles++;
      }

      if (diff < BEML_EMU_P.CoreSubsys_p.PulseGenerator_Duty_i / 100.0 *
          BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_dh +
          BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_dh * static_cast<real_T>
          (numCycles)) {
        diff = BEML_EMU_P.CoreSubsys_p.PulseGenerator_Amp_az;
      } else {
        diff = 0.0;
      }
    } else {
      diff = 0.0;
    }

    /* End of DiscretePulseGenerator: '<S634>/Pulse Generator' */

    /* Switch: '<S629>/Switch1' incorporates:
     *  Constant: '<S629>/Constant'
     *  Constant: '<S632>/Constant'
     *  Constant: '<S633>/Constant'
     *  RelationalOperator: '<S632>/Compare'
     *  RelationalOperator: '<S633>/Compare'
     *  Switch: '<S629>/Switch'
     */
    if (BEML_EMU_P.CoreSubsys_p.ControlStateRequestLogic_ControlType_np ==
        BEML_EMU_P.CoreSubsys_p.Momentary_const_o) {
      rtb_Compare_ig = (self_CoreSubsys_p[ForEach_itr_ae].
                        blockIO.sf_IRQRequestStateMachine_m.TargetStateValue !=
                        0.0);
    } else {
      if (BEML_EMU_P.CoreSubsys_p.ControlStateRequestLogic_ControlType_np ==
          BEML_EMU_P.CoreSubsys_p.Increment_const_i) {
        /* Sum: '<S629>/Sum' */
        ratio = self_CoreSubsys_p[ForEach_itr_ae].
          blockIO.sf_IRQRequestStateMachine_m.TargetStateValue -
          self_CoreSubsys_p[ForEach_itr_ae].blockIO.DataTypeConversion11;

        /* Signum: '<S629>/Sign' */
        if (ratio < 0.0) {
          ratio = -1.0;
        } else if (ratio > 0.0) {
          ratio = 1.0;
        } else if (ratio == 0.0) {
          ratio = 0.0;
        } else {
          ratio = (rtNaN);
        }

        /* Switch: '<S629>/Switch' incorporates:
         *  Product: '<S629>/Product1'
         *  Product: '<S634>/Product'
         */
        DiscreteTimeIntegrator_a = rtb_DataTypeConversion7_m * diff * ratio;
      } else {
        /* Sum: '<S629>/Sum' */
        ratio = self_CoreSubsys_p[ForEach_itr_ae].
          blockIO.sf_IRQRequestStateMachine_m.TargetStateValue -
          self_CoreSubsys_p[ForEach_itr_ae].blockIO.DataTypeConversion11;

        /* Signum: '<S629>/Sign' */
        if (ratio < 0.0) {
          ratio = -1.0;
        } else if (ratio > 0.0) {
          ratio = 1.0;
        } else if (ratio == 0.0) {
          ratio = 0.0;
        } else {
          ratio = (rtNaN);
        }

        /* Switch: '<S629>/Switch' incorporates:
         *  Abs: '<S629>/Abs'
         *  Product: '<S629>/Product1'
         *  Product: '<S634>/Product'
         */
        DiscreteTimeIntegrator_a = fabs(rtb_DataTypeConversion7_m * diff * ratio);
      }

      rtb_Compare_ig = (DiscreteTimeIntegrator_a != 0.0);
    }

    /* End of Switch: '<S629>/Switch1' */

    /* DataTypeConversion: '<S409>/Data Type Conversion14' incorporates:
     *  ForEachSliceSelector generated from: '<S404>/VehicleInput'
     *  Inport: '<Root>/VehicleInput'
     */
    rtb_DataTypeConversion14 = (BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.MCBLightGroupSaloonTripped != 0.0);
    if ((&BEML_EMU_M)->Timing.TaskCounters.TID[2] == 0) {
      /* DataTypeConversion: '<S409>/Data Type Conversion13' incorporates:
       *  Logic: '<S452>/AND'
       */
      self_CoreSubsys_p[ForEach_itr_ae].blockIO.DataTypeConversion13 =
        ((rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.ELCB1 != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.ELCB2 != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.ILCB1 != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.ILCB2 != 0.0));
    }

    /* Chart: '<S446>/IRQRequestStateMachine' incorporates:
     *  Constant: '<S446>/Constant'
     *  Constant: '<S446>/Constant1'
     */
    BEML_EMU_IRQRequestStateMachine(rtb_DataTypeConversion14,
      BEML_EMU_P.CoreSubsys_p.Constant1_Value_in,
      BEML_EMU_P.CoreSubsys_p.Constant_Value_bp,
      self_CoreSubsys_p[ForEach_itr_ae].blockIO.DataTypeConversion13,
      &self_CoreSubsys_p[ForEach_itr_ae].blockIO.sf_IRQRequestStateMachine_l,
      &self_CoreSubsys_p[ForEach_itr_ae].dwork.sf_IRQRequestStateMachine_l,
      &BEML_EMU_P.CoreSubsys_p.sf_IRQRequestStateMachine_l);

    /* DataTypeConversion: '<S642>/Data Type Conversion7' */
    rtb_DataTypeConversion7_ac = self_CoreSubsys_p[ForEach_itr_ae].
      blockIO.sf_IRQRequestStateMachine_l.TriggerFaultRequest;

    /* DiscreteIntegrator: '<S642>/Discrete-Time Integrator' */
    if (((rtb_DataTypeConversion7_ac > 0.0) && (self_CoreSubsys_p[ForEach_itr_ae]
          .dwork.DiscreteTimeIntegrator_PrevResetState_f <= 0)) ||
        ((rtb_DataTypeConversion7_ac <= 0.0) &&
         (self_CoreSubsys_p[ForEach_itr_ae].
          dwork.DiscreteTimeIntegrator_PrevResetState_f == 1))) {
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_i =
        BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_IC_n2;
    }

    DiscreteTimeIntegrator_a =
      BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_gainval_hc *
      rtb_DataTypeConversion7_ac + self_CoreSubsys_p[ForEach_itr_ae].
      dwork.DiscreteTimeIntegrator_DSTATE_i;

    /* End of DiscreteIntegrator: '<S642>/Discrete-Time Integrator' */

    /* DiscretePulseGenerator: '<S642>/Pulse Generator' */
    if (DiscreteTimeIntegrator_a >=
        BEML_EMU_P.CoreSubsys_p.PulseGenerator_PhaseDelay_l) {
      diff = DiscreteTimeIntegrator_a -
        BEML_EMU_P.CoreSubsys_p.PulseGenerator_PhaseDelay_l;
      ratio = diff / BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_m;
      numCycles = static_cast<uint32_T>(floor(ratio));
      if (fabs(static_cast<real_T>((numCycles + 1U)) - ratio) < DBL_EPSILON *
          ratio) {
        numCycles++;
      }

      if (diff < BEML_EMU_P.CoreSubsys_p.PulseGenerator_Duty_ih / 100.0 *
          BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_m +
          BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_m * static_cast<real_T>
          (numCycles)) {
        diff = BEML_EMU_P.CoreSubsys_p.PulseGenerator_Amp_h;
      } else {
        diff = 0.0;
      }
    } else {
      diff = 0.0;
    }

    /* End of DiscretePulseGenerator: '<S642>/Pulse Generator' */

    /* Switch: '<S637>/Switch1' incorporates:
     *  Constant: '<S637>/Constant'
     *  Constant: '<S640>/Constant'
     *  Constant: '<S641>/Constant'
     *  RelationalOperator: '<S640>/Compare'
     *  RelationalOperator: '<S641>/Compare'
     *  Switch: '<S637>/Switch'
     */
    if (BEML_EMU_P.CoreSubsys_p.ControlStateRequestLogic_ControlType_l ==
        BEML_EMU_P.CoreSubsys_p.Momentary_const_ob) {
      rtb_Compare_pr = (self_CoreSubsys_p[ForEach_itr_ae].
                        blockIO.sf_IRQRequestStateMachine_l.TargetStateValue !=
                        0.0);
    } else {
      if (BEML_EMU_P.CoreSubsys_p.ControlStateRequestLogic_ControlType_l ==
          BEML_EMU_P.CoreSubsys_p.Increment_const_ah) {
        /* Sum: '<S637>/Sum' */
        ratio = self_CoreSubsys_p[ForEach_itr_ae].
          blockIO.sf_IRQRequestStateMachine_l.TargetStateValue -
          self_CoreSubsys_p[ForEach_itr_ae].blockIO.DataTypeConversion13;

        /* Signum: '<S637>/Sign' */
        if (ratio < 0.0) {
          ratio = -1.0;
        } else if (ratio > 0.0) {
          ratio = 1.0;
        } else if (ratio == 0.0) {
          ratio = 0.0;
        } else {
          ratio = (rtNaN);
        }

        /* Switch: '<S637>/Switch' incorporates:
         *  Product: '<S637>/Product1'
         *  Product: '<S642>/Product'
         */
        rtb_Output_i = rtb_DataTypeConversion7_ac * diff * ratio;
      } else {
        /* Sum: '<S637>/Sum' */
        ratio = self_CoreSubsys_p[ForEach_itr_ae].
          blockIO.sf_IRQRequestStateMachine_l.TargetStateValue -
          self_CoreSubsys_p[ForEach_itr_ae].blockIO.DataTypeConversion13;

        /* Signum: '<S637>/Sign' */
        if (ratio < 0.0) {
          ratio = -1.0;
        } else if (ratio > 0.0) {
          ratio = 1.0;
        } else if (ratio == 0.0) {
          ratio = 0.0;
        } else {
          ratio = (rtNaN);
        }

        /* Switch: '<S637>/Switch' incorporates:
         *  Abs: '<S637>/Abs'
         *  Product: '<S637>/Product1'
         *  Product: '<S642>/Product'
         */
        rtb_Output_i = fabs(rtb_DataTypeConversion7_ac * diff * ratio);
      }

      rtb_Compare_pr = (rtb_Output_i != 0.0);
    }

    /* End of Switch: '<S637>/Switch1' */

    /* DataTypeConversion: '<S409>/Data Type Conversion16' incorporates:
     *  ForEachSliceSelector generated from: '<S404>/VehicleInput'
     *  Inport: '<Root>/VehicleInput'
     */
    rtb_DataTypeConversion16_h = (BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.MCBDoorGroupTripped != 0.0);
    if ((&BEML_EMU_M)->Timing.TaskCounters.TID[2] == 0) {
      /* DataTypeConversion: '<S409>/Data Type Conversion15' incorporates:
       *  Logic: '<S453>/AND'
       */
      self_CoreSubsys_p[ForEach_itr_ae].blockIO.DataTypeConversion15 =
        ((rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.LDRCB != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.LDLCB != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.DLCB != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.DRCB != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.LDICB != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.DPLCB != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.EDCB != 0.0));
    }

    /* Chart: '<S447>/IRQRequestStateMachine' incorporates:
     *  Constant: '<S447>/Constant'
     *  Constant: '<S447>/Constant1'
     */
    BEML_EMU_IRQRequestStateMachine(rtb_DataTypeConversion16_h,
      BEML_EMU_P.CoreSubsys_p.Constant1_Value_jj,
      BEML_EMU_P.CoreSubsys_p.Constant_Value_ep,
      self_CoreSubsys_p[ForEach_itr_ae].blockIO.DataTypeConversion15,
      &self_CoreSubsys_p[ForEach_itr_ae].blockIO.sf_IRQRequestStateMachine_e,
      &self_CoreSubsys_p[ForEach_itr_ae].dwork.sf_IRQRequestStateMachine_e,
      &BEML_EMU_P.CoreSubsys_p.sf_IRQRequestStateMachine_e);

    /* DataTypeConversion: '<S650>/Data Type Conversion7' */
    rtb_DataTypeConversion7_k = self_CoreSubsys_p[ForEach_itr_ae].
      blockIO.sf_IRQRequestStateMachine_e.TriggerFaultRequest;

    /* DiscreteIntegrator: '<S650>/Discrete-Time Integrator' */
    if (((rtb_DataTypeConversion7_k > 0.0) && (self_CoreSubsys_p[ForEach_itr_ae]
          .dwork.DiscreteTimeIntegrator_PrevResetState_lt <= 0)) ||
        ((rtb_DataTypeConversion7_k <= 0.0) && (self_CoreSubsys_p[ForEach_itr_ae]
          .dwork.DiscreteTimeIntegrator_PrevResetState_lt == 1))) {
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_dm =
        BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_IC_c4;
    }

    rtb_Output_i = BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_gainval_k *
      rtb_DataTypeConversion7_k + self_CoreSubsys_p[ForEach_itr_ae].
      dwork.DiscreteTimeIntegrator_DSTATE_dm;

    /* End of DiscreteIntegrator: '<S650>/Discrete-Time Integrator' */

    /* DiscretePulseGenerator: '<S650>/Pulse Generator' */
    if (rtb_Output_i >= BEML_EMU_P.CoreSubsys_p.PulseGenerator_PhaseDelay_g) {
      diff = rtb_Output_i - BEML_EMU_P.CoreSubsys_p.PulseGenerator_PhaseDelay_g;
      ratio = diff / BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_j;
      numCycles = static_cast<uint32_T>(floor(ratio));
      if (fabs(static_cast<real_T>((numCycles + 1U)) - ratio) < DBL_EPSILON *
          ratio) {
        numCycles++;
      }

      if (diff < BEML_EMU_P.CoreSubsys_p.PulseGenerator_Duty_b / 100.0 *
          BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_j +
          BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_j * static_cast<real_T>
          (numCycles)) {
        diff = BEML_EMU_P.CoreSubsys_p.PulseGenerator_Amp_a1;
      } else {
        diff = 0.0;
      }
    } else {
      diff = 0.0;
    }

    /* End of DiscretePulseGenerator: '<S650>/Pulse Generator' */

    /* Switch: '<S645>/Switch1' incorporates:
     *  Constant: '<S645>/Constant'
     *  Constant: '<S648>/Constant'
     *  Constant: '<S649>/Constant'
     *  RelationalOperator: '<S648>/Compare'
     *  RelationalOperator: '<S649>/Compare'
     *  Switch: '<S645>/Switch'
     */
    if (BEML_EMU_P.CoreSubsys_p.ControlStateRequestLogic_ControlType_d ==
        BEML_EMU_P.CoreSubsys_p.Momentary_const_l) {
      rtb_Compare_h1i = (self_CoreSubsys_p[ForEach_itr_ae].
                         blockIO.sf_IRQRequestStateMachine_e.TargetStateValue !=
                         0.0);
    } else {
      if (BEML_EMU_P.CoreSubsys_p.ControlStateRequestLogic_ControlType_d ==
          BEML_EMU_P.CoreSubsys_p.Increment_const_i0) {
        /* Sum: '<S645>/Sum' */
        ratio = self_CoreSubsys_p[ForEach_itr_ae].
          blockIO.sf_IRQRequestStateMachine_e.TargetStateValue -
          self_CoreSubsys_p[ForEach_itr_ae].blockIO.DataTypeConversion15;

        /* Signum: '<S645>/Sign' */
        if (ratio < 0.0) {
          ratio = -1.0;
        } else if (ratio > 0.0) {
          ratio = 1.0;
        } else if (ratio == 0.0) {
          ratio = 0.0;
        } else {
          ratio = (rtNaN);
        }

        /* Switch: '<S645>/Switch' incorporates:
         *  Product: '<S645>/Product1'
         *  Product: '<S650>/Product'
         */
        DiscreteTransferFcn_tmp_f = rtb_DataTypeConversion7_k * diff * ratio;
      } else {
        /* Sum: '<S645>/Sum' */
        ratio = self_CoreSubsys_p[ForEach_itr_ae].
          blockIO.sf_IRQRequestStateMachine_e.TargetStateValue -
          self_CoreSubsys_p[ForEach_itr_ae].blockIO.DataTypeConversion15;

        /* Signum: '<S645>/Sign' */
        if (ratio < 0.0) {
          ratio = -1.0;
        } else if (ratio > 0.0) {
          ratio = 1.0;
        } else if (ratio == 0.0) {
          ratio = 0.0;
        } else {
          ratio = (rtNaN);
        }

        /* Switch: '<S645>/Switch' incorporates:
         *  Abs: '<S645>/Abs'
         *  Product: '<S645>/Product1'
         *  Product: '<S650>/Product'
         */
        DiscreteTransferFcn_tmp_f = fabs(rtb_DataTypeConversion7_k * diff *
          ratio);
      }

      rtb_Compare_h1i = (DiscreteTransferFcn_tmp_f != 0.0);
    }

    /* End of Switch: '<S645>/Switch1' */

    /* DataTypeConversion: '<S409>/Data Type Conversion18' incorporates:
     *  ForEachSliceSelector generated from: '<S404>/VehicleInput'
     *  Inport: '<Root>/VehicleInput'
     */
    rtb_DataTypeConversion18_o = (BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.MCBBrakeGroupTripped != 0.0);
    if ((&BEML_EMU_M)->Timing.TaskCounters.TID[2] == 0) {
      /* DataTypeConversion: '<S409>/Data Type Conversion17' incorporates:
       *  Logic: '<S454>/AND'
       */
      self_CoreSubsys_p[ForEach_itr_ae].blockIO.DataTypeConversion17 =
        ((rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.BLCB != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.CMCCB != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.ZVBACB != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.EBLR1CB != 0.0)
         && (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.EBLR2CB !=
             0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.EBMVCB != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.PBCB != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.BECUCB1 != 0.0)
         && (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.BECUCB2 !=
             0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.BECUCB3 != 0.0));
    }

    /* Chart: '<S448>/IRQRequestStateMachine' incorporates:
     *  Constant: '<S448>/Constant'
     *  Constant: '<S448>/Constant1'
     */
    BEML_EMU_IRQRequestStateMachine(rtb_DataTypeConversion18_o,
      BEML_EMU_P.CoreSubsys_p.Constant1_Value_mc,
      BEML_EMU_P.CoreSubsys_p.Constant_Value_m, self_CoreSubsys_p[ForEach_itr_ae]
      .blockIO.DataTypeConversion17, &self_CoreSubsys_p[ForEach_itr_ae].
      blockIO.sf_IRQRequestStateMachine, &self_CoreSubsys_p[ForEach_itr_ae].
      dwork.sf_IRQRequestStateMachine,
      &BEML_EMU_P.CoreSubsys_p.sf_IRQRequestStateMachine);

    /* DataTypeConversion: '<S658>/Data Type Conversion7' */
    rtb_DataTypeConversion7_kp = self_CoreSubsys_p[ForEach_itr_ae].
      blockIO.sf_IRQRequestStateMachine.TriggerFaultRequest;

    /* DiscreteIntegrator: '<S658>/Discrete-Time Integrator' */
    if (((rtb_DataTypeConversion7_kp > 0.0) && (self_CoreSubsys_p[ForEach_itr_ae]
          .dwork.DiscreteTimeIntegrator_PrevResetState_h1 <= 0)) ||
        ((rtb_DataTypeConversion7_kp <= 0.0) &&
         (self_CoreSubsys_p[ForEach_itr_ae].
          dwork.DiscreteTimeIntegrator_PrevResetState_h1 == 1))) {
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_b =
        BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_IC_j;
    }

    DiscreteTransferFcn_tmp_f =
      BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_gainval_j *
      rtb_DataTypeConversion7_kp + self_CoreSubsys_p[ForEach_itr_ae].
      dwork.DiscreteTimeIntegrator_DSTATE_b;

    /* End of DiscreteIntegrator: '<S658>/Discrete-Time Integrator' */

    /* DiscretePulseGenerator: '<S658>/Pulse Generator' */
    if (DiscreteTransferFcn_tmp_f >=
        BEML_EMU_P.CoreSubsys_p.PulseGenerator_PhaseDelay_iz) {
      diff = DiscreteTransferFcn_tmp_f -
        BEML_EMU_P.CoreSubsys_p.PulseGenerator_PhaseDelay_iz;
      ratio = diff / BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_p;
      numCycles = static_cast<uint32_T>(floor(ratio));
      if (fabs(static_cast<real_T>((numCycles + 1U)) - ratio) < DBL_EPSILON *
          ratio) {
        numCycles++;
      }

      if (diff < BEML_EMU_P.CoreSubsys_p.PulseGenerator_Duty_e / 100.0 *
          BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_p +
          BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_p * static_cast<real_T>
          (numCycles)) {
        diff = BEML_EMU_P.CoreSubsys_p.PulseGenerator_Amp_l;
      } else {
        diff = 0.0;
      }
    } else {
      diff = 0.0;
    }

    /* End of DiscretePulseGenerator: '<S658>/Pulse Generator' */

    /* Switch: '<S653>/Switch1' incorporates:
     *  Constant: '<S653>/Constant'
     *  Constant: '<S656>/Constant'
     *  Constant: '<S657>/Constant'
     *  RelationalOperator: '<S656>/Compare'
     *  RelationalOperator: '<S657>/Compare'
     *  Switch: '<S653>/Switch'
     */
    if (BEML_EMU_P.CoreSubsys_p.ControlStateRequestLogic_ControlType_ot ==
        BEML_EMU_P.CoreSubsys_p.Momentary_const_j) {
      rtb_Compare_cy = (self_CoreSubsys_p[ForEach_itr_ae].
                        blockIO.sf_IRQRequestStateMachine.TargetStateValue !=
                        0.0);
    } else {
      if (BEML_EMU_P.CoreSubsys_p.ControlStateRequestLogic_ControlType_ot ==
          BEML_EMU_P.CoreSubsys_p.Increment_const_h) {
        /* Sum: '<S653>/Sum' */
        ratio = self_CoreSubsys_p[ForEach_itr_ae].
          blockIO.sf_IRQRequestStateMachine.TargetStateValue -
          self_CoreSubsys_p[ForEach_itr_ae].blockIO.DataTypeConversion17;

        /* Signum: '<S653>/Sign' */
        if (ratio < 0.0) {
          ratio = -1.0;
        } else if (ratio > 0.0) {
          ratio = 1.0;
        } else if (ratio == 0.0) {
          ratio = 0.0;
        } else {
          ratio = (rtNaN);
        }

        /* Switch: '<S653>/Switch' incorporates:
         *  Product: '<S653>/Product1'
         *  Product: '<S658>/Product'
         */
        rtb_DiscreteTransferFcn_l = rtb_DataTypeConversion7_kp * diff * ratio;
      } else {
        /* Sum: '<S653>/Sum' */
        ratio = self_CoreSubsys_p[ForEach_itr_ae].
          blockIO.sf_IRQRequestStateMachine.TargetStateValue -
          self_CoreSubsys_p[ForEach_itr_ae].blockIO.DataTypeConversion17;

        /* Signum: '<S653>/Sign' */
        if (ratio < 0.0) {
          ratio = -1.0;
        } else if (ratio > 0.0) {
          ratio = 1.0;
        } else if (ratio == 0.0) {
          ratio = 0.0;
        } else {
          ratio = (rtNaN);
        }

        /* Switch: '<S653>/Switch' incorporates:
         *  Abs: '<S653>/Abs'
         *  Product: '<S653>/Product1'
         *  Product: '<S658>/Product'
         */
        rtb_DiscreteTransferFcn_l = fabs(rtb_DataTypeConversion7_kp * diff *
          ratio);
      }

      rtb_Compare_cy = (rtb_DiscreteTransferFcn_l != 0.0);
    }

    /* End of Switch: '<S653>/Switch1' */

    /* DataTypeConversion: '<S409>/Data Type Conversion20' incorporates:
     *  ForEachSliceSelector generated from: '<S404>/VehicleInput'
     *  Inport: '<Root>/VehicleInput'
     */
    rtb_DataTypeConversion20 = (BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.MCBAPSGroupTripped != 0.0);
    if ((&BEML_EMU_M)->Timing.TaskCounters.TID[2] == 0) {
      /* DataTypeConversion: '<S409>/Data Type Conversion19' incorporates:
       *  Logic: '<S455>/AND'
       */
      self_CoreSubsys_p[ForEach_itr_ae].blockIO.DataTypeConversion19 =
        ((rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.BCGCB != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.APSCB != 0.0));
    }

    /* Chart: '<S429>/IRQRequestStateMachine' incorporates:
     *  Constant: '<S429>/Constant'
     *  Constant: '<S429>/Constant1'
     */
    BEML_EMU_IRQRequestStateMachine(rtb_DataTypeConversion20,
      BEML_EMU_P.CoreSubsys_p.Constant1_Value_p,
      BEML_EMU_P.CoreSubsys_p.Constant_Value_eg,
      self_CoreSubsys_p[ForEach_itr_ae].blockIO.DataTypeConversion19,
      &self_CoreSubsys_p[ForEach_itr_ae].blockIO.sf_IRQRequestStateMachine_a,
      &self_CoreSubsys_p[ForEach_itr_ae].dwork.sf_IRQRequestStateMachine_a,
      &BEML_EMU_P.CoreSubsys_p.sf_IRQRequestStateMachine_a);

    /* DataTypeConversion: '<S506>/Data Type Conversion7' */
    rtb_DataTypeConversion7_c = self_CoreSubsys_p[ForEach_itr_ae].
      blockIO.sf_IRQRequestStateMachine_a.TriggerFaultRequest;

    /* DiscreteIntegrator: '<S506>/Discrete-Time Integrator' */
    if (((rtb_DataTypeConversion7_c > 0.0) && (self_CoreSubsys_p[ForEach_itr_ae]
          .dwork.DiscreteTimeIntegrator_PrevResetState_ls <= 0)) ||
        ((rtb_DataTypeConversion7_c <= 0.0) && (self_CoreSubsys_p[ForEach_itr_ae]
          .dwork.DiscreteTimeIntegrator_PrevResetState_ls == 1))) {
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_l =
        BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_IC_f;
    }

    rtb_DiscreteTransferFcn_l =
      BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_gainval_l *
      rtb_DataTypeConversion7_c + self_CoreSubsys_p[ForEach_itr_ae].
      dwork.DiscreteTimeIntegrator_DSTATE_l;

    /* End of DiscreteIntegrator: '<S506>/Discrete-Time Integrator' */

    /* DiscretePulseGenerator: '<S506>/Pulse Generator' */
    if (rtb_DiscreteTransferFcn_l >=
        BEML_EMU_P.CoreSubsys_p.PulseGenerator_PhaseDelay_d) {
      diff = rtb_DiscreteTransferFcn_l -
        BEML_EMU_P.CoreSubsys_p.PulseGenerator_PhaseDelay_d;
      ratio = diff / BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_c;
      numCycles = static_cast<uint32_T>(floor(ratio));
      if (fabs(static_cast<real_T>((numCycles + 1U)) - ratio) < DBL_EPSILON *
          ratio) {
        numCycles++;
      }

      if (diff < BEML_EMU_P.CoreSubsys_p.PulseGenerator_Duty_eb / 100.0 *
          BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_c +
          BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_c * static_cast<real_T>
          (numCycles)) {
        diff = BEML_EMU_P.CoreSubsys_p.PulseGenerator_Amp_f;
      } else {
        diff = 0.0;
      }
    } else {
      diff = 0.0;
    }

    /* End of DiscretePulseGenerator: '<S506>/Pulse Generator' */

    /* Switch: '<S501>/Switch1' incorporates:
     *  Constant: '<S501>/Constant'
     *  Constant: '<S504>/Constant'
     *  Constant: '<S505>/Constant'
     *  RelationalOperator: '<S504>/Compare'
     *  RelationalOperator: '<S505>/Compare'
     *  Switch: '<S501>/Switch'
     */
    if (BEML_EMU_P.CoreSubsys_p.ControlStateRequestLogic_ControlType_c1 ==
        BEML_EMU_P.CoreSubsys_p.Momentary_const_p) {
      rtb_Compare_oj = (self_CoreSubsys_p[ForEach_itr_ae].
                        blockIO.sf_IRQRequestStateMachine_a.TargetStateValue !=
                        0.0);
    } else {
      if (BEML_EMU_P.CoreSubsys_p.ControlStateRequestLogic_ControlType_c1 ==
          BEML_EMU_P.CoreSubsys_p.Increment_const_l) {
        /* Sum: '<S501>/Sum' */
        ratio = self_CoreSubsys_p[ForEach_itr_ae].
          blockIO.sf_IRQRequestStateMachine_a.TargetStateValue -
          self_CoreSubsys_p[ForEach_itr_ae].blockIO.DataTypeConversion19;

        /* Signum: '<S501>/Sign' */
        if (ratio < 0.0) {
          ratio = -1.0;
        } else if (ratio > 0.0) {
          ratio = 1.0;
        } else if (ratio == 0.0) {
          ratio = 0.0;
        } else {
          ratio = (rtNaN);
        }

        /* Switch: '<S501>/Switch' incorporates:
         *  Product: '<S501>/Product1'
         *  Product: '<S506>/Product'
         */
        rtb_Switch_g = rtb_DataTypeConversion7_c * diff * ratio;
      } else {
        /* Sum: '<S501>/Sum' */
        ratio = self_CoreSubsys_p[ForEach_itr_ae].
          blockIO.sf_IRQRequestStateMachine_a.TargetStateValue -
          self_CoreSubsys_p[ForEach_itr_ae].blockIO.DataTypeConversion19;

        /* Signum: '<S501>/Sign' */
        if (ratio < 0.0) {
          ratio = -1.0;
        } else if (ratio > 0.0) {
          ratio = 1.0;
        } else if (ratio == 0.0) {
          ratio = 0.0;
        } else {
          ratio = (rtNaN);
        }

        /* Switch: '<S501>/Switch' incorporates:
         *  Abs: '<S501>/Abs'
         *  Product: '<S501>/Product1'
         *  Product: '<S506>/Product'
         */
        rtb_Switch_g = fabs(rtb_DataTypeConversion7_c * diff * ratio);
      }

      rtb_Compare_oj = (rtb_Switch_g != 0.0);
    }

    /* End of Switch: '<S501>/Switch1' */

    /* DataTypeConversion: '<S409>/Data Type Conversion22' incorporates:
     *  ForEachSliceSelector generated from: '<S404>/VehicleInput'
     *  Inport: '<Root>/VehicleInput'
     */
    rtb_DataTypeConversion22 = (BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.MCBTCMSGroupTripped != 0.0);
    if ((&BEML_EMU_M)->Timing.TaskCounters.TID[2] == 0) {
      /* DataTypeConversion: '<S409>/Data Type Conversion21' incorporates:
       *  Constant: '<S456>/CDUCB1_FixMe'
       *  Constant: '<S456>/ERCB1_FixMe1'
       *  Logic: '<S456>/AND'
       */
      self_CoreSubsys_p[ForEach_itr_ae].blockIO.DataTypeConversion21 =
        ((rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.TDICB != 0.0) &&
         (BEML_EMU_P.CoreSubsys_p.CDUCB1_FixMe_Value != 0.0) &&
         (BEML_EMU_P.CoreSubsys_p.ERCB1_FixMe1_Value != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.RIO1CB != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.RIO2CB != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.SIOCB1 != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.SIOCB2 != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.DIOCB1 != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.DIOCB2 != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.CDUCB != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.CSCCB != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.CSBCB != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.CSACB != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.TBNCB != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.ERCB != 0.0));
    }

    /* Chart: '<S430>/IRQRequestStateMachine' incorporates:
     *  Constant: '<S430>/Constant'
     *  Constant: '<S430>/Constant1'
     */
    BEML_EMU_IRQRequestStateMachine(rtb_DataTypeConversion22,
      BEML_EMU_P.CoreSubsys_p.Constant1_Value_iz,
      BEML_EMU_P.CoreSubsys_p.Constant_Value_p, self_CoreSubsys_p[ForEach_itr_ae]
      .blockIO.DataTypeConversion21, &self_CoreSubsys_p[ForEach_itr_ae].
      blockIO.sf_IRQRequestStateMachine_d, &self_CoreSubsys_p[ForEach_itr_ae].
      dwork.sf_IRQRequestStateMachine_d,
      &BEML_EMU_P.CoreSubsys_p.sf_IRQRequestStateMachine_d);

    /* DataTypeConversion: '<S514>/Data Type Conversion7' */
    rtb_DataTypeConversion7_n = self_CoreSubsys_p[ForEach_itr_ae].
      blockIO.sf_IRQRequestStateMachine_d.TriggerFaultRequest;

    /* DiscreteIntegrator: '<S514>/Discrete-Time Integrator' */
    if (((rtb_DataTypeConversion7_n > 0.0) && (self_CoreSubsys_p[ForEach_itr_ae]
          .dwork.DiscreteTimeIntegrator_PrevResetState_n <= 0)) ||
        ((rtb_DataTypeConversion7_n <= 0.0) && (self_CoreSubsys_p[ForEach_itr_ae]
          .dwork.DiscreteTimeIntegrator_PrevResetState_n == 1))) {
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_k =
        BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_IC_e;
    }

    rtb_Switch_g = BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_gainval_m *
      rtb_DataTypeConversion7_n + self_CoreSubsys_p[ForEach_itr_ae].
      dwork.DiscreteTimeIntegrator_DSTATE_k;

    /* End of DiscreteIntegrator: '<S514>/Discrete-Time Integrator' */

    /* DiscretePulseGenerator: '<S514>/Pulse Generator' */
    if (rtb_Switch_g >= BEML_EMU_P.CoreSubsys_p.PulseGenerator_PhaseDelay_n) {
      diff = rtb_Switch_g - BEML_EMU_P.CoreSubsys_p.PulseGenerator_PhaseDelay_n;
      ratio = diff / BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_f;
      numCycles = static_cast<uint32_T>(floor(ratio));
      if (fabs(static_cast<real_T>((numCycles + 1U)) - ratio) < DBL_EPSILON *
          ratio) {
        numCycles++;
      }

      if (diff < BEML_EMU_P.CoreSubsys_p.PulseGenerator_Duty_ir / 100.0 *
          BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_f +
          BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_f * static_cast<real_T>
          (numCycles)) {
        diff = BEML_EMU_P.CoreSubsys_p.PulseGenerator_Amp_h4;
      } else {
        diff = 0.0;
      }
    } else {
      diff = 0.0;
    }

    /* End of DiscretePulseGenerator: '<S514>/Pulse Generator' */

    /* Switch: '<S509>/Switch1' incorporates:
     *  Constant: '<S509>/Constant'
     *  Constant: '<S512>/Constant'
     *  Constant: '<S513>/Constant'
     *  RelationalOperator: '<S512>/Compare'
     *  RelationalOperator: '<S513>/Compare'
     *  Switch: '<S509>/Switch'
     */
    if (BEML_EMU_P.CoreSubsys_p.ControlStateRequestLogic_ControlType_f ==
        BEML_EMU_P.CoreSubsys_p.Momentary_const_cn) {
      rtb_Compare_hg = (self_CoreSubsys_p[ForEach_itr_ae].
                        blockIO.sf_IRQRequestStateMachine_d.TargetStateValue !=
                        0.0);
    } else {
      if (BEML_EMU_P.CoreSubsys_p.ControlStateRequestLogic_ControlType_f ==
          BEML_EMU_P.CoreSubsys_p.Increment_const_m4) {
        /* Sum: '<S509>/Sum' */
        ratio = self_CoreSubsys_p[ForEach_itr_ae].
          blockIO.sf_IRQRequestStateMachine_d.TargetStateValue -
          self_CoreSubsys_p[ForEach_itr_ae].blockIO.DataTypeConversion21;

        /* Signum: '<S509>/Sign' */
        if (ratio < 0.0) {
          ratio = -1.0;
        } else if (ratio > 0.0) {
          ratio = 1.0;
        } else if (ratio == 0.0) {
          ratio = 0.0;
        } else {
          ratio = (rtNaN);
        }

        /* Switch: '<S509>/Switch' incorporates:
         *  Product: '<S509>/Product1'
         *  Product: '<S514>/Product'
         */
        rtb_Switch_h = rtb_DataTypeConversion7_n * diff * ratio;
      } else {
        /* Sum: '<S509>/Sum' */
        ratio = self_CoreSubsys_p[ForEach_itr_ae].
          blockIO.sf_IRQRequestStateMachine_d.TargetStateValue -
          self_CoreSubsys_p[ForEach_itr_ae].blockIO.DataTypeConversion21;

        /* Signum: '<S509>/Sign' */
        if (ratio < 0.0) {
          ratio = -1.0;
        } else if (ratio > 0.0) {
          ratio = 1.0;
        } else if (ratio == 0.0) {
          ratio = 0.0;
        } else {
          ratio = (rtNaN);
        }

        /* Switch: '<S509>/Switch' incorporates:
         *  Abs: '<S509>/Abs'
         *  Product: '<S509>/Product1'
         *  Product: '<S514>/Product'
         */
        rtb_Switch_h = fabs(rtb_DataTypeConversion7_n * diff * ratio);
      }

      rtb_Compare_hg = (rtb_Switch_h != 0.0);
    }

    /* End of Switch: '<S509>/Switch1' */

    /* DataTypeConversion: '<S409>/Data Type Conversion24' incorporates:
     *  ForEachSliceSelector generated from: '<S404>/VehicleInput'
     *  Inport: '<Root>/VehicleInput'
     */
    rtb_DataTypeConversion24 = (BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.MCBSignalingGroupTripped != 0.0);
    if ((&BEML_EMU_M)->Timing.TaskCounters.TID[2] == 0) {
      /* DataTypeConversion: '<S409>/Data Type Conversion23' incorporates:
       *  Constant: '<S457>/CRSACB_FixME'
       *  Logic: '<S457>/AND'
       */
      self_CoreSubsys_p[ForEach_itr_ae].blockIO.DataTypeConversion23 =
        ((rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.TRIVCB != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.VIO2CB != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.VIO1CB != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.PPU3CB != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.PPU2CB != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.PPU1CB != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.C1CB != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.NBCB != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.MMCB != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.CRSBCB != 0.0) &&
         (BEML_EMU_P.CoreSubsys_p.CRSACB_FixME_Value != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.DMICB != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.TWVCB != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.CBTCCB1 != 0.0)
         && (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.NVICB != 0.0)
         && (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.CCNVIO1CB !=
             0.0));
    }

    /* Chart: '<S431>/IRQRequestStateMachine' incorporates:
     *  Constant: '<S431>/Constant'
     *  Constant: '<S431>/Constant1'
     */
    BEML_EMU_IRQRequestStateMachine(rtb_DataTypeConversion24,
      BEML_EMU_P.CoreSubsys_p.Constant1_Value_d,
      BEML_EMU_P.CoreSubsys_p.Constant_Value_eq,
      self_CoreSubsys_p[ForEach_itr_ae].blockIO.DataTypeConversion23,
      &self_CoreSubsys_p[ForEach_itr_ae].blockIO.sf_IRQRequestStateMachine_f,
      &self_CoreSubsys_p[ForEach_itr_ae].dwork.sf_IRQRequestStateMachine_f,
      &BEML_EMU_P.CoreSubsys_p.sf_IRQRequestStateMachine_f);

    /* DataTypeConversion: '<S522>/Data Type Conversion7' */
    rtb_DataTypeConversion7_k3 = self_CoreSubsys_p[ForEach_itr_ae].
      blockIO.sf_IRQRequestStateMachine_f.TriggerFaultRequest;

    /* DiscreteIntegrator: '<S522>/Discrete-Time Integrator' */
    if (((rtb_DataTypeConversion7_k3 > 0.0) && (self_CoreSubsys_p[ForEach_itr_ae]
          .dwork.DiscreteTimeIntegrator_PrevResetState_ni <= 0)) ||
        ((rtb_DataTypeConversion7_k3 <= 0.0) &&
         (self_CoreSubsys_p[ForEach_itr_ae].
          dwork.DiscreteTimeIntegrator_PrevResetState_ni == 1))) {
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_h =
        BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_IC_b;
    }

    rtb_Switch_h = BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_gainval_ds *
      rtb_DataTypeConversion7_k3 + self_CoreSubsys_p[ForEach_itr_ae].
      dwork.DiscreteTimeIntegrator_DSTATE_h;

    /* End of DiscreteIntegrator: '<S522>/Discrete-Time Integrator' */

    /* DiscretePulseGenerator: '<S522>/Pulse Generator' */
    if (rtb_Switch_h >= BEML_EMU_P.CoreSubsys_p.PulseGenerator_PhaseDelay_it) {
      diff = rtb_Switch_h - BEML_EMU_P.CoreSubsys_p.PulseGenerator_PhaseDelay_it;
      ratio = diff / BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_jm;
      numCycles = static_cast<uint32_T>(floor(ratio));
      if (fabs(static_cast<real_T>((numCycles + 1U)) - ratio) < DBL_EPSILON *
          ratio) {
        numCycles++;
      }

      if (diff < BEML_EMU_P.CoreSubsys_p.PulseGenerator_Duty_b2 / 100.0 *
          BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_jm +
          BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_jm * static_cast<real_T>
          (numCycles)) {
        diff = BEML_EMU_P.CoreSubsys_p.PulseGenerator_Amp_lv;
      } else {
        diff = 0.0;
      }
    } else {
      diff = 0.0;
    }

    /* End of DiscretePulseGenerator: '<S522>/Pulse Generator' */

    /* Switch: '<S517>/Switch1' incorporates:
     *  Constant: '<S517>/Constant'
     *  Constant: '<S520>/Constant'
     *  Constant: '<S521>/Constant'
     *  RelationalOperator: '<S520>/Compare'
     *  RelationalOperator: '<S521>/Compare'
     *  Switch: '<S517>/Switch'
     */
    if (BEML_EMU_P.CoreSubsys_p.ControlStateRequestLogic_ControlType_otb ==
        BEML_EMU_P.CoreSubsys_p.Momentary_const_k) {
      rtb_Compare_ec = (self_CoreSubsys_p[ForEach_itr_ae].
                        blockIO.sf_IRQRequestStateMachine_f.TargetStateValue !=
                        0.0);
    } else {
      if (BEML_EMU_P.CoreSubsys_p.ControlStateRequestLogic_ControlType_otb ==
          BEML_EMU_P.CoreSubsys_p.Increment_const_e) {
        /* Sum: '<S517>/Sum' */
        ratio = self_CoreSubsys_p[ForEach_itr_ae].
          blockIO.sf_IRQRequestStateMachine_f.TargetStateValue -
          self_CoreSubsys_p[ForEach_itr_ae].blockIO.DataTypeConversion23;

        /* Signum: '<S517>/Sign' */
        if (ratio < 0.0) {
          ratio = -1.0;
        } else if (ratio > 0.0) {
          ratio = 1.0;
        } else if (ratio == 0.0) {
          ratio = 0.0;
        } else {
          ratio = (rtNaN);
        }

        /* Switch: '<S517>/Switch' incorporates:
         *  Product: '<S517>/Product1'
         *  Product: '<S522>/Product'
         */
        rtb_Switch_p0 = rtb_DataTypeConversion7_k3 * diff * ratio;
      } else {
        /* Sum: '<S517>/Sum' */
        ratio = self_CoreSubsys_p[ForEach_itr_ae].
          blockIO.sf_IRQRequestStateMachine_f.TargetStateValue -
          self_CoreSubsys_p[ForEach_itr_ae].blockIO.DataTypeConversion23;

        /* Signum: '<S517>/Sign' */
        if (ratio < 0.0) {
          ratio = -1.0;
        } else if (ratio > 0.0) {
          ratio = 1.0;
        } else if (ratio == 0.0) {
          ratio = 0.0;
        } else {
          ratio = (rtNaN);
        }

        /* Switch: '<S517>/Switch' incorporates:
         *  Abs: '<S517>/Abs'
         *  Product: '<S517>/Product1'
         *  Product: '<S522>/Product'
         */
        rtb_Switch_p0 = fabs(rtb_DataTypeConversion7_k3 * diff * ratio);
      }

      rtb_Compare_ec = (rtb_Switch_p0 != 0.0);
    }

    /* End of Switch: '<S517>/Switch1' */

    /* DataTypeConversion: '<S409>/Data Type Conversion26' incorporates:
     *  ForEachSliceSelector generated from: '<S404>/VehicleInput'
     *  Inport: '<Root>/VehicleInput'
     */
    rtb_DataTypeConversion26 = (BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.CabEnablingCircuitBreakerTripped != 0.0);

    /* Chart: '<S432>/IRQRequestStateMachine' incorporates:
     *  Constant: '<S432>/Constant'
     *  Constant: '<S432>/Constant1'
     */
    BEML_EMU_IRQRequestStateMachine(rtb_DataTypeConversion26,
      BEML_EMU_P.CoreSubsys_p.Constant1_Value_j4,
      BEML_EMU_P.CoreSubsys_p.Constant_Value_m3,
      rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.CECB,
      &self_CoreSubsys_p[ForEach_itr_ae].blockIO.sf_IRQRequestStateMachine_hr,
      &self_CoreSubsys_p[ForEach_itr_ae].dwork.sf_IRQRequestStateMachine_hr,
      &BEML_EMU_P.CoreSubsys_p.sf_IRQRequestStateMachine_hr);

    /* DataTypeConversion: '<S530>/Data Type Conversion7' */
    rtb_DataTypeConversion7_cp = self_CoreSubsys_p[ForEach_itr_ae].
      blockIO.sf_IRQRequestStateMachine_hr.TriggerFaultRequest;

    /* DiscreteIntegrator: '<S530>/Discrete-Time Integrator' */
    if (((rtb_DataTypeConversion7_cp > 0.0) && (self_CoreSubsys_p[ForEach_itr_ae]
          .dwork.DiscreteTimeIntegrator_PrevResetState_f4 <= 0)) ||
        ((rtb_DataTypeConversion7_cp <= 0.0) &&
         (self_CoreSubsys_p[ForEach_itr_ae].
          dwork.DiscreteTimeIntegrator_PrevResetState_f4 == 1))) {
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_ks =
        BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_IC_h;
    }

    rtb_Switch_p0 = BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_gainval_g3 *
      rtb_DataTypeConversion7_cp + self_CoreSubsys_p[ForEach_itr_ae].
      dwork.DiscreteTimeIntegrator_DSTATE_ks;

    /* End of DiscreteIntegrator: '<S530>/Discrete-Time Integrator' */

    /* DiscretePulseGenerator: '<S530>/Pulse Generator' */
    if (rtb_Switch_p0 >= BEML_EMU_P.CoreSubsys_p.PulseGenerator_PhaseDelay_bz) {
      diff = rtb_Switch_p0 -
        BEML_EMU_P.CoreSubsys_p.PulseGenerator_PhaseDelay_bz;
      ratio = diff / BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_km;
      numCycles = static_cast<uint32_T>(floor(ratio));
      if (fabs(static_cast<real_T>((numCycles + 1U)) - ratio) < DBL_EPSILON *
          ratio) {
        numCycles++;
      }

      if (diff < BEML_EMU_P.CoreSubsys_p.PulseGenerator_Duty_km / 100.0 *
          BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_km +
          BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_km * static_cast<real_T>
          (numCycles)) {
        diff = BEML_EMU_P.CoreSubsys_p.PulseGenerator_Amp_d;
      } else {
        diff = 0.0;
      }
    } else {
      diff = 0.0;
    }

    /* End of DiscretePulseGenerator: '<S530>/Pulse Generator' */

    /* Switch: '<S525>/Switch1' incorporates:
     *  Constant: '<S525>/Constant'
     *  Constant: '<S528>/Constant'
     *  Constant: '<S529>/Constant'
     *  RelationalOperator: '<S528>/Compare'
     *  RelationalOperator: '<S529>/Compare'
     *  Switch: '<S525>/Switch'
     */
    if (BEML_EMU_P.CoreSubsys_p.ControlStateRequestLogic_ControlType_h ==
        BEML_EMU_P.CoreSubsys_p.Momentary_const_i) {
      rtb_Compare_pw = (self_CoreSubsys_p[ForEach_itr_ae].
                        blockIO.sf_IRQRequestStateMachine_hr.TargetStateValue !=
                        0.0);
    } else {
      if (BEML_EMU_P.CoreSubsys_p.ControlStateRequestLogic_ControlType_h ==
          BEML_EMU_P.CoreSubsys_p.Increment_const_ex) {
        /* Sum: '<S525>/Sum' */
        ratio = self_CoreSubsys_p[ForEach_itr_ae].
          blockIO.sf_IRQRequestStateMachine_hr.TargetStateValue -
          rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.CECB;

        /* Signum: '<S525>/Sign' */
        if (ratio < 0.0) {
          ratio = -1.0;
        } else if (ratio > 0.0) {
          ratio = 1.0;
        } else if (ratio == 0.0) {
          ratio = 0.0;
        } else {
          ratio = (rtNaN);
        }

        /* Switch: '<S525>/Switch' incorporates:
         *  Product: '<S525>/Product1'
         *  Product: '<S530>/Product'
         */
        diff = rtb_DataTypeConversion7_cp * diff * ratio;
      } else {
        /* Sum: '<S525>/Sum' */
        ratio = self_CoreSubsys_p[ForEach_itr_ae].
          blockIO.sf_IRQRequestStateMachine_hr.TargetStateValue -
          rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.CECB;

        /* Signum: '<S525>/Sign' */
        if (ratio < 0.0) {
          ratio = -1.0;
        } else if (ratio > 0.0) {
          ratio = 1.0;
        } else if (ratio == 0.0) {
          ratio = 0.0;
        } else {
          ratio = (rtNaN);
        }

        /* Switch: '<S525>/Switch' incorporates:
         *  Abs: '<S525>/Abs'
         *  Product: '<S525>/Product1'
         *  Product: '<S530>/Product'
         */
        diff = fabs(rtb_DataTypeConversion7_cp * diff * ratio);
      }

      rtb_Compare_pw = (diff != 0.0);
    }

    /* End of Switch: '<S525>/Switch1' */

    /* DataTypeConversion: '<S409>/Data Type Conversion28' incorporates:
     *  ForEachSliceSelector generated from: '<S404>/VehicleInput'
     *  Inport: '<Root>/VehicleInput'
     */
    rtb_DataTypeConversion28 = (BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.ExteriorLight1CBTripped != 0.0);

    /* Chart: '<S433>/IRQRequestStateMachine' incorporates:
     *  Constant: '<S433>/Constant'
     *  Constant: '<S433>/Constant1'
     */
    BEML_EMU_IRQRequestStateMachine(rtb_DataTypeConversion28,
      BEML_EMU_P.CoreSubsys_p.Constant1_Value_o,
      BEML_EMU_P.CoreSubsys_p.Constant_Value_l,
      rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.ELCB1,
      &self_CoreSubsys_p[ForEach_itr_ae].blockIO.sf_IRQRequestStateMachine_e5,
      &self_CoreSubsys_p[ForEach_itr_ae].dwork.sf_IRQRequestStateMachine_e5,
      &BEML_EMU_P.CoreSubsys_p.sf_IRQRequestStateMachine_e5);

    /* DataTypeConversion: '<S538>/Data Type Conversion7' */
    rtb_DataTypeConversion7_dh = self_CoreSubsys_p[ForEach_itr_ae].
      blockIO.sf_IRQRequestStateMachine_e5.TriggerFaultRequest;

    /* DiscreteIntegrator: '<S538>/Discrete-Time Integrator' */
    if (((rtb_DataTypeConversion7_dh > 0.0) && (self_CoreSubsys_p[ForEach_itr_ae]
          .dwork.DiscreteTimeIntegrator_PrevResetState_ph <= 0)) ||
        ((rtb_DataTypeConversion7_dh <= 0.0) &&
         (self_CoreSubsys_p[ForEach_itr_ae].
          dwork.DiscreteTimeIntegrator_PrevResetState_ph == 1))) {
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_ls =
        BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_IC_p;
    }

    DiscreteTimeIntegrator_nx =
      BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_gainval_d4 *
      rtb_DataTypeConversion7_dh + self_CoreSubsys_p[ForEach_itr_ae].
      dwork.DiscreteTimeIntegrator_DSTATE_ls;

    /* End of DiscreteIntegrator: '<S538>/Discrete-Time Integrator' */

    /* DiscretePulseGenerator: '<S538>/Pulse Generator' */
    if (DiscreteTimeIntegrator_nx >=
        BEML_EMU_P.CoreSubsys_p.PulseGenerator_PhaseDelay_k) {
      diff = DiscreteTimeIntegrator_nx -
        BEML_EMU_P.CoreSubsys_p.PulseGenerator_PhaseDelay_k;
      ratio = diff / BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_cz;
      numCycles = static_cast<uint32_T>(floor(ratio));
      if (fabs(static_cast<real_T>((numCycles + 1U)) - ratio) < DBL_EPSILON *
          ratio) {
        numCycles++;
      }

      if (diff < BEML_EMU_P.CoreSubsys_p.PulseGenerator_Duty_ck / 100.0 *
          BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_cz +
          BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_cz * static_cast<real_T>
          (numCycles)) {
        diff = BEML_EMU_P.CoreSubsys_p.PulseGenerator_Amp_hk;
      } else {
        diff = 0.0;
      }
    } else {
      diff = 0.0;
    }

    /* End of DiscretePulseGenerator: '<S538>/Pulse Generator' */

    /* Switch: '<S533>/Switch1' incorporates:
     *  Constant: '<S533>/Constant'
     *  Constant: '<S536>/Constant'
     *  Constant: '<S537>/Constant'
     *  RelationalOperator: '<S536>/Compare'
     *  RelationalOperator: '<S537>/Compare'
     *  Switch: '<S533>/Switch'
     */
    if (BEML_EMU_P.CoreSubsys_p.ControlStateRequestLogic_ControlType_le ==
        BEML_EMU_P.CoreSubsys_p.Momentary_const_b) {
      rtb_Compare_co = (self_CoreSubsys_p[ForEach_itr_ae].
                        blockIO.sf_IRQRequestStateMachine_e5.TargetStateValue !=
                        0.0);
    } else {
      if (BEML_EMU_P.CoreSubsys_p.ControlStateRequestLogic_ControlType_le ==
          BEML_EMU_P.CoreSubsys_p.Increment_const_k) {
        /* Sum: '<S533>/Sum' */
        ratio = self_CoreSubsys_p[ForEach_itr_ae].
          blockIO.sf_IRQRequestStateMachine_e5.TargetStateValue -
          rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.ELCB1;

        /* Signum: '<S533>/Sign' */
        if (ratio < 0.0) {
          ratio = -1.0;
        } else if (ratio > 0.0) {
          ratio = 1.0;
        } else if (ratio == 0.0) {
          ratio = 0.0;
        } else {
          ratio = (rtNaN);
        }

        /* Switch: '<S533>/Switch' incorporates:
         *  Product: '<S533>/Product1'
         *  Product: '<S538>/Product'
         */
        diff = rtb_DataTypeConversion7_dh * diff * ratio;
      } else {
        /* Sum: '<S533>/Sum' */
        ratio = self_CoreSubsys_p[ForEach_itr_ae].
          blockIO.sf_IRQRequestStateMachine_e5.TargetStateValue -
          rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.ELCB1;

        /* Signum: '<S533>/Sign' */
        if (ratio < 0.0) {
          ratio = -1.0;
        } else if (ratio > 0.0) {
          ratio = 1.0;
        } else if (ratio == 0.0) {
          ratio = 0.0;
        } else {
          ratio = (rtNaN);
        }

        /* Switch: '<S533>/Switch' incorporates:
         *  Abs: '<S533>/Abs'
         *  Product: '<S533>/Product1'
         *  Product: '<S538>/Product'
         */
        diff = fabs(rtb_DataTypeConversion7_dh * diff * ratio);
      }

      rtb_Compare_co = (diff != 0.0);
    }

    /* End of Switch: '<S533>/Switch1' */

    /* DataTypeConversion: '<S409>/Data Type Conversion30' incorporates:
     *  ForEachSliceSelector generated from: '<S404>/VehicleInput'
     *  Inport: '<Root>/VehicleInput'
     */
    rtb_DataTypeConversion30 = (BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.ExteriorLight2CBTripped != 0.0);

    /* Chart: '<S434>/IRQRequestStateMachine' incorporates:
     *  Constant: '<S434>/Constant'
     *  Constant: '<S434>/Constant1'
     */
    BEML_EMU_IRQRequestStateMachine(rtb_DataTypeConversion30,
      BEML_EMU_P.CoreSubsys_p.Constant1_Value_ph,
      BEML_EMU_P.CoreSubsys_p.Constant_Value_bu,
      rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.ELCB2,
      &self_CoreSubsys_p[ForEach_itr_ae].blockIO.sf_IRQRequestStateMachine_e2,
      &self_CoreSubsys_p[ForEach_itr_ae].dwork.sf_IRQRequestStateMachine_e2,
      &BEML_EMU_P.CoreSubsys_p.sf_IRQRequestStateMachine_e2);

    /* DataTypeConversion: '<S546>/Data Type Conversion7' */
    rtb_DataTypeConversion7_kv = self_CoreSubsys_p[ForEach_itr_ae].
      blockIO.sf_IRQRequestStateMachine_e2.TriggerFaultRequest;

    /* DiscreteIntegrator: '<S546>/Discrete-Time Integrator' */
    if (((rtb_DataTypeConversion7_kv > 0.0) && (self_CoreSubsys_p[ForEach_itr_ae]
          .dwork.DiscreteTimeIntegrator_PrevResetState_c <= 0)) ||
        ((rtb_DataTypeConversion7_kv <= 0.0) &&
         (self_CoreSubsys_p[ForEach_itr_ae].
          dwork.DiscreteTimeIntegrator_PrevResetState_c == 1))) {
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_f =
        BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_IC_ln;
    }

    DiscreteTimeIntegrator_g =
      BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_gainval_gz *
      rtb_DataTypeConversion7_kv + self_CoreSubsys_p[ForEach_itr_ae].
      dwork.DiscreteTimeIntegrator_DSTATE_f;

    /* End of DiscreteIntegrator: '<S546>/Discrete-Time Integrator' */

    /* DiscretePulseGenerator: '<S546>/Pulse Generator' */
    if (DiscreteTimeIntegrator_g >=
        BEML_EMU_P.CoreSubsys_p.PulseGenerator_PhaseDelay_ic) {
      diff = DiscreteTimeIntegrator_g -
        BEML_EMU_P.CoreSubsys_p.PulseGenerator_PhaseDelay_ic;
      ratio = diff / BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_jo;
      numCycles = static_cast<uint32_T>(floor(ratio));
      if (fabs(static_cast<real_T>((numCycles + 1U)) - ratio) < DBL_EPSILON *
          ratio) {
        numCycles++;
      }

      if (diff < BEML_EMU_P.CoreSubsys_p.PulseGenerator_Duty_n / 100.0 *
          BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_jo +
          BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_jo * static_cast<real_T>
          (numCycles)) {
        diff = BEML_EMU_P.CoreSubsys_p.PulseGenerator_Amp_ly;
      } else {
        diff = 0.0;
      }
    } else {
      diff = 0.0;
    }

    /* End of DiscretePulseGenerator: '<S546>/Pulse Generator' */

    /* Switch: '<S541>/Switch1' incorporates:
     *  Constant: '<S541>/Constant'
     *  Constant: '<S544>/Constant'
     *  Constant: '<S545>/Constant'
     *  RelationalOperator: '<S544>/Compare'
     *  RelationalOperator: '<S545>/Compare'
     *  Switch: '<S541>/Switch'
     */
    if (BEML_EMU_P.CoreSubsys_p.ControlStateRequestLogic_ControlType_i ==
        BEML_EMU_P.CoreSubsys_p.Momentary_const_m) {
      rtb_Compare_ld = (self_CoreSubsys_p[ForEach_itr_ae].
                        blockIO.sf_IRQRequestStateMachine_e2.TargetStateValue !=
                        0.0);
    } else {
      if (BEML_EMU_P.CoreSubsys_p.ControlStateRequestLogic_ControlType_i ==
          BEML_EMU_P.CoreSubsys_p.Increment_const_f) {
        /* Sum: '<S541>/Sum' */
        ratio = self_CoreSubsys_p[ForEach_itr_ae].
          blockIO.sf_IRQRequestStateMachine_e2.TargetStateValue -
          rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.ELCB2;

        /* Signum: '<S541>/Sign' */
        if (ratio < 0.0) {
          ratio = -1.0;
        } else if (ratio > 0.0) {
          ratio = 1.0;
        } else if (ratio == 0.0) {
          ratio = 0.0;
        } else {
          ratio = (rtNaN);
        }

        /* Switch: '<S541>/Switch' incorporates:
         *  Product: '<S541>/Product1'
         *  Product: '<S546>/Product'
         */
        diff = rtb_DataTypeConversion7_kv * diff * ratio;
      } else {
        /* Sum: '<S541>/Sum' */
        ratio = self_CoreSubsys_p[ForEach_itr_ae].
          blockIO.sf_IRQRequestStateMachine_e2.TargetStateValue -
          rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.ELCB2;

        /* Signum: '<S541>/Sign' */
        if (ratio < 0.0) {
          ratio = -1.0;
        } else if (ratio > 0.0) {
          ratio = 1.0;
        } else if (ratio == 0.0) {
          ratio = 0.0;
        } else {
          ratio = (rtNaN);
        }

        /* Switch: '<S541>/Switch' incorporates:
         *  Abs: '<S541>/Abs'
         *  Product: '<S541>/Product1'
         *  Product: '<S546>/Product'
         */
        diff = fabs(rtb_DataTypeConversion7_kv * diff * ratio);
      }

      rtb_Compare_ld = (diff != 0.0);
    }

    /* End of Switch: '<S541>/Switch1' */

    /* DataTypeConversion: '<S409>/Data Type Conversion32' incorporates:
     *  ForEachSliceSelector generated from: '<S404>/VehicleInput'
     *  Inport: '<Root>/VehicleInput'
     */
    rtb_DataTypeConversion32 = (BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.InteriorLight1CBTripped != 0.0);

    /* Chart: '<S435>/IRQRequestStateMachine' incorporates:
     *  Constant: '<S435>/Constant'
     *  Constant: '<S435>/Constant1'
     */
    BEML_EMU_IRQRequestStateMachine(rtb_DataTypeConversion32,
      BEML_EMU_P.CoreSubsys_p.Constant1_Value_no,
      BEML_EMU_P.CoreSubsys_p.Constant_Value_f,
      rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.ILCB1,
      &self_CoreSubsys_p[ForEach_itr_ae].blockIO.sf_IRQRequestStateMachine_i,
      &self_CoreSubsys_p[ForEach_itr_ae].dwork.sf_IRQRequestStateMachine_i,
      &BEML_EMU_P.CoreSubsys_p.sf_IRQRequestStateMachine_i);

    /* DataTypeConversion: '<S554>/Data Type Conversion7' */
    rtb_DataTypeConversion7_j = self_CoreSubsys_p[ForEach_itr_ae].
      blockIO.sf_IRQRequestStateMachine_i.TriggerFaultRequest;

    /* DiscreteIntegrator: '<S554>/Discrete-Time Integrator' */
    if (((rtb_DataTypeConversion7_j > 0.0) && (self_CoreSubsys_p[ForEach_itr_ae]
          .dwork.DiscreteTimeIntegrator_PrevResetState_n1 <= 0)) ||
        ((rtb_DataTypeConversion7_j <= 0.0) && (self_CoreSubsys_p[ForEach_itr_ae]
          .dwork.DiscreteTimeIntegrator_PrevResetState_n1 == 1))) {
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_ik =
        BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_IC_nl;
    }

    DiscreteTimeIntegrator_p =
      BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_gainval_e *
      rtb_DataTypeConversion7_j + self_CoreSubsys_p[ForEach_itr_ae].
      dwork.DiscreteTimeIntegrator_DSTATE_ik;

    /* End of DiscreteIntegrator: '<S554>/Discrete-Time Integrator' */

    /* DiscretePulseGenerator: '<S554>/Pulse Generator' */
    if (DiscreteTimeIntegrator_p >=
        BEML_EMU_P.CoreSubsys_p.PulseGenerator_PhaseDelay_o) {
      diff = DiscreteTimeIntegrator_p -
        BEML_EMU_P.CoreSubsys_p.PulseGenerator_PhaseDelay_o;
      ratio = diff / BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_b;
      numCycles = static_cast<uint32_T>(floor(ratio));
      if (fabs(static_cast<real_T>((numCycles + 1U)) - ratio) < DBL_EPSILON *
          ratio) {
        numCycles++;
      }

      if (diff < BEML_EMU_P.CoreSubsys_p.PulseGenerator_Duty_kk / 100.0 *
          BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_b +
          BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_b * static_cast<real_T>
          (numCycles)) {
        diff = BEML_EMU_P.CoreSubsys_p.PulseGenerator_Amp_c;
      } else {
        diff = 0.0;
      }
    } else {
      diff = 0.0;
    }

    /* End of DiscretePulseGenerator: '<S554>/Pulse Generator' */

    /* Switch: '<S549>/Switch1' incorporates:
     *  Constant: '<S549>/Constant'
     *  Constant: '<S552>/Constant'
     *  Constant: '<S553>/Constant'
     *  RelationalOperator: '<S552>/Compare'
     *  RelationalOperator: '<S553>/Compare'
     *  Switch: '<S549>/Switch'
     */
    if (BEML_EMU_P.CoreSubsys_p.ControlStateRequestLogic_ControlType_cp ==
        BEML_EMU_P.CoreSubsys_p.Momentary_const_n) {
      rtb_Compare_gt = (self_CoreSubsys_p[ForEach_itr_ae].
                        blockIO.sf_IRQRequestStateMachine_i.TargetStateValue !=
                        0.0);
    } else {
      if (BEML_EMU_P.CoreSubsys_p.ControlStateRequestLogic_ControlType_cp ==
          BEML_EMU_P.CoreSubsys_p.Increment_const_lv) {
        /* Sum: '<S549>/Sum' */
        ratio = self_CoreSubsys_p[ForEach_itr_ae].
          blockIO.sf_IRQRequestStateMachine_i.TargetStateValue -
          rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.ILCB1;

        /* Signum: '<S549>/Sign' */
        if (ratio < 0.0) {
          ratio = -1.0;
        } else if (ratio > 0.0) {
          ratio = 1.0;
        } else if (ratio == 0.0) {
          ratio = 0.0;
        } else {
          ratio = (rtNaN);
        }

        /* Switch: '<S549>/Switch' incorporates:
         *  Product: '<S549>/Product1'
         *  Product: '<S554>/Product'
         */
        diff = rtb_DataTypeConversion7_j * diff * ratio;
      } else {
        /* Sum: '<S549>/Sum' */
        ratio = self_CoreSubsys_p[ForEach_itr_ae].
          blockIO.sf_IRQRequestStateMachine_i.TargetStateValue -
          rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.ILCB1;

        /* Signum: '<S549>/Sign' */
        if (ratio < 0.0) {
          ratio = -1.0;
        } else if (ratio > 0.0) {
          ratio = 1.0;
        } else if (ratio == 0.0) {
          ratio = 0.0;
        } else {
          ratio = (rtNaN);
        }

        /* Switch: '<S549>/Switch' incorporates:
         *  Abs: '<S549>/Abs'
         *  Product: '<S549>/Product1'
         *  Product: '<S554>/Product'
         */
        diff = fabs(rtb_DataTypeConversion7_j * diff * ratio);
      }

      rtb_Compare_gt = (diff != 0.0);
    }

    /* End of Switch: '<S549>/Switch1' */

    /* DataTypeConversion: '<S409>/Data Type Conversion34' incorporates:
     *  ForEachSliceSelector generated from: '<S404>/VehicleInput'
     *  Inport: '<Root>/VehicleInput'
     */
    rtb_DataTypeConversion34 = (BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.InteriorLight2CBTripped != 0.0);

    /* Chart: '<S436>/IRQRequestStateMachine' incorporates:
     *  Constant: '<S436>/Constant'
     *  Constant: '<S436>/Constant1'
     */
    BEML_EMU_IRQRequestStateMachine(rtb_DataTypeConversion34,
      BEML_EMU_P.CoreSubsys_p.Constant1_Value_gr,
      BEML_EMU_P.CoreSubsys_p.Constant_Value_bd,
      rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.ILCB2,
      &self_CoreSubsys_p[ForEach_itr_ae].blockIO.sf_IRQRequestStateMachine_h1,
      &self_CoreSubsys_p[ForEach_itr_ae].dwork.sf_IRQRequestStateMachine_h1,
      &BEML_EMU_P.CoreSubsys_p.sf_IRQRequestStateMachine_h1);

    /* DataTypeConversion: '<S562>/Data Type Conversion7' */
    rtb_DataTypeConversion7_hx = self_CoreSubsys_p[ForEach_itr_ae].
      blockIO.sf_IRQRequestStateMachine_h1.TriggerFaultRequest;

    /* DiscreteIntegrator: '<S562>/Discrete-Time Integrator' */
    if (((rtb_DataTypeConversion7_hx > 0.0) && (self_CoreSubsys_p[ForEach_itr_ae]
          .dwork.DiscreteTimeIntegrator_PrevResetState_lo <= 0)) ||
        ((rtb_DataTypeConversion7_hx <= 0.0) &&
         (self_CoreSubsys_p[ForEach_itr_ae].
          dwork.DiscreteTimeIntegrator_PrevResetState_lo == 1))) {
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_iq =
        BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_IC_m;
    }

    DiscreteTimeIntegrator_b =
      BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_gainval_f *
      rtb_DataTypeConversion7_hx + self_CoreSubsys_p[ForEach_itr_ae].
      dwork.DiscreteTimeIntegrator_DSTATE_iq;

    /* End of DiscreteIntegrator: '<S562>/Discrete-Time Integrator' */

    /* DiscretePulseGenerator: '<S562>/Pulse Generator' */
    if (DiscreteTimeIntegrator_b >=
        BEML_EMU_P.CoreSubsys_p.PulseGenerator_PhaseDelay_e) {
      diff = DiscreteTimeIntegrator_b -
        BEML_EMU_P.CoreSubsys_p.PulseGenerator_PhaseDelay_e;
      ratio = diff / BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_f5;
      numCycles = static_cast<uint32_T>(floor(ratio));
      if (fabs(static_cast<real_T>((numCycles + 1U)) - ratio) < DBL_EPSILON *
          ratio) {
        numCycles++;
      }

      if (diff < BEML_EMU_P.CoreSubsys_p.PulseGenerator_Duty_o / 100.0 *
          BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_f5 +
          BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_f5 * static_cast<real_T>
          (numCycles)) {
        diff = BEML_EMU_P.CoreSubsys_p.PulseGenerator_Amp_oa;
      } else {
        diff = 0.0;
      }
    } else {
      diff = 0.0;
    }

    /* End of DiscretePulseGenerator: '<S562>/Pulse Generator' */

    /* Switch: '<S557>/Switch1' incorporates:
     *  Constant: '<S557>/Constant'
     *  Constant: '<S560>/Constant'
     *  Constant: '<S561>/Constant'
     *  RelationalOperator: '<S560>/Compare'
     *  RelationalOperator: '<S561>/Compare'
     *  Switch: '<S557>/Switch'
     */
    if (BEML_EMU_P.CoreSubsys_p.ControlStateRequestLogic_ControlType_dh ==
        BEML_EMU_P.CoreSubsys_p.Momentary_const_gc) {
      rtb_Compare_a5 = (self_CoreSubsys_p[ForEach_itr_ae].
                        blockIO.sf_IRQRequestStateMachine_h1.TargetStateValue !=
                        0.0);
    } else {
      if (BEML_EMU_P.CoreSubsys_p.ControlStateRequestLogic_ControlType_dh ==
          BEML_EMU_P.CoreSubsys_p.Increment_const_hk) {
        /* Sum: '<S557>/Sum' */
        ratio = self_CoreSubsys_p[ForEach_itr_ae].
          blockIO.sf_IRQRequestStateMachine_h1.TargetStateValue -
          rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.ILCB2;

        /* Signum: '<S557>/Sign' */
        if (ratio < 0.0) {
          ratio = -1.0;
        } else if (ratio > 0.0) {
          ratio = 1.0;
        } else if (ratio == 0.0) {
          ratio = 0.0;
        } else {
          ratio = (rtNaN);
        }

        /* Switch: '<S557>/Switch' incorporates:
         *  Product: '<S557>/Product1'
         *  Product: '<S562>/Product'
         */
        diff = rtb_DataTypeConversion7_hx * diff * ratio;
      } else {
        /* Sum: '<S557>/Sum' */
        ratio = self_CoreSubsys_p[ForEach_itr_ae].
          blockIO.sf_IRQRequestStateMachine_h1.TargetStateValue -
          rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.ILCB2;

        /* Signum: '<S557>/Sign' */
        if (ratio < 0.0) {
          ratio = -1.0;
        } else if (ratio > 0.0) {
          ratio = 1.0;
        } else if (ratio == 0.0) {
          ratio = 0.0;
        } else {
          ratio = (rtNaN);
        }

        /* Switch: '<S557>/Switch' incorporates:
         *  Abs: '<S557>/Abs'
         *  Product: '<S557>/Product1'
         *  Product: '<S562>/Product'
         */
        diff = fabs(rtb_DataTypeConversion7_hx * diff * ratio);
      }

      rtb_Compare_a5 = (diff != 0.0);
    }

    /* End of Switch: '<S557>/Switch1' */

    /* DataTypeConversion: '<S409>/Data Type Conversion36' incorporates:
     *  ForEachSliceSelector generated from: '<S404>/VehicleInput'
     *  Inport: '<Root>/VehicleInput'
     */
    rtb_DataTypeConversion36 = (BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.APSCircuitBreakerTripped != 0.0);

    /* Chart: '<S437>/IRQRequestStateMachine' incorporates:
     *  Constant: '<S437>/Constant'
     *  Constant: '<S437>/Constant1'
     */
    BEML_EMU_IRQRequestStateMachine(rtb_DataTypeConversion36,
      BEML_EMU_P.CoreSubsys_p.Constant1_Value_f1,
      BEML_EMU_P.CoreSubsys_p.Constant_Value_a,
      rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.APSCB,
      &self_CoreSubsys_p[ForEach_itr_ae].blockIO.sf_IRQRequestStateMachine_c,
      &self_CoreSubsys_p[ForEach_itr_ae].dwork.sf_IRQRequestStateMachine_c,
      &BEML_EMU_P.CoreSubsys_p.sf_IRQRequestStateMachine_c);

    /* DataTypeConversion: '<S570>/Data Type Conversion7' */
    rtb_DataTypeConversion7_jq = self_CoreSubsys_p[ForEach_itr_ae].
      blockIO.sf_IRQRequestStateMachine_c.TriggerFaultRequest;

    /* DiscreteIntegrator: '<S570>/Discrete-Time Integrator' */
    if (((rtb_DataTypeConversion7_jq > 0.0) && (self_CoreSubsys_p[ForEach_itr_ae]
          .dwork.DiscreteTimeIntegrator_PrevResetState_k <= 0)) ||
        ((rtb_DataTypeConversion7_jq <= 0.0) &&
         (self_CoreSubsys_p[ForEach_itr_ae].
          dwork.DiscreteTimeIntegrator_PrevResetState_k == 1))) {
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_oh =
        BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_IC_np;
    }

    DiscreteTimeIntegrator_ku =
      BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_gainval_fb *
      rtb_DataTypeConversion7_jq + self_CoreSubsys_p[ForEach_itr_ae].
      dwork.DiscreteTimeIntegrator_DSTATE_oh;

    /* End of DiscreteIntegrator: '<S570>/Discrete-Time Integrator' */

    /* DiscretePulseGenerator: '<S570>/Pulse Generator' */
    if (DiscreteTimeIntegrator_ku >=
        BEML_EMU_P.CoreSubsys_p.PulseGenerator_PhaseDelay_hf) {
      diff = DiscreteTimeIntegrator_ku -
        BEML_EMU_P.CoreSubsys_p.PulseGenerator_PhaseDelay_hf;
      ratio = diff / BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_e;
      numCycles = static_cast<uint32_T>(floor(ratio));
      if (fabs(static_cast<real_T>((numCycles + 1U)) - ratio) < DBL_EPSILON *
          ratio) {
        numCycles++;
      }

      if (diff < BEML_EMU_P.CoreSubsys_p.PulseGenerator_Duty_f / 100.0 *
          BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_e +
          BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_e * static_cast<real_T>
          (numCycles)) {
        diff = BEML_EMU_P.CoreSubsys_p.PulseGenerator_Amp_cd;
      } else {
        diff = 0.0;
      }
    } else {
      diff = 0.0;
    }

    /* End of DiscretePulseGenerator: '<S570>/Pulse Generator' */

    /* Switch: '<S565>/Switch1' incorporates:
     *  Constant: '<S565>/Constant'
     *  Constant: '<S568>/Constant'
     *  Constant: '<S569>/Constant'
     *  RelationalOperator: '<S568>/Compare'
     *  RelationalOperator: '<S569>/Compare'
     *  Switch: '<S565>/Switch'
     */
    if (BEML_EMU_P.CoreSubsys_p.ControlStateRequestLogic_ControlType_p ==
        BEML_EMU_P.CoreSubsys_p.Momentary_const_h) {
      rtb_Compare_jzm = (self_CoreSubsys_p[ForEach_itr_ae].
                         blockIO.sf_IRQRequestStateMachine_c.TargetStateValue !=
                         0.0);
    } else {
      if (BEML_EMU_P.CoreSubsys_p.ControlStateRequestLogic_ControlType_p ==
          BEML_EMU_P.CoreSubsys_p.Increment_const_g) {
        /* Sum: '<S565>/Sum' */
        ratio = self_CoreSubsys_p[ForEach_itr_ae].
          blockIO.sf_IRQRequestStateMachine_c.TargetStateValue -
          rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.APSCB;

        /* Signum: '<S565>/Sign' */
        if (ratio < 0.0) {
          ratio = -1.0;
        } else if (ratio > 0.0) {
          ratio = 1.0;
        } else if (ratio == 0.0) {
          ratio = 0.0;
        } else {
          ratio = (rtNaN);
        }

        /* Switch: '<S565>/Switch' incorporates:
         *  Product: '<S565>/Product1'
         *  Product: '<S570>/Product'
         */
        diff = rtb_DataTypeConversion7_jq * diff * ratio;
      } else {
        /* Sum: '<S565>/Sum' */
        ratio = self_CoreSubsys_p[ForEach_itr_ae].
          blockIO.sf_IRQRequestStateMachine_c.TargetStateValue -
          rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.APSCB;

        /* Signum: '<S565>/Sign' */
        if (ratio < 0.0) {
          ratio = -1.0;
        } else if (ratio > 0.0) {
          ratio = 1.0;
        } else if (ratio == 0.0) {
          ratio = 0.0;
        } else {
          ratio = (rtNaN);
        }

        /* Switch: '<S565>/Switch' incorporates:
         *  Abs: '<S565>/Abs'
         *  Product: '<S565>/Product1'
         *  Product: '<S570>/Product'
         */
        diff = fabs(rtb_DataTypeConversion7_jq * diff * ratio);
      }

      rtb_Compare_jzm = (diff != 0.0);
    }

    /* End of Switch: '<S565>/Switch1' */

    /* DataTypeConversion: '<S409>/Data Type Conversion38' incorporates:
     *  ForEachSliceSelector generated from: '<S404>/VehicleInput'
     *  Inport: '<Root>/VehicleInput'
     */
    rtb_DataTypeConversion38 = (BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.CouplingCircuitNotPowered != 0.0);

    /* Chart: '<S438>/IRQRequestStateMachine' incorporates:
     *  Constant: '<S438>/Constant'
     *  Constant: '<S438>/Constant1'
     */
    BEML_EMU_IRQRequestStateMachine(rtb_DataTypeConversion38,
      BEML_EMU_P.CoreSubsys_p.Constant1_Value_nk,
      BEML_EMU_P.CoreSubsys_p.Constant_Value_o,
      rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.VCCBOrUCCB,
      &self_CoreSubsys_p[ForEach_itr_ae].blockIO.sf_IRQRequestStateMachine_j,
      &self_CoreSubsys_p[ForEach_itr_ae].dwork.sf_IRQRequestStateMachine_j,
      &BEML_EMU_P.CoreSubsys_p.sf_IRQRequestStateMachine_j);

    /* DataTypeConversion: '<S578>/Data Type Conversion7' */
    rtb_DataTypeConversion7_nv = self_CoreSubsys_p[ForEach_itr_ae].
      blockIO.sf_IRQRequestStateMachine_j.TriggerFaultRequest;

    /* DiscreteIntegrator: '<S578>/Discrete-Time Integrator' */
    if (((rtb_DataTypeConversion7_nv > 0.0) && (self_CoreSubsys_p[ForEach_itr_ae]
          .dwork.DiscreteTimeIntegrator_PrevResetState_a <= 0)) ||
        ((rtb_DataTypeConversion7_nv <= 0.0) &&
         (self_CoreSubsys_p[ForEach_itr_ae].
          dwork.DiscreteTimeIntegrator_PrevResetState_a == 1))) {
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_e =
        BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_IC_po;
    }

    DiscreteTimeIntegrator_iy =
      BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_gainval_p *
      rtb_DataTypeConversion7_nv + self_CoreSubsys_p[ForEach_itr_ae].
      dwork.DiscreteTimeIntegrator_DSTATE_e;

    /* End of DiscreteIntegrator: '<S578>/Discrete-Time Integrator' */

    /* DiscretePulseGenerator: '<S578>/Pulse Generator' */
    if (DiscreteTimeIntegrator_iy >=
        BEML_EMU_P.CoreSubsys_p.PulseGenerator_PhaseDelay_n5) {
      diff = DiscreteTimeIntegrator_iy -
        BEML_EMU_P.CoreSubsys_p.PulseGenerator_PhaseDelay_n5;
      ratio = diff / BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_kh;
      numCycles = static_cast<uint32_T>(floor(ratio));
      if (fabs(static_cast<real_T>((numCycles + 1U)) - ratio) < DBL_EPSILON *
          ratio) {
        numCycles++;
      }

      if (diff < BEML_EMU_P.CoreSubsys_p.PulseGenerator_Duty_a / 100.0 *
          BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_kh +
          BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_kh * static_cast<real_T>
          (numCycles)) {
        diff = BEML_EMU_P.CoreSubsys_p.PulseGenerator_Amp_ah;
      } else {
        diff = 0.0;
      }
    } else {
      diff = 0.0;
    }

    /* End of DiscretePulseGenerator: '<S578>/Pulse Generator' */

    /* Switch: '<S573>/Switch1' incorporates:
     *  Constant: '<S573>/Constant'
     *  Constant: '<S576>/Constant'
     *  Constant: '<S577>/Constant'
     *  RelationalOperator: '<S576>/Compare'
     *  RelationalOperator: '<S577>/Compare'
     *  Switch: '<S573>/Switch'
     */
    if (BEML_EMU_P.CoreSubsys_p.ControlStateRequestLogic_ControlType_e ==
        BEML_EMU_P.CoreSubsys_p.Momentary_const_b4) {
      rtb_Compare_fig = (self_CoreSubsys_p[ForEach_itr_ae].
                         blockIO.sf_IRQRequestStateMachine_j.TargetStateValue !=
                         0.0);
    } else {
      if (BEML_EMU_P.CoreSubsys_p.ControlStateRequestLogic_ControlType_e ==
          BEML_EMU_P.CoreSubsys_p.Increment_const_p) {
        /* Sum: '<S573>/Sum' */
        ratio = self_CoreSubsys_p[ForEach_itr_ae].
          blockIO.sf_IRQRequestStateMachine_j.TargetStateValue -
          rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.VCCBOrUCCB;

        /* Signum: '<S573>/Sign' */
        if (ratio < 0.0) {
          ratio = -1.0;
        } else if (ratio > 0.0) {
          ratio = 1.0;
        } else if (ratio == 0.0) {
          ratio = 0.0;
        } else {
          ratio = (rtNaN);
        }

        /* Switch: '<S573>/Switch' incorporates:
         *  Product: '<S573>/Product1'
         *  Product: '<S578>/Product'
         */
        diff = rtb_DataTypeConversion7_nv * diff * ratio;
      } else {
        /* Sum: '<S573>/Sum' */
        ratio = self_CoreSubsys_p[ForEach_itr_ae].
          blockIO.sf_IRQRequestStateMachine_j.TargetStateValue -
          rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.VCCBOrUCCB;

        /* Signum: '<S573>/Sign' */
        if (ratio < 0.0) {
          ratio = -1.0;
        } else if (ratio > 0.0) {
          ratio = 1.0;
        } else if (ratio == 0.0) {
          ratio = 0.0;
        } else {
          ratio = (rtNaN);
        }

        /* Switch: '<S573>/Switch' incorporates:
         *  Abs: '<S573>/Abs'
         *  Product: '<S573>/Product1'
         *  Product: '<S578>/Product'
         */
        diff = fabs(rtb_DataTypeConversion7_nv * diff * ratio);
      }

      rtb_Compare_fig = (diff != 0.0);
    }

    /* End of Switch: '<S573>/Switch1' */

    /* DataTypeConversion: '<S409>/Data Type Conversion40' incorporates:
     *  ForEachSliceSelector generated from: '<S404>/VehicleInput'
     *  Inport: '<Root>/VehicleInput'
     */
    rtb_DataTypeConversion40 = (BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.PantographCircuitNotEnergized != 0.0);

    /* Chart: '<S440>/IRQRequestStateMachine' incorporates:
     *  Constant: '<S440>/Constant'
     *  Constant: '<S440>/Constant1'
     */
    BEML_EMU_IRQRequestStateMachine(rtb_DataTypeConversion40,
      BEML_EMU_P.CoreSubsys_p.Constant1_Value_k5,
      BEML_EMU_P.CoreSubsys_p.Constant_Value_b3,
      rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.PANCB,
      &self_CoreSubsys_p[ForEach_itr_ae].blockIO.sf_IRQRequestStateMachine_p,
      &self_CoreSubsys_p[ForEach_itr_ae].dwork.sf_IRQRequestStateMachine_p,
      &BEML_EMU_P.CoreSubsys_p.sf_IRQRequestStateMachine_p);

    /* DataTypeConversion: '<S594>/Data Type Conversion7' */
    rtb_DataTypeConversion7_et = self_CoreSubsys_p[ForEach_itr_ae].
      blockIO.sf_IRQRequestStateMachine_p.TriggerFaultRequest;

    /* DiscreteIntegrator: '<S594>/Discrete-Time Integrator' */
    if (((rtb_DataTypeConversion7_et > 0.0) && (self_CoreSubsys_p[ForEach_itr_ae]
          .dwork.DiscreteTimeIntegrator_PrevResetState_m <= 0)) ||
        ((rtb_DataTypeConversion7_et <= 0.0) &&
         (self_CoreSubsys_p[ForEach_itr_ae].
          dwork.DiscreteTimeIntegrator_PrevResetState_m == 1))) {
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_c =
        BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_IC_j2;
    }

    DiscreteTimeIntegrator_nd =
      BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_gainval_n4 *
      rtb_DataTypeConversion7_et + self_CoreSubsys_p[ForEach_itr_ae].
      dwork.DiscreteTimeIntegrator_DSTATE_c;

    /* End of DiscreteIntegrator: '<S594>/Discrete-Time Integrator' */

    /* DiscretePulseGenerator: '<S594>/Pulse Generator' */
    if (DiscreteTimeIntegrator_nd >=
        BEML_EMU_P.CoreSubsys_p.PulseGenerator_PhaseDelay_c) {
      diff = DiscreteTimeIntegrator_nd -
        BEML_EMU_P.CoreSubsys_p.PulseGenerator_PhaseDelay_c;
      ratio = diff / BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_kx;
      numCycles = static_cast<uint32_T>(floor(ratio));
      if (fabs(static_cast<real_T>((numCycles + 1U)) - ratio) < DBL_EPSILON *
          ratio) {
        numCycles++;
      }

      if (diff < BEML_EMU_P.CoreSubsys_p.PulseGenerator_Duty_j / 100.0 *
          BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_kx +
          BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_kx * static_cast<real_T>
          (numCycles)) {
        diff = BEML_EMU_P.CoreSubsys_p.PulseGenerator_Amp_dp;
      } else {
        diff = 0.0;
      }
    } else {
      diff = 0.0;
    }

    /* End of DiscretePulseGenerator: '<S594>/Pulse Generator' */

    /* Switch: '<S589>/Switch1' incorporates:
     *  Constant: '<S589>/Constant'
     *  Constant: '<S592>/Constant'
     *  Constant: '<S593>/Constant'
     *  RelationalOperator: '<S592>/Compare'
     *  RelationalOperator: '<S593>/Compare'
     *  Switch: '<S589>/Switch'
     */
    if (BEML_EMU_P.CoreSubsys_p.ControlStateRequestLogic_ControlType_db ==
        BEML_EMU_P.CoreSubsys_p.Momentary_const_ah) {
      rtb_Compare_mn = (self_CoreSubsys_p[ForEach_itr_ae].
                        blockIO.sf_IRQRequestStateMachine_p.TargetStateValue !=
                        0.0);
    } else {
      if (BEML_EMU_P.CoreSubsys_p.ControlStateRequestLogic_ControlType_db ==
          BEML_EMU_P.CoreSubsys_p.Increment_const_ik) {
        /* Sum: '<S589>/Sum' */
        ratio = self_CoreSubsys_p[ForEach_itr_ae].
          blockIO.sf_IRQRequestStateMachine_p.TargetStateValue -
          rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.PANCB;

        /* Signum: '<S589>/Sign' */
        if (ratio < 0.0) {
          ratio = -1.0;
        } else if (ratio > 0.0) {
          ratio = 1.0;
        } else if (ratio == 0.0) {
          ratio = 0.0;
        } else {
          ratio = (rtNaN);
        }

        /* Switch: '<S589>/Switch' incorporates:
         *  Product: '<S589>/Product1'
         *  Product: '<S594>/Product'
         */
        diff = rtb_DataTypeConversion7_et * diff * ratio;
      } else {
        /* Sum: '<S589>/Sum' */
        ratio = self_CoreSubsys_p[ForEach_itr_ae].
          blockIO.sf_IRQRequestStateMachine_p.TargetStateValue -
          rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.PANCB;

        /* Signum: '<S589>/Sign' */
        if (ratio < 0.0) {
          ratio = -1.0;
        } else if (ratio > 0.0) {
          ratio = 1.0;
        } else if (ratio == 0.0) {
          ratio = 0.0;
        } else {
          ratio = (rtNaN);
        }

        /* Switch: '<S589>/Switch' incorporates:
         *  Abs: '<S589>/Abs'
         *  Product: '<S589>/Product1'
         *  Product: '<S594>/Product'
         */
        diff = fabs(rtb_DataTypeConversion7_et * diff * ratio);
      }

      rtb_Compare_mn = (diff != 0.0);
    }

    /* End of Switch: '<S589>/Switch1' */

    /* DataTypeConversion: '<S409>/Data Type Conversion42' incorporates:
     *  ForEachSliceSelector generated from: '<S404>/VehicleInput'
     *  Inport: '<Root>/VehicleInput'
     */
    rtb_DataTypeConversion42 = (BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.MCBHVACGroupTripped != 0.0);
    if ((&BEML_EMU_M)->Timing.TaskCounters.TID[2] == 0) {
      /* DataTypeConversion: '<S409>/Data Type Conversion41' incorporates:
       *  Logic: '<S458>/AND'
       */
      self_CoreSubsys_p[ForEach_itr_ae].blockIO.DataTypeConversion41 =
        ((rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.CBFCCB != 0.0) &&
         (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.SAC2CCB != 0.0)
         && (rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.SAC1CCB !=
             0.0));
    }

    /* Chart: '<S441>/IRQRequestStateMachine' incorporates:
     *  Constant: '<S441>/Constant'
     *  Constant: '<S441>/Constant1'
     */
    BEML_EMU_IRQRequestStateMachine(rtb_DataTypeConversion42,
      BEML_EMU_P.CoreSubsys_p.Constant1_Value_h4,
      BEML_EMU_P.CoreSubsys_p.Constant_Value_ac,
      self_CoreSubsys_p[ForEach_itr_ae].blockIO.DataTypeConversion41,
      &self_CoreSubsys_p[ForEach_itr_ae].blockIO.sf_IRQRequestStateMachine_ma,
      &self_CoreSubsys_p[ForEach_itr_ae].dwork.sf_IRQRequestStateMachine_ma,
      &BEML_EMU_P.CoreSubsys_p.sf_IRQRequestStateMachine_ma);

    /* DataTypeConversion: '<S602>/Data Type Conversion7' */
    rtb_DataTypeConversion7_j5 = self_CoreSubsys_p[ForEach_itr_ae].
      blockIO.sf_IRQRequestStateMachine_ma.TriggerFaultRequest;

    /* DiscreteIntegrator: '<S602>/Discrete-Time Integrator' */
    if (((rtb_DataTypeConversion7_j5 > 0.0) && (self_CoreSubsys_p[ForEach_itr_ae]
          .dwork.DiscreteTimeIntegrator_PrevResetState_fg <= 0)) ||
        ((rtb_DataTypeConversion7_j5 <= 0.0) &&
         (self_CoreSubsys_p[ForEach_itr_ae].
          dwork.DiscreteTimeIntegrator_PrevResetState_fg == 1))) {
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_pp =
        BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_IC_be;
    }

    DiscreteTimeIntegrator_mt =
      BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_gainval_oo *
      rtb_DataTypeConversion7_j5 + self_CoreSubsys_p[ForEach_itr_ae].
      dwork.DiscreteTimeIntegrator_DSTATE_pp;

    /* End of DiscreteIntegrator: '<S602>/Discrete-Time Integrator' */

    /* DiscretePulseGenerator: '<S602>/Pulse Generator' */
    if (DiscreteTimeIntegrator_mt >=
        BEML_EMU_P.CoreSubsys_p.PulseGenerator_PhaseDelay_a) {
      diff = DiscreteTimeIntegrator_mt -
        BEML_EMU_P.CoreSubsys_p.PulseGenerator_PhaseDelay_a;
      ratio = diff / BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_ld;
      numCycles = static_cast<uint32_T>(floor(ratio));
      if (fabs(static_cast<real_T>((numCycles + 1U)) - ratio) < DBL_EPSILON *
          ratio) {
        numCycles++;
      }

      if (diff < BEML_EMU_P.CoreSubsys_p.PulseGenerator_Duty_d / 100.0 *
          BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_ld +
          BEML_EMU_P.CoreSubsys_p.PulseGenerator_Period_ld * static_cast<real_T>
          (numCycles)) {
        diff = BEML_EMU_P.CoreSubsys_p.PulseGenerator_Amp_n;
      } else {
        diff = 0.0;
      }
    } else {
      diff = 0.0;
    }

    /* End of DiscretePulseGenerator: '<S602>/Pulse Generator' */

    /* Switch: '<S597>/Switch1' incorporates:
     *  Constant: '<S597>/Constant'
     *  Constant: '<S600>/Constant'
     *  Constant: '<S601>/Constant'
     *  RelationalOperator: '<S600>/Compare'
     *  RelationalOperator: '<S601>/Compare'
     *  Switch: '<S597>/Switch'
     */
    if (BEML_EMU_P.CoreSubsys_p.ControlStateRequestLogic_ControlType_dj ==
        BEML_EMU_P.CoreSubsys_p.Momentary_const_pg) {
      rtb_Compare_gni = (self_CoreSubsys_p[ForEach_itr_ae].
                         blockIO.sf_IRQRequestStateMachine_ma.TargetStateValue
                         != 0.0);
    } else {
      if (BEML_EMU_P.CoreSubsys_p.ControlStateRequestLogic_ControlType_dj ==
          BEML_EMU_P.CoreSubsys_p.Increment_const_pd) {
        /* Sum: '<S597>/Sum' */
        ratio = self_CoreSubsys_p[ForEach_itr_ae].
          blockIO.sf_IRQRequestStateMachine_ma.TargetStateValue -
          self_CoreSubsys_p[ForEach_itr_ae].blockIO.DataTypeConversion41;

        /* Signum: '<S597>/Sign' */
        if (ratio < 0.0) {
          ratio = -1.0;
        } else if (ratio > 0.0) {
          ratio = 1.0;
        } else if (ratio == 0.0) {
          ratio = 0.0;
        } else {
          ratio = (rtNaN);
        }

        /* Switch: '<S597>/Switch' incorporates:
         *  Product: '<S597>/Product1'
         *  Product: '<S602>/Product'
         */
        diff = rtb_DataTypeConversion7_j5 * diff * ratio;
      } else {
        /* Sum: '<S597>/Sum' */
        ratio = self_CoreSubsys_p[ForEach_itr_ae].
          blockIO.sf_IRQRequestStateMachine_ma.TargetStateValue -
          self_CoreSubsys_p[ForEach_itr_ae].blockIO.DataTypeConversion41;

        /* Signum: '<S597>/Sign' */
        if (ratio < 0.0) {
          ratio = -1.0;
        } else if (ratio > 0.0) {
          ratio = 1.0;
        } else if (ratio == 0.0) {
          ratio = 0.0;
        } else {
          ratio = (rtNaN);
        }

        /* Switch: '<S597>/Switch' incorporates:
         *  Abs: '<S597>/Abs'
         *  Product: '<S597>/Product1'
         *  Product: '<S602>/Product'
         */
        diff = fabs(rtb_DataTypeConversion7_j5 * diff * ratio);
      }

      rtb_Compare_gni = (diff != 0.0);
    }

    /* End of Switch: '<S597>/Switch1' */

    /* ForEachSliceAssignment generated from: '<S404>/VehicleFaultStates' incorporates:
     *  BusAssignment: '<S412>/Bus Assignment'
     *  Constant: '<S412>/Constant1'
     */
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleFaultStates_at_inport_0[ForEach_itr_ae]
      = BEML_EMU_P.CoreSubsys_p.Constant1_Value;

    /* BusAssignment: '<S412>/Bus Assignment' incorporates:
     *  BusCreator: '<S404>/Bus Creator'
     *  DataTypeConversion: '<S412>/Data Type Conversion'
     *  DataTypeConversion: '<S412>/Data Type Conversion11'
     *  DataTypeConversion: '<S412>/Data Type Conversion13'
     *  DataTypeConversion: '<S412>/Data Type Conversion15'
     *  DataTypeConversion: '<S412>/Data Type Conversion17'
     *  DataTypeConversion: '<S412>/Data Type Conversion19'
     *  DataTypeConversion: '<S412>/Data Type Conversion2'
     *  DataTypeConversion: '<S412>/Data Type Conversion3'
     *  DataTypeConversion: '<S412>/Data Type Conversion4'
     *  DataTypeConversion: '<S412>/Data Type Conversion5'
     *  DataTypeConversion: '<S412>/Data Type Conversion7'
     *  DataTypeConversion: '<S412>/Data Type Conversion9'
     *  ForEachSliceAssignment generated from: '<S404>/VehicleFaultStates'
     *  ForEachSliceSelector generated from: '<S404>/VehicleConfig'
     *  ForEachSliceSelector generated from: '<S404>/VehicleInput'
     *  Inport: '<Root>/VehicleInput'
     *  Logic: '<S412>/AND'
     *  Logic: '<S412>/AND2'
     *  Logic: '<S412>/AND3'
     *  Logic: '<S412>/AND4'
     *  Logic: '<S412>/AND5'
     *  Logic: '<S412>/AND6'
     *  Logic: '<S412>/AND7'
     *  Logic: '<S412>/AND8'
     *  Logic: '<S412>/AND9'
     *  Outport: '<Root>/ProcessedVehConf'
     */
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleFaultStates_at_inport_0[ForEach_itr_ae]
      .DoorCloseObstruction = BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.DoorCloseObstruction;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleFaultStates_at_inport_0[ForEach_itr_ae]
      .DoorOpenObstruction = BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.DoorOpenObstruction;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleFaultStates_at_inport_0[ForEach_itr_ae]
      .PantographDownForADDIntervention =
      ((BEML_EMU_U.VehicleInput[ForEach_itr_ae].
        Faults.PantographDownForADDIntervention != 0.0) &&
       BEML_EMU_Y.ProcessedVehConf[ForEach_itr_ae].Electrical.HasPanto);
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleFaultStates_at_inport_0[ForEach_itr_ae]
      .PantographDownForORDIntervention = 0.0;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleFaultStates_at_inport_0[ForEach_itr_ae]
      .PantographRaiseFailure = ((BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.PantographRaiseFailure != 0.0) &&
      BEML_EMU_Y.ProcessedVehConf[ForEach_itr_ae].Electrical.HasPanto);
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleFaultStates_at_inport_0[ForEach_itr_ae]
      .CCDetectDetrainmentDoorOpen = BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.CCDetectDetrainmentDoorOpen;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleFaultStates_at_inport_0[ForEach_itr_ae]
      .MasterControllerandTrainLineIncongruence =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.MasterControllerandTrainLineIncongruence;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleFaultStates_at_inport_0[ForEach_itr_ae]
      .HVAC1EmergencyInverterTrip = BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.HVAC1EmergencyInverterTrip;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleFaultStates_at_inport_0[ForEach_itr_ae]
      .VCBOpenedByACOvercurrent = (rtb_Compare_mk &&
      BEML_EMU_Y.ProcessedVehConf[ForEach_itr_ae].Electrical.HasPanto);
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleFaultStates_at_inport_0[ForEach_itr_ae]
      .MCBAPSGroupTripped = (rtb_Compare_eib &&
      BEML_EMU_Y.ProcessedVehConf[ForEach_itr_ae].Electrical.HasPanto);
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleFaultStates_at_inport_0[ForEach_itr_ae]
      .APSCircuitBreakerTripped = (rtb_Compare_ha &&
      BEML_EMU_Y.ProcessedVehConf[ForEach_itr_ae].Electrical.HasPanto);
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleFaultStates_at_inport_0[ForEach_itr_ae]
      .VCBOpenedByMTrProtection = (rtb_Compare_ll &&
      BEML_EMU_Y.ProcessedVehConf[ForEach_itr_ae].Electrical.HasPanto);
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleFaultStates_at_inport_0[ForEach_itr_ae]
      .VCBOpenedByAPS = (rtb_Compare_gd &&
                         BEML_EMU_Y.ProcessedVehConf[ForEach_itr_ae].
                         Electrical.HasPanto);
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleFaultStates_at_inport_0[ForEach_itr_ae]
      .VCBMissingClosing = (rtb_Compare_kq &&
      BEML_EMU_Y.ProcessedVehConf[ForEach_itr_ae].Electrical.HasPanto);
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleFaultStates_at_inport_0[ForEach_itr_ae]
      .VCBMissingOpening = (rtb_Compare_nsw &&
      BEML_EMU_Y.ProcessedVehConf[ForEach_itr_ae].Electrical.HasPanto);

    /* RateTransition: '<S409>/Rate Transition1' incorporates:
     *  BusCreator: '<S409>/Bus Creator1'
     *  RateTransition: '<S404>/Rate Transition'
     *  UnitDelay: '<S409>/Unit Delay1'
     */
    if ((&BEML_EMU_M)->Timing.TaskCounters.TID[2] == 0) {
      self_CoreSubsys_p[ForEach_itr_ae].blockIO.APSICBInternalRequest =
        self_CoreSubsys_p[ForEach_itr_ae].dwork.RateTransition1_Buffer0;

      /* RateTransition: '<S409>/Rate Transition2' */
      self_CoreSubsys_p[ForEach_itr_ae].blockIO.FDSCBInternalRequest =
        self_CoreSubsys_p[ForEach_itr_ae].dwork.RateTransition2_Buffer0;

      /* RateTransition: '<S409>/Rate Transition3' */
      self_CoreSubsys_p[ForEach_itr_ae].blockIO.SAC1CBInternalRequest =
        self_CoreSubsys_p[ForEach_itr_ae].dwork.RateTransition3_Buffer0;

      /* RateTransition: '<S409>/Rate Transition4' */
      self_CoreSubsys_p[ForEach_itr_ae].blockIO.SAC2CBInternalRequest =
        self_CoreSubsys_p[ForEach_itr_ae].dwork.RateTransition4_Buffer0;
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.RateTransition_Buffer.CCMCBInternalRequest = rtb_Compare_j1;
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.RateTransition_Buffer.WWCBInternalRequest = rtb_Compare_lx1;
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.RateTransition_Buffer.CELCBInternalRequest = rtb_Compare_og;
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.RateTransition_Buffer.HLCBInternalRequest = rtb_Compare_nf2;
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.RateTransition_Buffer.MCBPAGroupOpenInternalRequest =
        rtb_Compare_oi;
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.RateTransition_Buffer.MCB110VDCGroupOpenInternalRequest =
        rtb_Compare_jb;
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.RateTransition_Buffer.MCBLightGroupOpenInternalRequest =
        rtb_Compare_ig;
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.RateTransition_Buffer.MCBLightSaloonGroupOpenInternalRequest =
        rtb_Compare_pr;
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.RateTransition_Buffer.MCBDoorGroupOpenInternalRequest =
        rtb_Compare_h1i;
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.RateTransition_Buffer.MCBBrakeGroupOpenInternalRequest =
        rtb_Compare_cy;
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.RateTransition_Buffer.MCBAPSGroupOpenInternalRequest =
        rtb_Compare_oj;
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.RateTransition_Buffer.MCBTCMSGroupOpenInternalRequest =
        rtb_Compare_hg;
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.RateTransition_Buffer.MCBSignallingGroupOpenInternalRequest =
        rtb_Compare_ec;
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.RateTransition_Buffer.CECBOpenInternalRequest = rtb_Compare_pw;
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.RateTransition_Buffer.ELCB1OpenInternalRequest = rtb_Compare_co;
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.RateTransition_Buffer.ELCB2OpenInternalRequest = rtb_Compare_ld;
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.RateTransition_Buffer.ILCB1OpenInternalRequest = rtb_Compare_gt;
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.RateTransition_Buffer.ILCB2OpenInternalRequest = rtb_Compare_a5;
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.RateTransition_Buffer.APSCBOpenInternalRequest = rtb_Compare_jzm;
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.RateTransition_Buffer.UCCBOpenInternalRequest = rtb_Compare_fig;
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.RateTransition_Buffer.PANCBOpenInternalRequest = rtb_Compare_mn;
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.RateTransition_Buffer.MCBHVACGroupOpenInternalRequest =
        rtb_Compare_gni;
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.RateTransition_Buffer.ORDPlungerInternalRequest =
        self_CoreSubsys_p[ForEach_itr_ae].dwork.UnitDelay1_DSTATE;
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.RateTransition_Buffer.APSICBInternalRequest =
        self_CoreSubsys_p[ForEach_itr_ae].blockIO.APSICBInternalRequest;
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.RateTransition_Buffer.FDSCBInternalRequest =
        self_CoreSubsys_p[ForEach_itr_ae].blockIO.FDSCBInternalRequest;
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.RateTransition_Buffer.SAC1CBInternalRequest =
        self_CoreSubsys_p[ForEach_itr_ae].blockIO.SAC1CBInternalRequest;
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.RateTransition_Buffer.SAC2CBInternalRequest =
        self_CoreSubsys_p[ForEach_itr_ae].blockIO.SAC2CBInternalRequest;
      rtb_IOControlsModelFaults_CoreSubsysCanOut =
        self_CoreSubsys_p[ForEach_itr_ae].dwork.RateTransition_Buffer;

      /* DataTypeConversion: '<S409>/Data Type Conversion44' incorporates:
       *  BusCreator: '<S409>/Bus Creator1'
       *  ForEachSliceSelector generated from: '<S404>/TCMSSystemFB'
       *  UnitDelay: '<S409>/Unit Delay1'
       */
      rtb_DataTypeConversion44 = (BEML_EMU_B.UnitDelay3[ForEach_itr_ae].
        Control.ElectricalSystem.TCMSAPSCBTripCmd != 0.0);

      /* UnitDelay: '<S423>/Unit Delay' */
      rtb_UnitDelay_g = self_CoreSubsys_p[ForEach_itr_ae].dwork.UnitDelay_DSTATE;

      /* Chart: '<S423>/Chart' */
      BEML_EMU_Chart(rtb_DataTypeConversion44, rtb_UnitDelay_g,
                     &self_CoreSubsys_p[ForEach_itr_ae].blockIO.sf_Chart_f,
                     &self_CoreSubsys_p[ForEach_itr_ae].dwork.sf_Chart_f,
                     &BEML_EMU_P.CoreSubsys_p.sf_Chart_f);

      /* Switch: '<S423>/Switch' incorporates:
       *  Constant: '<S423>/Constant'
       *  Constant: '<S423>/Constant1'
       */
      if (self_CoreSubsys_p[ForEach_itr_ae].blockIO.sf_Chart_f.UseFaultedTarget)
      {
        rtb_Switch_l = BEML_EMU_P.CoreSubsys_p.ControlStateFault_FltStVal;
      } else {
        rtb_Switch_l = BEML_EMU_P.CoreSubsys_p.ControlStateFault_NormalStVal;
      }

      /* End of Switch: '<S423>/Switch' */

      /* Outputs for Enabled SubSystem: '<S423>/ControlStateRequest' */
      BEML_EMU_ControlStateRequest(self_CoreSubsys_p[ForEach_itr_ae].
        blockIO.sf_Chart_f.TriggerFaultRequest, rtb_Switch_l,
        rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.APSICB,
        &self_CoreSubsys_p[ForEach_itr_ae].blockIO.ControlStateRequest_a,
        &self_CoreSubsys_p[ForEach_itr_ae].dwork.ControlStateRequest_a,
        &BEML_EMU_P.CoreSubsys_p.ControlStateRequest_a,
        BEML_EMU_P.CoreSubsys_p.ControlStateRequest_ControlType);

      /* End of Outputs for SubSystem: '<S423>/ControlStateRequest' */

      /* DataTypeConversion: '<S409>/Data Type Conversion46' incorporates:
       *  ForEachSliceSelector generated from: '<S404>/TCMSSystemFB'
       */
      rtb_DataTypeConversion46 = (BEML_EMU_B.UnitDelay3[ForEach_itr_ae].
        Control.ElectricalSystem.TCMSFDSCBTripCmd != 0.0);

      /* UnitDelay: '<S424>/Unit Delay' */
      rtb_UnitDelay_j = self_CoreSubsys_p[ForEach_itr_ae].
        dwork.UnitDelay_DSTATE_a;

      /* Chart: '<S424>/Chart' */
      BEML_EMU_Chart(rtb_DataTypeConversion46, rtb_UnitDelay_j,
                     &self_CoreSubsys_p[ForEach_itr_ae].blockIO.sf_Chart_k,
                     &self_CoreSubsys_p[ForEach_itr_ae].dwork.sf_Chart_k,
                     &BEML_EMU_P.CoreSubsys_p.sf_Chart_k);

      /* Switch: '<S424>/Switch' incorporates:
       *  Constant: '<S424>/Constant'
       *  Constant: '<S424>/Constant1'
       */
      if (self_CoreSubsys_p[ForEach_itr_ae].blockIO.sf_Chart_k.UseFaultedTarget)
      {
        rtb_Switch_n = BEML_EMU_P.CoreSubsys_p.ControlStateFault1_FltStVal;
      } else {
        rtb_Switch_n = BEML_EMU_P.CoreSubsys_p.ControlStateFault1_NormalStVal;
      }

      /* End of Switch: '<S424>/Switch' */

      /* Outputs for Enabled SubSystem: '<S424>/ControlStateRequest' */
      BEML_EMU_ControlStateRequest(self_CoreSubsys_p[ForEach_itr_ae].
        blockIO.sf_Chart_k.TriggerFaultRequest, rtb_Switch_n,
        rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.FDSCB,
        &self_CoreSubsys_p[ForEach_itr_ae].blockIO.ControlStateRequest_n,
        &self_CoreSubsys_p[ForEach_itr_ae].dwork.ControlStateRequest_n,
        &BEML_EMU_P.CoreSubsys_p.ControlStateRequest_n,
        BEML_EMU_P.CoreSubsys_p.ControlStateRequest_ControlType_b);

      /* End of Outputs for SubSystem: '<S424>/ControlStateRequest' */

      /* DataTypeConversion: '<S409>/Data Type Conversion48' incorporates:
       *  ForEachSliceSelector generated from: '<S404>/TCMSSystemFB'
       */
      rtb_DataTypeConversion48 = (BEML_EMU_B.UnitDelay3[ForEach_itr_ae].
        Control.ElectricalSystem.TCMSHVAC1CBTripCmd != 0.0);

      /* UnitDelay: '<S425>/Unit Delay' */
      rtb_UnitDelay_h = self_CoreSubsys_p[ForEach_itr_ae].
        dwork.UnitDelay_DSTATE_p;

      /* Chart: '<S425>/Chart' */
      BEML_EMU_Chart(rtb_DataTypeConversion48, rtb_UnitDelay_h,
                     &self_CoreSubsys_p[ForEach_itr_ae].blockIO.sf_Chart_e,
                     &self_CoreSubsys_p[ForEach_itr_ae].dwork.sf_Chart_e,
                     &BEML_EMU_P.CoreSubsys_p.sf_Chart_e);

      /* Switch: '<S425>/Switch' incorporates:
       *  Constant: '<S425>/Constant'
       *  Constant: '<S425>/Constant1'
       */
      if (self_CoreSubsys_p[ForEach_itr_ae].blockIO.sf_Chart_e.UseFaultedTarget)
      {
        rtb_Switch_o = BEML_EMU_P.CoreSubsys_p.ControlStateFault2_FltStVal;
      } else {
        rtb_Switch_o = BEML_EMU_P.CoreSubsys_p.ControlStateFault2_NormalStVal;
      }

      /* End of Switch: '<S425>/Switch' */

      /* Outputs for Enabled SubSystem: '<S425>/ControlStateRequest' */
      BEML_EMU_ControlStateRequest(self_CoreSubsys_p[ForEach_itr_ae].
        blockIO.sf_Chart_e.TriggerFaultRequest, rtb_Switch_o,
        rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.SAC1CCB,
        &self_CoreSubsys_p[ForEach_itr_ae].blockIO.ControlStateRequest_i,
        &self_CoreSubsys_p[ForEach_itr_ae].dwork.ControlStateRequest_i,
        &BEML_EMU_P.CoreSubsys_p.ControlStateRequest_i,
        BEML_EMU_P.CoreSubsys_p.ControlStateRequest_ControlType_k);

      /* End of Outputs for SubSystem: '<S425>/ControlStateRequest' */

      /* DataTypeConversion: '<S409>/Data Type Conversion51' incorporates:
       *  ForEachSliceSelector generated from: '<S404>/TCMSSystemFB'
       */
      rtb_DataTypeConversion51 = (BEML_EMU_B.UnitDelay3[ForEach_itr_ae].
        Control.ElectricalSystem.TCMSHVAC2CBTripCmd != 0.0);

      /* UnitDelay: '<S426>/Unit Delay' */
      rtb_UnitDelay_i = self_CoreSubsys_p[ForEach_itr_ae].
        dwork.UnitDelay_DSTATE_k;

      /* Chart: '<S426>/Chart' */
      BEML_EMU_Chart(rtb_DataTypeConversion51, rtb_UnitDelay_i,
                     &self_CoreSubsys_p[ForEach_itr_ae].blockIO.sf_Chart,
                     &self_CoreSubsys_p[ForEach_itr_ae].dwork.sf_Chart,
                     &BEML_EMU_P.CoreSubsys_p.sf_Chart);

      /* Switch: '<S426>/Switch' incorporates:
       *  Constant: '<S426>/Constant'
       *  Constant: '<S426>/Constant1'
       */
      if (self_CoreSubsys_p[ForEach_itr_ae].blockIO.sf_Chart.UseFaultedTarget) {
        rtb_Switch_ow = BEML_EMU_P.CoreSubsys_p.ControlStateFault3_FltStVal;
      } else {
        rtb_Switch_ow = BEML_EMU_P.CoreSubsys_p.ControlStateFault3_NormalStVal;
      }

      /* End of Switch: '<S426>/Switch' */

      /* Outputs for Enabled SubSystem: '<S426>/ControlStateRequest' */
      BEML_EMU_ControlStateRequest(self_CoreSubsys_p[ForEach_itr_ae].
        blockIO.sf_Chart.TriggerFaultRequest, rtb_Switch_ow,
        rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.SAC2CCB,
        &self_CoreSubsys_p[ForEach_itr_ae].blockIO.ControlStateRequest,
        &self_CoreSubsys_p[ForEach_itr_ae].dwork.ControlStateRequest,
        &BEML_EMU_P.CoreSubsys_p.ControlStateRequest,
        BEML_EMU_P.CoreSubsys_p.ControlStateRequest_ControlType_l);

      /* End of Outputs for SubSystem: '<S426>/ControlStateRequest' */

      /* DataTypeConversion: '<S409>/Data Type Conversion50' */
      rtb_AND_p = (self_CoreSubsys_p[ForEach_itr_ae].
                   blockIO.ControlStateRequest.Switch1 != 0.0);

      /* DataTypeConversion: '<S409>/Data Type Conversion52' */
      rtb_CollisionDetected = (self_CoreSubsys_p[ForEach_itr_ae].
        blockIO.ControlStateRequest_i.Switch1 != 0.0);

      /* DataTypeConversion: '<S409>/Data Type Conversion53' */
      rtb_Compare_g42 = (self_CoreSubsys_p[ForEach_itr_ae].
                         blockIO.ControlStateRequest_n.Switch1 != 0.0);

      /* DataTypeConversion: '<S409>/Data Type Conversion54' */
      rtb_Compare_ja = (self_CoreSubsys_p[ForEach_itr_ae].
                        blockIO.ControlStateRequest_a.Switch1 != 0.0);

      /* Update for UnitDelay: '<S415>/Delay Input1' */
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DelayInput1_DSTATE_iw =
        rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.ModeSelector;
    }

    /* End of RateTransition: '<S409>/Rate Transition1' */

    /* Update for UnitDelay: '<S419>/Delay Input1' incorporates:
     *  ForEachSliceSelector generated from: '<S404>/VehicleInput'
     *  Inport: '<Root>/VehicleInput'
     */
    self_CoreSubsys_p[ForEach_itr_ae].dwork.DelayInput1_DSTATE =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.BrakeDemandSignalFailure;

    /* Update for Memory: '<S421>/Memory' */
    self_CoreSubsys_p[ForEach_itr_ae].dwork.Memory_PreviousInput =
      rtb_Compare_nn;

    /* Update for UnitDelay: '<S416>/Delay Input1' incorporates:
     *  ForEachSliceSelector generated from: '<S404>/VehicleInput'
     *  Inport: '<Root>/VehicleInput'
     */
    self_CoreSubsys_p[ForEach_itr_ae].dwork.DelayInput1_DSTATE_i =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.BrakeDemandSignalFailure;

    /* Update for UnitDelay: '<S420>/Delay Input1' */
    self_CoreSubsys_p[ForEach_itr_ae].dwork.DelayInput1_DSTATE_g =
      rtb_Compare_pg;

    /* Update for Memory: '<S422>/Memory' */
    self_CoreSubsys_p[ForEach_itr_ae].dwork.Memory_PreviousInput_g =
      rtb_Compare_or;

    /* Update for UnitDelay: '<S418>/Delay Input1' incorporates:
     *  ForEachSliceSelector generated from: '<S404>/VehicleInput'
     *  Inport: '<Root>/VehicleInput'
     */
    self_CoreSubsys_p[ForEach_itr_ae].dwork.DelayInput1_DSTATE_b =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.PantographDownForORDIntervention;
    if ((&BEML_EMU_M)->Timing.TaskCounters.TID[2] == 0) {
      /* Update for UnitDelay: '<S417>/Delay Input1' */
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DelayInput1_DSTATE_l =
        rtb_ImpSel_InsertedFor_InputControlStates_at_outport_0.ORDPlunger;
    }

    /* Update for DiscreteIntegrator: '<S490>/Discrete-Time Integrator' */
    self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE =
      rtb_Product_cv;
    if (rtb_DataTypeConversion7_d > 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState = 1;
    } else if (rtb_DataTypeConversion7_d < 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState = -1;
    } else if (rtb_DataTypeConversion7_d == 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState = 0;
    } else {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState = 2;
    }

    /* End of Update for DiscreteIntegrator: '<S490>/Discrete-Time Integrator' */

    /* Update for DiscreteIntegrator: '<S498>/Discrete-Time Integrator' */
    self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_p =
      DiscreteTransferFcn_tmp_e;
    if (rtb_DataTypeConversion7_dv > 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_j = 1;
    } else if (rtb_DataTypeConversion7_dv < 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_j = -1;
    } else if (rtb_DataTypeConversion7_dv == 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_j = 0;
    } else {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_j = 2;
    }

    /* End of Update for DiscreteIntegrator: '<S498>/Discrete-Time Integrator' */

    /* Update for DiscreteIntegrator: '<S586>/Discrete-Time Integrator' */
    self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_o =
      DiscreteTransferFcn_tmp_m;
    if (rtb_DataTypeConversion7_e > 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_h = 1;
    } else if (rtb_DataTypeConversion7_e < 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_h = -1;
    } else if (rtb_DataTypeConversion7_e == 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_h = 0;
    } else {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_h = 2;
    }

    /* End of Update for DiscreteIntegrator: '<S586>/Discrete-Time Integrator' */

    /* Update for DiscreteIntegrator: '<S610>/Discrete-Time Integrator' */
    self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_j =
      rtb_Switch4_f;
    if (rtb_DataTypeConversion7_l > 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_h2 = 1;
    } else if (rtb_DataTypeConversion7_l < 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_h2 = -1;
    } else if (rtb_DataTypeConversion7_l == 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_h2 = 0;
    } else {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_h2 = 2;
    }

    /* End of Update for DiscreteIntegrator: '<S610>/Discrete-Time Integrator' */

    /* Update for DiscreteIntegrator: '<S618>/Discrete-Time Integrator' */
    self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_g =
      rtb_DataTypeConversion1_gv;
    if (rtb_DataTypeConversion7_h > 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_l = 1;
    } else if (rtb_DataTypeConversion7_h < 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_l = -1;
    } else if (rtb_DataTypeConversion7_h == 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_l = 0;
    } else {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_l = 2;
    }

    /* End of Update for DiscreteIntegrator: '<S618>/Discrete-Time Integrator' */

    /* Update for DiscreteIntegrator: '<S626>/Discrete-Time Integrator' */
    self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_go =
      rtb_DataTypeConversion_d;
    if (rtb_DataTypeConversion7_ae > 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_p = 1;
    } else if (rtb_DataTypeConversion7_ae < 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_p = -1;
    } else if (rtb_DataTypeConversion7_ae == 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_p = 0;
    } else {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_p = 2;
    }

    /* End of Update for DiscreteIntegrator: '<S626>/Discrete-Time Integrator' */

    /* Update for DiscreteIntegrator: '<S634>/Discrete-Time Integrator' */
    self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_d =
      DiscreteTransferFcn_tmp_j;
    if (rtb_DataTypeConversion7_m > 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_d = 1;
    } else if (rtb_DataTypeConversion7_m < 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_d = -1;
    } else if (rtb_DataTypeConversion7_m == 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_d = 0;
    } else {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_d = 2;
    }

    /* End of Update for DiscreteIntegrator: '<S634>/Discrete-Time Integrator' */

    /* Update for DiscreteIntegrator: '<S642>/Discrete-Time Integrator' */
    self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_i =
      DiscreteTimeIntegrator_a;
    if (rtb_DataTypeConversion7_ac > 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_f = 1;
    } else if (rtb_DataTypeConversion7_ac < 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_f = -1;
    } else if (rtb_DataTypeConversion7_ac == 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_f = 0;
    } else {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_f = 2;
    }

    /* End of Update for DiscreteIntegrator: '<S642>/Discrete-Time Integrator' */

    /* Update for DiscreteIntegrator: '<S650>/Discrete-Time Integrator' */
    self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_dm =
      rtb_Output_i;
    if (rtb_DataTypeConversion7_k > 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_lt = 1;
    } else if (rtb_DataTypeConversion7_k < 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_lt = -1;
    } else if (rtb_DataTypeConversion7_k == 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_lt = 0;
    } else {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_lt = 2;
    }

    /* End of Update for DiscreteIntegrator: '<S650>/Discrete-Time Integrator' */

    /* Update for DiscreteIntegrator: '<S658>/Discrete-Time Integrator' */
    self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_b =
      DiscreteTransferFcn_tmp_f;
    if (rtb_DataTypeConversion7_kp > 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_h1 = 1;
    } else if (rtb_DataTypeConversion7_kp < 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_h1 = -1;
    } else if (rtb_DataTypeConversion7_kp == 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_h1 = 0;
    } else {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_h1 = 2;
    }

    /* End of Update for DiscreteIntegrator: '<S658>/Discrete-Time Integrator' */

    /* Update for DiscreteIntegrator: '<S506>/Discrete-Time Integrator' */
    self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_l =
      rtb_DiscreteTransferFcn_l;
    if (rtb_DataTypeConversion7_c > 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_ls = 1;
    } else if (rtb_DataTypeConversion7_c < 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_ls = -1;
    } else if (rtb_DataTypeConversion7_c == 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_ls = 0;
    } else {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_ls = 2;
    }

    /* End of Update for DiscreteIntegrator: '<S506>/Discrete-Time Integrator' */

    /* Update for DiscreteIntegrator: '<S514>/Discrete-Time Integrator' */
    self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_k =
      rtb_Switch_g;
    if (rtb_DataTypeConversion7_n > 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_n = 1;
    } else if (rtb_DataTypeConversion7_n < 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_n = -1;
    } else if (rtb_DataTypeConversion7_n == 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_n = 0;
    } else {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_n = 2;
    }

    /* End of Update for DiscreteIntegrator: '<S514>/Discrete-Time Integrator' */

    /* Update for DiscreteIntegrator: '<S522>/Discrete-Time Integrator' */
    self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_h =
      rtb_Switch_h;
    if (rtb_DataTypeConversion7_k3 > 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_ni = 1;
    } else if (rtb_DataTypeConversion7_k3 < 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_ni = -1;
    } else if (rtb_DataTypeConversion7_k3 == 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_ni = 0;
    } else {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_ni = 2;
    }

    /* End of Update for DiscreteIntegrator: '<S522>/Discrete-Time Integrator' */

    /* Update for DiscreteIntegrator: '<S530>/Discrete-Time Integrator' */
    self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_ks =
      rtb_Switch_p0;
    if (rtb_DataTypeConversion7_cp > 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_f4 = 1;
    } else if (rtb_DataTypeConversion7_cp < 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_f4 = -1;
    } else if (rtb_DataTypeConversion7_cp == 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_f4 = 0;
    } else {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_f4 = 2;
    }

    /* End of Update for DiscreteIntegrator: '<S530>/Discrete-Time Integrator' */

    /* Update for DiscreteIntegrator: '<S538>/Discrete-Time Integrator' */
    self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_ls =
      DiscreteTimeIntegrator_nx;
    if (rtb_DataTypeConversion7_dh > 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_ph = 1;
    } else if (rtb_DataTypeConversion7_dh < 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_ph = -1;
    } else if (rtb_DataTypeConversion7_dh == 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_ph = 0;
    } else {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_ph = 2;
    }

    /* End of Update for DiscreteIntegrator: '<S538>/Discrete-Time Integrator' */

    /* Update for DiscreteIntegrator: '<S546>/Discrete-Time Integrator' */
    self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_f =
      DiscreteTimeIntegrator_g;
    if (rtb_DataTypeConversion7_kv > 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_c = 1;
    } else if (rtb_DataTypeConversion7_kv < 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_c = -1;
    } else if (rtb_DataTypeConversion7_kv == 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_c = 0;
    } else {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_c = 2;
    }

    /* End of Update for DiscreteIntegrator: '<S546>/Discrete-Time Integrator' */

    /* Update for DiscreteIntegrator: '<S554>/Discrete-Time Integrator' */
    self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_ik =
      DiscreteTimeIntegrator_p;
    if (rtb_DataTypeConversion7_j > 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_n1 = 1;
    } else if (rtb_DataTypeConversion7_j < 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_n1 = -1;
    } else if (rtb_DataTypeConversion7_j == 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_n1 = 0;
    } else {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_n1 = 2;
    }

    /* End of Update for DiscreteIntegrator: '<S554>/Discrete-Time Integrator' */

    /* Update for DiscreteIntegrator: '<S562>/Discrete-Time Integrator' */
    self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_iq =
      DiscreteTimeIntegrator_b;
    if (rtb_DataTypeConversion7_hx > 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_lo = 1;
    } else if (rtb_DataTypeConversion7_hx < 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_lo = -1;
    } else if (rtb_DataTypeConversion7_hx == 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_lo = 0;
    } else {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_lo = 2;
    }

    /* End of Update for DiscreteIntegrator: '<S562>/Discrete-Time Integrator' */

    /* Update for DiscreteIntegrator: '<S570>/Discrete-Time Integrator' */
    self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_oh =
      DiscreteTimeIntegrator_ku;
    if (rtb_DataTypeConversion7_jq > 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_k = 1;
    } else if (rtb_DataTypeConversion7_jq < 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_k = -1;
    } else if (rtb_DataTypeConversion7_jq == 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_k = 0;
    } else {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_k = 2;
    }

    /* End of Update for DiscreteIntegrator: '<S570>/Discrete-Time Integrator' */

    /* Update for DiscreteIntegrator: '<S578>/Discrete-Time Integrator' */
    self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_e =
      DiscreteTimeIntegrator_iy;
    if (rtb_DataTypeConversion7_nv > 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_a = 1;
    } else if (rtb_DataTypeConversion7_nv < 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_a = -1;
    } else if (rtb_DataTypeConversion7_nv == 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_a = 0;
    } else {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_a = 2;
    }

    /* End of Update for DiscreteIntegrator: '<S578>/Discrete-Time Integrator' */

    /* Update for DiscreteIntegrator: '<S594>/Discrete-Time Integrator' */
    self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_c =
      DiscreteTimeIntegrator_nd;
    if (rtb_DataTypeConversion7_et > 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_m = 1;
    } else if (rtb_DataTypeConversion7_et < 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_m = -1;
    } else if (rtb_DataTypeConversion7_et == 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_m = 0;
    } else {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_m = 2;
    }

    /* End of Update for DiscreteIntegrator: '<S594>/Discrete-Time Integrator' */

    /* Update for DiscreteIntegrator: '<S602>/Discrete-Time Integrator' */
    self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_pp =
      DiscreteTimeIntegrator_mt;
    if (rtb_DataTypeConversion7_j5 > 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_fg = 1;
    } else if (rtb_DataTypeConversion7_j5 < 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_fg = -1;
    } else if (rtb_DataTypeConversion7_j5 == 0.0) {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_fg = 0;
    } else {
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_fg = 2;
    }

    /* End of Update for DiscreteIntegrator: '<S602>/Discrete-Time Integrator' */

    /* Update for UnitDelay: '<S409>/Unit Delay1' incorporates:
     *  DataTypeConversion: '<S408>/Data Type Conversion1'
     *  ForEachSliceSelector generated from: '<S404>/PneumaticSystemFB'
     *  Logic: '<S409>/AND'
     */
    self_CoreSubsys_p[ForEach_itr_ae].dwork.UnitDelay1_DSTATE = (rtb_Compare_or &&
      (BEML_EMU_B.UnitDelay2[ForEach_itr_ae].PressureSwitches.PS2 != 0.0));

    /* Update for RateTransition: '<S409>/Rate Transition1' */
    if ((&BEML_EMU_M)->Timing.TaskCounters.TID[2] == 0) {
      self_CoreSubsys_p[ForEach_itr_ae].dwork.RateTransition1_Buffer0 =
        rtb_Compare_ja;

      /* Update for RateTransition: '<S409>/Rate Transition2' */
      self_CoreSubsys_p[ForEach_itr_ae].dwork.RateTransition2_Buffer0 =
        rtb_Compare_g42;

      /* Update for RateTransition: '<S409>/Rate Transition3' */
      self_CoreSubsys_p[ForEach_itr_ae].dwork.RateTransition3_Buffer0 =
        rtb_CollisionDetected;

      /* Update for RateTransition: '<S409>/Rate Transition4' */
      self_CoreSubsys_p[ForEach_itr_ae].dwork.RateTransition4_Buffer0 =
        rtb_AND_p;

      /* Update for UnitDelay: '<S423>/Unit Delay' */
      self_CoreSubsys_p[ForEach_itr_ae].dwork.UnitDelay_DSTATE =
        self_CoreSubsys_p[ForEach_itr_ae].
        blockIO.ControlStateRequest_a.RelationalOperator;

      /* Update for UnitDelay: '<S424>/Unit Delay' */
      self_CoreSubsys_p[ForEach_itr_ae].dwork.UnitDelay_DSTATE_a =
        self_CoreSubsys_p[ForEach_itr_ae].
        blockIO.ControlStateRequest_n.RelationalOperator;

      /* Update for UnitDelay: '<S425>/Unit Delay' */
      self_CoreSubsys_p[ForEach_itr_ae].dwork.UnitDelay_DSTATE_p =
        self_CoreSubsys_p[ForEach_itr_ae].
        blockIO.ControlStateRequest_i.RelationalOperator;

      /* Update for UnitDelay: '<S426>/Unit Delay' */
      self_CoreSubsys_p[ForEach_itr_ae].dwork.UnitDelay_DSTATE_k =
        self_CoreSubsys_p[ForEach_itr_ae].
        blockIO.ControlStateRequest.RelationalOperator;
    }

    /* End of Update for RateTransition: '<S409>/Rate Transition1' */

    /* ForEachSliceAssignment generated from: '<S404>/VehicleModelFaults' incorporates:
     *  BusAssignment: '<S405>/Bus Assignment'
     *  BusAssignment: '<S406>/Bus Assignment'
     *  BusAssignment: '<S410>/Bus Assignment'
     *  BusAssignment: '<S411>/Bus Assignment'
     *  BusCreator: '<S404>/Bus Creator'
     *  Constant: '<S405>/Constant1'
     *  Constant: '<S406>/Constant1'
     *  Constant: '<S411>/Constant1'
     *  DataTypeConversion: '<S408>/Data Type Conversion'
     *  DataTypeConversion: '<S408>/Data Type Conversion1'
     *  DataTypeConversion: '<S410>/Data Type Conversion3'
     *  DataTypeConversion: '<S410>/Data Type Conversion4'
     *  ForEachSliceSelector generated from: '<S404>/VehicleConfig'
     *  ForEachSliceSelector generated from: '<S404>/VehicleInput'
     *  Inport: '<Root>/TrainInput'
     *  Inport: '<Root>/VehicleInput'
     *  Logic: '<S406>/AND'
     *  Logic: '<S406>/AND1'
     *  Logic: '<S406>/AND10'
     *  Logic: '<S406>/AND11'
     *  Logic: '<S406>/AND8'
     *  Logic: '<S406>/AND9'
     *  Outport: '<Root>/ProcessedVehConf'
     *  SignalConversion generated from: '<S400>/Bus Selector2'
     */
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .DoorFaults.ObjectObstructingDoorWhileClosing =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.DoorCloseObstruction;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .DoorFaults.ObjectObstructingDoorWhileOpening =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.DoorOpenObstruction;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .DoorFaults.DoorFailToClose = BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.TrainDoorNotClosingAtPlatform;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .DoorFaults.DoorFailToOpen = BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.DM1A1DoorNotOpeningAtPlatform;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .DoorFaults.DoorMotorCircuitFailure =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.DoorMotorCircuitFailure;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .DoorFaults.DoorFailedToLock = BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.DoorFailedToLock;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .DoorFaults.DoorFailedToUnlock = BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.DoorFailedToUnlock;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .DoorFaults.DoorUnexpectedUnlocking =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.DoorUnexpectedUnlocking;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .DoorFaults.DoorDCUFailure = BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.DoorDCUFailure;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .DoorFaults.DCSRFailure = BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.DCSRFailure;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .DoorFaults.DCSLFailure = BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.DCSLFailure;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .DoorFaults.DLSRFailure = BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.DLSRFailure;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .DoorFaults.DLSLFailure = BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.DLSLFailure;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .DoorFaults.DoorMajorFault = BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.DoorMajorFault;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .DoorFaults.DoorUnauthorisedOpen =
      BEML_EMU_P.CoreSubsys_p.Constant1_Value_e.DoorUnauthorisedOpen;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .DoorFaults.UnexpectedDoorOpeningDetectedByCC =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.UnexpectedDoorOpeningDetectedByCC;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .DoorFaults.EmergencyDoorMechanicalUnlocked =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.EmergencyDoorMechanicalUnlocked;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .DoorFaults.DoorEmergencyHandleActivation =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.DoorEmergencyHandleActivation;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.PantographDownForADDIntervention =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.PantographDownForADDIntervention;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.PantographDownForORDIntervention = 0.0;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.PantographRisingFailure =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.PantographRaiseFailure;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.FwdRevTrainLineMismatch =
      BEML_EMU_U.TrainInput.Faults.FWDREVTrainLineMismatch;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.CCDetectedEmerDoorOpen =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.CCDetectDetrainmentDoorOpen;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.LowMRPressure =
      ((BEML_EMU_U.TrainInput.Faults.LowMRPressure != 0.0) &&
       BEML_EMU_Y.ProcessedVehConf[ForEach_itr_ae].Electrical.HasCab);
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.ReverseMotionInForwardCommand =
      BEML_EMU_U.TrainInput.Faults.ReverseMotionInForwardCommand;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.BogieDerailed =
      BEML_EMU_P.CoreSubsys_p.Constant1_Value_n.BogieDerailed;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.InternalFireAlarmTLActive =
      BEML_EMU_U.TrainInput.Faults.InternalFireAlarmTLActive;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.FDUFailure =
      BEML_EMU_U.TrainInput.Faults.FDUFaultAlarmTLActive;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.TractionCutModeSelectorInATPATOUTO =
      BEML_EMU_U.TrainInput.Faults.TractionCutModeSelectorInATPATOUTO;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.DamagedOHE = BEML_EMU_U.TrainInput.Faults.DamagedOHE;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.DoorsNotOpeningFromDOPBOP1 =
      BEML_EMU_U.TrainInput.Faults.DoorsNotOpeningFromDOPBOP1;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.DepotSignalMalfunction =
      BEML_EMU_U.TrainInput.Faults.DepotSignalMalfunction;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.TrackCircuitOccupied =
      BEML_EMU_U.TrainInput.Faults.TrackCircuitOccupied;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.MainSignalSwitchesToRed =
      BEML_EMU_U.TrainInput.Faults.MainSignalSwitchesToRed;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.PlatformScreenDoorNotWorking =
      BEML_EMU_U.TrainInput.Faults.PlatformScreenDoorNotWorking;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.TrainGettingZeroSpeedOrder =
      BEML_EMU_U.TrainInput.Faults.TrainGettingZeroSpeedOrder;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.ATCEBUnableToReset =
      BEML_EMU_U.TrainInput.Faults.ATCEBUnableToReset;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.TrainOvershootATCNotAllowingReverseAlignment =
      BEML_EMU_U.TrainInput.Faults.TrainOvershootATCNotAllowingReverseAlignment;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.FSBAppliedAt10KMPH =
      BEML_EMU_U.TrainInput.Faults.FSBAppliedAt10KMPH;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.VEHICLE_LEVEL_SIGNALS_BELOW =
      BEML_EMU_P.CoreSubsys_p.Constant1_Value_n.VEHICLE_LEVEL_SIGNALS_BELOW;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.HVAC1SupplyFanMPCBTrip =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.HVAC1SupplyFanMPCBTrip;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.HVAC1EmergencyInverterTrip =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.HVAC1EmergencyInverterTrip;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.HVAC1RCCBTrip = BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.HVAC1RCCBTrip;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.HVAC1FireMode = BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.HVAC1FireMode;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.HVAC1ExternalSmokeMode =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.HVAC1ExternalSmokeMode;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.HVAC1ReducedMode =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.HVAC1ReducedMode;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.CabSaloonPartitionDoorOpen = 0.0;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.WFLFailure = BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.WFLFailure;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.ODDFailure = BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.ODDFailure;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.ObstacleDetectedRightSide =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.ObstacleDetectedRightSide;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.DerailmentDetectedRightSide =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.DerailmentDetectedRightSide;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.CouplingCircuitNotPowered =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.CouplingCircuitNotPowered;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.CabEnablingCircuitBreakerTripped =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.CabEnablingCircuitBreakerTripped;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.OHLHighVoltageLevel3 =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.OHLHighVoltageLevel3;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.OHLLowVoltageLevel2 =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.OHLLowVoltageLevel2;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.LineConverterOverCurrentLevel2 =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.LineConverterOverCurrentLevel2;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.LineConverterIGBTFailure =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.LineConverterIGBTFailure;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.DC110VLowVoltage =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.DC110VLowVoltage;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.OverTemperatureOfInverterPowerUnit =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.OverTemperatureOfInverterPowerUnit;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.OverTemperatureOfConverterPowerUnit =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.OverTemperatureOfConverterPowerUnit;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.AKOpenFailure = BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.AKOpenFailure;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.KOpenFailure = BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.KOpenFailure;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.MainCircuitEarthFaultLevel2 =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.MainCircuitEarthFaultLevel2;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.VCBOpenedByCI = ((BEML_EMU_U.VehicleInput[ForEach_itr_ae]
      .Faults.VCBOpenedByCI != 0.0) &&
      BEML_EMU_Y.ProcessedVehConf[ForEach_itr_ae].Electrical.HasPanto);
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.PantographDownForBUVDRIntervention =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.PantographDownForBUVDRIntervention;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.PantographCircuitNotEnergized =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.PantographCircuitNotEnergized;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.TransformerOilPressureTooLow =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.TransformerOilPressureTooLow;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.TransformerOilTemperatureTooHigh =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.TransformerOilTemperatureTooHigh;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.VCBOpenedByACOvercurrent = rtb_Compare_mk;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.VCBOpenedByMTrProtection = rtb_Compare_ll;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.VCBOpenedByAPS = rtb_Compare_gd;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.PantographLoweringFailure =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.PantographLoweringFailure;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.MCBBrakeGroupTripped =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.MCBBrakeGroupTripped;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.MCBDoorGroupTripped =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.MCBDoorGroupTripped;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.MCB110VDCGroupTripped =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.MCB110VDCGroupTripped;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.MechanicalCouplerRelayFault =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.MechanicalCouplerRelayFault;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.BatteryFuseBlown =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.BatteryFuseBlown;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.BICContactorActivationFault =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.BICContactorActivationFault;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.LowBatteryVoltageAlarm =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.LowBatteryVoltageAlarm;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.LightGroupMCBTripped =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.MCBLightGroupTripped;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.MCBHVACGroupTripped =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.MCBHVACGroupTripped;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.HVAC1MajorFault = BEML_EMU_U.VehicleInput[ForEach_itr_ae]
      .Faults.HVAC1MajorFault;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.MCBSignalingGroupTripped =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.MCBSignalingGroupTripped;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.APSMCBGroupTripped = rtb_Compare_eib;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.APSCircuitBreakerTripped = rtb_Compare_ha;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.SmokeAlarmCABArea =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.SmokeAlarmCABArea;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.HeatAlarmEDB = BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.HeatAlarmEDB;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.TrainRadioFailure =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.TrainRadioFailure;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.PEA1AlarmActive = BEML_EMU_U.VehicleInput[ForEach_itr_ae]
      .Faults.PEA1AlarmActive;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.PEA1CallNotAcknowledged =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.PEA1CallNotAcknowledged;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.PEA1Failure = BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.PEA1Failure;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.MCBPAGroupOpen = BEML_EMU_U.VehicleInput[ForEach_itr_ae]
      .Faults.MCBPAGroupOpen;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.CCUCommunicationError =
      BEML_EMU_P.CoreSubsys_p.Constant1_Value_n.CCUCommunicationError;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.CommunicationErrorRIO1RIO2 =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.CommunicationErrorRIO1RIO2;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.MCBTCMSGroupTripped =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.MCBTCMSGroupTripped;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.ER1MajorFault = BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.ER1MajorFault;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.EmerDoorNotOpenRelayDeactivated =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.EDNORDeactivatedInRunningTrain;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.AllDoorCloseIndicatorNotWorking =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.AllDoorCloseIndicatorNotWorking;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.TrainDoorLockedClosedRelayFailure =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.TrainDoorLockedClosedRelayFailure;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.WipersNotWorking =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.WipersNotWorking;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.FloodLightNotWorking =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.FloodLightNotWorking;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.ShutdownFailureVCBOpening =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.ShutdownFailureVCBOpening;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.LightGroupSaloonMCBTripped =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.MCBLightGroupSaloonTripped;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.ExteriorLight1CBTripped =
      ((BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.ExteriorLight1CBTripped
        != 0.0) && BEML_EMU_Y.ProcessedVehConf[ForEach_itr_ae].
       Electrical.HasPanto);
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.ExteriorLight2CBTripped =
      ((BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.ExteriorLight2CBTripped
        != 0.0) && self_CoreSubsys_p[ForEach_itr_ae].blockIO.OR);
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.InteriorLight1CBTripped =
      ((BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.InteriorLight1CBTripped
        != 0.0) && BEML_EMU_Y.ProcessedVehConf[ForEach_itr_ae].
       Electrical.HasPanto);
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.InteriorLight2CBTripped =
      ((BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.InteriorLight2CBTripped
        != 0.0) && self_CoreSubsys_p[ForEach_itr_ae].blockIO.OR);
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.CMCContactorActivationFailure =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.CMCContactorActivationFailure;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.CMCContactorDeactivationFailure =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.CMCContactorDeactivationFailure;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.APSGroup1Failure =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.APSGroup1Failure;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.APSGroup1Isolated =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.APSGroup1Isolated;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.BCGGroup1Failure =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.BCGGroup1Failure;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.BCGGroup1IsolationFailure =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.BCGGroup1IsolationFailure;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.BCGGroup1Isolated =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.BCGGroup1Isolated;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.VCBMissingClosing = rtb_Compare_kq;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.VCBMissingOpening = rtb_Compare_nsw;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.HeadlightFailure =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.HeadlightFailure;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.HornBlowsContinuously =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.HornBlowsContinuously;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.LineVoltageIndicatorNotWorking =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.LineVoltageIndicatorNotWorking;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.OtherCabOccupiedIndicatorFaulty =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.OtherCabOccupiedIndicatorFaulty;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.DoorClosePBOP1NotWorking =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.DoorClosePBOP1NotWorking;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.EmergencyBrakePBOP1NotWorking =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.EmergencyBrakePBOP1NotWorking;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.DoorCloseAnnouncementPBNotWorking =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.DoorCloseAnnouncementPBNotWorking;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.ATCFailure = BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.FailureOfTrainborneATCEquipment;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.DMIFailure = BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.DMIFailure;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.TransformerOilLevelLow =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.TransformerOilLevelLow;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.TransformerOilLevelTooLow =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.TransformerOilLevelTooLow;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.TransformerOilFlowWarning =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.TransformerOilFlowWarning;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.TransformerOilPressureWarning =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.TransformerOilPressureWarning;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.TransformerOilTemperatureHigh =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.TransformerOilTemperatureHigh;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.PCUFailure = BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.PCUFailure;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.PEA2Failure = BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.PEA2Failure;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.PEA3Failure = BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.PEA3Failure;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.SCU2Failure = BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.SCU2Failure;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.EBNotReleased = BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.EBNotReleased;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.CIMicroprocessorAbnormal =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.CIMicroprocessorAbnormal;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.CILocalCommunicationFailure =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.CILocalCommunicationFailure;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.PantographRisingMissing =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.PantographRisingMissing;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.PantographLoweringMissing =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.PantographLoweringMissing;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.PantographRisingInhibited =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.PantographRisingInhibited;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.CIFailure = BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.CIFailure;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.CIIsolated = BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.CIIsolated;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.EmergencyBrakeDueToEBPB =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.EmergencyBrakeDueToEBPB;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .ElectricalFaults.EmergencyBrakeDueDeadman =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.EmergencyBrakeDueDeadman;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .PantographFaults.PlaceHolder = BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.PantographDownForADDIntervention;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .PneumaticsFaults.HeavyWheelSlip = BEML_EMU_U.VehicleInput[ForEach_itr_ae]
      .Faults.HeavyWheelSlip;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .PneumaticsFaults.BECU1AxleLockedWheelSet1 =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.BECU1AxleLockedWheelSet1;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .PneumaticsFaults.BECU1ServiceBrakeFailure =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.BECU1ServiceBrakeFailure;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .PneumaticsFaults.BECU1EmergencyBrakeFailure =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.BECU1EmergencyBrakeFailure;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .PneumaticsFaults.AirSuspensionBogie1Deflated =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.AirSuspensionBogie1Deflated;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .PneumaticsFaults.BrakeDemandSignalFailure = rtb_Compare_nn;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .PneumaticsFaults.ParkingBrakeApplicationFailure =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.ParkingBrakeApplicationFailure;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .PneumaticsFaults.ParkingBrakeReleaseFailure =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.ParkingBrakeReleaseFailure;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .PneumaticsFaults.BECUMajorFault = BEML_EMU_U.VehicleInput[ForEach_itr_ae]
      .Faults.BECUMajorFault;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .PneumaticsFaults.PressureGuageNotWorking =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.PressureGuageNotWorking;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .PneumaticsFaults.PantographPipeLowPressure =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.PantographPipeLowPressure;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .PneumaticsFaults.BECU2AxleLockedWheelSet2 =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.BECU2AxleLockedWheelSet2;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .PneumaticsFaults.BECU2EmergencyBrakeFailure =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.BECU2EmergencyBrakeFailure;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .PneumaticsFaults.BECU1BrakeNotApplied =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.BECU1BrakeNotApplied;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .PneumaticsFaults.BECU1BrakeNotReleased =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.BECU1BrakeNotReleased;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .PneumaticsFaults.BECU1CarLoadPressureLow =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.BECU1CarLoadPressureLow;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .PneumaticsFaults.BECU2CarLoadPressureLow =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.BECU2CarLoadPressureLow;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .PneumaticsFaults.BECULowRPressure =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.BECULowRPressure;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .PneumaticsFaults.BECU1LoadPressureLow =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.BECU1LoadPressureLow;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .PneumaticsFaults.ORDIntervention = rtb_Compare_or;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .TCMSFaults.MasterControllerandTrainLineIncongruence =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.MasterControllerandTrainLineIncongruence;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .TCMSFaults.TCMSDisplayHanged =
      (BEML_EMU_U.TrainInput.Faults.TCMSDisplayHanged != 0.0);
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .TCMSFaults.TCMSFailure = BEML_EMU_U.TrainInput.Faults.TCMSFailure;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .TCMSFaults.NeutralZoneVCBBackupFunctionActivated =
      (BEML_EMU_U.TrainInput.Faults.NeutralZoneVCBBackupFunctionActivated != 0.0);
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .TCMSFaults.CCUCommunicationError =
      BEML_EMU_U.TrainInput.Faults.CCUCommunicationError;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .TCMSFaults.UnexpectedDoorOpeningDetectedByCC =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.UnexpectedDoorOpeningDetectedByCC;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .TCMSFaults.RIO1Fault = BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.RIOMastershipError;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .TCMSFaults.RIO1RIO2Fault = BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.CommunicationErrorRIO1RIO2;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .TCMSFaults.ERFault = BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.ER1MajorFault;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .TCMSFaults.TractionCutModeSelectorInATPATOUTO =
      BEML_EMU_U.TrainInput.Faults.TractionCutModeSelectorInATPATOUTO;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .TCMSFaults.HighTractiveEffortRequired =
      BEML_EMU_U.TrainInput.Faults.HighTractiveEffortRequired;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .TCMSFaults.DynamicBrakeCutOut =
      BEML_EMU_U.TrainInput.Faults.DynamicBrakeCutOut;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .TCMSFaults.BECUPWRAndBRKCmdAtSameTime =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.BECUPWRAndBRKCmdAtSameTime;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .TCMSFaults.BECU2MinorFault = BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.BECU2MinorFault;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .TCMSFaults.BECUMajorFault = BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.BECUMajorFault;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .TCMSFaults.BECUMajorFaultWired = BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.BECUMajorFaultWired;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .TractionFaults.Bogie[0] =
      BEML_EMU_P.CoreSubsys_p.Constant1_Value_i.Bogie[0];
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .TractionFaults.Bogie[1] =
      BEML_EMU_P.CoreSubsys_p.Constant1_Value_i.Bogie[1];
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .TractionFaults.PCUFailure = BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.PCUFailure;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .TractionFaults.CIFailure = BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.CIFailure;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .TractionFaults.CIIsolated = BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.CIIsolated;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .TractionFaults.CIMicroprocessorAbnormal =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.CIMicroprocessorAbnormal;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .TractionFaults.CILocalCommunicationFailure =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.CILocalCommunicationFailure;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .TractionFaults.CIGateSignalAbnormal =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.CIGateSignalAbnormal;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .TractionFaults.CITCMSCommunicationFailure =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.CITCMSCommunicationFailure;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .TractionFaults.DCLinkOverVoltageLevel1 =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.DCLinkOverVoltageLevel1;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .TractionFaults.DCLinkLowVoltageLevel1 =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.DCLinkLowVoltageLevel1;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .TractionFaults.HeavyWheelSlide =
      BEML_EMU_U.TrainInput.Faults.DynamicBrakeCutOut;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .TractionFaults.HeavyWheelSlip = BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.HeavyWheelSlip;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .TractionFaults.CIAKOpenFailure = BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.AKOpenFailure;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .TractionFaults.CIKOpenFailure = BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.KOpenFailure;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .TractionFaults.DerailmentDetectedRightSide =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.DerailmentDetectedRightSide;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .TractionFaults.BogieDerailed = BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.BogieDerailed;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .TractionFaults.WSPActiveBogie1 = BEML_EMU_U.VehicleInput[ForEach_itr_ae].
      Faults.WSPActiveBogie1;
    BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_ae]
      .TractionFaults.BECU1FailureAllSpeedSensors =
      BEML_EMU_U.VehicleInput[ForEach_itr_ae].Faults.BECU1FailureAllSpeedSensors;
    if ((&BEML_EMU_M)->Timing.TaskCounters.TID[2] == 0) {
      /* ForEachSliceAssignment generated from: '<S404>/IOControlsModelFaults' */
      BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_ae]
        = rtb_IOControlsModelFaults_CoreSubsysCanOut;
    }
  }

  /* End of Outputs for SubSystem: '<S400>/Subsystem' */
  if ((&BEML_EMU_M)->Timing.TaskCounters.TID[2] == 0) {
    /* UnitDelay: '<S401>/Unit Delay' */
    memcpy(&BEML_EMU_B.UnitDelay_p[0], &BEML_EMU_DW.UnitDelay_DSTATE_b[0],
           sizeof(BD_IOControls_Out_Vehicle_InputStates) << 3U);
  }

  /* Outputs for Iterator SubSystem: '<S401>/InhibitsAndInternalRequests' incorporates:
   *  ForEach: '<S660>/For Each'
   */
  for (ForEach_itr_oc = 0; ForEach_itr_oc < 8; ForEach_itr_oc++) {
    if ((&BEML_EMU_M)->Timing.TaskCounters.TID[2] == 0) {
      /* Logic: '<S660>/NOT' incorporates:
       *  ForEachSliceSelector generated from: '<S660>/IOControlStates'
       */
      rtb_Compare_g42 = !(BEML_EMU_B.UnitDelay_p[ForEach_itr_oc].LeftDoor1Coving
                          != 0.0);

      /* Logic: '<S660>/NOT1' incorporates:
       *  ForEachSliceSelector generated from: '<S660>/IOControlStates'
       */
      rtb_CollisionDetected = !(BEML_EMU_B.UnitDelay_p[ForEach_itr_oc].
        LeftDoor2Coving != 0.0);

      /* Logic: '<S660>/NOT2' incorporates:
       *  ForEachSliceSelector generated from: '<S660>/IOControlStates'
       */
      rtb_Compare_ja = !(BEML_EMU_B.UnitDelay_p[ForEach_itr_oc].LeftDoor3Coving
                         != 0.0);

      /* Logic: '<S660>/NOT3' incorporates:
       *  ForEachSliceSelector generated from: '<S660>/IOControlStates'
       */
      rtb_Compare_kq = !(BEML_EMU_B.UnitDelay_p[ForEach_itr_oc].LeftDoor4Coving
                         != 0.0);

      /* Logic: '<S660>/NOT4' incorporates:
       *  ForEachSliceSelector generated from: '<S660>/IOControlStates'
       */
      rtb_Compare_nsw = !(BEML_EMU_B.UnitDelay_p[ForEach_itr_oc].
                          RightDoor1Coving != 0.0);

      /* Logic: '<S660>/NOT5' incorporates:
       *  ForEachSliceSelector generated from: '<S660>/IOControlStates'
       */
      rtb_Compare_nn = !(BEML_EMU_B.UnitDelay_p[ForEach_itr_oc].RightDoor2Coving
                         != 0.0);

      /* Logic: '<S660>/NOT6' incorporates:
       *  ForEachSliceSelector generated from: '<S660>/IOControlStates'
       */
      rtb_Compare_pg = !(BEML_EMU_B.UnitDelay_p[ForEach_itr_oc].RightDoor3Coving
                         != 0.0);

      /* Logic: '<S660>/NOT7' incorporates:
       *  ForEachSliceSelector generated from: '<S660>/IOControlStates'
       */
      rtb_Compare_or = !(BEML_EMU_B.UnitDelay_p[ForEach_itr_oc].RightDoor4Coving
                         != 0.0);

      /* Logic: '<S663>/NOT1' incorporates:
       *  ForEachSliceSelector generated from: '<S660>/IOControlStates'
       */
      rtb_AND_p = !(BEML_EMU_B.UnitDelay_p[ForEach_itr_oc].DummyCover != 0.0);

      /* Outputs for Iterator SubSystem: '<S660>/Subsystem1' incorporates:
       *  ForEach: '<S665>/For Each'
       */
      for (ForEach_itr_ho = 0; ForEach_itr_ho < 16; ForEach_itr_ho++) {
        /* ForEachSliceAssignment generated from: '<S665>/DoorsOpen' incorporates:
         *  Constant: '<S674>/Constant'
         *  ForEachSliceSelector generated from: '<S660>/DoorSystemFB'
         *  ForEachSliceSelector generated from: '<S665>/<Doors>'
         *  RelationalOperator: '<S674>/Compare'
         */
        rtb_ImpAsg_InsertedFor_DoorsOpen_at_inport_0[ForEach_itr_ho] =
          (BEML_EMU_B.UnitDelay1[ForEach_itr_oc].Doors[ForEach_itr_ho].
           OutputControlStates.DoorPosition >
           BEML_EMU_P.CoreSubsys_pna.CoreSubsys.Constant_Value);
      }

      /* End of Outputs for SubSystem: '<S660>/Subsystem1' */

      /* DataTypeConversion: '<S660>/Data Type Conversion11' incorporates:
       *  ForEachSliceSelector generated from: '<S660>/IOControlFaults'
       *  Logic: '<S660>/OR2'
       */
      rtb_Product_cv =
        (BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
         .HLCBInternalRequest ||
         BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
         .MCBLightGroupOpenInternalRequest);

      /* ForEachSliceAssignment generated from: '<S660>/ModelInputs' incorporates:
       *  BusAssignment: '<S660>/Bus Assignment1'
       *  Constant: '<S661>/Constant'
       *  Constant: '<S662>/Constant'
       *  Constant: '<S668>/Constant'
       *  Constant: '<S669>/Constant'
       *  Constant: '<S670>/Constant'
       *  Constant: '<S671>/Constant'
       *  Constant: '<S672>/Constant'
       *  Constant: '<S673>/Constant'
       *  DataTypeConversion: '<S660>/Data Type Conversion'
       *  DataTypeConversion: '<S660>/Data Type Conversion1'
       *  DataTypeConversion: '<S660>/Data Type Conversion10'
       *  DataTypeConversion: '<S660>/Data Type Conversion12'
       *  DataTypeConversion: '<S660>/Data Type Conversion13'
       *  DataTypeConversion: '<S660>/Data Type Conversion14'
       *  DataTypeConversion: '<S660>/Data Type Conversion15'
       *  DataTypeConversion: '<S660>/Data Type Conversion16'
       *  DataTypeConversion: '<S660>/Data Type Conversion17'
       *  DataTypeConversion: '<S660>/Data Type Conversion18'
       *  DataTypeConversion: '<S660>/Data Type Conversion19'
       *  DataTypeConversion: '<S660>/Data Type Conversion2'
       *  DataTypeConversion: '<S660>/Data Type Conversion20'
       *  DataTypeConversion: '<S660>/Data Type Conversion21'
       *  DataTypeConversion: '<S660>/Data Type Conversion22'
       *  DataTypeConversion: '<S660>/Data Type Conversion23'
       *  DataTypeConversion: '<S660>/Data Type Conversion24'
       *  DataTypeConversion: '<S660>/Data Type Conversion25'
       *  DataTypeConversion: '<S660>/Data Type Conversion26'
       *  DataTypeConversion: '<S660>/Data Type Conversion27'
       *  DataTypeConversion: '<S660>/Data Type Conversion28'
       *  DataTypeConversion: '<S660>/Data Type Conversion29'
       *  DataTypeConversion: '<S660>/Data Type Conversion3'
       *  DataTypeConversion: '<S660>/Data Type Conversion30'
       *  DataTypeConversion: '<S660>/Data Type Conversion31'
       *  DataTypeConversion: '<S660>/Data Type Conversion32'
       *  DataTypeConversion: '<S660>/Data Type Conversion33'
       *  DataTypeConversion: '<S660>/Data Type Conversion34'
       *  DataTypeConversion: '<S660>/Data Type Conversion35'
       *  DataTypeConversion: '<S660>/Data Type Conversion36'
       *  DataTypeConversion: '<S660>/Data Type Conversion37'
       *  DataTypeConversion: '<S660>/Data Type Conversion38'
       *  DataTypeConversion: '<S660>/Data Type Conversion39'
       *  DataTypeConversion: '<S660>/Data Type Conversion4'
       *  DataTypeConversion: '<S660>/Data Type Conversion40'
       *  DataTypeConversion: '<S660>/Data Type Conversion41'
       *  DataTypeConversion: '<S660>/Data Type Conversion42'
       *  DataTypeConversion: '<S660>/Data Type Conversion43'
       *  DataTypeConversion: '<S660>/Data Type Conversion5'
       *  DataTypeConversion: '<S660>/Data Type Conversion6'
       *  DataTypeConversion: '<S660>/Data Type Conversion7'
       *  DataTypeConversion: '<S660>/Data Type Conversion8'
       *  DataTypeConversion: '<S660>/Data Type Conversion9'
       *  DataTypeConversion: '<S663>/Data Type Conversion1'
       *  DataTypeConversion: '<S663>/Data Type Conversion4'
       *  DataTypeConversion: '<S664>/Data Type Conversion'
       *  DataTypeConversion: '<S664>/Data Type Conversion1'
       *  DataTypeConversion: '<S664>/Data Type Conversion2'
       *  DataTypeConversion: '<S666>/Data Type Conversion41'
       *  DataTypeConversion: '<S666>/Data Type Conversion42'
       *  DataTypeConversion: '<S666>/Data Type Conversion43'
       *  DataTypeConversion: '<S666>/Data Type Conversion44'
       *  DataTypeConversion: '<S666>/Data Type Conversion45'
       *  DataTypeConversion: '<S666>/Data Type Conversion46'
       *  DataTypeConversion: '<S666>/Data Type Conversion47'
       *  DataTypeConversion: '<S666>/Data Type Conversion48'
       *  DataTypeConversion: '<S667>/Data Type Conversion'
       *  DataTypeConversion: '<S667>/Data Type Conversion1'
       *  DataTypeConversion: '<S667>/Data Type Conversion2'
       *  DataTypeConversion: '<S667>/Data Type Conversion3'
       *  ForEachSliceSelector generated from: '<S660>/DoorSystemFB'
       *  ForEachSliceSelector generated from: '<S660>/ElectricalFB'
       *  ForEachSliceSelector generated from: '<S660>/IOControlFaults'
       *  ForEachSliceSelector generated from: '<S660>/IOControlStates'
       *  ForEachSliceSelector generated from: '<S660>/IOControlsInput'
       *  Inport: '<Root>/IOControlsInput'
       *  Logic: '<S660>/AND'
       *  Logic: '<S660>/AND1'
       *  Logic: '<S660>/AND2'
       *  Logic: '<S660>/AND3'
       *  Logic: '<S660>/AND4'
       *  Logic: '<S660>/AND5'
       *  Logic: '<S660>/AND6'
       *  Logic: '<S660>/AND7'
       *  Logic: '<S660>/OR'
       *  Logic: '<S660>/OR1'
       *  Logic: '<S660>/OR10'
       *  Logic: '<S660>/OR3'
       *  Logic: '<S660>/OR4'
       *  Logic: '<S660>/OR5'
       *  Logic: '<S660>/OR6'
       *  Logic: '<S660>/OR7'
       *  Logic: '<S660>/OR8'
       *  Logic: '<S660>/OR9'
       *  Logic: '<S663>/OR'
       *  Logic: '<S663>/OR1'
       *  Logic: '<S664>/Logical Operator1'
       *  Logic: '<S664>/Logical Operator2'
       *  Logic: '<S664>/Logical Operator3'
       *  Logic: '<S664>/Logical Operator4'
       *  Logic: '<S664>/Logical Operator5'
       *  Logic: '<S666>/OR10'
       *  Logic: '<S666>/OR11'
       *  Logic: '<S666>/OR12'
       *  Logic: '<S666>/OR13'
       *  Logic: '<S666>/OR14'
       *  Logic: '<S666>/OR15'
       *  Logic: '<S666>/OR16'
       *  Logic: '<S666>/OR8'
       *  Logic: '<S667>/AND'
       *  Logic: '<S667>/NOT'
       *  Logic: '<S667>/NOT1'
       *  Logic: '<S667>/NOT2'
       *  Logic: '<S667>/NOT3'
       *  Logic: '<S667>/OR1'
       *  RelationalOperator: '<S661>/Compare'
       *  RelationalOperator: '<S662>/Compare'
       *  RelationalOperator: '<S668>/Compare'
       *  RelationalOperator: '<S669>/Compare'
       *  RelationalOperator: '<S670>/Compare'
       *  RelationalOperator: '<S671>/Compare'
       *  RelationalOperator: '<S672>/Compare'
       *  RelationalOperator: '<S673>/Compare'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        EmergencyBrakePB = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        EmergencyBrakePB;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        HornPB = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].HornPB;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CabConsoleLightPB = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        CabConsoleLightPB;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        DoorProvenLoopCutoutPB = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        DoorProvenLoopCutoutPB;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoorClosePBOperatingPanel1 =
        BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoorClosePBOperatingPanel1;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoorClosePBOperatingPanel1 =
        BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoorClosePBOperatingPanel1;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoorOpenPBOperatingPanel1 =
        BEML_EMU_U.IOControlsInput[ForEach_itr_oc].LeftDoorOpenPBOperatingPanel1;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoorOpenPBOperatingPanel1 =
        BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoorOpenPBOperatingPanel1;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CabMainLightPB = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        CabMainLightPB;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ParkingBrakeOnSwitch = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        ParkingBrakeOnSwitch;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ParkingBrakeOffSwitch = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        ParkingBrakeOffSwitch;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        DoorCloseAnnouncementPB = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        DoorCloseAnnouncementPB;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ROSPB = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].ROSPB;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        UTOPB = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].UTOPB;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ATOStartPB = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].ATOStartPB;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        EmergencyBrakeResetPB = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        EmergencyBrakeResetPB;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ControlKey.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        ControlKey.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ControlKey.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        ControlKey.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ControlKey.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        ControlKey.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ControlKey.InternalRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        ControlKey.InternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ControlKey.Inhibit = ((!(BEML_EMU_B.UnitDelay_p[ForEach_itr_oc].
        ModeSelector == BEML_EMU_P.CoreSubsys_pna.CompareToConstant3_const)) ||
        (!(BEML_EMU_B.UnitDelay_p[ForEach_itr_oc].MasterControllerHandle ==
           BEML_EMU_P.CoreSubsys_pna.CompareToConstant4_const)));
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ModeSelector.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        ModeSelector.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ModeSelector.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        ModeSelector.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ModeSelector.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        ModeSelector.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ModeSelector.InternalRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc]
        .ModeSelector.InternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ModeSelector.Inhibit = ((!(BEML_EMU_B.UnitDelay_p[ForEach_itr_oc].
        ControlKey == BEML_EMU_P.CoreSubsys_pna.CompareToConstant1_const)) ||
        (!(BEML_EMU_B.UnitDelay_p[ForEach_itr_oc].MasterControllerHandle ==
           BEML_EMU_P.CoreSubsys_pna.CompareToConstant2_const)));
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        MasterControllerHandle.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc]
        .MasterControllerHandle.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        MasterControllerHandle.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc]
        .MasterControllerHandle.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        MasterControllerHandle.InitVal =
        BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        MasterControllerHandle.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        MasterControllerHandle.InternalRequest =
        BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        MasterControllerHandle.InternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        MasterControllerHandle.Inhibit = ((BEML_EMU_B.UnitDelay_p[ForEach_itr_oc]
        .ModeSelector == BEML_EMU_P.CoreSubsys_pna.CompareToConstant5_const) ||
        (BEML_EMU_B.UnitDelay_p[ForEach_itr_oc].ModeSelector ==
         BEML_EMU_P.CoreSubsys_pna.CompareToConstant6_const));
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        DeadmanSafetyDevice = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        DeadmanSafetyDevice;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CallOnLightPB = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].CallOnLightPB;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        VCBOpenPB = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].VCBOpenPB;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        WiperSelectionSwitch = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        WiperSelectionSwitch;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        WiperPump = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].WiperPump;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LIMPHomePB = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].LIMPHomePB;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        PowerOffPB = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].PowerOffPB;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        PantoDownPB = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].PantoDownPB;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        VCBClosePB = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].VCBClosePB;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoorOpenPBOperatingPanel2 =
        BEML_EMU_U.IOControlsInput[ForEach_itr_oc].LeftDoorOpenPBOperatingPanel2;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoorOpenPB1OperatingPanel2 =
        BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoorOpenPB1OperatingPanel2;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoorClosePBOperatingPanel2 =
        BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoorClosePBOperatingPanel2;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        PantoUpPB = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].PantoUpPB;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        SafetyCutoutSS = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        SafetyCutoutSS;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        BrakeLoopCutoutSS = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        BrakeLoopCutoutSS;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        PantoSelector = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].PantoSelector;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        DeadmanBypassSwitch = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        DeadmanBypassSwitch;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        HeadLightSwitch = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        HeadLightSwitch;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        UncouplePB = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].UncouplePB;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        FlasherLightPB = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        FlasherLightPB;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        FloodLightPB = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].FloodLightPB;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        BatteryResetPB = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        BatteryResetPB;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoorOpenPBOperatingPanel5 =
        BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoorOpenPBOperatingPanel5;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoorOpenPB1OperatingPanel5 =
        BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoorOpenPB1OperatingPanel5;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoorClosePBOperatingPanel5 =
        BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoorClosePBOperatingPanel5;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        DoorProvenLoopOutputSwitch = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        DoorProvenLoopOutputSwitch;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LampTestPB = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].LampTestPB;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        WFLTestPB = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].WFLTestPB;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        WiperControlSwitch = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        WiperControlSwitch;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        EmergencyStopPB = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        EmergencyStopPB;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        HoldDoorCloseBypassSS = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        HoldDoorCloseBypassSS;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CabBoosterFanSS = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        CabBoosterFanSS;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        EmergencyBrakePBBypassSS = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        EmergencyBrakePBBypassSS;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CabEEDLeft = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].CabEEDLeft;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CabEEDRight = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].CabEEDRight;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        SafetyCover.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        SafetyCover.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        SafetyCover.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        SafetyCover.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        SafetyCover.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        SafetyCover.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        SafetyCover.InternalRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc]
        .SafetyCover.InternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        SafetyCover.Inhibit = ((!(BEML_EMU_B.UnitDelay_p[ForEach_itr_oc].
        DummyCover != 0.0)) || (BEML_EMU_B.UnitDelay_p[ForEach_itr_oc].
        SafetyCover != 0.0));
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        DummyCover = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].DummyCover;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RampCoverLockingLever.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc]
        .RampCoverLockingLever.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RampCoverLockingLever.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RampCoverLockingLever.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RampCoverLockingLever.InitVal =
        BEML_EMU_U.IOControlsInput[ForEach_itr_oc].RampCoverLockingLever.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RampCoverLockingLever.InternalRequest =
        BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RampCoverLockingLever.InternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RampCoverLockingLever.Inhibit =
        ((!(BEML_EMU_B.UnitDelay_p[ForEach_itr_oc].SafetyCover != 0.0)) ||
         BEML_EMU_B.UnitDelay_n[ForEach_itr_oc].Doors.EmerDoorLatched);
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RampCover.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RampCover.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RampCover.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RampCover.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RampCover.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RampCover.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RampCover.InternalRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RampCover.InternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RampCover.Inhibit = !(BEML_EMU_B.UnitDelay_p[ForEach_itr_oc].
        RampCoverLockingLever != 0.0);
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RampHandle.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RampHandle.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RampHandle.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RampHandle.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RampHandle.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RampHandle.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RampHandle.InternalRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RampHandle.InternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RampHandle.Inhibit = !(BEML_EMU_B.UnitDelay_p[ForEach_itr_oc].RampCover
        != 0.0);
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RampEndSupport = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RampEndSupport;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RampMiddleSupport.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RampMiddleSupport.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RampMiddleSupport.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RampMiddleSupport.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RampMiddleSupport.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RampMiddleSupport.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RampMiddleSupport.InternalRequest =
        BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RampMiddleSupport.InternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RampMiddleSupport.Inhibit = (BEML_EMU_B.UnitDelay1[ForEach_itr_oc].
        EmergencyDoor.Ramp == BEML_EMU_P.CoreSubsys_pna.Constant_Value_l);
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        WinderHandlesAccessCover = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        WinderHandlesAccessCover;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LargeHandle = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].LargeHandle;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RampWinder.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RampWinder.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RampWinder.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RampWinder.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RampWinder.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RampWinder.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RampWinder.InternalRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RampWinder.InternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RampWinder.Inhibit = (rtb_AND_p || (BEML_EMU_B.UnitDelay1[ForEach_itr_oc]
        .EmergencyDoor.RampSupportDown != 0.0));
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        SmallHandle = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].SmallHandle;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        EmergencyDoorGasSpring.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc]
        .EmergencyDoorGasSpring.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        EmergencyDoorGasSpring.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc]
        .EmergencyDoorGasSpring.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        EmergencyDoorGasSpring.InitVal =
        BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        EmergencyDoorGasSpring.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        EmergencyDoorGasSpring.InternalRequest =
        BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        EmergencyDoorGasSpring.InternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        EmergencyDoorGasSpring.Inhibit = (BEML_EMU_B.UnitDelay1[ForEach_itr_oc].
        EmergencyDoor.EmergencyDoorOpen ==
        BEML_EMU_P.CoreSubsys_pna.Constant_Value);
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        DoorWinder.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        DoorWinder.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        DoorWinder.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        DoorWinder.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        DoorWinder.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        DoorWinder.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        DoorWinder.InternalRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        DoorWinder.InternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        DoorWinder.Inhibit = ((BEML_EMU_B.UnitDelay1[ForEach_itr_oc].
        EmergencyDoor.GasSpringLocked != 0.0) ||
        (BEML_EMU_B.UnitDelay_p[ForEach_itr_oc].RampWinder != 0.0) || rtb_AND_p);
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        EBLR2CB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].EBLR2CB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        EBLR2CB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].EBLR2CB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        EBLR2CB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        EBLR2CB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        EBLR2CB.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCBBrakeGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        EBLR2CB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        EBLR2CB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        EBLR2CB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        EBLR2CB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        EBMVCB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].EBMVCB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        EBMVCB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].EBMVCB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        EBMVCB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        EBMVCB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        EBMVCB.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCBBrakeGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        EBMVCB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        EBMVCB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        EBMVCB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        EBMVCB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        EDCB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].EDCB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        EDCB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].EDCB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        EDCB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].EDCB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        EDCB.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCBDoorGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        EDCB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].EDCB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        EDCB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        EDCB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ELCB1.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].ELCB1.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ELCB1.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].ELCB1.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ELCB1.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].ELCB1.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ELCB1.InternalRequest =
        (BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
         .MCBLightSaloonGroupOpenInternalRequest ||
         BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
         .ELCB1OpenInternalRequest);
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ELCB1.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].ELCB1.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ELCB1.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        ELCB1.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ELCB2.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].ELCB2.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ELCB2.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].ELCB2.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ELCB2.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].ELCB2.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ELCB2.InternalRequest =
        (BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
         .MCBLightSaloonGroupOpenInternalRequest ||
         BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
         .ELCB2OpenInternalRequest);
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ELCB2.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].ELCB2.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ELCB2.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        ELCB2.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ERCB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].ERCB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ERCB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].ERCB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ERCB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].ERCB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ERCB.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCBTCMSGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ERCB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].ERCB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ERCB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        ERCB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        HCB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].HCB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        HCB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].HCB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        HCB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].HCB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        HCB.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCB110VDCGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        HCB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].HCB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        HCB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        HCB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        HLLCB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].HLLCB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        HLLCB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].HLLCB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        HLLCB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].HLLCB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        HLLCB.InternalRequest = rtb_Product_cv;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        HLLCB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].HLLCB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        HLLCB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        HLLCB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        HLRCB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].HLRCB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        HLRCB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].HLRCB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        HLRCB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].HLRCB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        HLRCB.InternalRequest = rtb_Product_cv;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        HLRCB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].HLRCB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        HLRCB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        HLRCB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ILCB1.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].ILCB1.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ILCB1.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].ILCB1.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ILCB1.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].ILCB1.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ILCB1.InternalRequest =
        (BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
         .ILCB1OpenInternalRequest ||
         BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
         .MCBLightSaloonGroupOpenInternalRequest);
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ILCB1.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].ILCB1.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ILCB1.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        ILCB1.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ILCB2.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].ILCB2.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ILCB2.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].ILCB2.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ILCB2.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].ILCB2.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ILCB2.InternalRequest =
        (BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
         .ILCB2OpenInternalRequest ||
         BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
         .MCBLightSaloonGroupOpenInternalRequest);
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ILCB2.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].ILCB2.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ILCB2.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        ILCB2.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LDICB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].LDICB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LDICB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].LDICB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LDICB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].LDICB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LDICB.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCBDoorGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LDICB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].LDICB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LDICB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LDICB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LDLCB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].LDLCB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LDLCB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].LDLCB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LDLCB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].LDLCB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LDLCB.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCBDoorGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LDLCB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].LDLCB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LDLCB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LDLCB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LDRCB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].LDRCB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LDRCB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].LDRCB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LDRCB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].LDRCB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LDRCB.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCBDoorGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LDRCB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].LDRCB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LDRCB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LDRCB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        MLCB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].MLCB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        MLCB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].MLCB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        MLCB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].MLCB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        MLCB.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCBLightGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        MLCB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].MLCB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        MLCB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        MLCB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        MMCB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].MMCB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        MMCB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].MMCB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        MMCB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].MMCB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        MMCB.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCBSignallingGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        MMCB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].MMCB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        MMCB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        MMCB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        NBCB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].NBCB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        NBCB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].NBCB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        NBCB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].NBCB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        NBCB.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCBSignallingGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        NBCB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].NBCB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        NBCB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        NBCB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        NVICB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].NVICB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        NVICB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].NVICB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        NVICB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].NVICB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        NVICB.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCBSignallingGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        NVICB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].NVICB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        NVICB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        NVICB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        OCCB1.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].OCCB1.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        OCCB1.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].OCCB1.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        OCCB1.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].OCCB1.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        OCCB1.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCBPAGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        OCCB1.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].OCCB1.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        OCCB1.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        OCCB1.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        OCCB2.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].OCCB2.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        OCCB2.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].OCCB2.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        OCCB2.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].OCCB2.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        OCCB2.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCBPAGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        OCCB2.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].OCCB2.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        OCCB2.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        OCCB2.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ODDCB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].ODDCB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ODDCB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].ODDCB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ODDCB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].ODDCB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ODDCB.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCB110VDCGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ODDCB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].ODDCB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ODDCB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        ODDCB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        PBCB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].PBCB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        PBCB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].PBCB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        PBCB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].PBCB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        PBCB.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCBBrakeGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        PBCB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].PBCB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        PBCB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        PBCB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        PISCB1.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].PISCB1.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        PISCB1.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].PISCB1.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        PISCB1.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        PISCB1.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        PISCB1.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCBPAGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        PISCB1.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        PISCB1.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        PISCB1.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        PISCB1.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        PISCB2.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].PISCB2.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        PISCB2.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].PISCB2.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        PISCB2.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        PISCB2.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        PISCB2.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCBPAGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        PISCB2.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        PISCB2.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        PISCB2.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        PISCB2.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        POCB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].POCB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        POCB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].POCB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        POCB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].POCB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        POCB.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCB110VDCGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        POCB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].POCB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        POCB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        POCB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        PPU1CB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].PPU1CB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        PPU1CB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].PPU1CB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        PPU1CB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        PPU1CB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        PPU1CB.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCBSignallingGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        PPU1CB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        PPU1CB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        PPU1CB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        PPU1CB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        PPU2CB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].PPU2CB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        PPU2CB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].PPU2CB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        PPU2CB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        PPU2CB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        PPU2CB.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCBSignallingGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        PPU2CB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        PPU2CB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        PPU2CB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        PPU2CB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        PPU3CB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].PPU3CB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        PPU3CB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].PPU3CB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        PPU3CB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        PPU3CB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        PPU3CB.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCBSignallingGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        PPU3CB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        PPU3CB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        PPU3CB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        PPU3CB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RIO1CB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].RIO1CB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RIO1CB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].RIO1CB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RIO1CB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RIO1CB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RIO1CB.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCBTCMSGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RIO1CB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RIO1CB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RIO1CB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RIO1CB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RIO2CB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].RIO2CB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RIO2CB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].RIO2CB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RIO2CB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RIO2CB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RIO2CB.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCBTCMSGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RIO2CB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RIO2CB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RIO2CB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RIO2CB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        SIOCB1.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].SIOCB1.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        SIOCB1.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].SIOCB1.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        SIOCB1.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        SIOCB1.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        SIOCB1.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCBTCMSGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        SIOCB1.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        SIOCB1.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        SIOCB1.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        SIOCB1.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        SIOCB2.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].SIOCB2.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        SIOCB2.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].SIOCB2.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        SIOCB2.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        SIOCB2.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        SIOCB2.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCBTCMSGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        SIOCB2.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        SIOCB2.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        SIOCB2.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        SIOCB2.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        SSICB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].SSICB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        SSICB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].SSICB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        SSICB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].SSICB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        SSICB.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCB110VDCGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        SSICB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].SSICB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        SSICB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        SSICB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        TBCCB1.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].TBCCB1.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        TBCCB1.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].TBCCB1.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        TBCCB1.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        TBCCB1.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        TBCCB1.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCB110VDCGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        TBCCB1.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        TBCCB1.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        TBCCB1.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        TBCCB1.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        TBCCB2.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].TBCCB2.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        TBCCB2.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].TBCCB2.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        TBCCB2.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        TBCCB2.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        TBCCB2.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCB110VDCGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        TBCCB2.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        TBCCB2.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        TBCCB2.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        TBCCB2.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        TBNCB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].TBNCB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        TBNCB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].TBNCB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        TBNCB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].TBNCB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        TBNCB.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCBTCMSGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        TBNCB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].TBNCB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        TBNCB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        TBNCB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        TDICB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].TDICB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        TDICB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].TDICB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        TDICB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].TDICB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        TDICB.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCBTCMSGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        TDICB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].TDICB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        TDICB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        TDICB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        TLLCB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].TLLCB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        TLLCB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].TLLCB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        TLLCB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].TLLCB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        TLLCB.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCBLightGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        TLLCB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].TLLCB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        TLLCB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        TLLCB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        TLRCB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].TLRCB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        TLRCB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].TLRCB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        TLRCB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].TLRCB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        TLRCB.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCBLightGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        TLRCB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].TLRCB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        TLRCB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        TLRCB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        TRIVCB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].TRIVCB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        TRIVCB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].TRIVCB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        TRIVCB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        TRIVCB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        TRIVCB.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCBSignallingGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        TRIVCB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        TRIVCB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        TRIVCB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        TRIVCB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        TVDUCB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].TVDUCB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        TVDUCB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].TVDUCB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        TVDUCB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        TVDUCB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        TVDUCB.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCB110VDCGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        TVDUCB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        TVDUCB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        TVDUCB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        TVDUCB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        TWVCB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].TWVCB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        TWVCB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].TWVCB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        TWVCB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].TWVCB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        TWVCB.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCBSignallingGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        TWVCB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].TWVCB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        TWVCB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        TWVCB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        VCCBOrUCCB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        VCCBOrUCCB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        VCCBOrUCCB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        VCCBOrUCCB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        VCCBOrUCCB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        VCCBOrUCCB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        VCCBOrUCCB.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .UCCBOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        VCCBOrUCCB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        VCCBOrUCCB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        VCCBOrUCCB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        VCCBOrUCCB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        VCBCCB = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].VCBCCB;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        VIO1CB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].VIO1CB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        VIO1CB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].VIO1CB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        VIO1CB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        VIO1CB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        VIO1CB.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCBSignallingGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        VIO1CB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        VIO1CB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        VIO1CB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        VIO1CB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        VIO2CB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].VIO2CB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        VIO2CB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].VIO2CB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        VIO2CB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        VIO2CB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        VIO2CB.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCBSignallingGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        VIO2CB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        VIO2CB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        VIO2CB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        VIO2CB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        WFLCB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].WFLCB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        WFLCB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].WFLCB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        WFLCB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].WFLCB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        WFLCB.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCB110VDCGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        WFLCB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].WFLCB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        WFLCB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        WFLCB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        WIFICB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].WIFICB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        WIFICB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].WIFICB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        WIFICB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        WIFICB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        WIFICB.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCB110VDCGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        WIFICB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        WIFICB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        WIFICB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        WIFICB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        WWCB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].WWCB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        WWCB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].WWCB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        WWCB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].WWCB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        WWCB.InternalRequest =
        (BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
         .WWCBInternalRequest ||
         BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
         .MCB110VDCGroupOpenInternalRequest);
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        WWCB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].WWCB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        WWCB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        WWCB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        BECUCB1.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].BECUCB1.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        BECUCB1.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].BECUCB1.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        BECUCB1.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        BECUCB1.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        BECUCB1.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCBBrakeGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        BECUCB1.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        BECUCB1.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        BECUCB1.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        BECUCB1.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        BECUCB2.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].BECUCB2.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        BECUCB2.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].BECUCB2.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        BECUCB2.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        BECUCB2.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        BECUCB2.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCBBrakeGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        BECUCB2.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        BECUCB2.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        BECUCB2.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        BECUCB2.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        BECUCB3.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].BECUCB3.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        BECUCB3.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].BECUCB3.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        BECUCB3.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        BECUCB3.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        BECUCB3.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCBBrakeGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        BECUCB3.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        BECUCB3.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        BECUCB3.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        BECUCB3.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RSACB = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].RSACB;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CMCCB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].CMCCB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CMCCB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].CMCCB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CMCCB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].CMCCB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CMCCB.InternalRequest =
        (BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
         .CCMCBInternalRequest ||
         BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
         .MCBBrakeGroupOpenInternalRequest);
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CMCCB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].CMCCB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CMCCB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        CMCCB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CILCB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].CILCB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CILCB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].CILCB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CILCB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].CILCB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CILCB.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCBLightGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CILCB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].CILCB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CILCB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        CILCB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].CICB
        = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].CICB;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CELCB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].CELCB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CELCB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].CELCB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CELCB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].CELCB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CELCB.InternalRequest =
        (BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
         .CELCBInternalRequest ||
         BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
         .MCBLightGroupOpenInternalRequest);
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CELCB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].CELCB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CELCB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        CELCB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CECB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].CECB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CECB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].CECB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CECB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].CECB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CECB.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .CECBOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CECB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].CECB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CECB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        CECB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CDUCB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].CDUCB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CDUCB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].CDUCB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CDUCB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].CDUCB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CDUCB.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCBTCMSGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CDUCB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].CDUCB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CDUCB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        CDUCB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CCNVIO1CB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        CCNVIO1CB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CCNVIO1CB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        CCNVIO1CB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CCNVIO1CB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        CCNVIO1CB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CCNVIO1CB.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCBSignallingGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CCNVIO1CB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        CCNVIO1CB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CCNVIO1CB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        CCNVIO1CB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CBTCCB1.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].CBTCCB1.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CBTCCB1.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].CBTCCB1.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CBTCCB1.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        CBTCCB1.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CBTCCB1.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCBSignallingGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CBTCCB1.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        CBTCCB1.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CBTCCB1.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        CBTCCB1.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CBFCCB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].CBFCCB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CBFCCB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].CBFCCB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CBFCCB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        CBFCCB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CBFCCB.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCBHVACGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CBFCCB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        CBFCCB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CBFCCB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        CBFCCB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CBFCB = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].CBFCB;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        C1CB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].C1CB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        C1CB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].C1CB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        C1CB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].C1CB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        C1CB.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCBSignallingGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        C1CB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].C1CB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        C1CB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        C1CB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        BLCB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].BLCB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        BLCB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].BLCB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        BLCB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].BLCB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        BLCB.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCBBrakeGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        BLCB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].BLCB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        BLCB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        BLCB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ZVBACB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].ZVBACB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ZVBACB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].ZVBACB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ZVBACB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        ZVBACB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ZVBACB.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCBBrakeGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ZVBACB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        ZVBACB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ZVBACB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        ZVBACB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        EBLR1CB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].EBLR1CB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        EBLR1CB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].EBLR1CB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        EBLR1CB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        EBLR1CB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        EBLR1CB.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCBBrakeGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        EBLR1CB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        EBLR1CB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        EBLR1CB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        EBLR1CB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        DRCB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].DRCB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        DRCB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].DRCB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        DRCB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].DRCB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        DRCB.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCBDoorGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        DRCB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].DRCB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        DRCB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        DRCB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        DPLCB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].DPLCB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        DPLCB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].DPLCB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        DPLCB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].DPLCB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        DPLCB.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCBDoorGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        DPLCB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].DPLCB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        DPLCB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        DPLCB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        DMICB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].DMICB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        DMICB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].DMICB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        DMICB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].DMICB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        DMICB.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCBSignallingGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        DMICB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].DMICB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        DMICB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        DMICB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        DLCB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].DLCB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        DLCB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].DLCB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        DLCB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].DLCB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        DLCB.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCBDoorGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        DLCB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].DLCB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        DLCB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        DLCB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        DIOCB2.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].DIOCB2.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        DIOCB2.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].DIOCB2.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        DIOCB2.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        DIOCB2.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        DIOCB2.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCBTCMSGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        DIOCB2.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        DIOCB2.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        DIOCB2.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        DIOCB2.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        DIOCB1.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].DIOCB1.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        DIOCB1.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].DIOCB1.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        DIOCB1.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        DIOCB1.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        DIOCB1.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCBTCMSGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        DIOCB1.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        DIOCB1.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        DIOCB1.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        DIOCB1.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CSCCB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].CSCCB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CSCCB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].CSCCB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CSCCB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].CSCCB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CSCCB.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCBTCMSGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CSCCB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].CSCCB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CSCCB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        CSCCB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CSBCB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].CSBCB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CSBCB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].CSBCB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CSBCB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].CSBCB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CSBCB.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCBTCMSGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CSBCB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].CSBCB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CSBCB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        CSBCB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CSACB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].CSACB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CSACB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].CSACB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CSACB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].CSACB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CSACB.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCBTCMSGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CSACB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].CSACB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CSACB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        CSACB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CRSBCB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].CRSBCB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CRSBCB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].CRSBCB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CRSBCB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        CRSBCB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CRSBCB.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCBSignallingGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CRSBCB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        CRSBCB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        CRSBCB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        CRSBCB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        SOCB2 = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].SOCB2;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        SOCB1 = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].SOCB1;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        MSOCB5 = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].MSOCB5;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        MSOCB4 = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].MSOCB4;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        MSOCB3 = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].MSOCB3;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        MSOCB2 = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].MSOCB2;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        MSOCB1 = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].MSOCB1;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        HVAC1 = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].HVAC1;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        SAC2CCB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].SAC2CCB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        SAC2CCB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].SAC2CCB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        SAC2CCB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        SAC2CCB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        SAC2CCB.InternalRequest =
        (BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
         .SAC2CBInternalRequest ||
         BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
         .MCBHVACGroupOpenInternalRequest);
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        SAC2CCB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        SAC2CCB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        SAC2CCB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        SAC2CCB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        HVAC2 = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].HVAC2;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        SAC1CCB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].SAC1CCB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        SAC1CCB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].SAC1CCB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        SAC1CCB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        SAC1CCB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        SAC1CCB.InternalRequest =
        (BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
         .SAC1CBInternalRequest ||
         BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
         .MCBHVACGroupOpenInternalRequest);
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        SAC1CCB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        SAC1CCB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        SAC1CCB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        SAC1CCB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].CMCB
        = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].CMCB;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        AC2CB = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].AC2CB;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        AC1CB = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].AC1CB;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        FDSCB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].FDSCB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        FDSCB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].FDSCB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        FDSCB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].FDSCB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        FDSCB.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .FDSCBInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        FDSCB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].FDSCB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        FDSCB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        FDSCB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        BCBCB = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].BCBCB;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ERVRCB1 = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].ERVRCB1;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ERVRCB2 = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].ERVRCB2;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ESKCB = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].ESKCB;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].HMCB
        = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].HMCB;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        SP1CB = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].SP1CB;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        SP2CB = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].SP2CB;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        SP3CB = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].SP3CB;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        SP4CB = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].SP4CB;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        SP5CB = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].SP5CB;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        SPCB6 = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].SPCB6;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        SPCB7 = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].SPCB7;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        SPCB8 = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].SPCB8;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RPTCB = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].RPTCB;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        TERCB1 = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].TERCB1;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        TERCB2 = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].TERCB2;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].SPSW
        = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].SPSW;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].SPPB
        = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].SPPB;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        APSCB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].APSCB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        APSCB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].APSCB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        APSCB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].APSCB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        APSCB.InternalRequest =
        (BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
         .APSCBOpenInternalRequest ||
         BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
         .MCBAPSGroupOpenInternalRequest);
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        APSCB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].APSCB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        APSCB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        APSCB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        APSICB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].APSICB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        APSICB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].APSICB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        APSICB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        APSICB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        APSICB.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .APSICBInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        APSICB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        APSICB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        APSICB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        APSICB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        BCGCB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].BCGCB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        BCGCB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].BCGCB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        BCGCB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].BCGCB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        BCGCB.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCBAPSGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        BCGCB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].BCGCB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        BCGCB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        BCGCB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].DSCB
        = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].DSCB;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        MTBMCCB = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].MTBMCCB;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        PADCB = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].PADCB;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        PANCB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].PANCB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        PANCB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].PANCB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        PANCB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].PANCB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        PANCB.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .PANCBOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        PANCB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].PANCB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        PANCB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        PANCB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].SSCB
        = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].SSCB;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].PTCB
        = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].PTCB;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        VCBCB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].VCBCB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        VCBCB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].VCBCB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        VCBCB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].VCBCB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        VCBCB.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .MCB110VDCGroupOpenInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        VCBCB.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].VCBCB.Inhibit;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        VCBCB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        VCBCB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        SP12CB = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].SP12CB;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        MTBM1CB = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].MTBM1CB;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        MTBM2CB = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].MTBM2CB;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        SP11CB = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].SP11CB;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        SP6CB = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].SP6CB;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        MTOPCB = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].MTOPCB;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ORDCOS = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].ORDCOS;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ADDCOS = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].ADDCOS;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor1DCUCB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor1DCUCB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor1DCUCB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor1DCUCB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor1DCUCB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor1DCUCB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor1DCUCB.InternalRequest =
        BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor1DCUCB.InternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor1DCUCB.Inhibit = rtb_Compare_g42;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor1DCUCB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor1DCUCB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor2DCUCB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor2DCUCB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor2DCUCB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor2DCUCB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor2DCUCB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor2DCUCB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor2DCUCB.InternalRequest =
        BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor2DCUCB.InternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor2DCUCB.Inhibit = rtb_CollisionDetected;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor2DCUCB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor2DCUCB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor3DCUCB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor3DCUCB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor3DCUCB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor3DCUCB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor3DCUCB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor3DCUCB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor3DCUCB.InternalRequest =
        BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor3DCUCB.InternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor3DCUCB.Inhibit = rtb_Compare_ja;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor3DCUCB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor3DCUCB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor4DCUCB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor4DCUCB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor4DCUCB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor4DCUCB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor4DCUCB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor4DCUCB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor4DCUCB.InternalRequest =
        BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor4DCUCB.InternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor4DCUCB.Inhibit = rtb_Compare_kq;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor4DCUCB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor4DCUCB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor1DCUCB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoor1DCUCB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor1DCUCB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoor1DCUCB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor1DCUCB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoor1DCUCB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor1DCUCB.InternalRequest =
        BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoor1DCUCB.InternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor1DCUCB.Inhibit = rtb_Compare_nsw;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor1DCUCB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc]
        .RightDoor1DCUCB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor2DCUCB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoor2DCUCB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor2DCUCB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoor2DCUCB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor2DCUCB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoor2DCUCB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor2DCUCB.InternalRequest =
        BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoor2DCUCB.InternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor2DCUCB.Inhibit = rtb_Compare_nn;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor2DCUCB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc]
        .RightDoor2DCUCB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor3DCUCB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoor3DCUCB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor3DCUCB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoor3DCUCB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor3DCUCB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoor3DCUCB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor3DCUCB.InternalRequest =
        BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoor3DCUCB.InternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor3DCUCB.Inhibit = rtb_Compare_pg;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor3DCUCB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc]
        .RightDoor3DCUCB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor4DCUCB.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoor4DCUCB.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor4DCUCB.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoor4DCUCB.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor4DCUCB.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoor4DCUCB.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor4DCUCB.InternalRequest =
        BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoor4DCUCB.InternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor4DCUCB.Inhibit = rtb_Compare_or;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor4DCUCB.TripRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc]
        .RightDoor4DCUCB.TripRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor1Coving = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor1Coving;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor2Coving = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor2Coving;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor3Coving = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor3Coving;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor4Coving = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor4Coving;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor1Coving = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoor1Coving;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor2Coving = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoor2Coving;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor3Coving = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoor3Coving;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor4Coving = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoor4Coving;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor1EED.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor1EED.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor1EED.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor1EED.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor1EED.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor1EED.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor1EED.InternalRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc]
        .LeftDoor1EED.InternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor1EED.Inhibit = (rtb_Compare_g42 ||
        (BEML_EMU_B.UnitDelay_p[ForEach_itr_oc].LeftDoor1DCUCB != 0.0));
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor2EED.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor2EED.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor2EED.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor2EED.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor2EED.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor2EED.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor2EED.InternalRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc]
        .LeftDoor2EED.InternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor2EED.Inhibit = (rtb_CollisionDetected ||
        (BEML_EMU_B.UnitDelay_p[ForEach_itr_oc].LeftDoor2DCUCB != 0.0));
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor3EED.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor3EED.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor3EED.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor3EED.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor3EED.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor3EED.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor3EED.InternalRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc]
        .LeftDoor3EED.InternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor3EED.Inhibit = (rtb_Compare_ja ||
        (BEML_EMU_B.UnitDelay_p[ForEach_itr_oc].LeftDoor3DCUCB != 0.0));
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor4EED.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor4EED.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor4EED.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor4EED.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor4EED.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor4EED.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor4EED.InternalRequest = BEML_EMU_U.IOControlsInput[ForEach_itr_oc]
        .LeftDoor4EED.InternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor4EED.Inhibit = (rtb_Compare_kq ||
        (BEML_EMU_B.UnitDelay_p[ForEach_itr_oc].LeftDoor4DCUCB != 0.0));
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor1EED.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoor1EED.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor1EED.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoor1EED.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor1EED.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoor1EED.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor1EED.InternalRequest =
        BEML_EMU_U.IOControlsInput[ForEach_itr_oc].RightDoor1EED.InternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor1EED.Inhibit = (rtb_Compare_nsw ||
        (BEML_EMU_B.UnitDelay_p[ForEach_itr_oc].RightDoor1DCUCB != 0.0));
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor2EED.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoor2EED.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor2EED.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoor2EED.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor2EED.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoor2EED.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor2EED.InternalRequest =
        BEML_EMU_U.IOControlsInput[ForEach_itr_oc].RightDoor2EED.InternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor2EED.Inhibit = (rtb_Compare_nn ||
        (BEML_EMU_B.UnitDelay_p[ForEach_itr_oc].RightDoor2DCUCB != 0.0));
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor3EED.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoor3EED.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor3EED.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoor3EED.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor3EED.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoor3EED.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor3EED.InternalRequest =
        BEML_EMU_U.IOControlsInput[ForEach_itr_oc].RightDoor3EED.InternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor3EED.Inhibit = (rtb_Compare_pg ||
        (BEML_EMU_B.UnitDelay_p[ForEach_itr_oc].RightDoor3DCUCB != 0.0));
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor4EED.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoor4EED.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor4EED.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoor4EED.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor4EED.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoor4EED.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor4EED.InternalRequest =
        BEML_EMU_U.IOControlsInput[ForEach_itr_oc].RightDoor4EED.InternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor4EED.Inhibit = (rtb_Compare_or ||
        (BEML_EMU_B.UnitDelay_p[ForEach_itr_oc].RightDoor4DCUCB != 0.0));
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor1ManualClose = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor1ManualClose;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor2ManualClose = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor2ManualClose;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor3ManualClose = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor3ManualClose;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor4ManualClose = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor4ManualClose;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor1ManualClose = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoor1ManualClose;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor2ManualClose = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoor2ManualClose;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor3ManualClose = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoor3ManualClose;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor4ManualClose = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoor4ManualClose;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor1ManualOpen = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor1ManualOpen;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor2ManualOpen = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor2ManualOpen;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor3ManualOpen = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor3ManualOpen;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor4ManualOpen = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor4ManualOpen;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor1ManualOpen = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoor1ManualOpen;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor2ManualOpen = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoor2ManualOpen;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor3ManualOpen = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoor3ManualOpen;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor4ManualOpen = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoor4ManualOpen;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor1Lockout.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor1Lockout.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor1Lockout.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor1Lockout.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor1Lockout.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor1Lockout.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor1Lockout.InternalRequest =
        BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor1Lockout.InternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor1Lockout.Inhibit =
        (rtb_ImpAsg_InsertedFor_DoorsOpen_at_inport_0[0] ||
         rtb_ImpAsg_InsertedFor_DoorsOpen_at_inport_0[1]);
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor2Lockout.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor2Lockout.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor2Lockout.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor2Lockout.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor2Lockout.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor2Lockout.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor2Lockout.InternalRequest =
        BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor2Lockout.InternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor2Lockout.Inhibit =
        (rtb_ImpAsg_InsertedFor_DoorsOpen_at_inport_0[2] ||
         rtb_ImpAsg_InsertedFor_DoorsOpen_at_inport_0[3]);
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor3Lockout.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor3Lockout.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor3Lockout.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor3Lockout.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor3Lockout.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor3Lockout.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor3Lockout.InternalRequest =
        BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor3Lockout.InternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor3Lockout.Inhibit =
        (rtb_ImpAsg_InsertedFor_DoorsOpen_at_inport_0[4] ||
         rtb_ImpAsg_InsertedFor_DoorsOpen_at_inport_0[5]);
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor4Lockout.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor4Lockout.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor4Lockout.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor4Lockout.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor4Lockout.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor4Lockout.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor4Lockout.InternalRequest =
        BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoor4Lockout.InternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoor4Lockout.Inhibit =
        (rtb_ImpAsg_InsertedFor_DoorsOpen_at_inport_0[6] ||
         rtb_ImpAsg_InsertedFor_DoorsOpen_at_inport_0[7]);
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor1Lockout.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoor1Lockout.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor1Lockout.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoor1Lockout.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor1Lockout.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoor1Lockout.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor1Lockout.InternalRequest =
        BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoor1Lockout.InternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor1Lockout.Inhibit =
        (rtb_ImpAsg_InsertedFor_DoorsOpen_at_inport_0[8] ||
         rtb_ImpAsg_InsertedFor_DoorsOpen_at_inport_0[9]);
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor2Lockout.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoor2Lockout.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor2Lockout.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoor2Lockout.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor2Lockout.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoor2Lockout.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor2Lockout.InternalRequest =
        BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoor2Lockout.InternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor2Lockout.Inhibit =
        (rtb_ImpAsg_InsertedFor_DoorsOpen_at_inport_0[10] ||
         rtb_ImpAsg_InsertedFor_DoorsOpen_at_inport_0[11]);
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor3Lockout.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoor3Lockout.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor3Lockout.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoor3Lockout.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor3Lockout.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoor3Lockout.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor3Lockout.InternalRequest =
        BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoor3Lockout.InternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor3Lockout.Inhibit =
        (rtb_ImpAsg_InsertedFor_DoorsOpen_at_inport_0[12] ||
         rtb_ImpAsg_InsertedFor_DoorsOpen_at_inport_0[13]);
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor4Lockout.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoor4Lockout.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor4Lockout.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoor4Lockout.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor4Lockout.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoor4Lockout.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor4Lockout.InternalRequest =
        BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoor4Lockout.InternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoor4Lockout.Inhibit =
        (rtb_ImpAsg_InsertedFor_DoorsOpen_at_inport_0[14] ||
         rtb_ImpAsg_InsertedFor_DoorsOpen_at_inport_0[15]);
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoorEADCover = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        LeftDoorEADCover;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoorEADCover = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        RightDoorEADCover;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        LeftDoorEAD = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].LeftDoorEAD;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        RightDoorEAD = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].RightDoorEAD;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ParkBrakeIsolationCockBogie1 = BEML_EMU_U.IOControlsInput[ForEach_itr_oc]
        .ParkBrakeIsolationCockBogie1;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ParkBrakeIsolationCockBogie2 = BEML_EMU_U.IOControlsInput[ForEach_itr_oc]
        .ParkBrakeIsolationCockBogie2;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        MRIsolationCock = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        MRIsolationCock;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        UncouplingCock = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        UncouplingCock;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        Horn1IsolationCock = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        Horn1IsolationCock;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        Horn2IsolationCock = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        Horn2IsolationCock;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        MREPIsolationCockEnd1 = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        MREPIsolationCockEnd1;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        BIC1Inside = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].BIC1Inside;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        BIC1Outside = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].BIC1Outside;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        BIC2Inside = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].BIC2Inside;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        BIC2Outside = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].BIC2Outside;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        MREPIsolationCockEnd2 = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        MREPIsolationCockEnd2;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].EPIC
        = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].EPIC;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ASCOEnd1 = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].ASCOEnd1;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ASCOEnd2 = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].ASCOEnd2;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ASIsolationCock = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        ASIsolationCock;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].SR =
        BEML_EMU_U.IOControlsInput[ForEach_itr_oc].SR;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ParkingBrakeManualReleaseBogie1Handle1 =
        BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        ParkingBrakeManualReleaseBogie1Handle1;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ParkingBrakeManualReleaseBogie1Handle2 =
        BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        ParkingBrakeManualReleaseBogie1Handle2;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ParkingBrakeManualReleaseBogie2Handle1 =
        BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        ParkingBrakeManualReleaseBogie2Handle1;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ParkingBrakeManualReleaseBogie2Handle2 =
        BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        ParkingBrakeManualReleaseBogie2Handle2;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        PECUPushButton = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        PECUPushButton;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        Microphone = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].Microphone;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        DriversBackDoor = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        DriversBackDoor;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        PantographIsolationCock = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        PantographIsolationCock;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        VCBIsolationCock = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        VCBIsolationCock;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ORDPlunger.Value = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        ORDPlunger.Value;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ORDPlunger.Mode = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        ORDPlunger.Mode;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ORDPlunger.InitVal = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        ORDPlunger.InitVal;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ORDPlunger.InternalRequest =
        BEML_EMU_B.ImpAsg_InsertedFor_IOControlsModelFaults_at_inport_0[ForEach_itr_oc]
        .ORDPlungerInternalRequest;
      BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[ForEach_itr_oc].
        ORDPlunger.Inhibit = BEML_EMU_U.IOControlsInput[ForEach_itr_oc].
        ORDPlunger.Inhibit;
    }
  }

  /* End of Outputs for SubSystem: '<S401>/InhibitsAndInternalRequests' */
  if ((&BEML_EMU_M)->Timing.TaskCounters.TID[2] == 0) {
    /* ModelReference: '<S401>/IOControlsModel' incorporates:
     *  Outport: '<Root>/IOControlsOutput'
     */
    IOControls(&BEML_EMU_B.ImpAsg_InsertedFor_ModelInputs_at_inport_0[0],
               &BEML_EMU_Y.IOControlsOutput[0], &rtb_IOControlsModel_o2,
               &(BEML_EMU_DW.IOControlsModel_InstanceData.rtb),
               &(BEML_EMU_DW.IOControlsModel_InstanceData.rtdw));

    /* Outputs for Iterator SubSystem: '<S401>/For Each Subsystem' incorporates:
     *  ForEach: '<S659>/For Each'
     */
    for (ForEach_itr_c = 0; ForEach_itr_c < 8; ForEach_itr_c++) {
      /* ForEachSliceAssignment generated from: '<S659>/InputControlStates' incorporates:
       *  ForEachSliceSelector generated from: '<S659>/IOControlsStates'
       *  Outport: '<Root>/IOControlsOutput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_c]
        = BEML_EMU_Y.IOControlsOutput[ForEach_itr_c].InputStates;
    }

    /* End of Outputs for SubSystem: '<S401>/For Each Subsystem' */
  }

  if ((&BEML_EMU_M)->Timing.TaskCounters.TID[4] == 0) {
    /* Logic: '<S402>/NOT' incorporates:
     *  Outport: '<Root>/ModelStatus'
     */
    BEML_EMU_B.NOT = !BEML_EMU_Y.ModelStatus.IsInitialized;
  }

  /* BusAssignment: '<S402>/Bus Assignment' incorporates:
   *  DataTypeConversion: '<S402>/Data Type Conversion'
   *  Inport: '<Root>/TrainInput'
   *  Logic: '<S402>/AND'
   */
  BEML_EMU_B.BusAssignment = BEML_EMU_U.TrainInput;
  BEML_EMU_B.BusAssignment.Overrides.AutoPowerOn =
    ((BEML_EMU_U.TrainInput.Overrides.AutoPowerOn != 0.0) && BEML_EMU_B.NOT);
  if ((&BEML_EMU_M)->Timing.TaskCounters.TID[2] == 0) {
    /* Update for UnitDelay: '<S3>/Unit Delay' */
    memcpy(&BEML_EMU_DW.UnitDelay_DSTATE[0],
           &BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[0],
           sizeof(BD_IOControls_Out_Vehicle_InputStates) << 3U);

    /* Update for UnitDelay: '<S401>/Unit Delay' */
    memcpy(&BEML_EMU_DW.UnitDelay_DSTATE_b[0],
           &BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[0],
           sizeof(BD_IOControls_Out_Vehicle_InputStates) << 3U);
  }

  /* End of Outputs for SubSystem: '<Root>/InputsInterface' */

  /* UnitDelay: '<S1>/Unit Delay' */
  memcpy(&BEML_EMU_B.UnitDelay_j[0], &BEML_EMU_DW.UnitDelay_DSTATE_d[0], sizeof
         (BD_TrainDynamics_Out_Vehicle) << 3U);
  if ((&BEML_EMU_M)->Timing.TaskCounters.TID[2] == 0) {
    /* UnitDelay: '<S1>/Unit Delay5' */
    memcpy(&BEML_EMU_B.UnitDelay5[0], &BEML_EMU_DW.UnitDelay5_DSTATE[0], sizeof
           (BD_ElectricalSystem_Out_Vehicle) << 3U);

    /* Outputs for Atomic SubSystem: '<S1>/CouplingInterface' */
    /* Outputs for Iterator SubSystem: '<S145>/Subsystem' incorporates:
     *  ForEach: '<S146>/For Each'
     */
    for (ForEach_itr_kt = 0; ForEach_itr_kt < 8; ForEach_itr_kt++) {
      /* Outputs for Iterator SubSystem: '<S146>/ConvertToCouplerBus' incorporates:
       *  ForEach: '<S147>/For Each'
       */
      for (ForEach_itr_be = 0; ForEach_itr_be < 2; ForEach_itr_be++) {
        /* ForEachSliceAssignment generated from: '<S147>/Out1' */
        rtb_ImpAsg_InsertedFor_Out1_at_inport_0[ForEach_itr_be].Force =
          BEML_EMU_B.UnitDelay_j[ForEach_itr_kt].Couplers[ForEach_itr_be].Force;
        rtb_ImpAsg_InsertedFor_Out1_at_inport_0[ForEach_itr_be].SpringForce =
          BEML_EMU_B.UnitDelay_j[ForEach_itr_kt].Couplers[ForEach_itr_be].
          SpringForce;
        rtb_ImpAsg_InsertedFor_Out1_at_inport_0[ForEach_itr_be].DampingForce =
          BEML_EMU_B.UnitDelay_j[ForEach_itr_kt].Couplers[ForEach_itr_be].
          DampingForce;
        rtb_ImpAsg_InsertedFor_Out1_at_inport_0[ForEach_itr_be].BuffForce =
          BEML_EMU_B.UnitDelay_j[ForEach_itr_kt].Couplers[ForEach_itr_be].
          BuffForce;
        rtb_ImpAsg_InsertedFor_Out1_at_inport_0[ForEach_itr_be].DraftForce =
          BEML_EMU_B.UnitDelay_j[ForEach_itr_kt].Couplers[ForEach_itr_be].
          DraftForce;
        rtb_ImpAsg_InsertedFor_Out1_at_inport_0[ForEach_itr_be].ImpactForce =
          BEML_EMU_B.UnitDelay_j[ForEach_itr_kt].Couplers[ForEach_itr_be].
          ImpactForce;
        rtb_ImpAsg_InsertedFor_Out1_at_inport_0[ForEach_itr_be].Breakage =
          BEML_EMU_B.UnitDelay_j[ForEach_itr_kt].Couplers[ForEach_itr_be].
          Breakage;
        rtb_ImpAsg_InsertedFor_Out1_at_inport_0[ForEach_itr_be].Extension =
          BEML_EMU_B.UnitDelay_j[ForEach_itr_kt].Couplers[ForEach_itr_be].
          Extension;
        rtb_ImpAsg_InsertedFor_Out1_at_inport_0[ForEach_itr_be].ExtensionRate =
          BEML_EMU_B.UnitDelay_j[ForEach_itr_kt].Couplers[ForEach_itr_be].
          ExtensionRate;
        rtb_ImpAsg_InsertedFor_Out1_at_inport_0[ForEach_itr_be].ExternalCoupling
          = BEML_EMU_B.UnitDelay_j[ForEach_itr_kt].Couplers[ForEach_itr_be].
          ExternalCoupling;
        rtb_ImpAsg_InsertedFor_Out1_at_inport_0[ForEach_itr_be].Mimic =
          BEML_EMU_B.UnitDelay_j[ForEach_itr_kt].Couplers[ForEach_itr_be].Mimic;
      }

      /* End of Outputs for SubSystem: '<S146>/ConvertToCouplerBus' */

      /* ForEachSliceAssignment generated from: '<S146>/CouplingInput' incorporates:
       *  BusAssignment: '<S146>/Bus Assignment'
       *  DataTypeConversion: '<S146>/Data Type Conversion3'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_CouplingInput_at_inport_0[ForEach_itr_kt].
        ReleaseCoupler = (BEML_EMU_B.UnitDelay5[ForEach_itr_kt].
                          CouplingSystem.UncoupleCmd != 0.0);
      BEML_EMU_B.ImpAsg_InsertedFor_CouplingInput_at_inport_0[ForEach_itr_kt].
        Coupler[0] = BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_kt].
        Couplers.Coupler[0];
      BEML_EMU_B.ImpAsg_InsertedFor_CouplingInput_at_inport_0[ForEach_itr_kt].
        DynamicsCouplers[0] = rtb_ImpAsg_InsertedFor_Out1_at_inport_0[0];
      BEML_EMU_B.ImpAsg_InsertedFor_CouplingInput_at_inport_0[ForEach_itr_kt].
        Coupler[1] = BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_kt].
        Couplers.Coupler[1];
      BEML_EMU_B.ImpAsg_InsertedFor_CouplingInput_at_inport_0[ForEach_itr_kt].
        DynamicsCouplers[1] = rtb_ImpAsg_InsertedFor_Out1_at_inport_0[1];

      /* ForEachSliceAssignment generated from: '<S146>/VehConfig' incorporates:
       *  DataTypeConversion: '<S146>/Data Type Conversion1'
       *  DataTypeConversion: '<S146>/Data Type Conversion2'
       *  Outport: '<Root>/ProcessedVehConf'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_VehConfig_at_inport_0[ForEach_itr_kt].
        Enabled = BEML_EMU_Y.ProcessedVehConf[ForEach_itr_kt].Common.Enabled;
      BEML_EMU_B.ImpAsg_InsertedFor_VehConfig_at_inport_0[ForEach_itr_kt].
        Orientation = BEML_EMU_Y.ProcessedVehConf[ForEach_itr_kt].
        Common.Orientation;
      BEML_EMU_B.ImpAsg_InsertedFor_VehConfig_at_inport_0[ForEach_itr_kt].HasCab
        = BEML_EMU_Y.ProcessedVehConf[ForEach_itr_kt].Equipment.HasCab;
      BEML_EMU_B.ImpAsg_InsertedFor_VehConfig_at_inport_0[ForEach_itr_kt].
        IsFirstVehicle = BEML_EMU_Y.ProcessedVehConf[ForEach_itr_kt].
        Location.IsFirstVehicle;
      BEML_EMU_B.ImpAsg_InsertedFor_VehConfig_at_inport_0[ForEach_itr_kt].
        IsLastVehicle = BEML_EMU_Y.ProcessedVehConf[ForEach_itr_kt].
        Location.IsLastVehicle;
      BEML_EMU_B.ImpAsg_InsertedFor_VehConfig_at_inport_0[ForEach_itr_kt].
        UnitConnection = BEML_EMU_Y.ProcessedVehConf[ForEach_itr_kt].
        Location.UnitConfig.UnitConnection;
    }

    /* End of Outputs for SubSystem: '<S145>/Subsystem' */

    /* ModelReference: '<S7>/Model' incorporates:
     *  Outport: '<Root>/CouplingOutput'
     */
    CouplingSystem(&(BEML_EMU_DW.Model_InstanceData.rtm),
                   &BEML_EMU_B.ImpAsg_InsertedFor_VehConfig_at_inport_0[0],
                   &BEML_EMU_B.ImpAsg_InsertedFor_CouplingInput_at_inport_0[0],
                   &BEML_EMU_Y.CouplingOutput[0],
                   &(BEML_EMU_DW.Model_InstanceData.rtb),
                   &(BEML_EMU_DW.Model_InstanceData.rtdw));

    /* SignalConversion generated from: '<S7>/Model' */
    memset(&rtb_TmpSignalConversionAtModelInport3[0], 0, sizeof(real_T) << 3U);

    /* End of Outputs for SubSystem: '<S1>/CouplingInterface' */

    /* UnitDelay: '<S1>/Unit Delay3' */
    memcpy(&BEML_EMU_B.UnitDelay3_m[0], &BEML_EMU_DW.UnitDelay3_DSTATE_n[0],
           sizeof(BD_DoorSystem_Out_Vehicle) << 3U);

    /* UnitDelay: '<S1>/Unit Delay2' */
    memcpy(&rtb_UnitDelay2[0], &BEML_EMU_DW.UnitDelay2_DSTATE_d[0], sizeof
           (BD_PantographSystem_Out_Vehicle) << 3U);

    /* UnitDelay: '<S1>/Unit Delay6' */
    memcpy(&BEML_EMU_B.UnitDelay6[0], &BEML_EMU_DW.UnitDelay6_DSTATE[0], sizeof
           (BD_TCMSSystem_Out_Vehicle) << 3U);
  }

  if ((&BEML_EMU_M)->Timing.TaskCounters.TID[1] == 0) {
    /* UnitDelay: '<S1>/Unit Delay1' */
    memcpy(&BEML_EMU_B.UnitDelay1_k[0], &BEML_EMU_DW.UnitDelay1_DSTATE_l[0],
           sizeof(BD_PneumaticsSystem_Out_Vehicle) << 3U);

    /* UnitDelay: '<S1>/Unit Delay4' */
    memcpy(&BEML_EMU_B.UnitDelay4[0], &BEML_EMU_DW.UnitDelay4_DSTATE[0], sizeof
           (BD_TractionSystem_Out_Vehicle) << 3U);

    /* Outputs for Atomic SubSystem: '<S6>/CBTCInterfacingUnit' */
    /* Outputs for Iterator SubSystem: '<S20>/CBTCModel' incorporates:
     *  ForEach: '<S21>/For Each'
     */
    for (ForEach_itr_mu = 0; ForEach_itr_mu < 8; ForEach_itr_mu++) {
      /* Outputs for Enabled SubSystem: '<S21>/ATO' incorporates:
       *  EnablePort: '<S23>/Enable'
       */
      /* ForEachSliceSelector generated from: '<S21>/ElectricalSystemVehicleOut' incorporates:
       *  Constant: '<S37>/Constant'
       *  Constant: '<S38>/Constant'
       *  RelationalOperator: '<S37>/Compare'
       *  RelationalOperator: '<S38>/Compare'
       */
      if (BEML_EMU_B.UnitDelay5[ForEach_itr_mu].TCMS.CabActive) {
        BEML_EMU_DW.CoreSubsys_h[ForEach_itr_mu].ATO_MODE = true;

        /* Saturate: '<S23>/Ignore invalid v_Permitted' */
        if (BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_mu].
            CBTC.OnBoard.ATOPermittedSpeed >
            BEML_EMU_P.CoreSubsys_h.Ignoreinvalidv_Permitted_UpperSat) {
          rtb_Product_cv =
            BEML_EMU_P.CoreSubsys_h.Ignoreinvalidv_Permitted_UpperSat;
        } else if (BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_mu].
                   CBTC.OnBoard.ATOPermittedSpeed <
                   BEML_EMU_P.CoreSubsys_h.Ignoreinvalidv_Permitted_LowerSat) {
          rtb_Product_cv =
            BEML_EMU_P.CoreSubsys_h.Ignoreinvalidv_Permitted_LowerSat;
        } else {
          rtb_Product_cv = BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_mu].
            CBTC.OnBoard.ATOPermittedSpeed;
        }

        /* End of Saturate: '<S23>/Ignore invalid v_Permitted' */

        /* Logic: '<S23>/Logical Operator3' incorporates:
         *  Constant: '<S33>/Constant'
         *  RelationalOperator: '<S23>/Relational Operator'
         *  RelationalOperator: '<S33>/Compare'
         */
        rtb_CollisionDetected = ((rtb_Product_cv <=
          BEML_EMU_P.CoreSubsys_h.CompareToConstant_const) ||
          (BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_mu].
           CBTC.OnBoard.ATOPermittedDistance <=
           BEML_EMU_B.BusAssignment.CBTCTuning.ATOProximityBrakeDistance));

        /* Sum: '<S23>/Subtract1' incorporates:
         *  Constant: '<S23>/Real Target'
         */
        rtb_Product_cv -= BEML_EMU_P.CoreSubsys_h.RealTarget_Value;

        /* Saturate: '<S23>/Min0' */
        if (rtb_Product_cv > BEML_EMU_P.CoreSubsys_h.Min0_UpperSat) {
          rtb_Product_cv = BEML_EMU_P.CoreSubsys_h.Min0_UpperSat;
        } else {
          if (rtb_Product_cv < BEML_EMU_P.CoreSubsys_h.Min0_LowerSat) {
            rtb_Product_cv = BEML_EMU_P.CoreSubsys_h.Min0_LowerSat;
          }
        }

        /* End of Saturate: '<S23>/Min0' */

        /* Sum: '<S23>/Subtract' */
        rtb_Product_cv -= BEML_EMU_B.UnitDelay_j[ForEach_itr_mu].
          Inertia.Velocity;

        /* Relay: '<S23>/Relay' */
        BEML_EMU_DW.CoreSubsys_h[ForEach_itr_mu].Relay_Mode = ((rtb_Product_cv >=
          BEML_EMU_P.CoreSubsys_h.Relay_OnVal) || ((!(rtb_Product_cv <=
          BEML_EMU_P.CoreSubsys_h.Relay_OffVal)) &&
          BEML_EMU_DW.CoreSubsys_h[ForEach_itr_mu].Relay_Mode));

        /* If: '<S23>/If' incorporates:
         *  Constant: '<S34>/Constant'
         *  Constant: '<S35>/Constant'
         *  Constant: '<S36>/Constant'
         *  Logic: '<S23>/Logical Operator1'
         *  Logic: '<S23>/Logical Operator2'
         *  RelationalOperator: '<S34>/Compare'
         *  RelationalOperator: '<S35>/Compare'
         *  RelationalOperator: '<S36>/Compare'
         *  Relay: '<S23>/Relay'
         */
        rtPrevAction = BEML_EMU_DW.CoreSubsys_h[ForEach_itr_mu].
          If_ActiveSubsystem;
        if ((!BEML_EMU_B.UnitDelay5[ForEach_itr_mu].Traction.TractionSafe) || ((
              !(BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_mu].
                CBTC.OnBoard.ATOState ==
                BEML_EMU_P.CoreSubsys_h.CompareToConstant2_const)) &&
             (!(BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_mu].
                CBTC.OnBoard.UTOModeActive ==
                BEML_EMU_P.CoreSubsys_h.CompareToConstant3_const)))) {
          rtAction = 0;
        } else if (rtb_CollisionDetected) {
          rtAction = 1;
        } else if (rtb_Product_cv <
                   BEML_EMU_P.CoreSubsys_h.CompareToConstant1_const) {
          rtAction = 2;
        } else {
          if (BEML_EMU_DW.CoreSubsys_h[ForEach_itr_mu].Relay_Mode) {
            /* Relay: '<S23>/Relay' */
            tmp_1 = BEML_EMU_P.CoreSubsys_h.Relay_YOn;
          } else {
            /* Relay: '<S23>/Relay' */
            tmp_1 = BEML_EMU_P.CoreSubsys_h.Relay_YOff;
          }

          if (tmp_1) {
            rtAction = 3;
          } else {
            rtAction = 4;
          }
        }

        BEML_EMU_DW.CoreSubsys_h[ForEach_itr_mu].If_ActiveSubsystem = rtAction;
        switch (rtAction) {
         case 0:
          /* Outputs for IfAction SubSystem: '<S23>/NotInATO' incorporates:
           *  ActionPort: '<S39>/Action Port'
           */
          BEML_EMU_NotInATO(&rtb_ATOTBDemand, &BEML_EMU_P.CoreSubsys_h.NotInATO);

          /* End of Outputs for SubSystem: '<S23>/NotInATO' */
          break;

         case 1:
          /* Outputs for IfAction SubSystem: '<S23>/Brake When Close to Stopping Point' incorporates:
           *  ActionPort: '<S31>/Action Port'
           */
          BEML_EMU_NotInATO(&rtb_ATOTBDemand,
                            &BEML_EMU_P.CoreSubsys_h.BrakeWhenClosetoStoppingPoint);

          /* End of Outputs for SubSystem: '<S23>/Brake When Close to Stopping Point' */
          break;

         case 2:
          if (rtAction != rtPrevAction) {
            /* InitializeConditions for IfAction SubSystem: '<S23>/ATO Braking Demand' incorporates:
             *  ActionPort: '<S29>/Action Port'
             */
            /* InitializeConditions for If: '<S23>/If' incorporates:
             *  Delay: '<S65>/UD'
             *  DiscreteIntegrator: '<S70>/Integrator'
             */
            BEML_EMU_DW.CoreSubsys_h[ForEach_itr_mu].UD_DSTATE_k =
              BEML_EMU_P.CoreSubsys_h.BrakeDemandPIDController_DifferentiatorICPrevScaledInput;
            BEML_EMU_DW.CoreSubsys_h[ForEach_itr_mu].Integrator_DSTATE_f =
              BEML_EMU_P.CoreSubsys_h.BrakeDemandPIDController_InitialConditionForIntegrator;

            /* End of InitializeConditions for SubSystem: '<S23>/ATO Braking Demand' */
          }

          /* Outputs for IfAction SubSystem: '<S23>/ATO Braking Demand' incorporates:
           *  ActionPort: '<S29>/Action Port'
           */
          /* SampleTimeMath: '<S65>/TSamp' incorporates:
           *  Product: '<S64>/DProd Out'
           *
           * About '<S65>/TSamp':
           *  y = u * K where K = 1 / ( w * Ts )
           */
          DiscreteTimeIntegrator_a = rtb_Product_cv *
            BEML_EMU_B.BusAssignment.CBTCTuning.ATOBrakeD *
            BEML_EMU_P.CoreSubsys_h.TSamp_WtEt;

          /* Sum: '<S79>/Sum' incorporates:
           *  Delay: '<S65>/UD'
           *  DiscreteIntegrator: '<S70>/Integrator'
           *  Product: '<S75>/PProd Out'
           *  Sum: '<S65>/Diff'
           */
          ratio = (rtb_Product_cv *
                   BEML_EMU_B.BusAssignment.CBTCTuning.ATOBrakeP +
                   BEML_EMU_DW.CoreSubsys_h[ForEach_itr_mu].Integrator_DSTATE_f)
            + (DiscreteTimeIntegrator_a -
               BEML_EMU_DW.CoreSubsys_h[ForEach_itr_mu].UD_DSTATE_k);

          /* Saturate: '<S77>/Saturation' */
          if (ratio >
              BEML_EMU_P.CoreSubsys_h.BrakeDemandPIDController_UpperSaturationLimit)
          {
            rtb_ATOTBDemand =
              BEML_EMU_P.CoreSubsys_h.BrakeDemandPIDController_UpperSaturationLimit;
          } else if (ratio <
                     BEML_EMU_P.CoreSubsys_h.BrakeDemandPIDController_LowerSaturationLimit)
          {
            rtb_ATOTBDemand =
              BEML_EMU_P.CoreSubsys_h.BrakeDemandPIDController_LowerSaturationLimit;
          } else {
            rtb_ATOTBDemand = ratio;
          }

          /* End of Saturate: '<S77>/Saturation' */

          /* Update for Delay: '<S65>/UD' */
          BEML_EMU_DW.CoreSubsys_h[ForEach_itr_mu].UD_DSTATE_k =
            DiscreteTimeIntegrator_a;

          /* Update for DiscreteIntegrator: '<S70>/Integrator' incorporates:
           *  Product: '<S67>/IProd Out'
           */
          BEML_EMU_DW.CoreSubsys_h[ForEach_itr_mu].Integrator_DSTATE_f +=
            rtb_Product_cv * BEML_EMU_B.BusAssignment.CBTCTuning.ATOBrakeI *
            BEML_EMU_P.CoreSubsys_h.Integrator_gainval;

          /* End of Outputs for SubSystem: '<S23>/ATO Braking Demand' */
          break;

         case 3:
          if (rtAction != rtPrevAction) {
            /* InitializeConditions for IfAction SubSystem: '<S23>/ATO Traction Demand' incorporates:
             *  ActionPort: '<S30>/Action Port'
             */
            /* InitializeConditions for If: '<S23>/If' incorporates:
             *  Delay: '<S110>/UD'
             *  DiscreteIntegrator: '<S115>/Integrator'
             */
            BEML_EMU_DW.CoreSubsys_h[ForEach_itr_mu].UD_DSTATE =
              BEML_EMU_P.CoreSubsys_h.TractiveDemand_DifferentiatorICPrevScaledInput;
            BEML_EMU_DW.CoreSubsys_h[ForEach_itr_mu].Integrator_DSTATE =
              BEML_EMU_P.CoreSubsys_h.TractiveDemand_InitialConditionForIntegrator;

            /* End of InitializeConditions for SubSystem: '<S23>/ATO Traction Demand' */
          }

          /* Outputs for IfAction SubSystem: '<S23>/ATO Traction Demand' incorporates:
           *  ActionPort: '<S30>/Action Port'
           */
          /* SampleTimeMath: '<S110>/TSamp' incorporates:
           *  Product: '<S109>/DProd Out'
           *
           * About '<S110>/TSamp':
           *  y = u * K where K = 1 / ( w * Ts )
           */
          DiscreteTimeIntegrator_a = rtb_Product_cv *
            BEML_EMU_B.BusAssignment.CBTCTuning.ATOTractionD *
            BEML_EMU_P.CoreSubsys_h.TSamp_WtEt_e;

          /* Sum: '<S124>/Sum' incorporates:
           *  Delay: '<S110>/UD'
           *  DiscreteIntegrator: '<S115>/Integrator'
           *  Product: '<S120>/PProd Out'
           *  Sum: '<S110>/Diff'
           */
          ratio = (rtb_Product_cv *
                   BEML_EMU_B.BusAssignment.CBTCTuning.ATOTractionP +
                   BEML_EMU_DW.CoreSubsys_h[ForEach_itr_mu].Integrator_DSTATE) +
            (DiscreteTimeIntegrator_a - BEML_EMU_DW.CoreSubsys_h[ForEach_itr_mu]
             .UD_DSTATE);

          /* Saturate: '<S122>/Saturation' */
          if (ratio >
              BEML_EMU_P.CoreSubsys_h.TractiveDemand_UpperSaturationLimit) {
            rtb_ATOTBDemand =
              BEML_EMU_P.CoreSubsys_h.TractiveDemand_UpperSaturationLimit;
          } else if (ratio <
                     BEML_EMU_P.CoreSubsys_h.TractiveDemand_LowerSaturationLimit)
          {
            rtb_ATOTBDemand =
              BEML_EMU_P.CoreSubsys_h.TractiveDemand_LowerSaturationLimit;
          } else {
            rtb_ATOTBDemand = ratio;
          }

          /* End of Saturate: '<S122>/Saturation' */

          /* Update for Delay: '<S110>/UD' */
          BEML_EMU_DW.CoreSubsys_h[ForEach_itr_mu].UD_DSTATE =
            DiscreteTimeIntegrator_a;

          /* Update for DiscreteIntegrator: '<S115>/Integrator' incorporates:
           *  Product: '<S112>/IProd Out'
           */
          BEML_EMU_DW.CoreSubsys_h[ForEach_itr_mu].Integrator_DSTATE +=
            rtb_Product_cv * BEML_EMU_B.BusAssignment.CBTCTuning.ATOTractionI *
            BEML_EMU_P.CoreSubsys_h.Integrator_gainval_i;

          /* End of Outputs for SubSystem: '<S23>/ATO Traction Demand' */
          break;

         default:
          /* Outputs for IfAction SubSystem: '<S23>/Coasting' incorporates:
           *  ActionPort: '<S32>/Action Port'
           */
          BEML_EMU_NotInATO(&rtb_ATOTBDemand, &BEML_EMU_P.CoreSubsys_h.Coasting);

          /* End of Outputs for SubSystem: '<S23>/Coasting' */
          break;
        }

        /* End of If: '<S23>/If' */
        BEML_EMU_B.CoreSubsys_h[ForEach_itr_mu].ATOBrake = (rtb_ATOTBDemand <=
          BEML_EMU_P.CoreSubsys_h.CompareToConstant6_const);
        BEML_EMU_B.CoreSubsys_h[ForEach_itr_mu].ATOTraction = (rtb_ATOTBDemand >=
          BEML_EMU_P.CoreSubsys_h.CompareToConstant5_const);
        BEML_EMU_B.CoreSubsys_h[ForEach_itr_mu].ATOTBDemand = rtb_ATOTBDemand;
      } else {
        if (BEML_EMU_DW.CoreSubsys_h[ForEach_itr_mu].ATO_MODE) {
          /* Disable for If: '<S23>/If' */
          BEML_EMU_DW.CoreSubsys_h[ForEach_itr_mu].If_ActiveSubsystem = -1;
          BEML_EMU_DW.CoreSubsys_h[ForEach_itr_mu].ATO_MODE = false;
        }
      }

      /* End of Outputs for SubSystem: '<S21>/ATO' */

      /* Logic: '<S140>/Logical Operator40' incorporates:
       *  ForEachSliceSelector generated from: '<S21>/ElectricalSystemVehicleOut'
       *  Logic: '<S131>/Logical Operator5'
       *  Logic: '<S131>/Logical Operator6'
       *  Logic: '<S140>/Logical Operator39'
       *  Logic: '<S140>/Logical Operator41'
       *  Memory: '<S140>/Memory'
       *  UnitDelay: '<S131>/Unit Delay2'
       */
      rtb_AND_p = (((BEML_EMU_B.UnitDelay5[ForEach_itr_mu].SignalSys.UTOMode !=
                     0.0) || BEML_EMU_DW.CoreSubsys_h[ForEach_itr_mu].
                    Memory_PreviousInput) &&
                   ((BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_mu].
                     CBTC.OnBoard.UTOModeActive != 0.0) ||
                    (!(BEML_EMU_DW.CoreSubsys_h[ForEach_itr_mu].
                       UnitDelay2_DSTATE != 0.0))));

      /* Logic: '<S141>/Logical Operator40' incorporates:
       *  ForEachSliceSelector generated from: '<S21>/ElectricalSystemVehicleOut'
       *  Logic: '<S131>/Logical Operator2'
       *  Logic: '<S131>/Logical Operator3'
       *  Logic: '<S141>/Logical Operator39'
       *  Logic: '<S141>/Logical Operator41'
       *  Memory: '<S141>/Memory'
       *  UnitDelay: '<S131>/Unit Delay1'
       */
      rtb_CollisionDetected = (((BEML_EMU_B.UnitDelay5[ForEach_itr_mu].
        SignalSys.ATOMode != 0.0) || BEML_EMU_DW.CoreSubsys_h[ForEach_itr_mu].
        Memory_PreviousInput_m) &&
        ((BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_mu].CBTC.OnBoard.ATOState
          != 0.0) || (!(BEML_EMU_DW.CoreSubsys_h[ForEach_itr_mu].
                        UnitDelay1_DSTATE != 0.0))));

      /* Logic: '<S26>/Logical Operator' incorporates:
       *  ForEachSliceSelector generated from: '<S21>/ElectricalSystemVehicleOut'
       *  Logic: '<S26>/NOT2'
       */
      rtb_Compare_g42 = ((!(BEML_EMU_B.UnitDelay5[ForEach_itr_mu].
                            SignalSys.NoATCBypass != 0.0)) &&
                         BEML_EMU_B.UnitDelay5[ForEach_itr_mu].TCMS.CabActive &&
                         (BEML_EMU_B.UnitDelay5[ForEach_itr_mu].
                          SignalSys.ATCPower != 0.0));

      /* Logic: '<S142>/Logical Operator40' incorporates:
       *  ForEachSliceSelector generated from: '<S21>/ElectricalSystemVehicleOut'
       *  Logic: '<S142>/Logical Operator39'
       *  Logic: '<S142>/Logical Operator41'
       *  Memory: '<S142>/Memory'
       */
      rtb_Compare_ja = (((BEML_EMU_B.UnitDelay5[ForEach_itr_mu].
                          SignalSys.ATBMode != 0.0) ||
                         BEML_EMU_DW.CoreSubsys_h[ForEach_itr_mu].
                         Memory_PreviousInput_c) && (!rtb_Compare_g42));

      /* Logic: '<S143>/Logical Operator40' incorporates:
       *  ForEachSliceSelector generated from: '<S21>/ElectricalSystemVehicleOut'
       *  Logic: '<S131>/Logical Operator'
       *  Logic: '<S131>/Logical Operator1'
       *  Logic: '<S131>/Logical Operator4'
       *  Logic: '<S143>/Logical Operator39'
       *  Logic: '<S143>/Logical Operator41'
       *  Memory: '<S143>/Memory'
       *  UnitDelay: '<S131>/Unit Delay'
       */
      rtb_Compare_kq = ((((BEML_EMU_B.UnitDelay5[ForEach_itr_mu].
                           SignalSys.ROSMode != 0.0) &&
                          (BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_mu].
                           CBTC.OnBoard.ROSIndicator != 0.0)) ||
                         BEML_EMU_DW.CoreSubsys_h[ForEach_itr_mu].
                         Memory_PreviousInput_f) &&
                        ((BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_mu].
                          CBTC.OnBoard.ROSIndicator != 0.0) ||
                         (!(BEML_EMU_DW.CoreSubsys_h[ForEach_itr_mu].
                            UnitDelay_DSTATE != 0.0))));

      /* If: '<S130>/If' incorporates:
       *  Constant: '<S130>/ATB'
       *  Constant: '<S130>/ATO'
       *  Constant: '<S130>/ATP'
       *  Constant: '<S130>/Off'
       *  Constant: '<S130>/RMF'
       *  Constant: '<S130>/RMR'
       *  Constant: '<S130>/ROS'
       *  Constant: '<S130>/UTO'
       *  DataTypeConversion: '<S131>/Data Type Conversion'
       *  DataTypeConversion: '<S131>/Data Type Conversion1'
       *  DataTypeConversion: '<S131>/Data Type Conversion2'
       *  DataTypeConversion: '<S131>/Data Type Conversion5'
       *  ForEachSliceSelector generated from: '<S21>/ElectricalSystemVehicleOut'
       */
      if (rtb_AND_p) {
        /* Outputs for IfAction SubSystem: '<S130>/If Action Subsystem' incorporates:
         *  ActionPort: '<S132>/Action Port'
         */
        BEML_EMU_IfActionSubsystem(BEML_EMU_P.CoreSubsys_h.UTO_Value, &rtb_Merge);

        /* End of Outputs for SubSystem: '<S130>/If Action Subsystem' */
      } else if (rtb_CollisionDetected) {
        /* Outputs for IfAction SubSystem: '<S130>/If Action Subsystem1' incorporates:
         *  ActionPort: '<S133>/Action Port'
         */
        BEML_EMU_IfActionSubsystem(BEML_EMU_P.CoreSubsys_h.ATO_Value, &rtb_Merge);

        /* End of Outputs for SubSystem: '<S130>/If Action Subsystem1' */
      } else if (rtb_Compare_ja) {
        /* Outputs for IfAction SubSystem: '<S130>/If Action Subsystem2' incorporates:
         *  ActionPort: '<S134>/Action Port'
         */
        BEML_EMU_IfActionSubsystem(BEML_EMU_P.CoreSubsys_h.ATB_Value, &rtb_Merge);

        /* End of Outputs for SubSystem: '<S130>/If Action Subsystem2' */
      } else if (BEML_EMU_B.UnitDelay5[ForEach_itr_mu].SignalSys.RMFMode == 1.0)
      {
        /* Outputs for IfAction SubSystem: '<S130>/If Action Subsystem4' incorporates:
         *  ActionPort: '<S136>/Action Port'
         */
        BEML_EMU_IfActionSubsystem(BEML_EMU_P.CoreSubsys_h.RMF_Value, &rtb_Merge);

        /* End of Outputs for SubSystem: '<S130>/If Action Subsystem4' */
      } else if (BEML_EMU_B.UnitDelay5[ForEach_itr_mu].SignalSys.RMRMode == 1.0)
      {
        /* Outputs for IfAction SubSystem: '<S130>/If Action Subsystem5' incorporates:
         *  ActionPort: '<S137>/Action Port'
         */
        BEML_EMU_IfActionSubsystem(BEML_EMU_P.CoreSubsys_h.RMR_Value, &rtb_Merge);

        /* End of Outputs for SubSystem: '<S130>/If Action Subsystem5' */
      } else if (rtb_Compare_kq) {
        /* Outputs for IfAction SubSystem: '<S130>/If Action Subsystem6' incorporates:
         *  ActionPort: '<S138>/Action Port'
         */
        BEML_EMU_IfActionSubsystem(BEML_EMU_P.CoreSubsys_h.ROS_Value, &rtb_Merge);

        /* End of Outputs for SubSystem: '<S130>/If Action Subsystem6' */
      } else if (BEML_EMU_B.UnitDelay5[ForEach_itr_mu].SignalSys.ATPMode == 1.0)
      {
        /* Outputs for IfAction SubSystem: '<S130>/If Action Subsystem7' incorporates:
         *  ActionPort: '<S139>/Action Port'
         */
        BEML_EMU_IfActionSubsystem(BEML_EMU_P.CoreSubsys_h.ATP_Value, &rtb_Merge);

        /* End of Outputs for SubSystem: '<S130>/If Action Subsystem7' */
      } else {
        /* Outputs for IfAction SubSystem: '<S130>/If Action Subsystem3' incorporates:
         *  ActionPort: '<S135>/Action Port'
         */
        BEML_EMU_IfActionSubsystem(BEML_EMU_P.CoreSubsys_h.Off_Value, &rtb_Merge);

        /* End of Outputs for SubSystem: '<S130>/If Action Subsystem3' */
      }

      /* End of If: '<S130>/If' */

      /* Update for Memory: '<S140>/Memory' */
      BEML_EMU_DW.CoreSubsys_h[ForEach_itr_mu].Memory_PreviousInput = rtb_AND_p;

      /* Update for UnitDelay: '<S131>/Unit Delay2' incorporates:
       *  ForEachSliceSelector generated from: '<S21>/VehicleInput'
       */
      BEML_EMU_DW.CoreSubsys_h[ForEach_itr_mu].UnitDelay2_DSTATE =
        BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_mu].
        CBTC.OnBoard.UTOModeActive;

      /* Update for Memory: '<S141>/Memory' */
      BEML_EMU_DW.CoreSubsys_h[ForEach_itr_mu].Memory_PreviousInput_m =
        rtb_CollisionDetected;

      /* Update for UnitDelay: '<S131>/Unit Delay1' incorporates:
       *  ForEachSliceSelector generated from: '<S21>/VehicleInput'
       */
      BEML_EMU_DW.CoreSubsys_h[ForEach_itr_mu].UnitDelay1_DSTATE =
        BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_mu].CBTC.OnBoard.ATOState;

      /* Update for Memory: '<S142>/Memory' */
      BEML_EMU_DW.CoreSubsys_h[ForEach_itr_mu].Memory_PreviousInput_c =
        rtb_Compare_ja;

      /* Update for Memory: '<S143>/Memory' */
      BEML_EMU_DW.CoreSubsys_h[ForEach_itr_mu].Memory_PreviousInput_f =
        rtb_Compare_kq;

      /* Update for UnitDelay: '<S131>/Unit Delay' incorporates:
       *  ForEachSliceSelector generated from: '<S21>/VehicleInput'
       */
      BEML_EMU_DW.CoreSubsys_h[ForEach_itr_mu].UnitDelay_DSTATE =
        BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_mu].
        CBTC.OnBoard.ROSIndicator;

      /* ForEachSliceAssignment generated from: '<S21>/CBTCOutput' incorporates:
       *  BusAssignment: '<S25>/Bus Assignment'
       *  BusAssignment: '<S26>/Bus Assignment'
       *  BusAssignment: '<S28>/Bus Assignment'
       *  Constant: '<S25>/Temp_Fix'
       *  Constant: '<S26>/ToOnBoardUnit'
       *  DataTypeConversion: '<S24>/Data Type Conversion1'
       *  DataTypeConversion: '<S25>/Data Type Conversion1'
       *  DataTypeConversion: '<S25>/Data Type Conversion2'
       *  DataTypeConversion: '<S25>/Data Type Conversion3'
       *  DataTypeConversion: '<S25>/Data Type Conversion4'
       *  DataTypeConversion: '<S25>/Data Type Conversion5'
       *  DataTypeConversion: '<S25>/Data Type Conversion6'
       *  DataTypeConversion: '<S26>/Data Type Conversion'
       *  DataTypeConversion: '<S26>/Data Type Conversion1'
       *  DataTypeConversion: '<S27>/Data Type Conversion'
       *  DataTypeConversion: '<S27>/Data Type Conversion1'
       *  DataTypeConversion: '<S27>/Data Type Conversion2'
       *  DataTypeConversion: '<S27>/Data Type Conversion3'
       *  DataTypeConversion: '<S27>/Data Type Conversion4'
       *  DataTypeConversion: '<S27>/Data Type Conversion5'
       *  DataTypeConversion: '<S27>/Data Type Conversion6'
       *  DataTypeConversion: '<S27>/Data Type Conversion7'
       *  DataTypeConversion: '<S28>/Data Type Conversion'
       *  DataTypeConversion: '<S28>/Data Type Conversion1'
       *  Logic: '<S24>/Logical Operator'
       *  Logic: '<S25>/AND'
       *  Logic: '<S25>/Logical Operator'
       *  Logic: '<S25>/NOT'
       *  Logic: '<S26>/NOT1'
       *  Logic: '<S27>/Logical Operator'
       *  Logic: '<S27>/Logical Operator1'
       *  Logic: '<S27>/Logical Operator2'
       *  Logic: '<S27>/Logical Operator3'
       *  Outport: '<Root>/CBTCVehicleOut'
       */
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].OnBoard.PowerSupply =
        BEML_EMU_B.UnitDelay5[ForEach_itr_mu].SignalSys.ATCPower;
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].OnBoard.CabinActivation =
        BEML_EMU_B.UnitDelay5[ForEach_itr_mu].SignalSys.CabActive;
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].OnBoard.DriverModeSelection =
        rtb_Merge;
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].OnBoard.ModeSelectorPosition =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_mu]
        .ModeSelector;
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].OnBoard.ATCBypassState =
        rtb_Compare_g42;
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].OnBoard.TBCPosition =
        !(BEML_EMU_B.UnitDelay5[ForEach_itr_mu].SignalSys.TBCInFSB != 0.0);
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].OnBoard.ATOStartButton =
        BEML_EMU_B.UnitDelay5[ForEach_itr_mu].SignalSys.ATOStartPB;
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].OnBoard.UTOStartButton =
        BEML_EMU_B.UnitDelay5[ForEach_itr_mu].SignalSys.UTOStartPB;
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].OnBoard.ATCSBResetButton =
        BEML_EMU_B.UnitDelay5[ForEach_itr_mu].SignalSys.ATCSafetyBrakeResetPB;
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].OnBoard.NoEmergencyBrake =
        BEML_EMU_B.UnitDelay5[ForEach_itr_mu].SignalSys.NotSafetyBrake;
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].OnBoard.NoDoorEnableBypass =
        BEML_EMU_B.UnitDelay5[ForEach_itr_mu].SignalSys.DoorEnableBypass;
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].OnBoard.TrainDoorClosedAndLocked
        = BEML_EMU_B.UnitDelay5[ForEach_itr_mu].
        SignalSys.TrainDoorClosedAndLocked;
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].OnBoard.EmergencyDoorNotOpen =
        BEML_EMU_B.UnitDelay5[ForEach_itr_mu].SignalSys.EmergencyDoorNotOpen;
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].OnBoard.WakeUpStatus =
        BEML_EMU_B.UnitDelay5[ForEach_itr_mu].SignalSys.WakeUpStatus;
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].OnBoard.PassengerEmergencyAlarm =
        BEML_EMU_B.UnitDelay5[ForEach_itr_mu].SignalSys.PassengerEmergencyAlarm;
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].OnBoard.FireSmokeInd =
        BEML_EMU_B.UnitDelay5[ForEach_itr_mu].SignalSys.FireSmokeInd;
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].OnBoard.MechanicalCoupling =
        BEML_EMU_B.UnitDelay5[ForEach_itr_mu].SignalSys.MechanicalCoupling;
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].OnBoard.ROSPB =
        BEML_EMU_P.CoreSubsys_h.ToOnBoardUnit_Value.ROSPB;
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].OnBoard.UTBPB =
        BEML_EMU_P.CoreSubsys_h.ToOnBoardUnit_Value.UTBPB;
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].OnBoard.TrainIntegrity =
        BEML_EMU_P.CoreSubsys_h.ToOnBoardUnit_Value.TrainIntegrity;
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].OnBoard.TCMSSpeedLimit =
        BEML_EMU_B.UnitDelay6[ForEach_itr_mu].
        Control.TractionSBraking.TCMSSpeedLimit;
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].OnBoard.TCMSSpeedLimitCause =
        BEML_EMU_B.UnitDelay6[ForEach_itr_mu].
        Control.TractionSBraking.TCMSSpeedLimitCause;
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].Platform.LeftSideDoorOpenRequest
        = ((BEML_EMU_B.UnitDelay5[ForEach_itr_mu].SignalSys.LeftDoorOpenPB !=
            0.0) || (BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_mu].
                     CBTC.Platform.OpenLeftTrainDoors != 0.0));
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].
        Platform.RightSideDoorOpenRequest =
        ((BEML_EMU_B.UnitDelay5[ForEach_itr_mu].SignalSys.RightDoorOpenPB != 0.0)
         || (BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_mu].
             CBTC.Platform.OpenRightTrainDoors != 0.0));
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].
        Platform.LeftSideDoorCloseRequest =
        ((BEML_EMU_B.UnitDelay5[ForEach_itr_mu].SignalSys.LeftDoorClosePB != 0.0)
         || (BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_mu].
             CBTC.Platform.CloseLeftTrainDoors != 0.0));
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].
        Platform.RightSideDoorCloseRequest =
        ((BEML_EMU_B.UnitDelay5[ForEach_itr_mu].SignalSys.RightDoorClosePB !=
          0.0) || (BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_mu].
                   CBTC.Platform.CloseRightTrainDoors != 0.0));
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].Platform.Door1Inhibited =
        BEML_EMU_B.UnitDelay6[ForEach_itr_mu].
        Control.DoorSystem.DoorRight1Isolation;
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].Platform.Door2Inhibited =
        BEML_EMU_B.UnitDelay6[ForEach_itr_mu].
        Control.DoorSystem.DoorLeft1Isolation;
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].Platform.Door3Inhibited =
        BEML_EMU_B.UnitDelay6[ForEach_itr_mu].
        Control.DoorSystem.DoorRight2Isolation;
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].Platform.Door4Inhibited =
        BEML_EMU_B.UnitDelay6[ForEach_itr_mu].
        Control.DoorSystem.DoorLeft2Isolation;
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].Platform.LeftSideDoorEnable =
        BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_mu].
        CBTC.Platform.LeftSideDoorEnable;
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].Platform.RightSideDoorEnable =
        BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_mu].
        CBTC.Platform.RightSideDoorEnable;
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].Electrical.ATOTraction =
        BEML_EMU_B.CoreSubsys_h[ForEach_itr_mu].ATOTraction;
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].Electrical.ATONotBrake =
        !BEML_EMU_B.CoreSubsys_h[ForEach_itr_mu].ATOBrake;
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].Electrical.ATOTBDemand =
        BEML_EMU_B.CoreSubsys_h[ForEach_itr_mu].ATOTBDemand;
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].Electrical.NoEmergencyBrakeOrder
        = ((BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_mu].
            CBTC.OnBoard.NoEmergencyBrakeOrder != 0.0) &&
           (!(BEML_EMU_B.UnitDelay6[ForEach_itr_mu].
              Display.DoorSystem.UnexpectedDoorOpeningDetectedByCC != 0.0)));
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].Electrical.ROSIndication =
        (BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_mu].
         CBTC.OnBoard.ROSIndicator != 0.0);
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].Electrical.ATOStartIndication =
        (BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_mu].
         CBTC.OnBoard.ATOStartIndicator != 0.0);
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].Electrical.ATCSBResetIndication =
        (BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_mu].
         CBTC.OnBoard.ATCSBResetIndicator != 0.0);
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].Electrical.LeftHoldDoorClose =
        (BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_mu].
         CBTC.OnBoard.LeftHoldDoorClose != 0.0);
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].Electrical.RightHoldDoorClose =
        (BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_mu].
         CBTC.OnBoard.RightHoldDoorClose != 0.0);
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].Electrical.ATCZeroSpeed =
        (BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_mu].CBTC.OnBoard.ZeroSpeed
         != 0.0);
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].Electrical.WakeUpCommand =
        BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_mu].
        CBTC.OnBoard.WakeUpCommand;
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].Electrical.UTOPBIndicator =
        BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_mu].
        CBTC.OnBoard.UTOPBIndicator;
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].Electrical.UTOModeActive =
        BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_mu].
        CBTC.OnBoard.UTOModeActive;
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].Electrical.ATCCabActivation =
        BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_mu].
        CBTC.OnBoard.ATCCabActivation;
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].Electrical.NotImmobilise =
        BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_mu].
        CBTC.OnBoard.ImmobilisationState;
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].Electrical.TractionForward =
        BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_mu].
        CBTC.OnBoard.TractionForward;
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].
        Electrical.EmergencyDetrainmentDoorLocked =
        BEML_EMU_P.CoreSubsys_h.Temp_Fix_Value;
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].TCMS.ATOTraction =
        BEML_EMU_B.CoreSubsys_h[ForEach_itr_mu].ATOTraction;
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].TCMS.ATOBrake =
        BEML_EMU_B.CoreSubsys_h[ForEach_itr_mu].ATOBrake;
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].TCMS.ATOTBDemand =
        BEML_EMU_B.CoreSubsys_h[ForEach_itr_mu].ATOTBDemand;
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].TCMS.NoServiceBrake =
        (BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_mu].
         CBTC.OnBoard.NoServiceBrakeOrder != 0.0);
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].TCMS.NotImmobilise =
        (BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_mu].
         CBTC.OnBoard.ImmobilisationState != 0.0);
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].TCMS.ATOState =
        BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_mu].CBTC.OnBoard.ATOState;
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].TCMS.RollbackDetected =
        BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_mu].
        CBTC.OnBoard.RollbackDetected;
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].TCMS.LeftDoorCloseIndicator =
        BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_mu].
        CBTC.Platform.LeftDoorCloseIndicator;
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].TCMS.RightDoorCloseIndicator =
        BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_mu].
        CBTC.Platform.RightDoorCloseIndicator;
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].TCMS.LeftDoorOpenATCReq =
        BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_mu].
        CBTC.Platform.OpenLeftTrainDoors;
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].TCMS.RightDoorOpenATCReq =
        BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_mu].
        CBTC.Platform.OpenRightTrainDoors;
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].TCMS.LeftDoorCloseATCReq =
        BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_mu].
        CBTC.Platform.CloseLeftTrainDoors;
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].TCMS.RightDoorCloseATCReq =
        BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_mu].
        CBTC.Platform.CloseRightTrainDoors;
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].DMI.PowerOn =
        BEML_EMU_B.UnitDelay5[ForEach_itr_mu].SignalSys.DMIPower;
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].DMI.CabActive =
        ((BEML_EMU_B.UnitDelay5[ForEach_itr_mu].SignalSys.CabActive != 0.0) ||
         (BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_mu].
          CBTC.OnBoard.ATCCabActivation != 0.0));
      BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_mu].DMI.NeutralSection =
        BEML_EMU_B.UnitDelay6[ForEach_itr_mu].
        Control.ElectricalSystem.TrainInNeutralSection;
    }

    /* End of Outputs for SubSystem: '<S20>/CBTCModel' */
    /* End of Outputs for SubSystem: '<S6>/CBTCInterfacingUnit' */
  }

  if ((&BEML_EMU_M)->Timing.TaskCounters.TID[2] == 0) {
    /* Outputs for Atomic SubSystem: '<S10>/ElectricalInputAdapter' */
    /* Step: '<S316>/Step' */
    if (((((&BEML_EMU_M)->Timing.clockTick2+(&BEML_EMU_M)->Timing.clockTickH2*
           4294967296.0)) * 0.05) < BEML_EMU_P.Step_Time_g) {
      rtb_Switch4_f = BEML_EMU_P.Step_Y0_g;
    } else {
      rtb_Switch4_f = BEML_EMU_P.Step_YFinal_i;
    }

    /* End of Step: '<S316>/Step' */

    /* Outputs for Enabled SubSystem: '<S316>/ExtractConfig' incorporates:
     *  EnablePort: '<S317>/Enable'
     */
    if (rtb_Switch4_f > 0.0) {
      /* Outputs for Iterator SubSystem: '<S317>/ExtractConfig' incorporates:
       *  ForEach: '<S319>/For Each'
       */
      for (ForEach_itr_pi = 0; ForEach_itr_pi < 8; ForEach_itr_pi++) {
        /* ForEachSliceAssignment generated from: '<S319>/ElectricalVehicleConfig' incorporates:
         *  Outport: '<Root>/ProcessedVehConf'
         */
        BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleConfig_at_inport_0[ForEach_itr_pi]
          .HasPanto = BEML_EMU_Y.ProcessedVehConf[ForEach_itr_pi].
          Electrical.HasPanto;
        BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleConfig_at_inport_0[ForEach_itr_pi]
          .HasCab = BEML_EMU_Y.ProcessedVehConf[ForEach_itr_pi].
          Electrical.HasCab;
        BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleConfig_at_inport_0[ForEach_itr_pi]
          .IsNonCab = BEML_EMU_Y.ProcessedVehConf[ForEach_itr_pi].
          Electrical.IsNonCab;
        BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleConfig_at_inport_0[ForEach_itr_pi]
          .HasMotor = BEML_EMU_Y.ProcessedVehConf[ForEach_itr_pi].
          Electrical.HasMotor;
        BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleConfig_at_inport_0[ForEach_itr_pi]
          .HasMainCompressor = BEML_EMU_Y.ProcessedVehConf[ForEach_itr_pi].
          Electrical.HasMainCompressor;
        BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleConfig_at_inport_0[ForEach_itr_pi]
          .HasPantoReservoir = BEML_EMU_Y.ProcessedVehConf[ForEach_itr_pi].
          Electrical.HasPantoReservoir;
        BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleConfig_at_inport_0[ForEach_itr_pi]
          .IsT1 = BEML_EMU_Y.ProcessedVehConf[ForEach_itr_pi].Electrical.IsT1;
        BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleConfig_at_inport_0[ForEach_itr_pi]
          .IsT2 = BEML_EMU_Y.ProcessedVehConf[ForEach_itr_pi].Electrical.IsT2;
        BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleConfig_at_inport_0[ForEach_itr_pi]
          .IsT3 = BEML_EMU_Y.ProcessedVehConf[ForEach_itr_pi].Electrical.IsT3;
        BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleConfig_at_inport_0[ForEach_itr_pi]
          .IsM1 = BEML_EMU_Y.ProcessedVehConf[ForEach_itr_pi].Electrical.IsM1;
        BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleConfig_at_inport_0[ForEach_itr_pi]
          .IsM2 = BEML_EMU_Y.ProcessedVehConf[ForEach_itr_pi].Electrical.IsM2;
        BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleConfig_at_inport_0[ForEach_itr_pi]
          .IsM3 = BEML_EMU_Y.ProcessedVehConf[ForEach_itr_pi].Electrical.IsM3;
        BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleConfig_at_inport_0[ForEach_itr_pi]
          .IsDM1 = BEML_EMU_Y.ProcessedVehConf[ForEach_itr_pi].Electrical.IsDM1;
        BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleConfig_at_inport_0[ForEach_itr_pi]
          .IsDM2 = BEML_EMU_Y.ProcessedVehConf[ForEach_itr_pi].Electrical.IsDM2;
        BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleConfig_at_inport_0[ForEach_itr_pi]
          .IsDM3 = BEML_EMU_Y.ProcessedVehConf[ForEach_itr_pi].Electrical.IsDM3;
        BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleConfig_at_inport_0[ForEach_itr_pi]
          .UnitConnection = BEML_EMU_Y.ProcessedVehConf[ForEach_itr_pi].
          Location.UnitConfig.UnitConnection;
        BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleConfig_at_inport_0[ForEach_itr_pi]
          .UnitID = BEML_EMU_Y.ProcessedVehConf[ForEach_itr_pi].
          Location.UnitConfig.UnitID;

        /* ForEachSliceAssignment generated from: '<S319>/CommonVehicleConfig' incorporates:
         *  Outport: '<Root>/ProcessedVehConf'
         */
        BEML_EMU_B.ImpAsg_InsertedFor_CommonVehicleConfig_at_inport_0_e[ForEach_itr_pi]
          = BEML_EMU_Y.ProcessedVehConf[ForEach_itr_pi].Common;
      }

      /* End of Outputs for SubSystem: '<S317>/ExtractConfig' */
    }

    /* End of Outputs for SubSystem: '<S316>/ExtractConfig' */

    /* Outputs for Iterator SubSystem: '<S316>/VehicleInputAdapter' incorporates:
     *  ForEach: '<S318>/For Each'
     */
    for (ForEach_itr_hg = 0; ForEach_itr_hg < 8; ForEach_itr_hg++) {
      /* Logic: '<S323>/NOT1' incorporates:
       *  ForEachSliceSelector generated from: '<S318>/VehicleFaults'
       */
      rtb_AND_p =
        !(BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_hg]
          .ElectricalFaults.DoorClosePBOP1NotWorking != 0.0);

      /* ForEachSliceAssignment generated from: '<S318>/ElectricalVehicleInput' incorporates:
       *  DataTypeConversion: '<S323>/Data Type Conversion3'
       *  DataTypeConversion: '<S323>/Data Type Conversion5'
       *  Logic: '<S323>/AND2'
       *  Logic: '<S323>/AND3'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.LeftDoorClosePBOperatingPanel1 =
        ((BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
          .LeftDoorClosePBOperatingPanel1 != 0.0) && rtb_AND_p);
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.RightDoorClosePBOperatingPanel1 = (rtb_AND_p &&
        (BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
         .RightDoorClosePBOperatingPanel1 != 0.0));

      /* Logic: '<S323>/NOT2' incorporates:
       *  ForEachSliceSelector generated from: '<S318>/VehicleFaults'
       */
      rtb_AND_p =
        !(BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_hg]
          .ElectricalFaults.DoorsNotOpeningFromDOPBOP1 != 0.0);

      /* DataTypeConversion: '<S323>/Data Type Conversion8' incorporates:
       *  ForEachSliceSelector generated from: '<S318>/InputControlStates'
       *  Logic: '<S323>/AND7'
       *  Logic: '<S323>/NOT4'
       */
      DiscreteTimeIntegrator_a =
        ((BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
          .DeadmanSafetyDevice != 0.0) &&
         (!(BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_hg]
            .ElectricalFaults.EmergencyBrakeDueDeadman != 0.0)));

      /* Logic: '<S334>/Logical Operator40' incorporates:
       *  BusAssignment: '<S323>/Bus Assignment3'
       *  BusAssignment: '<S324>/Bus Assignment1'
       *  Logic: '<S334>/Logical Operator39'
       *  Logic: '<S334>/Logical Operator41'
       *  Memory: '<S334>/Memory'
       *  RelationalOperator: '<S333>/FixPt Relational Operator'
       *  UnitDelay: '<S333>/Delay Input1'
       */
      rtb_CollisionDetected = (((BEML_EMU_B.BusAssignment.Overrides.AutoPowerOn
        != 0.0) || BEML_EMU_DW.CoreSubsys_ij1[ForEach_itr_hg].
        Memory_PreviousInput) && (!(DiscreteTimeIntegrator_a >
        BEML_EMU_DW.CoreSubsys_ij1[ForEach_itr_hg].DelayInput1_DSTATE)));

      /* Outputs for Iterator SubSystem: '<S320>/For Each Subsystem' incorporates:
       *  ForEach: '<S330>/For Each'
       */
      for (ForEach_itr_ag = 0; ForEach_itr_ag < 2; ForEach_itr_ag++) {
        /* ForEachSliceAssignment generated from: '<S330>/Out1' incorporates:
         *  Outport: '<Root>/CouplingOutput'
         */
        rtb_ImpAsg_InsertedFor_Out1_at_inport_0_k[ForEach_itr_ag] =
          BEML_EMU_Y.CouplingOutput[ForEach_itr_hg]
          .Couplers.Coupler[ForEach_itr_ag].
          PhysicalSignals.MechanicalCouplerState;
      }

      /* End of Outputs for SubSystem: '<S320>/For Each Subsystem' */

      /* Outputs for Iterator SubSystem: '<S326>/For Each Subsystem' incorporates:
       *  ForEach: '<S335>/For Each'
       */
      for (ForEach_itr_ia = 0; ForEach_itr_ia < 2; ForEach_itr_ia++) {
        /* ForEachSliceAssignment generated from: '<S335>/ServiceBrakeApplySwitches' */
        rtb_ImpAsg_InsertedFor_ServiceBrakeApplySwitches_at_inport_0[ForEach_itr_ia]
          = BEML_EMU_B.UnitDelay1_k[ForEach_itr_hg]
          .PressureSwitches.Bogie[ForEach_itr_ia].BrakeCylinderPressureSwitch;

        /* ForEachSliceAssignment generated from: '<S335>/ParkBrakeApplySwitches' */
        rtb_ImpAsg_InsertedFor_ParkBrakeApplySwitches_at_inport_0[ForEach_itr_ia]
          = BEML_EMU_B.UnitDelay1_k[ForEach_itr_hg]
          .PressureSwitches.Bogie[ForEach_itr_ia].ParkBrakePressureSwitch;
      }

      /* End of Outputs for SubSystem: '<S326>/For Each Subsystem' */

      /* Outputs for Iterator SubSystem: '<S329>/Subsystem' incorporates:
       *  ForEach: '<S336>/For Each'
       */
      for (ForEach_itr_de = 0; ForEach_itr_de < 2; ForEach_itr_de++) {
        /* ForEachSliceAssignment generated from: '<S336>/<Reverse>' */
        rtb_ImpAsg_InsertedFor_Reverse_at_inport_0[ForEach_itr_de] =
          BEML_EMU_B.UnitDelay4[ForEach_itr_hg].
          TractionControl.ElectricalSystem.Bogie[ForEach_itr_de].Reverse;

        /* ForEachSliceAssignment generated from: '<S336>/<Forward>' */
        rtb_ImpAsg_InsertedFor_Forward_at_inport_0[ForEach_itr_de] =
          BEML_EMU_B.UnitDelay4[ForEach_itr_hg].
          TractionControl.ElectricalSystem.Bogie[ForEach_itr_de].Forward;
      }

      /* End of Outputs for SubSystem: '<S329>/Subsystem' */

      /* Update for Memory: '<S334>/Memory' */
      BEML_EMU_DW.CoreSubsys_ij1[ForEach_itr_hg].Memory_PreviousInput =
        rtb_CollisionDetected;

      /* Update for UnitDelay: '<S333>/Delay Input1' incorporates:
       *  BusAssignment: '<S323>/Bus Assignment3'
       */
      BEML_EMU_DW.CoreSubsys_ij1[ForEach_itr_hg].DelayInput1_DSTATE =
        DiscreteTimeIntegrator_a;

      /* ForEachSliceAssignment generated from: '<S318>/Overrides' incorporates:
       *  BusAssignment: '<S324>/Bus Assignment1'
       */
      rtb_ImpAsg_InsertedFor_Overrides_at_inport_0_o[ForEach_itr_hg].AutoPowerOn
        = BEML_EMU_B.BusAssignment.Overrides.AutoPowerOn;

      /* ForEachSliceAssignment generated from: '<S318>/ElectricalVehicleInput' incorporates:
       *  BusAssignment: '<S323>/Bus Assignment3'
       *  BusAssignment: '<S324>/Bus Assignment1'
       *  DataTypeConversion: '<S320>/Data Type Conversion1'
       *  DataTypeConversion: '<S320>/Data Type Conversion2'
       *  DataTypeConversion: '<S320>/Data Type Conversion3'
       *  DataTypeConversion: '<S320>/Data Type Conversion4'
       *  DataTypeConversion: '<S323>/Data Type Conversion'
       *  DataTypeConversion: '<S323>/Data Type Conversion1'
       *  DataTypeConversion: '<S323>/Data Type Conversion2'
       *  DataTypeConversion: '<S323>/Data Type Conversion4'
       *  DataTypeConversion: '<S323>/Data Type Conversion6'
       *  DataTypeConversion: '<S323>/Data Type Conversion7'
       *  DataTypeConversion: '<S326>/Data Type Conversion2'
       *  DataTypeConversion: '<S326>/Data Type Conversion3'
       *  DataTypeConversion: '<S332>/Data Type Conversion1'
       *  DataTypeConversion: '<S332>/Data Type Conversion2'
       *  DataTypeConversion: '<S332>/Data Type Conversion3'
       *  Logic: '<S323>/AND'
       *  Logic: '<S323>/AND1'
       *  Logic: '<S323>/AND4'
       *  Logic: '<S323>/AND5'
       *  Logic: '<S323>/AND6'
       *  Logic: '<S323>/Logical Operator1'
       *  Logic: '<S323>/Logical Operator2'
       *  Logic: '<S323>/Logical Operator3'
       *  Logic: '<S323>/NOT'
       *  Logic: '<S323>/NOT3'
       *  Logic: '<S332>/AND'
       *  Logic: '<S332>/AND1'
       *  Logic: '<S332>/AND2'
       *  Logic: '<S332>/AND3'
       *  Logic: '<S332>/AND4'
       *  Logic: '<S332>/AND5'
       *  Outport: '<Root>/CBTCVehicleOut'
       *  Outport: '<Root>/CouplingOutput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.MasterKeySwitch =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .ControlKey;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.PowerONPB =
        (((BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
           .ControlKey != 0.0) &&
          (BEML_EMU_B.BusAssignment.Overrides.AutoPowerOn != 0.0)) ||
         (BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
          .PantoUpPB != 0.0));
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.PantographDownPB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .PantoDownPB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.PantoSelectorSw =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .PantoSelector;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.TractionBrakeController =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .MasterControllerHandle;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.VCBClosePB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .VCBClosePB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.VCBOpenPB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .VCBOpenPB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.WiperControlSwitch =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .WiperControlSwitch;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.HeadlightSwitch =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .HeadLightSwitch;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.IdentificationLightsSwitch = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.EmergencyBrakePB =
        ((BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_hg]
          .ElectricalFaults.EmergencyBrakeDueToEBPB != 0.0) ||
         ((!(BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_hg]
             .ElectricalFaults.EmergencyBrakePBOP1NotWorking != 0.0)) &&
          (BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
           .EmergencyBrakePB != 0.0)));
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.ParkBrakeApplyPB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .ParkingBrakeOnSwitch;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.ParkBrakeReleasePB =
        (((BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
           .ControlKey != 0.0) &&
          (BEML_EMU_B.BusAssignment.Overrides.AutoPowerOn != 0.0)) ||
         (BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
          .ParkingBrakeOffSwitch != 0.0));
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.DoorProvenLoopCutoutPB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .DoorProvenLoopCutoutPB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.DoorProvenLoopCutoutSw =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .DoorProvenLoopOutputSwitch;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.ZeroSpeedBypassSwitch = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.ObstacleDetectionDisableSwitch = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.LeftDoorReleasePB =
        BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_hg].Platform.LeftSideDoorEnable;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.RightDoorReleasePB =
        BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_hg].Platform.RightSideDoorEnable;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.ROSPB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .ROSPB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.UTOPB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .UTOPB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.ATOStartPB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .ATOStartPB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.EBReleasePB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .EmergencyBrakeResetPB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.SafetyCutoutSS =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .SafetyCutoutSS;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.LampTestPB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .LampTestPB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.HornPB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .HornPB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.CabConsolePB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .CabConsoleLightPB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.LeftDoorOpenPBOperatingPanel1 =
        ((BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
          .LeftDoorOpenPBOperatingPanel1 != 0.0) && rtb_AND_p);
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.RightDoorOpenPBOperatingPanel1 = (rtb_AND_p &&
        (BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
         .RightDoorOpenPBOperatingPanel1 != 0.0));
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.CabMainLightPB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .CabMainLightPB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.DoorCloseAnnouncementPB =
        ((!(BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_hg]
            .ElectricalFaults.DoorCloseAnnouncementPBNotWorking != 0.0)) &&
         (BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
          .DoorCloseAnnouncementPB != 0.0));
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.UncouplePB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .UncouplePB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.FlasherLightPB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .FlasherLightPB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.FloodLightPB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .FloodLightPB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.BatteryResetPB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .BatteryResetPB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.RightDoorOpenPBOperatingPanel5 =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .RightDoorOpenPBOperatingPanel5;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.RightDoorClosePBOperatingPanel5 =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .RightDoorClosePBOperatingPanel5;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.WFLTestPB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .WFLTestPB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.LeftDoorOpenPBOperatingPanel2 =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .LeftDoorOpenPBOperatingPanel2;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.LeftDoorClosePBOperatingPanel2 =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .LeftDoorClosePBOperatingPanel2;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.CallOnLightPB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .CallOnLightPB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.LIMPHomePB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .LIMPHomePB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.PowerOFFPB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .PowerOffPB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.DeadmanSafetyDevice =
        (((BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
           .ControlKey != 0.0) && rtb_CollisionDetected) ||
         (DiscreteTimeIntegrator_a != 0.0));
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.DeadmanBypassSwitch =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .DeadmanBypassSwitch;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.BrakeLoopCutoutSS =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .BrakeLoopCutoutSS;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.EmergencyBrakePBBypass =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .EmergencyBrakePBBypassSS;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.ADDCOS =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .ADDCOS;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.ORDCOS =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .ORDCOS;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.HoldDoorCloseBS =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .HoldDoorCloseBypassSS;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.ModeSelector =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .ModeSelector;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.EmerDoorLimitSwitch =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .RampCover;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.PECUPushButton =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .PECUPushButton;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.CMCCB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .CMCCB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.LeftDoorOpenPB1OperatingPanel2 =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .LeftDoorOpenPB1OperatingPanel2;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.RightDoorOpenPB1OperatingPanel5 =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .RightDoorOpenPB1OperatingPanel5;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.ParkBrakeIsolationCock =
        ((BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
          .ParkBrakeIsolationCockBogie1 != 0.0) &&
         (BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
          .ParkBrakeIsolationCockBogie2 != 0.0));
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.RIO1CB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .RIO1CB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.RIO2CB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .RIO2CB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.TDICB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .TDICB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.DIOCB2 =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .DIOCB2;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.DIOCB1 =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .DIOCB1;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.CSCCB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .CSCCB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.CSBCB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .CSBCB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.CSACB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .CSACB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.CECB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .CECB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.UCCB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .VCCBOrUCCB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.BLCB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .BLCB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.CRSBCB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .CRSBCB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.DMICB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .DMICB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.NVICB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .NVICB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.VIO1CB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .VIO1CB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.VIO2CB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .VIO2CB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.APSCB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .APSCB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.DLCB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .DLCB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.DRCB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .DRCB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.DPLCB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .DPLCB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.HLCB =
        ((BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
          .HLLCB != 0.0) ||
         (BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
          .HLRCB != 0.0));
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.TLCB =
        ((BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
          .TLLCB != 0.0) ||
         (BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
          .TLRCB != 0.0));
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.CELCB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .CELCB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.ILCB1 =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .ILCB1;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.ILCB2 =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .ILCB2;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.PANCB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .PANCB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.TBCCB1 =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .TBCCB1;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.TBCCB2 =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .TBCCB2;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.POCB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .POCB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.TVDUCB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .TVDUCB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.ODDCB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .ODDCB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.WFLCB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .WFLCB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.WWCB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .WWCB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.VCBCCB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .VCBCCB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.VCBCB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .VCBCB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.PADCB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .PADCB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.SAC1CCB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .SAC1CCB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.SAC2CCB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .SAC2CCB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.AC1CB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .AC1CB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.AC2CB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .AC2CB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.RCCB = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.SFB = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.EIVIB = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.MRIsolationCock =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .MRIsolationCock;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.EBLR1CB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .EBLR1CB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.EBLR2CB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .EBLR2CB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.HCB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .HCB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.EmergencyStopPB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .EmergencyStopPB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.OCCB1 =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .OCCB1;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.ELCB1 =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .ELCB1;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.ELCB2 =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .ELCB2;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.FDSCB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .FDSCB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.SSICB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .SSICB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.BCBCB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .BCBCB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.EDCB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .EDCB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.BCGCB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .BCGCB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.BECUCB1 =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .BECUCB1;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.BECUCB2 =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .BECUCB2;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.BECUCB3 =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .BECUCB3;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.LeftDoor1DCUCB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .LeftDoor1DCUCB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.LeftDoor2DCUCB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .LeftDoor2DCUCB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.LeftDoor3DCUCB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .LeftDoor3DCUCB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.LeftDoor4DCUCB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .LeftDoor4DCUCB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.RightDoor1DCUCB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .RightDoor1DCUCB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.RightDoor2DCUCB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .RightDoor2DCUCB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.RightDoor3DCUCB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .RightDoor3DCUCB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.RightDoor4DCUCB =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .RightDoor4DCUCB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.WiperSelectionSwitch =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .WiperSelectionSwitch;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .InputControlStates.WiperWash =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_hg]
        .WiperPump;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .Coupling.ElectricalTrainConnection =
        (BEML_EMU_Y.CouplingOutput[ForEach_itr_hg].ElectricalTrainConnection !=
         0.0);
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .Coupling.ElectricalUnitConnection =
        (BEML_EMU_Y.CouplingOutput[ForEach_itr_hg].ElectricalUnitConnection !=
         0.0);
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .Coupling.ElectricalCoupledCabsConnection =
        (BEML_EMU_Y.CouplingOutput[ForEach_itr_hg].
         ElectricalCoupledCabsConnection != 0.0);
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .Coupling.MechanicalCouplerState[0] =
        (rtb_ImpAsg_InsertedFor_Out1_at_inport_0_k[0] != 0.0);
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .Coupling.MechanicalCouplerState[1] =
        (rtb_ImpAsg_InsertedFor_Out1_at_inport_0_k[1] != 0.0);
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .Dynamics.VehicleSpeed = BEML_EMU_B.UnitDelay_j[ForEach_itr_hg].
        Inertia.Velocity;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .Pneumatics.AuxiliaryReservoirPressureSwitch =
        (BEML_EMU_B.UnitDelay1_k[ForEach_itr_hg].
         PressureSwitches.AuxiliaryReservoirPressureSwitch != 0.0);
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .Pneumatics.MainReservoirPressureSwitch =
        (BEML_EMU_B.UnitDelay1_k[ForEach_itr_hg].
         PressureSwitches.MainReservoirPipePressureSwitch != 0.0);

      /* MinMax: '<S326>/Max1' */
      if ((rtb_ImpAsg_InsertedFor_ParkBrakeApplySwitches_at_inport_0[0] >
           rtb_ImpAsg_InsertedFor_ParkBrakeApplySwitches_at_inport_0[1]) ||
          rtIsNaN(rtb_ImpAsg_InsertedFor_ParkBrakeApplySwitches_at_inport_0[1]))
      {
        rtb_Product_cv =
          rtb_ImpAsg_InsertedFor_ParkBrakeApplySwitches_at_inport_0[0];
      } else {
        rtb_Product_cv =
          rtb_ImpAsg_InsertedFor_ParkBrakeApplySwitches_at_inport_0[1];
      }

      /* End of MinMax: '<S326>/Max1' */

      /* ForEachSliceAssignment generated from: '<S318>/ElectricalVehicleInput' incorporates:
       *  DataTypeConversion: '<S326>/Data Type Conversion'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .Pneumatics.ParkBrakeApplied = (rtb_Product_cv != 0.0);

      /* MinMax: '<S326>/Max' */
      if ((rtb_ImpAsg_InsertedFor_ServiceBrakeApplySwitches_at_inport_0[0] >
           rtb_ImpAsg_InsertedFor_ServiceBrakeApplySwitches_at_inport_0[1]) ||
          rtIsNaN(rtb_ImpAsg_InsertedFor_ServiceBrakeApplySwitches_at_inport_0[1]))
      {
        rtb_Product_cv =
          rtb_ImpAsg_InsertedFor_ServiceBrakeApplySwitches_at_inport_0[0];
      } else {
        rtb_Product_cv =
          rtb_ImpAsg_InsertedFor_ServiceBrakeApplySwitches_at_inport_0[1];
      }

      /* End of MinMax: '<S326>/Max' */

      /* ForEachSliceAssignment generated from: '<S318>/ElectricalVehicleInput' incorporates:
       *  BusAssignment: '<S318>/Bus Assignment'
       *  BusAssignment: '<S326>/Bus Assignment3'
       *  BusAssignment: '<S327>/Bus Assignment3'
       *  BusAssignment: '<S329>/Bus Assignment3'
       *  Constant: '<S326>/Constant3'
       *  Constant: '<S327>/Constant3'
       *  Constant: '<S329>/Constant3'
       *  DataTypeConversion: '<S321>/Data Type Conversion'
       *  DataTypeConversion: '<S326>/Data Type Conversion1'
       *  DataTypeConversion: '<S326>/Data Type Conversion4'
       *  DataTypeConversion: '<S326>/Data Type Conversion5'
       *  DataTypeConversion: '<S326>/Data Type Conversion6'
       *  DataTypeConversion: '<S326>/Data Type Conversion7'
       *  DataTypeConversion: '<S327>/Data Type Conversion1'
       *  DataTypeConversion: '<S327>/Data Type Conversion3'
       *  DataTypeConversion: '<S327>/Data Type Conversion5'
       *  DataTypeConversion: '<S327>/Data Type Conversion6'
       *  DataTypeConversion: '<S328>/Data Type Conversion'
       *  DataTypeConversion: '<S328>/Data Type Conversion1'
       *  Logic: '<S329>/OR'
       *  Logic: '<S329>/OR1'
       *  Outport: '<Root>/CBTCVehicleOut'
       *  Outport: '<Root>/ModelStatus'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .Pneumatics.ServiceBrakeApplied = (rtb_Product_cv != 0.0);
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .Pneumatics.EmergencyBrakeApplied =
        BEML_EMU_P.CoreSubsys_ij1.Constant3_Value_b.EmergencyBrakeApplied;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .Pneumatics.VCBPressureSwitch = (BEML_EMU_B.UnitDelay1_k[ForEach_itr_hg]
        .PressureSwitches.VCBPressureSwitch != 0.0);
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .Pneumatics.MRPSTractionCutout = (BEML_EMU_B.UnitDelay1_k[ForEach_itr_hg]
        .PressureSwitches.MRPS_TractionCutout != 0.0);
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .Pneumatics.PS3 = (BEML_EMU_B.UnitDelay1_k[ForEach_itr_hg].
                           PressureSwitches.PS3 != 0.0);
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .Pneumatics.PS2 = (BEML_EMU_B.UnitDelay1_k[ForEach_itr_hg].
                           PressureSwitches.PS2 != 0.0);
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .Doors.VehicleDoorInterlock = BEML_EMU_B.UnitDelay3_m[ForEach_itr_hg].
        VehicleElectrical.VehicleDoorInterlockOk;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .Doors.AllRightDoorsClosed = BEML_EMU_B.UnitDelay3_m[ForEach_itr_hg].
        VehicleElectrical.TrainRightDoorInterlockOk;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .Doors.AllLeftDoorsClosed = BEML_EMU_B.UnitDelay3_m[ForEach_itr_hg].
        VehicleElectrical.TrainLeftDoorInterlockOk;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .Doors.EmergencyDoorOpen = (BEML_EMU_B.UnitDelay3_m[ForEach_itr_hg].
        EmergencyDoor.EmergencyDoorOpen != 0.0);
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .Pantograph.LineVoltageDetected = rtb_UnitDelay2[ForEach_itr_hg].
        DetectedLineVoltage;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .Pantograph.PantographPosition = rtb_UnitDelay2[ForEach_itr_hg].
        PantographPosition;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .ModelStatus = BEML_EMU_Y.ModelStatus;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .SignalSys.NotImmobilise = BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_hg].
        Electrical.NotImmobilise;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .SignalSys.LeftSideDoorEnable = BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_hg]
        .Platform.LeftSideDoorEnable;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .SignalSys.RightSideDoorEnable =
        BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_hg].Platform.RightSideDoorEnable;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .SignalSys.ATCZeroSpeed = BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_hg].
        Electrical.ATCZeroSpeed;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .SignalSys.NotSafetyBrake =
        BEML_EMU_P.CoreSubsys_ij1.Constant3_Value_f.NotSafetyBrake;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .SignalSys.LeftSideDoorOpen =
        BEML_EMU_P.CoreSubsys_ij1.Constant3_Value_f.LeftSideDoorOpen;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .SignalSys.RightSideDoorOpen =
        BEML_EMU_P.CoreSubsys_ij1.Constant3_Value_f.RightSideDoorOpen;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .SignalSys.ATOTraction =
        BEML_EMU_P.CoreSubsys_ij1.Constant3_Value_f.ATOTraction;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .SignalSys.ATONotBrake =
        BEML_EMU_P.CoreSubsys_ij1.Constant3_Value_f.ATONotBrake;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .SignalSys.LeftDoorOpenIndicator =
        BEML_EMU_P.CoreSubsys_ij1.Constant3_Value_f.LeftDoorOpenIndicator;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .SignalSys.RightDoorOpenIndicator =
        BEML_EMU_P.CoreSubsys_ij1.Constant3_Value_f.RightDoorOpenIndicator;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .SignalSys.UndergroundSection =
        BEML_EMU_P.CoreSubsys_ij1.Constant3_Value_f.UndergroundSection;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .SignalSys.ATOStartIndicator = BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_hg]
        .Electrical.ATOStartIndication;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .SignalSys.SBResetIndicator = BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_hg].
        Electrical.ATCSBResetIndication;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .SignalSys.LeftDoorReleaseIndicator =
        BEML_EMU_P.CoreSubsys_ij1.Constant3_Value_f.LeftDoorReleaseIndicator;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .SignalSys.RightDoorReleaseIndicator =
        BEML_EMU_P.CoreSubsys_ij1.Constant3_Value_f.RightDoorReleaseIndicator;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .SignalSys.ATOState = BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_hg].
        TCMS.ATOState;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .SignalSys.ROSIndication = BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_hg].
        Electrical.ROSIndication;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .SignalSys.NoEmergencyBrakeOrder =
        BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_hg].
        Electrical.NoEmergencyBrakeOrder;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .SignalSys.LeftHoldDoorClose = BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_hg]
        .Electrical.LeftHoldDoorClose;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .SignalSys.RightHoldDoorClose = BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_hg]
        .Electrical.RightHoldDoorClose;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .SignalSys.EmerDetrainDoorLockRelay =
        BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_hg].
        Electrical.EmergencyDetrainmentDoorLocked;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .SignalSys.WakeUpCommand = BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_hg].
        Electrical.WakeUpCommand;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .SignalSys.UTOPBIndicator = BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_hg].
        Electrical.UTOPBIndicator;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .SignalSys.UTOModeActive = BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_hg].
        Electrical.UTOModeActive;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .SignalSys.ATCCabActivation = BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_hg].
        Electrical.ATCCabActivation;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .SignalSys.ATOTBDemand = BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_hg].
        Electrical.ATOTBDemand;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .SignalSys.TractionForward = BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_hg].
        Electrical.TractionForward;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .SignalSys.DerailmentDetected =
        BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_hg].
        Common.CollisionAndDerailment.Derailment;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .SignalSys.ObstacleHardCollision =
        BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_hg].
        Environment.ObstructionOnTrack;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .SignalSys.ObstacleSoftCollision =
        BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_hg].
        Environment.ObstructionSoftCollision;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TCMS.Overspeed = BEML_EMU_B.UnitDelay6[ForEach_itr_hg].
        Control.ElectricalSystem.Overspeed;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TCMS.EnergizeTLWR = BEML_EMU_B.UnitDelay6[ForEach_itr_hg].
        Control.ElectricalSystem.EnergizeTLWR;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TCMS.EnergizeTLRR = BEML_EMU_B.UnitDelay6[ForEach_itr_hg].
        Control.ElectricalSystem.EnergizeTLRR;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TCMS.EnergizeHLHBR = BEML_EMU_B.UnitDelay6[ForEach_itr_hg].
        Control.ElectricalSystem.EnergizeHLHBR;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TCMS.EnergizeHLLBR = BEML_EMU_B.UnitDelay6[ForEach_itr_hg].
        Control.ElectricalSystem.EnergizeHLLBR;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TCMS.EnergizeFLR = BEML_EMU_B.UnitDelay6[ForEach_itr_hg].
        Control.ElectricalSystem.EnergizeFLR;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TCMS.EnergizeFLDR = BEML_EMU_B.UnitDelay6[ForEach_itr_hg].
        Control.ElectricalSystem.EnergizeFLDR;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TCMS.EnergizeRM = BEML_EMU_B.UnitDelay6[ForEach_itr_hg].
        Control.ElectricalSystem.EnergizeRM;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TCMS.EnergizeCOLR = BEML_EMU_B.UnitDelay6[ForEach_itr_hg].
        Control.ElectricalSystem.EnergizeCOLR;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TCMS.NeutralSection = (BEML_EMU_B.UnitDelay6[ForEach_itr_hg].
        Control.ElectricalSystem.NeutralSection != 0.0);
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TCMS.RecloseAfterNeutralSection = BEML_EMU_B.UnitDelay6[ForEach_itr_hg]
        .Control.ElectricalSystem.RecloseAfterNeutralSection;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TCMS.PantoDownTripCmd = BEML_EMU_B.UnitDelay6[ForEach_itr_hg].
        Control.ElectricalSystem.PantoDownCmdTrip;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TCMS.PantoMVSet = BEML_EMU_B.UnitDelay6[ForEach_itr_hg].
        Control.ElectricalSystem.PantoMVSet;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TCMS.TCMS_TPOR = BEML_EMU_B.UnitDelay6[ForEach_itr_hg].
        Control.ElectricalSystem.TCMS_TPOR;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TCMS.TCMS_TSDR = BEML_EMU_B.UnitDelay6[ForEach_itr_hg].
        Control.ElectricalSystem.TCMS_TSDR;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TCMS.TCMS_VCBClose = BEML_EMU_B.UnitDelay6[ForEach_itr_hg].
        Control.ElectricalSystem.TCMS_VCBClose;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TCMS.TCMS_VCBOpen = BEML_EMU_B.UnitDelay6[ForEach_itr_hg].
        Control.ElectricalSystem.TCMS_VCBOpen;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TCMS.LeftDoorClosePBLight = BEML_EMU_B.UnitDelay6[ForEach_itr_hg].
        Control.ElectricalSystem.LeftDoorAuth_Closed;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TCMS.LeftDoorOpenPBLight = BEML_EMU_B.UnitDelay6[ForEach_itr_hg].
        Control.ElectricalSystem.LeftDoorAuth_Opened;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TCMS.RightDoorClosePBLight = BEML_EMU_B.UnitDelay6[ForEach_itr_hg].
        Control.ElectricalSystem.RightDoorAuth_Closed;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TCMS.RightDoorOpenPBLight = BEML_EMU_B.UnitDelay6[ForEach_itr_hg].
        Control.ElectricalSystem.RightDoorAuth_Opened;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TCMS.HoldingBrakeStatus = (BEML_EMU_B.UnitDelay6[ForEach_itr_hg].
        Display.TractionBraking.HoldingBrakeStatus != 0.0);
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TCMS.TCMS_PBR = BEML_EMU_B.UnitDelay6[ForEach_itr_hg].
        Control.ElectricalSystem.TCMS_PBR;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TCMS.TCMSIsolateBCG1 = BEML_EMU_B.UnitDelay6[ForEach_itr_hg].
        Control.ElectricalSystem.TCMSIsolateBCG1;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TCMS.TCMSIsolateBCG2 = BEML_EMU_B.UnitDelay6[ForEach_itr_hg].
        Control.ElectricalSystem.TCMSIsolateBCG2;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TCMS.ParkBrakeApplyVDUReq = BEML_EMU_B.UnitDelay6[ForEach_itr_hg].
        Control.ElectricalSystem.ParkBrakeApplyVDUReq;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TCMS.ParkBrakeBypassVDUReq = BEML_EMU_B.UnitDelay6[ForEach_itr_hg].
        Control.ElectricalSystem.ParkBrakeBypassVDUReq;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TCMS.Bogie1IsolateVDUReq = BEML_EMU_B.UnitDelay6[ForEach_itr_hg].
        Control.ElectricalSystem.Bogie1IsolateVDUReq;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TCMS.Bogie2IsolateVDUReq = BEML_EMU_B.UnitDelay6[ForEach_itr_hg].
        Control.ElectricalSystem.Bogie2IsolateVDUReq;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TCMS.RightDoorAuth_Opened_Op2_5 = BEML_EMU_B.UnitDelay6[ForEach_itr_hg]
        .Control.ElectricalSystem.RightDoorAuth_Opened_Op2_5;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TCMS.LeftDoorAuth_Opened_Op2_5 = BEML_EMU_B.UnitDelay6[ForEach_itr_hg].
        Control.ElectricalSystem.LeftDoorAuth_Opened_Op2_5;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TCMS.HornHighVDUReq = BEML_EMU_B.UnitDelay6[ForEach_itr_hg].
        Control.ElectricalSystem.HornHighVDUReq;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TCMS.HornLowVDUReq = BEML_EMU_B.UnitDelay6[ForEach_itr_hg].
        Control.ElectricalSystem.HornLowVDUReq;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TCMS.HornIsolateReinstateVDUReq = BEML_EMU_B.UnitDelay6[ForEach_itr_hg]
        .Control.ElectricalSystem.HornIsolateReinstateVDUReq;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TCMS.TCMSIsolatePanto = BEML_EMU_B.UnitDelay6[ForEach_itr_hg].
        Control.ElectricalSystem.TCMSIsolatePanto;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TCMS.TCMSIsolateVCB = BEML_EMU_B.UnitDelay6[ForEach_itr_hg].
        Control.ElectricalSystem.TCMSIsolateVCB;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TCMS.TCMSIsolateAPS1 = BEML_EMU_B.UnitDelay6[ForEach_itr_hg].
        Control.ElectricalSystem.TCMSIsolateAPS1;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TCMS.TCMSIsolateAPS2 = BEML_EMU_B.UnitDelay6[ForEach_itr_hg].
        Control.ElectricalSystem.TCMSIsolateAPS2;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TCMS.TCMSIsolateCI = BEML_EMU_B.UnitDelay6[ForEach_itr_hg].
        Control.TractionSBraking.TCMSIsolateCI;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TCMS.TCMS_TSDDR = BEML_EMU_B.UnitDelay6[ForEach_itr_hg].
        Control.ElectricalSystem.TW_TSDDR;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TCMS.LeftDoorAuth_Opened_Op1 = BEML_EMU_B.UnitDelay6[ForEach_itr_hg].
        Control.ElectricalSystem.LeftDoorAuth_OpenedOP1;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TCMS.RightDoorAuth_Opened_Op1 = BEML_EMU_B.UnitDelay6[ForEach_itr_hg].
        Control.ElectricalSystem.RightDoorAuth_OpenedOP1;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TCMS.TCMSCompressorCmd = BEML_EMU_B.UnitDelay6[ForEach_itr_hg].
        Control.ElectricalSystem.TCMSCompressorCmd;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TCMS.TCMSFireAlarmReset = BEML_EMU_B.UnitDelay6[ForEach_itr_hg].
        Control.ElectricalSystem.TCMSFireAlarmReset;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TCMS.TCMSFDUReset = BEML_EMU_B.UnitDelay6[ForEach_itr_hg].
        Control.ElectricalSystem.TCMSFDUReset;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TCMS.TCMSHVACSmokeReset = BEML_EMU_B.UnitDelay6[ForEach_itr_hg].
        Control.ElectricalSystem.TCMSHVACSmokeReset;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TCMS.TCMSIsolateHVAC1 = BEML_EMU_B.UnitDelay6[ForEach_itr_hg].
        Control.ElectricalSystem.TCMSIsolateHVAC1;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TCMS.TCMSIsolateHVAC2 = BEML_EMU_B.UnitDelay6[ForEach_itr_hg].
        Control.ElectricalSystem.TCMSIsolateHVAC2;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TCMS.TCMSResetHVAC1 = BEML_EMU_B.UnitDelay6[ForEach_itr_hg].
        Control.ElectricalSystem.TCMSResetHVAC1;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TCMS.TCMSResetHVAC2 = BEML_EMU_B.UnitDelay6[ForEach_itr_hg].
        Control.ElectricalSystem.TCMSResetHVAC2;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TCMS.TCMSWFLIsolation = BEML_EMU_B.UnitDelay6[ForEach_itr_hg].
        Control.ElectricalSystem.TCMSWFLIsolation;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TCMS.TCMSPABORBypass = BEML_EMU_B.UnitDelay6[ForEach_itr_hg].
        Control.ElectricalSystem.TCMSPABORBypass;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TCMS.HVAC1FireDetectorDisableVDUReq =
        BEML_EMU_B.UnitDelay6[ForEach_itr_hg].
        Control.ElectricalSystem.HVAC1FireDetectorDisableVDUReq;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TCMS.CABSmokeDetectorDisableVDUReq =
        BEML_EMU_B.UnitDelay6[ForEach_itr_hg].
        Control.ElectricalSystem.CABSmokeDetectorDisableVDUReq;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TCMS.SHDEndCubicleRearLeft2DisableVDUReq =
        BEML_EMU_B.UnitDelay6[ForEach_itr_hg].
        Control.ElectricalSystem.SHDEndCubicleRearLeft2DisableVDUReq;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TractionSys.ForwardDirection =
        (rtb_ImpAsg_InsertedFor_Forward_at_inport_0[0] ||
         rtb_ImpAsg_InsertedFor_Forward_at_inport_0[1]);
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TractionSys.ReverseDirection =
        (rtb_ImpAsg_InsertedFor_Reverse_at_inport_0[0] ||
         rtb_ImpAsg_InsertedFor_Reverse_at_inport_0[1]);
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TractionSys.TCU_KStatus =
        BEML_EMU_P.CoreSubsys_ij1.Constant3_Value_fi.TCU_KStatus;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TractionSys.TCU_AKStatus =
        BEML_EMU_P.CoreSubsys_ij1.Constant3_Value_fi.TCU_AKStatus;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TractionSys.ContactorsFailure =
        BEML_EMU_P.CoreSubsys_ij1.Constant3_Value_fi.ContactorsFailure;
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0[ForEach_itr_hg]
        .TractionSys.TractionContactorStatus =
        BEML_EMU_B.UnitDelay4[ForEach_itr_hg].
        TractionControl.ElectricalSystem.TractionContactorStatus;

      /* ForEachSliceAssignment generated from: '<S318>/ElectricalFaults' */
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalFaults_at_inport_0[ForEach_itr_hg]
        =
        BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_hg]
        .ElectricalFaults;
    }

    /* End of Outputs for SubSystem: '<S316>/VehicleInputAdapter' */
    /* End of Outputs for SubSystem: '<S10>/ElectricalInputAdapter' */

    /* ModelReference: '<S10>/ElectricalSystem' incorporates:
     *  Outport: '<Root>/ElectricalOutput'
     */
    ElectricalSystem(&(BEML_EMU_DW.ElectricalSystem_InstanceData.rtm),
                     &BEML_EMU_B.ImpAsg_InsertedFor_CommonVehicleConfig_at_inport_0_e
                     [0],
                     &BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleConfig_at_inport_0
                     [0],
                     &BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleInput_at_inport_0
                     [0],
                     &BEML_EMU_B.ImpAsg_InsertedFor_ElectricalFaults_at_inport_0[
                     0], &BEML_EMU_Y.ElectricalOutput[0],
                     &BEML_EMU_B.ElectricalSystem_o2[0],
                     &(BEML_EMU_DW.ElectricalSystem_InstanceData.rtb),
                     &(BEML_EMU_DW.ElectricalSystem_InstanceData.rtdw),
                     &BEML_EMU_P.ElectricalSystem_Prm_ElectricalSystem);
  }

  if ((&BEML_EMU_M)->Timing.TaskCounters.TID[1] == 0) {
    /* UnitDelay: '<S1>/Unit Delay7' */
    memcpy(&BEML_EMU_B.UnitDelay7[0], &BEML_EMU_DW.UnitDelay7_DSTATE[0], sizeof
           (BD_TrainBrakes_Out_Vehicle) << 3U);
  }

  if ((&BEML_EMU_M)->Timing.TaskCounters.TID[2] == 0) {
    /* Outputs for Atomic SubSystem: '<S13>/TCMSInputAdapter' */
    /* Step: '<S358>/Step' */
    if (((((&BEML_EMU_M)->Timing.clockTick2+(&BEML_EMU_M)->Timing.clockTickH2*
           4294967296.0)) * 0.05) < BEML_EMU_P.Step_Time_b2) {
      rtb_Switch4_f = BEML_EMU_P.Step_Y0_ob;
    } else {
      rtb_Switch4_f = BEML_EMU_P.Step_YFinal_im;
    }

    /* End of Step: '<S358>/Step' */

    /* Outputs for Enabled SubSystem: '<S358>/ExtractConfig' incorporates:
     *  EnablePort: '<S359>/Enable'
     */
    if (rtb_Switch4_f > 0.0) {
      /* Outputs for Iterator SubSystem: '<S359>/ExtractConfig' incorporates:
       *  ForEach: '<S361>/For Each'
       */
      for (ForEach_itr_cb = 0; ForEach_itr_cb < 8; ForEach_itr_cb++) {
        /* ForEachSliceAssignment generated from: '<S361>/TCMSVehicleConfig' incorporates:
         *  Logic: '<S361>/AND'
         *  Logic: '<S361>/NOT'
         *  Outport: '<Root>/ProcessedVehConf'
         */
        BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleConfig_at_inport_0[ForEach_itr_cb]
          .HasCab = BEML_EMU_Y.ProcessedVehConf[ForEach_itr_cb].Equipment.HasCab;
        BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleConfig_at_inport_0[ForEach_itr_cb]
          .NumberOfTractionBogies = BEML_EMU_Y.ProcessedVehConf[ForEach_itr_cb].
          Equipment.NumberOfTractionBogies;
        BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleConfig_at_inport_0[ForEach_itr_cb]
          .NumberOfBrakingBogies = BEML_EMU_Y.ProcessedVehConf[ForEach_itr_cb].
          Equipment.NumberOfBrakingBogies;
        BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleConfig_at_inport_0[ForEach_itr_cb]
          .IsLastVehicle = BEML_EMU_Y.ProcessedVehConf[ForEach_itr_cb].
          Location.IsLastVehicle;
        BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleConfig_at_inport_0[ForEach_itr_cb]
          .IsFirstVehicle = BEML_EMU_Y.ProcessedVehConf[ForEach_itr_cb].
          Location.IsFirstVehicle;
        BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleConfig_at_inport_0[ForEach_itr_cb]
          .IsMCar = ((!BEML_EMU_Y.ProcessedVehConf[ForEach_itr_cb].
                      Equipment.HasCab) &&
                     BEML_EMU_Y.ProcessedVehConf[ForEach_itr_cb].
                     Equipment.HasMotors);
        BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleConfig_at_inport_0[ForEach_itr_cb]
          .IsTCar = BEML_EMU_Y.ProcessedVehConf[ForEach_itr_cb].
          Equipment.HasPneumaticPanto;
        BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleConfig_at_inport_0[ForEach_itr_cb]
          .HasVCB = BEML_EMU_Y.ProcessedVehConf[ForEach_itr_cb].
          Equipment.HasPneumaticPanto;

        /* ForEachSliceAssignment generated from: '<S361>/CommonVehicleConfig' incorporates:
         *  Outport: '<Root>/ProcessedVehConf'
         */
        BEML_EMU_B.ImpAsg_InsertedFor_CommonVehicleConfig_at_inport_0_l[ForEach_itr_cb]
          = BEML_EMU_Y.ProcessedVehConf[ForEach_itr_cb].Common;
      }

      /* End of Outputs for SubSystem: '<S359>/ExtractConfig' */
    }

    /* End of Outputs for SubSystem: '<S358>/ExtractConfig' */

    /* Outputs for Iterator SubSystem: '<S358>/VehicleInputAdapter' incorporates:
     *  ForEach: '<S360>/For Each'
     */
    for (ForEach_itr_jg = 0; ForEach_itr_jg < 8; ForEach_itr_jg++) {
      /* Outputs for Iterator SubSystem: '<S362>/For Each Subsystem' incorporates:
       *  ForEach: '<S374>/For Each'
       */
      for (ForEach_itr_od = 0; ForEach_itr_od < 6; ForEach_itr_od++) {
        /* ForEachSliceAssignment generated from: '<S374>/Out1' */
        rtb_ImpAsg_InsertedFor_Out1_at_inport_0_e[ForEach_itr_od] =
          BEML_EMU_B.UnitDelay7[ForEach_itr_jg].Axle[ForEach_itr_od].
          BrakingForce;
      }

      /* End of Outputs for SubSystem: '<S362>/For Each Subsystem' */

      /* Sum: '<S362>/Sum of Elements' */
      diff = -0.0;
      for (i = 0; i < 6; i++) {
        diff += rtb_ImpAsg_InsertedFor_Out1_at_inport_0_e[i];
      }

      /* End of Sum: '<S362>/Sum of Elements' */

      /* ForEachSliceAssignment generated from: '<S360>/TCMSVehicleInput' incorporates:
       *  BusAssignment: '<S362>/Bus Assignment3'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .BrakingSystem.BrakingForce = diff;

      /* Outputs for Iterator SubSystem: '<S372>/For Each Subsystem' incorporates:
       *  ForEach: '<S380>/For Each'
       */
      for (ForEach_itr_ok = 0; ForEach_itr_ok < 2; ForEach_itr_ok++) {
        /* ForEachSliceAssignment generated from: '<S380>/TCMSBogie' incorporates:
         *  BusAssignment: '<S380>/Bus Assignment3'
         *  Constant: '<S380>/Constant3'
         */
        rtb_ImpAsg_InsertedFor_TCMSBogie_at_inport_0_h[ForEach_itr_ok] =
          BEML_EMU_P.CoreSubsys_gf.CoreSubsys_gf.Constant3_Value;

        /* BusAssignment: '<S380>/Bus Assignment3' incorporates:
         *  ForEachSliceAssignment generated from: '<S380>/TCMSBogie'
         */
        rtb_ImpAsg_InsertedFor_TCMSBogie_at_inport_0_h[ForEach_itr_ok].
          BrakeCylinderPressureGauge = BEML_EMU_B.UnitDelay1_k[ForEach_itr_jg].
          PressureGauges.Bogie[ForEach_itr_ok].BrakeCylinderPressureGauge;
        rtb_ImpAsg_InsertedFor_TCMSBogie_at_inport_0_h[ForEach_itr_ok].
          ParkBrakePressureGauge = BEML_EMU_B.UnitDelay1_k[ForEach_itr_jg].
          PressureGauges.Bogie[ForEach_itr_ok].ParkBrakePressureGauge;
        rtb_ImpAsg_InsertedFor_TCMSBogie_at_inport_0_h[ForEach_itr_ok].
          AirSuspensionLoadPressure = BEML_EMU_B.UnitDelay1_k[ForEach_itr_jg].
          PressureTransducers.Bogie[ForEach_itr_ok].AirSuspensionLoadPressure;
        rtb_ImpAsg_InsertedFor_TCMSBogie_at_inport_0_h[ForEach_itr_ok].
          ServiceBrakeSwitchStatus = BEML_EMU_B.UnitDelay1_k[ForEach_itr_jg].
          PressureSwitches.Bogie[ForEach_itr_ok].BrakeCylinderPressureSwitch;
        rtb_ImpAsg_InsertedFor_TCMSBogie_at_inport_0_h[ForEach_itr_ok].
          PrakingBrakeSwitchStatus = BEML_EMU_B.UnitDelay1_k[ForEach_itr_jg].
          PressureSwitches.Bogie[ForEach_itr_ok].ParkBrakePressureSwitch;
        rtb_ImpAsg_InsertedFor_TCMSBogie_at_inport_0_h[ForEach_itr_ok].
          AirSuspensionSwitchStatus = BEML_EMU_B.UnitDelay1_k[ForEach_itr_jg].
          PressureSwitches.Bogie[ForEach_itr_ok].AirSuspensionPressureSwitch;
        rtb_ImpAsg_InsertedFor_TCMSBogie_at_inport_0_h[ForEach_itr_ok].
          AirSuspensionPressure = BEML_EMU_B.UnitDelay1_k[ForEach_itr_jg].
          Debug.Bogie[ForEach_itr_ok].AirSuspensionPressure;
        rtb_ImpAsg_InsertedFor_TCMSBogie_at_inport_0_h[ForEach_itr_ok].
          BECU1EmergencyBrakeFailure = BEML_EMU_B.UnitDelay1_k[ForEach_itr_jg].
          TCMS.Bogie[ForEach_itr_ok].BECU1EmergencyBrakeFailure;
        rtb_ImpAsg_InsertedFor_TCMSBogie_at_inport_0_h[ForEach_itr_ok].
          BECU2EmergencyBrakeFailure = BEML_EMU_B.UnitDelay1_k[ForEach_itr_jg].
          TCMS.Bogie[ForEach_itr_ok].BECU2EmergencyBrakeFailure;
        rtb_ImpAsg_InsertedFor_TCMSBogie_at_inport_0_h[ForEach_itr_ok].
          BECU1ServiceBrakeFailure = BEML_EMU_B.UnitDelay1_k[ForEach_itr_jg].
          TCMS.Bogie[ForEach_itr_ok].BECU1ServiceBrakeFailure;
        rtb_ImpAsg_InsertedFor_TCMSBogie_at_inport_0_h[ForEach_itr_ok].
          BECU1BrakeNotApplied = BEML_EMU_B.UnitDelay1_k[ForEach_itr_jg].
          TCMS.Bogie[ForEach_itr_ok].BECU1BrakeNotApplied;
        rtb_ImpAsg_InsertedFor_TCMSBogie_at_inport_0_h[ForEach_itr_ok].
          BECU1BrakeNotReleased = BEML_EMU_B.UnitDelay1_k[ForEach_itr_jg].
          TCMS.Bogie[ForEach_itr_ok].BECU1BrakeNotReleased;
        rtb_ImpAsg_InsertedFor_TCMSBogie_at_inport_0_h[ForEach_itr_ok].
          BECU1CarLoadPressureLow = BEML_EMU_B.UnitDelay1_k[ForEach_itr_jg].
          TCMS.Bogie[ForEach_itr_ok].BECU1CarLoadPressureLow;
        rtb_ImpAsg_InsertedFor_TCMSBogie_at_inport_0_h[ForEach_itr_ok].
          BECU2CarLoadPressureLow = BEML_EMU_B.UnitDelay1_k[ForEach_itr_jg].
          TCMS.Bogie[ForEach_itr_ok].BECU2CarLoadPressureLow;
        rtb_ImpAsg_InsertedFor_TCMSBogie_at_inport_0_h[ForEach_itr_ok].
          BECULowRPressure = BEML_EMU_B.UnitDelay1_k[ForEach_itr_jg]
          .TCMS.Bogie[ForEach_itr_ok].BECULowRPressure;
        rtb_ImpAsg_InsertedFor_TCMSBogie_at_inport_0_h[ForEach_itr_ok].
          AirSuspensionBogie1Deflated = BEML_EMU_B.UnitDelay1_k[ForEach_itr_jg].
          TCMS.Bogie[ForEach_itr_ok].AirSuspensionBogie1Deflated;
        rtb_ImpAsg_InsertedFor_TCMSBogie_at_inport_0_h[ForEach_itr_ok].
          BECU1LoadPressureLow = BEML_EMU_B.UnitDelay1_k[ForEach_itr_jg].
          TCMS.Bogie[ForEach_itr_ok].BECU1LoadPressureLow;
      }

      /* End of Outputs for SubSystem: '<S372>/For Each Subsystem' */

      /* Outputs for Iterator SubSystem: '<S366>/For Each Subsystem' incorporates:
       *  ForEach: '<S376>/For Each'
       */
      for (ForEach_itr_mf = 0; ForEach_itr_mf < 16; ForEach_itr_mf++) {
        /* ForEachSliceAssignment generated from: '<S376>/TCMSDoors' */
        rtb_ImpAsg_InsertedFor_TCMSDoors_at_inport_0[ForEach_itr_mf].
          DoorClosedStatus = BEML_EMU_B.UnitDelay3_m[ForEach_itr_jg]
          .Doors[ForEach_itr_mf].TCMS.DoorClosedStatus;
        rtb_ImpAsg_InsertedFor_TCMSDoors_at_inport_0[ForEach_itr_mf].
          DoorOpenStatus = BEML_EMU_B.UnitDelay3_m[ForEach_itr_jg]
          .Doors[ForEach_itr_mf].TCMS.DoorOpenStatus;
        rtb_ImpAsg_InsertedFor_TCMSDoors_at_inport_0[ForEach_itr_mf].
          DoorReleasedAuthorisedToOpenStatus =
          BEML_EMU_B.UnitDelay3_m[ForEach_itr_jg].Doors[ForEach_itr_mf].
          TCMS.DoorReleasedAuthorisedToOpenStatus;
        rtb_ImpAsg_InsertedFor_TCMSDoors_at_inport_0[ForEach_itr_mf].
          DoorEmergencyReleasedStatus = BEML_EMU_B.UnitDelay3_m[ForEach_itr_jg].
          Doors[ForEach_itr_mf].TCMS.DoorEmergencyReleasedStatus;
        rtb_ImpAsg_InsertedFor_TCMSDoors_at_inport_0[ForEach_itr_mf].
          DoorIsolatedStatus = BEML_EMU_B.UnitDelay3_m[ForEach_itr_jg]
          .Doors[ForEach_itr_mf].TCMS.DoorIsolatedStatus;
        rtb_ImpAsg_InsertedFor_TCMSDoors_at_inport_0[ForEach_itr_mf].
          DoorFaultStatus = BEML_EMU_B.UnitDelay3_m[ForEach_itr_jg]
          .Doors[ForEach_itr_mf].TCMS.DoorFaultStatus;
        rtb_ImpAsg_InsertedFor_TCMSDoors_at_inport_0[ForEach_itr_mf].
          DoorObstacleDetected = BEML_EMU_B.UnitDelay3_m[ForEach_itr_jg]
          .Doors[ForEach_itr_mf].TCMS.DoorObstacleDetected;
        rtb_ImpAsg_InsertedFor_TCMSDoors_at_inport_0[ForEach_itr_mf].
          DoorObstacleUnableToClose = BEML_EMU_B.UnitDelay3_m[ForEach_itr_jg].
          Doors[ForEach_itr_mf].TCMS.DoorObstacleUnableToClose;
        rtb_ImpAsg_InsertedFor_TCMSDoors_at_inport_0[ForEach_itr_mf].
          DoorLockedStatus = BEML_EMU_B.UnitDelay3_m[ForEach_itr_jg]
          .Doors[ForEach_itr_mf].TCMS.DoorLockedStatus;
        rtb_ImpAsg_InsertedFor_TCMSDoors_at_inport_0[ForEach_itr_mf].
          DoorPosition = BEML_EMU_B.UnitDelay3_m[ForEach_itr_jg]
          .Doors[ForEach_itr_mf].OutputControlStates.DoorPosition;
        rtb_ImpAsg_InsertedFor_TCMSDoors_at_inport_0[ForEach_itr_mf].
          DoorOpenObstruction = BEML_EMU_B.UnitDelay3_m[ForEach_itr_jg]
          .Doors[ForEach_itr_mf].TCMS.Messages.DoorOpenObstacleDetected;
        rtb_ImpAsg_InsertedFor_TCMSDoors_at_inport_0[ForEach_itr_mf].
          DoorCloseObstruction = BEML_EMU_B.UnitDelay3_m[ForEach_itr_jg]
          .Doors[ForEach_itr_mf].TCMS.Messages.DoorCloseObstacleDetected;
        rtb_ImpAsg_InsertedFor_TCMSDoors_at_inport_0[ForEach_itr_mf].
          DoorOpenPBLight = BEML_EMU_B.UnitDelay3_m[ForEach_itr_jg]
          .Doors[ForEach_itr_mf].TCMS.DoorOpenPBLight;
        rtb_ImpAsg_InsertedFor_TCMSDoors_at_inport_0[ForEach_itr_mf].
          DoorClosedPBLight = BEML_EMU_B.UnitDelay3_m[ForEach_itr_jg]
          .Doors[ForEach_itr_mf].TCMS.DoorClosedPBLight;
        rtb_ImpAsg_InsertedFor_TCMSDoors_at_inport_0[ForEach_itr_mf].
          DoorMotorCircuitFailure = BEML_EMU_B.UnitDelay3_m[ForEach_itr_jg].
          Doors[ForEach_itr_mf].TCMS.Messages.DoorMotorFailure;
        rtb_ImpAsg_InsertedFor_TCMSDoors_at_inport_0[ForEach_itr_mf].
          DoorFailedToLock = BEML_EMU_B.UnitDelay3_m[ForEach_itr_jg]
          .Doors[ForEach_itr_mf].TCMS.Messages.DoorFailedToLock;
        rtb_ImpAsg_InsertedFor_TCMSDoors_at_inport_0[ForEach_itr_mf].
          DoorFailedToUnlock = BEML_EMU_B.UnitDelay3_m[ForEach_itr_jg]
          .Doors[ForEach_itr_mf].TCMS.Messages.DoorFailedToUnlock;
        rtb_ImpAsg_InsertedFor_TCMSDoors_at_inport_0[ForEach_itr_mf].
          DoorUnexpectedUnlocking = BEML_EMU_B.UnitDelay3_m[ForEach_itr_jg].
          Doors[ForEach_itr_mf].TCMS.Messages.DoorUnexpectedUnlocking;
        rtb_ImpAsg_InsertedFor_TCMSDoors_at_inport_0[ForEach_itr_mf].DCUFailure =
          BEML_EMU_B.UnitDelay3_m[ForEach_itr_jg].Doors[ForEach_itr_mf].
          TCMS.Messages.DCUFailure;
        rtb_ImpAsg_InsertedFor_TCMSDoors_at_inport_0[ForEach_itr_mf].DCSRFailure
          = BEML_EMU_B.UnitDelay3_m[ForEach_itr_jg].Doors[ForEach_itr_mf].
          TCMS.Messages.DCSRFailure;
        rtb_ImpAsg_InsertedFor_TCMSDoors_at_inport_0[ForEach_itr_mf].DCSLFailure
          = BEML_EMU_B.UnitDelay3_m[ForEach_itr_jg].Doors[ForEach_itr_mf].
          TCMS.Messages.DCSLFailure;
        rtb_ImpAsg_InsertedFor_TCMSDoors_at_inport_0[ForEach_itr_mf].DLSRFailure
          = BEML_EMU_B.UnitDelay3_m[ForEach_itr_jg].Doors[ForEach_itr_mf].
          TCMS.Messages.DLSRFailure;
        rtb_ImpAsg_InsertedFor_TCMSDoors_at_inport_0[ForEach_itr_mf].DLSLFailure
          = BEML_EMU_B.UnitDelay3_m[ForEach_itr_jg].Doors[ForEach_itr_mf].
          TCMS.Messages.DLSLFailure;
        rtb_ImpAsg_InsertedFor_TCMSDoors_at_inport_0[ForEach_itr_mf].
          DoorMajorFault = BEML_EMU_B.UnitDelay3_m[ForEach_itr_jg]
          .Doors[ForEach_itr_mf].TCMS.Messages.DoorMajorFault;
        rtb_ImpAsg_InsertedFor_TCMSDoors_at_inport_0[ForEach_itr_mf].
          UnexpectedDoorOpeningDetectedByCC =
          BEML_EMU_B.UnitDelay3_m[ForEach_itr_jg].Doors[ForEach_itr_mf].
          TCMS.Messages.UnexpectedDoorOpeningDetectedByCC;
      }

      /* End of Outputs for SubSystem: '<S366>/For Each Subsystem' */

      /* Logic: '<S379>/Logical Operator40' incorporates:
       *  ForEachSliceSelector generated from: '<S360>/ElectricalVehicleFB'
       *  Logic: '<S379>/Logical Operator39'
       *  Logic: '<S379>/Logical Operator41'
       *  Memory: '<S379>/Memory'
       *  RelationalOperator: '<S377>/FixPt Relational Operator'
       *  RelationalOperator: '<S378>/FixPt Relational Operator'
       *  UnitDelay: '<S377>/Delay Input1'
       *  UnitDelay: '<S378>/Delay Input1'
       */
      rtb_AND_p = (((static_cast<int32_T>(BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.NoEB) < static_cast<int32_T>
                     (BEML_EMU_DW.CoreSubsys_gf[ForEach_itr_jg].
                      DelayInput1_DSTATE)) ||
                    BEML_EMU_DW.CoreSubsys_gf[ForEach_itr_jg].
                    Memory_PreviousInput) && (static_cast<int32_T>
        (BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.NoEB) <= static_cast<int32_T>
        (BEML_EMU_DW.CoreSubsys_gf[ForEach_itr_jg].DelayInput1_DSTATE_k)));

      /* Outputs for Iterator SubSystem: '<S373>/For Each Subsystem' incorporates:
       *  ForEach: '<S381>/For Each'
       */
      for (ForEach_itr_da = 0; ForEach_itr_da < 2; ForEach_itr_da++) {
        /* ForEachSliceAssignment generated from: '<S381>/TCMSBogie' incorporates:
         *  DataTypeConversion: '<S381>/Data Type Conversion'
         */
        rtb_ImpAsg_InsertedFor_TCMSBogie_at_inport_0[ForEach_itr_da].TCUStatus =
          BEML_EMU_B.UnitDelay4[ForEach_itr_jg]
          .TractionControl.TCMS.Bogie[ForEach_itr_da].TCUStatus;
        rtb_ImpAsg_InsertedFor_TCMSBogie_at_inport_0[ForEach_itr_da].BogieFaulty
          = BEML_EMU_B.UnitDelay4[ForEach_itr_jg]
          .TractionControl.TCMS.Bogie[ForEach_itr_da].BogieFaulty;
        rtb_ImpAsg_InsertedFor_TCMSBogie_at_inport_0[ForEach_itr_da].
          TractionNotIsolated = BEML_EMU_B.UnitDelay4[ForEach_itr_jg].
          TractionControl.TCMS.Bogie[ForEach_itr_da].TractionNotIsolated;
        rtb_ImpAsg_InsertedFor_TCMSBogie_at_inport_0[ForEach_itr_da].
          EDBrakeNotIsolated = BEML_EMU_B.UnitDelay4[ForEach_itr_jg].
          TractionControl.TCMS.Bogie[ForEach_itr_da].EDBrakeNotIsolated;
        rtb_ImpAsg_InsertedFor_TCMSBogie_at_inport_0[ForEach_itr_da].
          TCUSlideDetected = BEML_EMU_B.UnitDelay4[ForEach_itr_jg].
          TractionControl.TCMS.Bogie[ForEach_itr_da].TCUSlideDetected;
        rtb_ImpAsg_InsertedFor_TCMSBogie_at_inport_0[ForEach_itr_da].
          TCUSlipDetected = BEML_EMU_B.UnitDelay4[ForEach_itr_jg].
          TractionControl.TCMS.Bogie[ForEach_itr_da].TCUSlipDetected;
        rtb_ImpAsg_InsertedFor_TCMSBogie_at_inport_0[ForEach_itr_da].
          TractiveEffortAchieved = BEML_EMU_B.UnitDelay4[ForEach_itr_jg].
          TractionControl.TCMS.Bogie[ForEach_itr_da].TractiveEffortAchieved;
        rtb_ImpAsg_InsertedFor_TCMSBogie_at_inport_0[ForEach_itr_da].
          EDBrakingEffortAchieved = BEML_EMU_B.UnitDelay4[ForEach_itr_jg].
          TractionControl.TCMS.Bogie[ForEach_itr_da].EDBrakingEffortAchieved;
        rtb_ImpAsg_InsertedFor_TCMSBogie_at_inport_0[ForEach_itr_da].
          TractiveEffortPossible = BEML_EMU_B.UnitDelay4[ForEach_itr_jg].
          TractionControl.TCMS.Bogie[ForEach_itr_da].TractiveEffortPossible;
        rtb_ImpAsg_InsertedFor_TCMSBogie_at_inport_0[ForEach_itr_da].
          EDBrakingEffortPossible = BEML_EMU_B.UnitDelay4[ForEach_itr_jg].
          TractionControl.TCMS.Bogie[ForEach_itr_da].EDBrakingEffortPossible;
        rtb_ImpAsg_InsertedFor_TCMSBogie_at_inport_0[ForEach_itr_da].
          TractionPower = BEML_EMU_B.UnitDelay4[ForEach_itr_jg].
          TractionControl.TCMS.Bogie[ForEach_itr_da].TractionPower;
        rtb_ImpAsg_InsertedFor_TCMSBogie_at_inport_0[ForEach_itr_da].
          EDBrakingPower = BEML_EMU_B.UnitDelay4[ForEach_itr_jg].
          TractionControl.TCMS.Bogie[ForEach_itr_da].EDBrakingPower;
        rtb_ImpAsg_InsertedFor_TCMSBogie_at_inport_0[ForEach_itr_da].
          TractivePowerPossible = BEML_EMU_B.UnitDelay4[ForEach_itr_jg].
          TractionControl.TCMS.Bogie[ForEach_itr_da].TractivePowerPossible;
        rtb_ImpAsg_InsertedFor_TCMSBogie_at_inport_0[ForEach_itr_da].
          EDBrakingPowerPossible = BEML_EMU_B.UnitDelay4[ForEach_itr_jg].
          TractionControl.TCMS.Bogie[ForEach_itr_da].EDBrakingPowerPossible;
        rtb_ImpAsg_InsertedFor_TCMSBogie_at_inport_0[ForEach_itr_da]
          .MotorSpeeds[0] = BEML_EMU_B.UnitDelay4[ForEach_itr_jg].
          TractionControl.TCMS.Bogie[ForEach_itr_da].MotorSpeeds[0];
        rtb_ImpAsg_InsertedFor_TCMSBogie_at_inport_0[ForEach_itr_da]
          .MotorSpeeds[1] = BEML_EMU_B.UnitDelay4[ForEach_itr_jg].
          TractionControl.TCMS.Bogie[ForEach_itr_da].MotorSpeeds[1];
        rtb_ImpAsg_InsertedFor_TCMSBogie_at_inport_0[ForEach_itr_da].
          WSPTractionCutout = BEML_EMU_B.UnitDelay4[ForEach_itr_jg].
          TractionControl.TCMS.Bogie[ForEach_itr_da].WSPTractionCutout;
        rtb_ImpAsg_InsertedFor_TCMSBogie_at_inport_0[ForEach_itr_da].
          SpeedSensorFault = (BEML_EMU_B.UnitDelay4[ForEach_itr_jg].
                              TractionControl.TCMS.Bogie[ForEach_itr_da].
                              SpeedSensorFault != 0.0);
      }

      /* End of Outputs for SubSystem: '<S373>/For Each Subsystem' */

      /* Outputs for Iterator SubSystem: '<S373>/Subsystem' incorporates:
       *  ForEach: '<S382>/For Each'
       */
      for (ForEach_itr_lw = 0; ForEach_itr_lw < 1; ForEach_itr_lw++) {
        /* ForEachSliceAssignment generated from: '<S382>/<signal1>' */
        for (i = 0; i < 6; i++) {
          rtb_ImpAsg_InsertedFor_signal1_at_inport_0[i + ForEach_itr_lw * 6] =
            BEML_EMU_B.UnitDelay4[ForEach_itr_jg].Dynamics.TractionForce[i];
        }
      }

      /* End of Outputs for SubSystem: '<S373>/Subsystem' */

      /* Outputs for Iterator SubSystem: '<S364>/Subsystem' incorporates:
       *  ForEach: '<S375>/For Each'
       */
      for (ForEach_itr_ix = 0; ForEach_itr_ix < 2; ForEach_itr_ix++) {
        /* ForEachSliceAssignment generated from: '<S375>/RescueModeCondition' incorporates:
         *  Outport: '<Root>/CouplingOutput'
         */
        rtb_ImpAsg_InsertedFor_RescueModeCondition_at_inport_0[ForEach_itr_ix] =
          BEML_EMU_Y.CouplingOutput[ForEach_itr_jg]
          .Couplers.Coupler[ForEach_itr_ix].
          CouplingInterface.RescueModeCondition;

        /* ForEachSliceAssignment generated from: '<S375>/<MechanicalCouplerState>' incorporates:
         *  Outport: '<Root>/CouplingOutput'
         */
        rtb_ImpAsg_InsertedFor_MechanicalCouplerState_at_inport_0[ForEach_itr_ix]
          = BEML_EMU_Y.CouplingOutput[ForEach_itr_jg]
          .Couplers.Coupler[ForEach_itr_ix].
          PhysicalSignals.MechanicalCouplerState;
      }

      /* End of Outputs for SubSystem: '<S364>/Subsystem' */

      /* ForEachSliceAssignment generated from: '<S360>/TCMSVehicleInput' incorporates:
       *  BusAssignment: '<S363>/Bus Assignment3'
       *  Outport: '<Root>/CBTCVehicleOut'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .CBTC.LeftDoorOpenRequest = BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_jg].
        TCMS.LeftDoorOpenATCReq;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .CBTC.RightDoorOpenRequest = BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_jg].
        TCMS.RightDoorOpenATCReq;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .CBTC.LeftDoorCloseRequest = BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_jg].
        TCMS.LeftDoorCloseATCReq;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .CBTC.RightDoorCloseRequest = BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_jg].
        TCMS.RightDoorCloseATCReq;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .CBTC.ATOTBDemandPct = BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_jg].
        TCMS.ATOTBDemand;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .CBTC.NoServiceBrakeOrder = BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_jg].
        TCMS.NoServiceBrake;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .CBTC.NotImmobilise = BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_jg].
        TCMS.NotImmobilise;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .CBTC.ATOTraction = BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_jg].
        TCMS.ATOTraction;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .CBTC.ATOBraking = BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_jg].
        TCMS.ATOBrake;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .CBTC.DriverModeSelection = BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_jg].
        OnBoard.DriverModeSelection;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .CBTC.ATCBypassState = BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_jg].
        OnBoard.ATCBypassState;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .CBTC.LeftSideDoorEnable = BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_jg].
        Platform.LeftSideDoorEnable;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .CBTC.RightSideDoorEnable = BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_jg].
        Platform.RightSideDoorEnable;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .CBTC.ATCWakeup = BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_jg].
        Electrical.WakeUpCommand;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .CBTC.RollbackDetected = BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_jg].
        TCMS.RollbackDetected;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .CBTC.LeftDoorCloseIndicator = BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_jg]
        .TCMS.LeftDoorCloseIndicator;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .CBTC.RightDoorCloseIndicator = BEML_EMU_Y.CBTCVehicleOut[ForEach_itr_jg]
        .TCMS.RightDoorCloseIndicator;

      /* Switch: '<S363>/Switch' incorporates:
       *  Constant: '<S363>/Constant3'
       *  ForEachSliceSelector generated from: '<S360>/VehicleFaults'
       */
      if (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_jg]
          .TCMSFaults.CCUCommunicationError >
          BEML_EMU_P.CoreSubsys_gf.Switch_Threshold) {
        BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
          .CBTC = BEML_EMU_P.CoreSubsys_gf.Constant3_Value_g2;
      }

      /* End of Switch: '<S363>/Switch' */

      /* Update for UnitDelay: '<S377>/Delay Input1' incorporates:
       *  ForEachSliceSelector generated from: '<S360>/ElectricalVehicleFB'
       */
      BEML_EMU_DW.CoreSubsys_gf[ForEach_itr_jg].DelayInput1_DSTATE =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.NoEB;

      /* Update for Memory: '<S379>/Memory' */
      BEML_EMU_DW.CoreSubsys_gf[ForEach_itr_jg].Memory_PreviousInput = rtb_AND_p;

      /* Update for UnitDelay: '<S378>/Delay Input1' incorporates:
       *  ForEachSliceSelector generated from: '<S360>/ElectricalVehicleFB'
       */
      BEML_EMU_DW.CoreSubsys_gf[ForEach_itr_jg].DelayInput1_DSTATE_k =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.NoEB;

      /* ForEachSliceAssignment generated from: '<S360>/Overrides' incorporates:
       *  BusAssignment: '<S360>/Bus Assignment1'
       */
      rtb_ImpAsg_InsertedFor_Overrides_at_inport_0[ForEach_itr_jg].PlaceHolder =
        false;

      /* ForEachSliceAssignment generated from: '<S360>/VehicleLevelFaults' */
      BEML_EMU_B.ImpAsg_InsertedFor_VehicleLevelFaults_at_inport_0[ForEach_itr_jg]
        = BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_jg].Faults;

      /* ForEachSliceAssignment generated from: '<S360>/TCMSVehicleInput' incorporates:
       *  BusAssignment: '<S364>/Bus Assignment3'
       *  BusAssignment: '<S366>/Bus Assignment3'
       *  BusAssignment: '<S368>/Bus Assignment3'
       *  BusAssignment: '<S369>/Bus Assignment3'
       *  BusAssignment: '<S370>/Bus Assignment3'
       *  BusAssignment: '<S371>/Bus Assignment3'
       *  BusAssignment: '<S372>/Bus Assignment3'
       *  BusAssignment: '<S373>/Bus Assignment3'
       *  Constant: '<S368>/Constant1'
       *  Constant: '<S368>/Constant3'
       *  Constant: '<S369>/Constant3'
       *  Constant: '<S370>/Constant3'
       *  Constant: '<S371>/Constant3'
       *  DataTypeConversion: '<S366>/Data Type Conversion'
       *  DataTypeConversion: '<S366>/Data Type Conversion1'
       *  DataTypeConversion: '<S368>/Data Type Conversion1'
       *  DataTypeConversion: '<S368>/Data Type Conversion2'
       *  DataTypeConversion: '<S368>/Data Type Conversion3'
       *  DataTypeConversion: '<S368>/Data Type Conversion5'
       *  DataTypeConversion: '<S368>/Data Type Conversion8'
       *  DataTypeConversion: '<S370>/Data Type Conversion'
       *  DataTypeConversion: '<S370>/Data Type Conversion1'
       *  DataTypeConversion: '<S370>/Data Type Conversion2'
       *  DataTypeConversion: '<S373>/Data Type Conversion'
       *  DataTypeConversion: '<S373>/Data Type Conversion1'
       *  Logic: '<S370>/AND'
       *  Logic: '<S370>/AND1'
       *  Logic: '<S370>/AND2'
       *  Logic: '<S370>/AND3'
       *  Logic: '<S370>/AND4'
       *  Logic: '<S370>/AND5'
       *  Logic: '<S370>/NOT3'
       *  Logic: '<S370>/NOT4'
       *  Outport: '<Root>/CouplingOutput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .InputControlStates.TractionBrakeController =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jg]
        .MasterControllerHandle;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .InputControlStates.HeadLightSwitch =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jg]
        .HeadLightSwitch;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .InputControlStates.ParkBrakeIsolationCockBogie1 =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jg]
        .ParkBrakeIsolationCockBogie1;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .InputControlStates.ParkBrakeIsolationCockBogie2 =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jg]
        .ParkBrakeIsolationCockBogie2;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .InputControlStates.Bogie1IsolationCmd =
        (BEML_EMU_B.UnitDelay5[ForEach_itr_jg].Pneumatics.RemoteMagnetValve1 ||
         ((!(BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jg]
             .BIC1Inside != 0.0)) ||
          (!(BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jg]
             .BIC1Outside != 0.0))));
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .InputControlStates.Bogie2IsolationCmd =
        ((!(BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jg]
            .BIC2Inside != 0.0)) ||
         (!(BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jg]
            .BIC2Outside != 0.0)) || BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
         Pneumatics.RemoteMagnetValve2);
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .InputControlStates.EPIC =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jg]
        .EPIC;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .InputControlStates.ASCOEnd1 =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jg]
        .ASCOEnd1;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .InputControlStates.ASCOEnd2 =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jg]
        .ASCOEnd2;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .InputControlStates.ASIsolationCock =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jg]
        .ASIsolationCock;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .InputControlStates.SR =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jg]
        .SR;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .InputControlStates.ModeSelector =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jg]
        .ModeSelector;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .InputControlStates.EBPB =
        ((BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jg]
          .EmergencyBrakePB != 0.0) ||
         (BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jg]
          .EmergencyStopPB != 0.0));
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .InputControlStates.SafetyCutoutSS =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jg]
        .SafetyCutoutSS;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .InputControlStates.MREPICEnd1 =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jg]
        .MREPIsolationCockEnd1;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .InputControlStates.MREPICEnd2 =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jg]
        .MREPIsolationCockEnd2;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .InputControlStates.CabSaloonPartitionDoorOpen =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jg]
        .DriversBackDoor;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .InputControlStates.EmergencyDoorCoverRemoved =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jg]
        .DummyCover;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .InputControlStates.DoorLoopBypassActive =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jg]
        .DoorProvenLoopOutputSwitch;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .InputControlStates.DeadManBypass =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jg]
        .DeadmanBypassSwitch;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .InputControlStates.ControlKey =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jg]
        .ControlKey;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .InputControlStates.LeftDoor1Lockout =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jg]
        .LeftDoor1Lockout;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .InputControlStates.LeftDoor2Lockout =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jg]
        .LeftDoor2Lockout;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .InputControlStates.LeftDoor3Lockout =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jg]
        .LeftDoor3Lockout;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .InputControlStates.LeftDoor4Lockout =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jg]
        .LeftDoor4Lockout;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .InputControlStates.RightDoor1Lockout =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jg]
        .RightDoor1Lockout;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .InputControlStates.RightDoor2Lockout =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jg]
        .RightDoor2Lockout;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .InputControlStates.RightDoor3Lockout =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jg]
        .RightDoor3Lockout;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .InputControlStates.RightDoor4Lockout =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jg]
        .RightDoor4Lockout;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .InputControlStates.LeftDoor1EED =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jg]
        .LeftDoor1EED;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .InputControlStates.LeftDoor2EED =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jg]
        .LeftDoor2EED;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .InputControlStates.LeftDoor3EED =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jg]
        .LeftDoor3EED;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .InputControlStates.LeftDoor4EED =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jg]
        .LeftDoor4EED;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .InputControlStates.RightDoor1EED =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jg]
        .RightDoor1EED;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .InputControlStates.RightDoor2EED =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jg]
        .RightDoor2EED;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .InputControlStates.RightDoor3EED =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jg]
        .RightDoor3EED;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .InputControlStates.RightDoor4EED =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jg]
        .RightDoor4EED;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .InputControlStates.RampCoverLockingLever =
        BEML_EMU_P.CoreSubsys_gf.Constant3_Value_js.RampCoverLockingLever;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .InputControlStates.HornManuallyIsolated =
        ((BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jg]
          .Horn1IsolationCock != 0.0) &&
         (BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jg]
          .Horn2IsolationCock != 0.0));
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .InputControlStates.BIC1Inside =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jg]
        .BIC1Inside;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .InputControlStates.BIC1Outside =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jg]
        .BIC1Outside;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .InputControlStates.BIC2Inside =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jg]
        .BIC2Inside;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .InputControlStates.BIC2Outside =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jg]
        .BIC2Outside;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .DisplayControl = BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_jg].
        DisplayControl;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .Environment.RightDoorsEnable =
        BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_jg].
        Environment.RightDoorsEnable;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .Environment.LeftDoorsEnable =
        BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_jg].
        Environment.LeftDoorsEnable;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .Environment.DoorsPairEnable[0] =
        BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_jg].
        Environment.DoorsPairEnable[0];
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .Environment.DoorsPairEnable[1] =
        BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_jg].
        Environment.DoorsPairEnable[1];
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .Environment.DoorsPairEnable[2] =
        BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_jg].
        Environment.DoorsPairEnable[2];
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .Environment.DoorsPairEnable[3] =
        BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_jg].
        Environment.DoorsPairEnable[3];
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .Environment.LineVoltage =
        BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_jg].Environment.LineVoltage;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .Environment.OverheadLinePresent =
        BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_jg].
        Environment.OverheadLinePresent;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .Environment.NeutralSection =
        BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_jg].
        Environment.NeutralSection;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .Environment.VehiclesPassedNS =
        BEML_EMU_P.CoreSubsys_gf.Constant3_Value_c.VehiclesPassedNS;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .Environment.DamagedOHE =
        BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_jg].Environment.DamagedOHE;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .PneumaticsSystem.MainReservoirPressureGauge =
        BEML_EMU_B.UnitDelay1_k[ForEach_itr_jg].
        PressureGauges.MainReservoirPressureGauge;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .PneumaticsSystem.MainReservoirPipePressure =
        BEML_EMU_B.UnitDelay1_k[ForEach_itr_jg].Debug.MainReservoirPipePressure;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .PneumaticsSystem.PantographPressure =
        BEML_EMU_B.UnitDelay1_k[ForEach_itr_jg].Debug.PantographCylinderPressure;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .PneumaticsSystem.Bogie[0] =
        rtb_ImpAsg_InsertedFor_TCMSBogie_at_inport_0_h[0];
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .PneumaticsSystem.Bogie[1] =
        rtb_ImpAsg_InsertedFor_TCMSBogie_at_inport_0_h[1];
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .PneumaticsSystem.BrakeDemandSignalFailure =
        BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_jg]
        .PneumaticsFaults.BrakeDemandSignalFailure;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .PneumaticsSystem.LowMRTractionCutoutSwitch =
        BEML_EMU_B.UnitDelay1_k[ForEach_itr_jg].
        PressureSwitches.MRPS_TractionCutout;
      for (i = 0; i < 16; i++) {
        BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
          .DoorSystem.Doors[i] = rtb_ImpAsg_InsertedFor_TCMSDoors_at_inport_0[i];
      }

      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .DoorSystem.EmergencyDoor.Ramp = (BEML_EMU_B.UnitDelay3_m[ForEach_itr_jg]
        .EmergencyDoor.Ramp != 0.0);
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .DoorSystem.EmergencyDoor.EmergencyDoorOpen =
        (BEML_EMU_B.UnitDelay3_m[ForEach_itr_jg].EmergencyDoor.EmergencyDoorOpen
         != 0.0);
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .DoorSystem.EmergencyDoor.EmergencyDoorLocked =
        BEML_EMU_B.UnitDelay3_m[ForEach_itr_jg].
        EmergencyDoor.EmergencyDoorLocked;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .DoorSystem.EmergencyDoor.EmerDoorOpenFaultMessage =
        BEML_EMU_B.UnitDelay3_m[ForEach_itr_jg].
        EmergencyDoor.EmerDoorOpenFaultMessage;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .DoorSystem.AllLeftDoorClosed = BEML_EMU_B.UnitDelay3_m[ForEach_itr_jg].
        VehicleElectrical.TrainLeftDoorInterlockOk;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .DoorSystem.AllRightDoorClosed = BEML_EMU_B.UnitDelay3_m[ForEach_itr_jg]
        .VehicleElectrical.TrainRightDoorInterlockOk;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.TCMSPowerAvailable =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.TCMSPowerAvailable;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.CabActive = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.CabActive;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.ForwardDirection =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.ForwardDirection;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.ReverseDirection =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.ReverseDirection;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.Speedometer = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.Speedometer;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.ZeroSpeed = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.ZeroSpeed;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.TractionOn = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.TractionOn;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.BrakeOn = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.BrakeOn;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.TractionSafe = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.TractionSafe;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.AllRightDoorsClosed =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.AllRightDoorsClosed;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.AllLeftDoorsClosed =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.AllLeftDoorsClosed;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.ServiceBrakesReleased =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.ServiceBrakesReleased;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.ParkBrakesReleased =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.ParkBrakesReleased;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.ParkBrakeApplication =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.ParkBrakeApplication;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.ServiceBrakeApplication =
        BEML_EMU_P.CoreSubsys_gf.Constant3_Value.ServiceBrakeApplication;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.PantoLowered = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.PantoLowered;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.PantoRaised = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.PantoRaised;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.PantoPowerDetected =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.PantoPowerDetected;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.VCBState = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.VCBState;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.AK1Status = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.APSAKContactorState;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.AK2Status = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.APSAKContactorState;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.K1Status = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.APSKContactorState;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.K2Status = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.APSKContactorState;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.FilterVoltage = BEML_EMU_B.UnitDelay5[ForEach_itr_jg]
        .TCMS.FilterVoltage;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.BCG1Status = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.BCG1Status;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.BCG2Status = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.BCG2Status;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.BCGOutputVoltage =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.BCGOutputVoltage;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.BatteryVoltage = BEML_EMU_B.UnitDelay5[ForEach_itr_jg]
        .TCMS.BatteryVoltage;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.BatteryCurrent = BEML_EMU_B.UnitDelay5[ForEach_itr_jg]
        .TCMS.BatteryCurrent;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.BatteryTemperature =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.BatteryTemperature;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.BCG1OutputCurrent =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.BCG1OutputCurrent;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.BCG2OutputCurrent =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.BCG2OutputCurrent;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.BrakeTrainLine = BEML_EMU_B.UnitDelay5[ForEach_itr_jg]
        .TCMS.NoBrakeTrainLine;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.MotorTrainLine = BEML_EMU_B.UnitDelay5[ForEach_itr_jg]
        .TCMS.MotorTrainLine;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.FSB1Line = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.NoFSB1Line;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.FSB2Line = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.NoFSB2Line;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.EB1Line = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.NoEB1Line;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.EB2Line = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.NoEB2Line;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.LineVoltage = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.LineVoltage;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.NoEB = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.NoEB;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.VCBTripCommand = BEML_EMU_B.UnitDelay5[ForEach_itr_jg]
        .TCMS.VCBTripCommand;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.MotorPowerAvailable =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].Traction.MotorPowerAvailable;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.LeftDoorRelease =
        (BEML_EMU_P.CoreSubsys_gf.Constant1_Value_d != 0.0);
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.RightDoorRelease =
        (BEML_EMU_P.CoreSubsys_gf.Constant1_Value_d != 0.0);
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.LeftDoorOpen = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        Doors.LeftDoorOpen;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.RightDoorOpen = BEML_EMU_B.UnitDelay5[ForEach_itr_jg]
        .Doors.RightDoorOpen;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.LeftDoorClose = BEML_EMU_B.UnitDelay5[ForEach_itr_jg]
        .Doors.LeftDoorClose;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.RightDoorClose = BEML_EMU_B.UnitDelay5[ForEach_itr_jg]
        .Doors.RightDoorClose;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.APS1Status = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.APS1Status;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.APS2Status = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.APS2Status;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.APS1Fault = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.APS1Fault;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.APS2Fault = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.APS2Fault;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.APS1Isolated = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.APS1Isolated;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.APS2Isolated = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.APS2Isolated;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.APS1OutputVoltage =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.APS1OutputVoltage;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.APS2OutputVoltage =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.APS2OutputVoltage;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.HLSwitchStatus = BEML_EMU_B.UnitDelay5[ForEach_itr_jg]
        .TCMS.HLSwitchStatus;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.MarkerAndTailLight =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.MarkerAndTailLight;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.FlasherLightStatus =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.TCMS_FL_Status;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.CallOnLightStatus =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.TCMS_CallOn_Status;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.UTOOrRMLight = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.UTOOrRMLight;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.PADPBStatus =
        BEML_EMU_P.CoreSubsys_gf.Constant3_Value.PADPBStatus;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.PADRStatus = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.PADRStatus;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.PowerONPBPressed =
        (BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.PowerONPBPressed != 0.0);
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.PowerOFFPBPressed =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.PowerOFFPBPressed;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.TPOR_ON = (BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.TPOR_ON != 0.0);
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.TSDR_ON = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.TSDR_ON;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.LeftDoorOpenCmdInLimpHome =
        BEML_EMU_P.CoreSubsys_gf.Constant3_Value.LeftDoorOpenCmdInLimpHome;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.RightDoorOpenCmdInLimpHome =
        BEML_EMU_P.CoreSubsys_gf.Constant3_Value.RightDoorOpenCmdInLimpHome;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.LeftDoorEnable = BEML_EMU_B.UnitDelay5[ForEach_itr_jg]
        .TCMS.LeftDoorEnable;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.RightDoorEnable =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.RightDoorEnable;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.LeftHoldDoorClose =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.LeftHoldDoorClose;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.RightHoldDoorClose =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.RightHoldDoorClose;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.LimpHomeMode = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.LimpHomeMode;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.FwdRevTrainLineMismatchMessage =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.FwdRevTrainLineMismatchMessage;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.LowMRPressureFaultMessage =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.LowMRPressureFaultMessage;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.BCUPower = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.BCUPower;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.SaloonLightGroupStatus1 =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.SaloonLightGroupStatus1;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.SaloonLightGroupStatus2 =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.SaloonLightGroupStatus2;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.WFLStatus = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.WFLStatus;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.WFLOilLevelStatus =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.WFLOilLevelStatus;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.WFLPump1Status = BEML_EMU_B.UnitDelay5[ForEach_itr_jg]
        .TCMS.WFLPump1Status;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.WFLPump2Status = BEML_EMU_B.UnitDelay5[ForEach_itr_jg]
        .TCMS.WFLPump2Status;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.BatteryIsolationContactor =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.BatteryIsolationContactor;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.TrainControlContactor =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.TrainControlContactor;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.MainCompressor = BEML_EMU_B.UnitDelay5[ForEach_itr_jg]
        .TCMS.MainCompressor;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.AuxCompressor = BEML_EMU_B.UnitDelay5[ForEach_itr_jg]
        .TCMS.AuxCompressor;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.HVAC1Status = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.HVAC1Status;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.HVAC1SetPointTemperature =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.HVAC1SetPointTemperature;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.HVAC1IntTemperature =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.HVAC1IntTemperature;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.HVAC1ExtTemperature =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.HVAC1ExtTemperature;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.HVAC1Faulty = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.HVAC1Faulty;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.HVAC1Isolated = BEML_EMU_B.UnitDelay5[ForEach_itr_jg]
        .TCMS.HVAC1Isolated;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.HVAC2Status = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.HVAC2Status;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.HVAC2SetPointTemperature =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.HVAC2SetPointTemperature;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.HVAC2IntTemperature =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.HVAC2IntTemperature;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.HVAC2ExtTemperature =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.HVAC2ExtTemperature;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.HVAC2Faulty = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.HVAC2Faulty;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.HVAC2Isolated = BEML_EMU_B.UnitDelay5[ForEach_itr_jg]
        .TCMS.HVAC2Isolated;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.NoOfAPSFailed =
        BEML_EMU_P.CoreSubsys_gf.Constant3_Value.NoOfAPSFailed;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.PECStatus = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.PECStatus;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.EBbyNonCabEnabled =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.EBbyNonCabEnabled;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.EBbyMC = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.EBbyMC;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.EBbyBrakeLoop = BEML_EMU_B.UnitDelay5[ForEach_itr_jg]
        .TCMS.EBbyBrakeLoop;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.EBbyDeadMan = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.EBbyDeadMan;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.NoLineVoltage = BEML_EMU_B.UnitDelay5[ForEach_itr_jg]
        .TCMS.NoLineVoltage;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.D1Power = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.D1Power;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.EBApplied = rtb_AND_p;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.EBbyCC = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.EBbyCC;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.EBdueToATCZeroSpeed =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.EBdueToATCZeroSpeed;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.ADDCOSStatus = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.ADDCOSStatus;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.ORDCOSStatus = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.ORDCOSStatus;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.MRIsolation = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.MRIsolation;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.MCBPAGroupStatus =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.MCBPAGroup;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.MCB110VDCGroup = BEML_EMU_B.UnitDelay5[ForEach_itr_jg]
        .TCMS.MCB110VDCGroup;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.MCBLightGroup = BEML_EMU_B.UnitDelay5[ForEach_itr_jg]
        .TCMS.MCBLightGroup;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.MCBLightSaloonGroup =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.MCBLightSaloonGroup;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.MCBDoorGroup = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.MCBDoorGroup;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.MCBBrakeGroup = BEML_EMU_B.UnitDelay5[ForEach_itr_jg]
        .TCMS.MCBBrakeGroup;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.MCBAPSGroup = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.MCBAPSGroup;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.MCBTCMSGroup = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.MCBTCMSGroup;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.MCBSignallingGroup =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.MCBSignallingGroup;
      for (i = 0; i < 7; i++) {
        BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
          .ElectricalSignals.HVACFaults[i] =
          BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.HVACFaults[i];
      }

      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.WFLFault = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.WFLFailure;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.CECBTripped = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.CECBTripped;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.UCCBTripped = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.UCCBTripped;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.PANCBTripped = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.PANCBTripped;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.ELCB1Tripped = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.ELCB1Tripped;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.ELCB2Tripped = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.ELCB2Tripped;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.ILCB1Tripped = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.ILCB1Tripped;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.ILCB2Tripped = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.ILCB2Tripped;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.APSCBTripped = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.APSCBTripped;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.FDUFailure = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.FDUFailure;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.InternalFireAlarmTLActive =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.InternalFireAlarmTLActive;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.SmokeAlarmCABArea =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.SmokeAlarmCABArea;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.HeatAlarmEDB = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.HeatAlarmEDB;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.FDUStatus = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.FDUStatus;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.SFARStatus = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.SFARStatus;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.UFARStatus = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.UFARStatus;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.BUVDR_Active = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.BUVDR_Active;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.CMCActivationFault =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.CMCActivationFault;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.CMCDeactivationFault =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.CMCDeactivationFault;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.HMIPower = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.HMIPower;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.ReverseMotionInForwardCommandMessage =
        BEML_EMU_P.CoreSubsys_gf.Constant3_Value.ReverseMotionInForwardCommandMessage;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.ParkBrakeApplyCommand =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        Pneumatics.ParkBrakeApplicationValve;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.ParkBrakeReleaseCommand =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].Pneumatics.ParkBrakeRelease;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.UW_VCB = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.UW_VCB;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.PantoDownPBCmd = BEML_EMU_B.UnitDelay5[ForEach_itr_jg]
        .TCMS.PantoDownPBCmd;
      for (i = 0; i < 8; i++) {
        BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
          .ElectricalSignals.DCUPower[i] = BEML_EMU_B.UnitDelay5[ForEach_itr_jg]
          .Doors.DCUPower[i];
      }

      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.VCBTripByCI = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.VCBTripByCI;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.CIIsolated = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.CIIsolated;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.BCG1Fault = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.BCG1Fault;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.BCG2Fault = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.BCG2Fault;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.BCG1Isolated = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.BCG1Isolated;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.BCG2Isolated = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.BCG2Isolated;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.BCG1IsolationFailed =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.BCG1IsolationFailed;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.EBbyPB = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.EBbyPB;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.VCBTripByAPS = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.VCBTripByAPS;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.VCBIsolated = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.VCBIsolated;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.MCDR = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.MCDR;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.MCDRFaulty = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.MCDRFaulty;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.ObstacleDetected =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.ObstacleDetected;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.ODDFailure = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.ODDFailure;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.MCBHVACGroupTripped =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.MCBHVACGroupTripped;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.Key_Switch_Status =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.Key_Switch_Status;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.VCBI_ACOvercurrent =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.VCBI_ACOvercurrent;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.VCBI_KAKContactorCI =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.VCBI_KAKContactorCI;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.EmergencyDoorNotOpenStatus =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.EmergencyDoorNotOpenStatus;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.DoorProvenLoopOK =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.DoorProvenLoopOK;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.BrakeLoopCBTripped =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.BrakeLoopCBTripped;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.DeadmanBypassStatus =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.DeadmanBypassStatus;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.BLCOSwitchStatus =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].TCMS.BLCOSwitchStatus;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.NoOfEPICCutout =
        BEML_EMU_P.CoreSubsys_gf.Constant3_Value.NoOfEPICCutout;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.WFLIsolated = BEML_EMU_B.UnitDelay5[ForEach_itr_jg].
        TCMS.WFLIsolated;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.RemoteMagnetValve1 =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].Pneumatics.RemoteMagnetValve1;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .ElectricalSignals.RemoteMagnetValve2 =
        BEML_EMU_B.UnitDelay5[ForEach_itr_jg].Pneumatics.RemoteMagnetValve2;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .PantographSystem.PantographPosition = rtb_UnitDelay2[ForEach_itr_jg].
        PantographPosition;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .PantographSystem.PantoUpStatus = rtb_UnitDelay2[ForEach_itr_jg].
        PantoUpStatus;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .PantographSystem.PantoDownStatus = rtb_UnitDelay2[ForEach_itr_jg].
        PantoDownStatus;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .PantographSystem.PantoIsolatedStatus = rtb_UnitDelay2[ForEach_itr_jg].
        PantoIsolatedStatus;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .PantographSystem.PantoRising = rtb_UnitDelay2[ForEach_itr_jg].
        PantoRising;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .PantographSystem.PantoLowering = rtb_UnitDelay2[ForEach_itr_jg].
        PantoLowering;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .PantographSystem.PantographFault = rtb_UnitDelay2[ForEach_itr_jg].
        PantographFault;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .PantographSystem.PantoADDFaultMessage = rtb_UnitDelay2[ForEach_itr_jg].
        TCMS.Messages.PantoADDFaultMessage;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .PantographSystem.PantoORDFaultMessage = rtb_UnitDelay2[ForEach_itr_jg].
        TCMS.Messages.PantoORDFaultMessage;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .PantographSystem.PantoRaiseFailureMessage =
        rtb_UnitDelay2[ForEach_itr_jg].TCMS.Messages.PantoRaiseFailureMessage;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .PantographSystem.BrakeLoopADDIntervention =
        BEML_EMU_P.CoreSubsys_gf.Constant3_Value_n.BrakeLoopADDIntervention;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .TractionSystem.TCU_KStatus = (BEML_EMU_B.UnitDelay4[ForEach_itr_jg].
        TractionControl.TCMS.Trafo_TCU.TCU_KStatus != 0.0);
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .TractionSystem.TCU_AKStatus = (BEML_EMU_B.UnitDelay4[ForEach_itr_jg].
        TractionControl.TCMS.Trafo_TCU.TCU_AKStatus != 0.0);
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .TractionSystem.FilterVoltage = BEML_EMU_B.UnitDelay4[ForEach_itr_jg].
        TractionControl.TCMS.Trafo_TCU.FilterVoltage;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .TractionSystem.VehicleDerailed = BEML_EMU_B.UnitDelay4[ForEach_itr_jg].
        TractionControl.TCMS.VehicleDerailed;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .TractionSystem.TractionForce =
        rtb_ImpAsg_InsertedFor_signal1_at_inport_0[0];
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .CouplingSystem.UnitConnection =
        BEML_EMU_Y.CouplingOutput[ForEach_itr_jg].ElectricalUnitConnection;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .CouplingSystem.TrainConnection =
        BEML_EMU_Y.CouplingOutput[ForEach_itr_jg].ElectricalTrainConnection;
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .TractionSystem.Bogie[0] = rtb_ImpAsg_InsertedFor_TCMSBogie_at_inport_0
        [0];
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .CouplingSystem.TrainsCoupled[0] =
        rtb_ImpAsg_InsertedFor_MechanicalCouplerState_at_inport_0[0];
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .CouplingSystem.RescueModeCondition[0] =
        rtb_ImpAsg_InsertedFor_RescueModeCondition_at_inport_0[0];
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .TractionSystem.Bogie[1] = rtb_ImpAsg_InsertedFor_TCMSBogie_at_inport_0
        [1];
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .CouplingSystem.TrainsCoupled[1] =
        rtb_ImpAsg_InsertedFor_MechanicalCouplerState_at_inport_0[1];
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .CouplingSystem.RescueModeCondition[1] =
        rtb_ImpAsg_InsertedFor_RescueModeCondition_at_inport_0[1];
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[ForEach_itr_jg]
        .DynamicsSystem.VehicleSpeed = BEML_EMU_B.UnitDelay_j[ForEach_itr_jg].
        Inertia.Velocity;

      /* ForEachSliceAssignment generated from: '<S360>/TCMSFaults' */
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSFaults_at_inport_0[ForEach_itr_jg] =
        BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_jg]
        .TCMSFaults;
    }

    /* End of Outputs for SubSystem: '<S358>/VehicleInputAdapter' */
    /* End of Outputs for SubSystem: '<S13>/TCMSInputAdapter' */

    /* ModelReference: '<S13>/TCMSSystem' incorporates:
     *  Outport: '<Root>/TCMSOutput'
     */
    TCMSSystem(&BEML_EMU_B.ImpAsg_InsertedFor_CommonVehicleConfig_at_inport_0_l
               [0],
               &BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleConfig_at_inport_0[0],
               &BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleInput_at_inport_0[0],
               &BEML_EMU_B.ImpAsg_InsertedFor_TCMSFaults_at_inport_0[0],
               &BEML_EMU_B.ImpAsg_InsertedFor_VehicleLevelFaults_at_inport_0[0],
               &BEML_EMU_Y.TCMSOutput[0],
               &(BEML_EMU_DW.TCMSSystem_InstanceData.rtb),
               &(BEML_EMU_DW.TCMSSystem_InstanceData.rtdw),
               &BEML_EMU_P.TCMSSystem_Prm_TCMSSystem);
  }

  if ((&BEML_EMU_M)->Timing.TaskCounters.TID[1] == 0) {
    /* Outputs for Atomic SubSystem: '<S12>/PneumaticsInputAdapter' */
    /* Step: '<S347>/Step' */
    if (((((&BEML_EMU_M)->Timing.clockTick1+(&BEML_EMU_M)->Timing.clockTickH1*
           4294967296.0)) * 0.01) < BEML_EMU_P.Step_Time_e) {
      rtb_Switch4_f = BEML_EMU_P.Step_Y0_c;
    } else {
      rtb_Switch4_f = BEML_EMU_P.Step_YFinal_f;
    }

    /* End of Step: '<S347>/Step' */

    /* Outputs for Enabled SubSystem: '<S347>/ExtractConfig' incorporates:
     *  EnablePort: '<S348>/Enable'
     */
    if (rtb_Switch4_f > 0.0) {
      /* Outputs for Iterator SubSystem: '<S348>/ExtractConfig' incorporates:
       *  ForEach: '<S350>/For Each'
       */
      for (ForEach_itr_kg = 0; ForEach_itr_kg < 8; ForEach_itr_kg++) {
        /* ForEachSliceAssignment generated from: '<S350>/PneumaticsVehicleConfig' incorporates:
         *  Outport: '<Root>/ProcessedVehConf'
         */
        BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsVehicleConfig_at_inport_0[ForEach_itr_kg]
          = BEML_EMU_Y.ProcessedVehConf[ForEach_itr_kg].Pneumatics;

        /* ForEachSliceAssignment generated from: '<S350>/LocationVehicleConfig' incorporates:
         *  Outport: '<Root>/ProcessedVehConf'
         */
        BEML_EMU_B.ImpAsg_InsertedFor_LocationVehicleConfig_at_inport_0[ForEach_itr_kg]
          = BEML_EMU_Y.ProcessedVehConf[ForEach_itr_kg].Location;

        /* ForEachSliceAssignment generated from: '<S350>/CommonVehicleConfig' incorporates:
         *  Outport: '<Root>/ProcessedVehConf'
         */
        BEML_EMU_B.ImpAsg_InsertedFor_CommonVehicleConfig_at_inport_0_b[ForEach_itr_kg]
          = BEML_EMU_Y.ProcessedVehConf[ForEach_itr_kg].Common;
      }

      /* End of Outputs for SubSystem: '<S348>/ExtractConfig' */
    }

    /* End of Outputs for SubSystem: '<S347>/ExtractConfig' */

    /* Outputs for Iterator SubSystem: '<S347>/VehicleInputAdapter' incorporates:
     *  ForEach: '<S349>/For Each'
     */
    for (ForEach_itr_jn = 0; ForEach_itr_jn < 8; ForEach_itr_jn++) {
      /* Outputs for Iterator SubSystem: '<S351>/For Each Subsystem' incorporates:
       *  ForEach: '<S354>/For Each'
       */
      for (ForEach_itr_pt = 0; ForEach_itr_pt < 2; ForEach_itr_pt++) {
        /* ForEachSliceAssignment generated from: '<S354>/Out1' incorporates:
         *  Outport: '<Root>/TCMSOutput'
         */
        rtb_ImpAsg_InsertedFor_Out1_at_inport_0_f[ForEach_itr_pt].
          EPBrakingDemand = BEML_EMU_Y.TCMSOutput[ForEach_itr_jn].
          Control.TractionSBraking.Bogie[ForEach_itr_pt].EPBrakingDemand;
      }

      /* End of Outputs for SubSystem: '<S351>/For Each Subsystem' */

      /* Gain: '<S352>/Gain' incorporates:
       *  ForEachSliceAssignment generated from: '<S349>/PneumaticsVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsVehicleInput_at_inport_0[ForEach_itr_jn]
        .PhysicalSignals.BogieSupportedMasses[0] =
        BEML_EMU_P.CoreSubsys_i2v.Gain_Gain *
        BEML_EMU_B.UnitDelay_j[ForEach_itr_jn].Inertia.Mass;

      /* Gain: '<S352>/Gain1' incorporates:
       *  ForEachSliceAssignment generated from: '<S349>/PneumaticsVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsVehicleInput_at_inport_0[ForEach_itr_jn]
        .PhysicalSignals.BogieSupportedMasses[1] =
        BEML_EMU_P.CoreSubsys_i2v.Gain1_Gain *
        BEML_EMU_B.UnitDelay_j[ForEach_itr_jn].Inertia.Mass;

      /* Outputs for Iterator SubSystem: '<S352>/Subsystem' incorporates:
       *  ForEach: '<S355>/For Each'
       */
      for (ForEach_itr_ad = 0; ForEach_itr_ad < 2; ForEach_itr_ad++) {
        /* ForEachSliceAssignment generated from: '<S355>/<PneumaticallyCoupled>' incorporates:
         *  Outport: '<Root>/CouplingOutput'
         */
        rtb_ImpAsg_InsertedFor_PneumaticallyCoupled_at_inport_0[ForEach_itr_ad] =
          BEML_EMU_Y.CouplingOutput[ForEach_itr_jn]
          .Couplers.Coupler[ForEach_itr_ad].
          CouplingInterface.PneumaticallyCoupled;
      }

      /* End of Outputs for SubSystem: '<S352>/Subsystem' */

      /* MATLAB Function: '<S356>/Orientation Swap' incorporates:
       *  DataTypeConversion: '<S353>/Data Type Conversion'
       *  DataTypeConversion: '<S353>/Data Type Conversion1'
       *  ForEachSliceSelector generated from: '<S349>/CommonVehicleConfig'
       *  Logic: '<S353>/NOT'
       *  Logic: '<S353>/NOT1'
       */
      if (BEML_EMU_B.ImpAsg_InsertedFor_CommonVehicleConfig_at_inport_0_b[ForEach_itr_jn]
          .Orientation > 1.5) {
        rtb_Product_cv =
          !BEML_EMU_B.ImpAsg_InsertedFor_LocationVehicleConfig_at_inport_0[ForEach_itr_jn]
          .IsLastVehicle;
        diff =
          !BEML_EMU_B.ImpAsg_InsertedFor_LocationVehicleConfig_at_inport_0[ForEach_itr_jn]
          .IsFirstVehicle;
      } else {
        rtb_Product_cv =
          !BEML_EMU_B.ImpAsg_InsertedFor_LocationVehicleConfig_at_inport_0[ForEach_itr_jn]
          .IsFirstVehicle;
        diff =
          !BEML_EMU_B.ImpAsg_InsertedFor_LocationVehicleConfig_at_inport_0[ForEach_itr_jn]
          .IsLastVehicle;
      }

      /* End of MATLAB Function: '<S356>/Orientation Swap' */

      /* ForEachSliceAssignment generated from: '<S349>/PneumaticsFaults' */
      BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsFaults_at_inport_0[ForEach_itr_jn]
        =
        BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_jn]
        .PneumaticsFaults;

      /* ForEachSliceAssignment generated from: '<S349>/Overrides' incorporates:
       *  BusAssignment: '<S349>/Bus Assignment1'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_Overrides_at_inport_0_im[ForEach_itr_jn].
        Reset = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_Overrides_at_inport_0_im[ForEach_itr_jn].
        StartupState = 0.0;

      /* ForEachSliceAssignment generated from: '<S349>/PneumaticsVehicleInput' incorporates:
       *  BusAssignment: '<S351>/Bus Assignment3'
       *  BusAssignment: '<S352>/Bus Assignment3'
       *  Constant: '<S351>/Constant3'
       *  Constant: '<S353>/Constant1'
       *  Constant: '<S353>/Constant15'
       *  Constant: '<S353>/Constant16'
       *  Constant: '<S353>/Constant2'
       *  Constant: '<S353>/Constant22'
       *  Constant: '<S353>/Constant23'
       *  Constant: '<S353>/Constant4'
       *  Constant: '<S353>/Constant5'
       *  Constant: '<S353>/Constant6'
       *  Constant: '<S353>/Constant7'
       *  DataTypeConversion: '<S351>/Data Type Conversion'
       *  DataTypeConversion: '<S351>/Data Type Conversion1'
       *  DataTypeConversion: '<S351>/Data Type Conversion2'
       *  DataTypeConversion: '<S351>/Data Type Conversion3'
       *  DataTypeConversion: '<S351>/Data Type Conversion4'
       *  DataTypeConversion: '<S351>/Data Type Conversion5'
       *  DataTypeConversion: '<S351>/Data Type Conversion6'
       *  DataTypeConversion: '<S351>/Data Type Conversion7'
       *  DataTypeConversion: '<S353>/Data Type Conversion2'
       *  DataTypeConversion: '<S353>/Data Type Conversion3'
       *  DataTypeConversion: '<S353>/Data Type Conversion4'
       *  DataTypeConversion: '<S353>/Data Type Conversion5'
       *  Logic: '<S353>/Logical Operator'
       *  Logic: '<S353>/Logical Operator1'
       *  Logic: '<S353>/Logical Operator2'
       *  Logic: '<S353>/Logical Operator3'
       *  Outport: '<Root>/ElectricalOutput'
       *  Outport: '<Root>/TCMSOutput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsVehicleInput_at_inport_0[ForEach_itr_jn]
        .ElectricalSignals.NoEmergencyBrakeValve =
        BEML_EMU_Y.ElectricalOutput[ForEach_itr_jn].Braking.NoEB;
      BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsVehicleInput_at_inport_0[ForEach_itr_jn]
        .ElectricalSignals.SandingValve =
        BEML_EMU_P.CoreSubsys_i2v.Constant3_Value_d.SandingValve;
      BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsVehicleInput_at_inport_0[ForEach_itr_jn]
        .ElectricalSignals.ParkingBrakeApplyCmd =
        BEML_EMU_Y.ElectricalOutput[ForEach_itr_jn].
        Pneumatics.ParkBrakeApplicationValve;
      BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsVehicleInput_at_inport_0[ForEach_itr_jn]
        .ElectricalSignals.ParkingBrakeReleaseCmd =
        BEML_EMU_Y.ElectricalOutput[ForEach_itr_jn].Pneumatics.ParkBrakeRelease;
      BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsVehicleInput_at_inport_0[ForEach_itr_jn]
        .ElectricalSignals.MainCompressorOn =
        BEML_EMU_Y.ElectricalOutput[ForEach_itr_jn].
        Pneumatics.MainCompressorMotorPower;
      BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsVehicleInput_at_inport_0[ForEach_itr_jn]
        .ElectricalSignals.AuxiliaryCompressorOn =
        BEML_EMU_Y.ElectricalOutput[ForEach_itr_jn].
        Pneumatics.AuxCompressorMotorPower;
      BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsVehicleInput_at_inport_0[ForEach_itr_jn]
        .ElectricalSignals.RemoteMagnetValve1 =
        BEML_EMU_Y.ElectricalOutput[ForEach_itr_jn].
        Pneumatics.RemoteMagnetValve1;
      BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsVehicleInput_at_inport_0[ForEach_itr_jn]
        .ElectricalSignals.RemoteMagnetValve2 =
        BEML_EMU_Y.ElectricalOutput[ForEach_itr_jn].
        Pneumatics.RemoteMagnetValve2;
      BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsVehicleInput_at_inport_0[ForEach_itr_jn]
        .ElectricalSignals.PantographRaiseValve =
        BEML_EMU_Y.ElectricalOutput[ForEach_itr_jn].
        Pneumatics.PantographRaiseValve;
      BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsVehicleInput_at_inport_0[ForEach_itr_jn]
        .ElectricalSignals.PantographEmergencyValve =
        BEML_EMU_P.CoreSubsys_i2v.Constant3_Value_d.PantographEmergencyValve;
      BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsVehicleInput_at_inport_0[ForEach_itr_jn]
        .ElectricalSignals.HornLowControl =
        BEML_EMU_Y.ElectricalOutput[ForEach_itr_jn].Pneumatics.HornLow;
      BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsVehicleInput_at_inport_0[ForEach_itr_jn]
        .ElectricalSignals.HornHighControl =
        BEML_EMU_Y.ElectricalOutput[ForEach_itr_jn].Pneumatics.HornHigh;
      BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsVehicleInput_at_inport_0[ForEach_itr_jn]
        .ElectricalSignals.RemoteHornIsolate =
        BEML_EMU_Y.ElectricalOutput[ForEach_itr_jn].Pneumatics.RemoteHornIsolate;
      BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsVehicleInput_at_inport_0[ForEach_itr_jn]
        .ElectricalSignals.VCBCloseCmd =
        BEML_EMU_Y.ElectricalOutput[ForEach_itr_jn].Pneumatics.VCBCloseCmd;
      BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsVehicleInput_at_inport_0[ForEach_itr_jn]
        .ElectricalSignals.TCMSBrakingDemand =
        BEML_EMU_Y.TCMSOutput[ForEach_itr_jn].
        Control.PneumaticSystem.BrakingDemand;
      BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsVehicleInput_at_inport_0[ForEach_itr_jn]
        .ElectricalSignals.BogieControl[0] =
        rtb_ImpAsg_InsertedFor_Out1_at_inport_0_f[0];
      BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsVehicleInput_at_inport_0[ForEach_itr_jn]
        .PhysicalSignals.PneumaticallyCoupled[0] =
        rtb_ImpAsg_InsertedFor_PneumaticallyCoupled_at_inport_0[0];
      BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsVehicleInput_at_inport_0[ForEach_itr_jn]
        .ElectricalSignals.BogieControl[1] =
        rtb_ImpAsg_InsertedFor_Out1_at_inport_0_f[1];
      BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsVehicleInput_at_inport_0[ForEach_itr_jn]
        .PhysicalSignals.PneumaticallyCoupled[1] =
        rtb_ImpAsg_InsertedFor_PneumaticallyCoupled_at_inport_0[1];
      BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsVehicleInput_at_inport_0[ForEach_itr_jn]
        .InputControlStates.HornLowIsolationCock =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jn]
        .Horn1IsolationCock;
      BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsVehicleInput_at_inport_0[ForEach_itr_jn]
        .InputControlStates.HornHighIsolationCock =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jn]
        .Horn2IsolationCock;
      BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsVehicleInput_at_inport_0[ForEach_itr_jn]
        .InputControlStates.BrakeSupplyReservoirIsolationCock =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jn]
        .SR;
      BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsVehicleInput_at_inport_0[ForEach_itr_jn]
        .InputControlStates.BrakeSupplyReservoirDrainCock =
        BEML_EMU_P.CoreSubsys_i2v.Constant1_Value_c;
      BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsVehicleInput_at_inport_0[ForEach_itr_jn]
        .InputControlStates.InterCarIsolationCockEnd1 =
        ((BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jn]
          .MREPIsolationCockEnd1 != 0.0) && (rtb_Product_cv != 0.0));
      BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsVehicleInput_at_inport_0[ForEach_itr_jn]
        .InputControlStates.InterCarIsolationCockEnd2 =
        ((BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jn]
          .MREPIsolationCockEnd2 != 0.0) && (diff != 0.0));
      BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsVehicleInput_at_inport_0[ForEach_itr_jn]
        .InputControlStates.MainReservoirIsolationCock =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jn]
        .MRIsolationCock;
      BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsVehicleInput_at_inport_0[ForEach_itr_jn]
        .InputControlStates.MainReservoirDrainCock =
        BEML_EMU_P.CoreSubsys_i2v.Constant2_Value;
      BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsVehicleInput_at_inport_0[ForEach_itr_jn]
        .InputControlStates.MainAirSupplyIsolationCock =
        BEML_EMU_P.CoreSubsys_i2v.Constant7_Value;
      BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsVehicleInput_at_inport_0[ForEach_itr_jn]
        .InputControlStates.AirSuspensionSystemIsolationCockBogie1 =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jn]
        .ASCOEnd1;
      BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsVehicleInput_at_inport_0[ForEach_itr_jn]
        .InputControlStates.AirSuspensionSystemIsolationCockBogie2 =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jn]
        .ASCOEnd2;
      BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsVehicleInput_at_inport_0[ForEach_itr_jn]
        .InputControlStates.AirSuspensionSystemDrainCockBogie1 =
        BEML_EMU_P.CoreSubsys_i2v.Constant4_Value;
      BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsVehicleInput_at_inport_0[ForEach_itr_jn]
        .InputControlStates.AirSuspensionSystemDrainCockBogie2 =
        BEML_EMU_P.CoreSubsys_i2v.Constant5_Value;
      BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsVehicleInput_at_inport_0[ForEach_itr_jn]
        .InputControlStates.AuxiliaryCompressorIsolationCock =
        BEML_EMU_P.CoreSubsys_i2v.Constant16_Value;
      BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsVehicleInput_at_inport_0[ForEach_itr_jn]
        .InputControlStates.AuxiliaryReservoirIsolationCock =
        BEML_EMU_P.CoreSubsys_i2v.Constant15_Value;
      BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsVehicleInput_at_inport_0[ForEach_itr_jn]
        .InputControlStates.AuxiliaryReservoirDrainCock =
        BEML_EMU_P.CoreSubsys_i2v.Constant6_Value;
      BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsVehicleInput_at_inport_0[ForEach_itr_jn]
        .InputControlStates.PantographAirSupplyIsolationCock =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jn]
        .PantographIsolationCock;
      BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsVehicleInput_at_inport_0[ForEach_itr_jn]
        .InputControlStates.BrakeCylinderIsolationCockBogie1 =
        ((BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jn]
          .BIC1Inside != 0.0) &&
         (BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jn]
          .BIC1Outside != 0.0));
      BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsVehicleInput_at_inport_0[ForEach_itr_jn]
        .InputControlStates.BrakeCylinderIsolationCockBogie2 =
        ((BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jn]
          .BIC2Inside != 0.0) &&
         (BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jn]
          .BIC2Outside != 0.0));
      BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsVehicleInput_at_inport_0[ForEach_itr_jn]
        .InputControlStates.ParkingBrakeIsolationCockBogie1 =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jn]
        .ParkBrakeIsolationCockBogie1;
      BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsVehicleInput_at_inport_0[ForEach_itr_jn]
        .InputControlStates.ParkingBrakeIsolationCockBogie2 =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jn]
        .ParkBrakeIsolationCockBogie2;
      BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsVehicleInput_at_inport_0[ForEach_itr_jn]
        .InputControlStates.ParkingBrakeManualReleaseBogie1Handle1 =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jn]
        .ParkingBrakeManualReleaseBogie1Handle1;
      BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsVehicleInput_at_inport_0[ForEach_itr_jn]
        .InputControlStates.ParkingBrakeManualReleaseBogie1Handle2 =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jn]
        .ParkingBrakeManualReleaseBogie1Handle2;
      BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsVehicleInput_at_inport_0[ForEach_itr_jn]
        .InputControlStates.ParkingBrakeManualReleaseBogie2Handle1 =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jn]
        .ParkingBrakeManualReleaseBogie2Handle1;
      BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsVehicleInput_at_inport_0[ForEach_itr_jn]
        .InputControlStates.ParkingBrakeManualReleaseBogie2Handle2 =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jn]
        .ParkingBrakeManualReleaseBogie2Handle2;
      BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsVehicleInput_at_inport_0[ForEach_itr_jn]
        .InputControlStates.SandingSystemIsolationCockBogie1 =
        BEML_EMU_P.CoreSubsys_i2v.Constant22_Value;
      BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsVehicleInput_at_inport_0[ForEach_itr_jn]
        .InputControlStates.SandingSystemIsolationCockBogie2 =
        BEML_EMU_P.CoreSubsys_i2v.Constant23_Value;
      BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsVehicleInput_at_inport_0[ForEach_itr_jn]
        .InputControlStates.UncouplingIsolationCock =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jn]
        .UncouplingCock;
      BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsVehicleInput_at_inport_0[ForEach_itr_jn]
        .InputControlStates.AirSuspensionReservoirIsolationCock =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jn]
        .ASIsolationCock;
      BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsVehicleInput_at_inport_0[ForEach_itr_jn]
        .InputControlStates.EPIsolationCock =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jn]
        .EPIC;
      BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsVehicleInput_at_inport_0[ForEach_itr_jn]
        .InputControlStates.VCBIsolationCock =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jn]
        .VCBIsolationCock;
      BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsVehicleInput_at_inport_0[ForEach_itr_jn]
        .InputControlStates.ORDPlunger =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_jn]
        .ORDPlunger;
    }

    /* End of Outputs for SubSystem: '<S347>/VehicleInputAdapter' */
    /* End of Outputs for SubSystem: '<S12>/PneumaticsInputAdapter' */

    /* ModelReference: '<S12>/PneumaticsSystem' incorporates:
     *  Outport: '<Root>/PneumaticsVehicleOut'
     */
    PneumaticsSystem
      (&BEML_EMU_B.ImpAsg_InsertedFor_CommonVehicleConfig_at_inport_0_b[0],
       &BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsVehicleConfig_at_inport_0[0],
       &BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsVehicleInput_at_inport_0[0],
       &BEML_EMU_B.ImpAsg_InsertedFor_Overrides_at_inport_0_im[0],
       &BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsFaults_at_inport_0[0],
       &BEML_EMU_Y.PneumaticsVehicleOut[0],
       &(BEML_EMU_DW.PneumaticsSystem_InstanceData.rtb),
       &(BEML_EMU_DW.PneumaticsSystem_InstanceData.rtdw),
       &BEML_EMU_P.PneumaticsSystem_Prm_PneumaticsSystem);
  }

  if ((&BEML_EMU_M)->Timing.TaskCounters.TID[2] == 0) {
    /* Outputs for Atomic SubSystem: '<S8>/DoorsInputAdapter' */
    /* Outputs for Atomic SubSystem: '<S11>/PantographInputAdapter' */
    /* Step: '<S337>/Step' incorporates:
     *  Step: '<S148>/Step'
     */
    rtb_Switch4_f = ((((&BEML_EMU_M)->Timing.clockTick2+(&BEML_EMU_M)
                       ->Timing.clockTickH2* 4294967296.0)) * 0.05);

    /* End of Outputs for SubSystem: '<S8>/DoorsInputAdapter' */
    if (rtb_Switch4_f < BEML_EMU_P.Step_Time_gl) {
      rtb_Product_cv = BEML_EMU_P.Step_Y0_o;
    } else {
      rtb_Product_cv = BEML_EMU_P.Step_YFinal_e;
    }

    /* End of Step: '<S337>/Step' */

    /* Outputs for Enabled SubSystem: '<S337>/ExtractConfig' incorporates:
     *  EnablePort: '<S338>/Enable'
     */
    if (rtb_Product_cv > 0.0) {
      /* Outputs for Iterator SubSystem: '<S338>/ExtractConfig' incorporates:
       *  ForEach: '<S340>/For Each'
       */
      for (ForEach_itr_o1 = 0; ForEach_itr_o1 < 8; ForEach_itr_o1++) {
        /* ForEachSliceAssignment generated from: '<S340>/PantographVehicleConfig' incorporates:
         *  Outport: '<Root>/ProcessedVehConf'
         */
        BEML_EMU_B.ImpAsg_InsertedFor_PantographVehicleConfig_at_inport_0[ForEach_itr_o1]
          = BEML_EMU_Y.ProcessedVehConf[ForEach_itr_o1].Pantograph;

        /* ForEachSliceAssignment generated from: '<S340>/CommonVehicleConfig' incorporates:
         *  Outport: '<Root>/ProcessedVehConf'
         */
        BEML_EMU_B.ImpAsg_InsertedFor_CommonVehicleConfig_at_inport_0_a[ForEach_itr_o1]
          = BEML_EMU_Y.ProcessedVehConf[ForEach_itr_o1].Common;
      }

      /* End of Outputs for SubSystem: '<S338>/ExtractConfig' */
    }

    /* End of Outputs for SubSystem: '<S337>/ExtractConfig' */

    /* Outputs for Iterator SubSystem: '<S337>/VehicleInputAdapter' incorporates:
     *  ForEach: '<S339>/For Each'
     */
    for (ForEach_itr_g = 0; ForEach_itr_g < 8; ForEach_itr_g++) {
      /* ForEachSliceAssignment generated from: '<S339>/PantographFaults' */
      rtb_ImpAsg_InsertedFor_PantographFaults_at_inport_0[ForEach_itr_g] =
        BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_g]
        .PantographFaults;

      /* ForEachSliceAssignment generated from: '<S339>/Overrides' incorporates:
       *  DataTypeConversion: '<S345>/Data Type Conversion'
       */
      rtb_ImpAsg_InsertedFor_Overrides_at_inport_0_j[ForEach_itr_g].
        PantoUPOverride = (BEML_EMU_B.BusAssignment.Overrides.AutoPowerOn != 0.0);

      /* ForEachSliceAssignment generated from: '<S339>/PantographVehicleInput' incorporates:
       *  BusAssignment: '<S341>/Bus Assignment3'
       *  Constant: '<S341>/Constant3'
       *  Constant: '<S343>/Constant'
       *  Constant: '<S343>/Constant1'
       *  DataTypeConversion: '<S341>/Data Type Conversion'
       *  DataTypeConversion: '<S346>/Data Type Conversion'
       *  Outport: '<Root>/ElectricalOutput'
       *  Outport: '<Root>/PneumaticsVehicleOut'
       */
      rtb_ImpAsg_InsertedFor_PantographVehicleInput_at_inport_0[ForEach_itr_g].
        Control.PantoUpCommand = BEML_EMU_Y.ElectricalOutput[ForEach_itr_g].
        Pantograph.PantoUpCommand;
      rtb_ImpAsg_InsertedFor_PantographVehicleInput_at_inport_0[ForEach_itr_g].
        Control.PantoDownCommand = BEML_EMU_Y.ElectricalOutput[ForEach_itr_g].
        Pantograph.PantoDownCommand;
      rtb_ImpAsg_InsertedFor_PantographVehicleInput_at_inport_0[ForEach_itr_g].
        Control.PantoEmergencyDownCommand =
        BEML_EMU_P.CoreSubsys_ls2.Constant3_Value_m.PantoEmergencyDownCommand;
      rtb_ImpAsg_InsertedFor_PantographVehicleInput_at_inport_0[ForEach_itr_g].
        Control.PantoIsolationCommand =
        (BEML_EMU_Y.ElectricalOutput[ForEach_itr_g].TCMS.PantoIsolated != 0.0);
      rtb_ImpAsg_InsertedFor_PantographVehicleInput_at_inport_0[ForEach_itr_g].
        Electrical.PantoControlPower = BEML_EMU_Y.ElectricalOutput[ForEach_itr_g]
        .Pantograph.PantoControlPower;
      rtb_ImpAsg_InsertedFor_PantographVehicleInput_at_inport_0[ForEach_itr_g].
        Electrical.PantoMotorPower = BEML_EMU_Y.ElectricalOutput[ForEach_itr_g].
        Pantograph.PantoMotorPower;
      rtb_ImpAsg_InsertedFor_PantographVehicleInput_at_inport_0[ForEach_itr_g].
        Electrical.PantoADDFault = BEML_EMU_Y.ElectricalOutput[ForEach_itr_g].
        Pantograph.PantoADDFault;
      rtb_ImpAsg_InsertedFor_PantographVehicleInput_at_inport_0[ForEach_itr_g].
        Electrical.PantoORDFault = BEML_EMU_Y.ElectricalOutput[ForEach_itr_g].
        Pantograph.PantoORDFault;
      rtb_ImpAsg_InsertedFor_PantographVehicleInput_at_inport_0[ForEach_itr_g].
        Electrical.PantoRaiseFailure = BEML_EMU_Y.ElectricalOutput[ForEach_itr_g]
        .Pantograph.PantoRaiseFailure;
      rtb_ImpAsg_InsertedFor_PantographVehicleInput_at_inport_0[ForEach_itr_g].
        Electrical.PantoLoweringFailure =
        BEML_EMU_Y.ElectricalOutput[ForEach_itr_g].
        Pantograph.PantoLoweringFailure;
      rtb_ImpAsg_InsertedFor_PantographVehicleInput_at_inport_0[ForEach_itr_g].
        Pneumatics.PantoPneumaticSupply =
        (BEML_EMU_Y.PneumaticsVehicleOut[ForEach_itr_g].PressureSwitches.PS3 !=
         0.0);
      rtb_ImpAsg_InsertedFor_PantographVehicleInput_at_inport_0[ForEach_itr_g].
        Environment.LineVoltage = BEML_EMU_P.CoreSubsys_ls2.Constant_Value_g;
      rtb_ImpAsg_InsertedFor_PantographVehicleInput_at_inport_0[ForEach_itr_g].
        Environment.OverheadLinePresent =
        BEML_EMU_P.CoreSubsys_ls2.Constant1_Value_j;
      rtb_ImpAsg_InsertedFor_PantographVehicleInput_at_inport_0[ForEach_itr_g].
        Environment.NeutralSection =
        BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_g].
        Environment.NeutralSection;
    }

    /* End of Outputs for SubSystem: '<S337>/VehicleInputAdapter' */
    /* End of Outputs for SubSystem: '<S11>/PantographInputAdapter' */

    /* ModelReference: '<S11>/PantographSystem' incorporates:
     *  Outport: '<Root>/PantographVehicleOut'
     */
    PantographSystem
      (&BEML_EMU_B.ImpAsg_InsertedFor_CommonVehicleConfig_at_inport_0_a[0],
       &BEML_EMU_B.ImpAsg_InsertedFor_PantographVehicleConfig_at_inport_0[0],
       &rtb_ImpAsg_InsertedFor_PantographVehicleInput_at_inport_0[0],
       &rtb_ImpAsg_InsertedFor_Overrides_at_inport_0_j[0],
       &BEML_EMU_Y.PantographVehicleOut[0],
       &(BEML_EMU_DW.PantographSystem_InstanceData.rtb),
       &(BEML_EMU_DW.PantographSystem_InstanceData.rtdw),
       &BEML_EMU_P.PantographSystem_Prm_PantographSystem);

    /* Outputs for Atomic SubSystem: '<S8>/DoorsInputAdapter' */
    /* Step: '<S148>/Step' */
    if (rtb_Switch4_f < BEML_EMU_P.Step_Time_o) {
      rtb_Switch4_f = BEML_EMU_P.Step_Y0_j;
    } else {
      rtb_Switch4_f = BEML_EMU_P.Step_YFinal_l;
    }

    /* Outputs for Enabled SubSystem: '<S148>/ExtractConfig' incorporates:
     *  EnablePort: '<S149>/Enable'
     */
    if (rtb_Switch4_f > 0.0) {
      /* Outputs for Iterator SubSystem: '<S149>/ExtractConfig' incorporates:
       *  ForEach: '<S151>/For Each'
       */
      for (ForEach_itr_gr = 0; ForEach_itr_gr < 8; ForEach_itr_gr++) {
        /* ForEachSliceAssignment generated from: '<S151>/HasCab' incorporates:
         *  Outport: '<Root>/ProcessedVehConf'
         */
        BEML_EMU_B.ImpAsg_InsertedFor_HasCab_at_inport_0[ForEach_itr_gr] =
          BEML_EMU_Y.ProcessedVehConf[ForEach_itr_gr].Equipment.HasCab;

        /* ForEachSliceAssignment generated from: '<S151>/DoorsConfig' incorporates:
         *  Outport: '<Root>/ProcessedVehConf'
         */
        BEML_EMU_B.ImpAsg_InsertedFor_DoorsConfig_at_inport_0[ForEach_itr_gr] =
          BEML_EMU_Y.ProcessedVehConf[ForEach_itr_gr].Doors;

        /* ForEachSliceAssignment generated from: '<S151>/CommonVehicleConfig' incorporates:
         *  Outport: '<Root>/ProcessedVehConf'
         */
        BEML_EMU_B.ImpAsg_InsertedFor_CommonVehicleConfig_at_inport_0_ds[ForEach_itr_gr]
          = BEML_EMU_Y.ProcessedVehConf[ForEach_itr_gr].Common;
      }

      /* End of Outputs for SubSystem: '<S149>/ExtractConfig' */
    }

    /* End of Outputs for SubSystem: '<S148>/ExtractConfig' */

    /* Outputs for Iterator SubSystem: '<S148>/VehicleInputAdapter' incorporates:
     *  ForEach: '<S150>/For Each'
     */
    for (ForEach_itr_n = 0; ForEach_itr_n < 8; ForEach_itr_n++) {
      /* BusAssignment: '<S152>/DoorsInit' incorporates:
       *  Constant: '<S152>/Constant4'
       *  ForEachSliceSelector generated from: '<S150>/DoorsConfig'
       */
      rtb_ElectricalComputer_k = BEML_EMU_P.CoreSubsys_lb.Constant4_Value;
      rtb_ElectricalComputer_k.Config.NumberOfDoors =
        BEML_EMU_B.ImpAsg_InsertedFor_DoorsConfig_at_inport_0[ForEach_itr_n].
        NumberOfDoors;

      /* RelationalOperator: '<S229>/Compare' incorporates:
       *  Constant: '<S229>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_CollisionDetected =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.UnexpectedDoorOpeningDetectedByCC ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant_const);

      /* RelationalOperator: '<S230>/Compare' incorporates:
       *  Constant: '<S230>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_g42 =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.UnexpectedDoorOpeningDetectedByCC ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant1_const);

      /* RelationalOperator: '<S231>/Compare' incorporates:
       *  Constant: '<S231>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_ja =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.UnexpectedDoorOpeningDetectedByCC ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant2_const);

      /* RelationalOperator: '<S232>/Compare' incorporates:
       *  Constant: '<S232>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_kq =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.UnexpectedDoorOpeningDetectedByCC ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant3_const);

      /* RelationalOperator: '<S233>/Compare' incorporates:
       *  Constant: '<S233>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_nsw =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.UnexpectedDoorOpeningDetectedByCC ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant4_const);

      /* RelationalOperator: '<S234>/Compare' incorporates:
       *  Constant: '<S234>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_nn =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.UnexpectedDoorOpeningDetectedByCC ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant5_const);

      /* RelationalOperator: '<S235>/Compare' incorporates:
       *  Constant: '<S235>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_pg =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.UnexpectedDoorOpeningDetectedByCC ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant6_const);

      /* RelationalOperator: '<S236>/Compare' incorporates:
       *  Constant: '<S236>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_or =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.UnexpectedDoorOpeningDetectedByCC ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant7_const);

      /* Logic: '<S153>/OR7' */
      rtb_ImpAsg_InsertedFor_UnitConn_at_inport_0[0] = rtb_CollisionDetected;
      rtb_ImpAsg_InsertedFor_UnitConn_at_inport_0[1] = rtb_Compare_g42;
      rtb_ImpAsg_InsertedFor_UnitConn_at_inport_0[2] = rtb_Compare_ja;
      rtb_ImpAsg_InsertedFor_UnitConn_at_inport_0[3] = rtb_Compare_kq;
      rtb_ImpAsg_InsertedFor_UnitConn_at_inport_0[4] = rtb_Compare_nsw;
      rtb_ImpAsg_InsertedFor_UnitConn_at_inport_0[5] = rtb_Compare_nn;
      rtb_ImpAsg_InsertedFor_UnitConn_at_inport_0[6] = rtb_Compare_pg;
      rtb_ImpAsg_InsertedFor_UnitConn_at_inport_0[7] = rtb_Compare_or;
      rtb_AND_p = rtb_CollisionDetected;
      for (i = 0; i < 7; i++) {
        rtb_AND_p = (rtb_AND_p || rtb_ImpAsg_InsertedFor_UnitConn_at_inport_0[i
                     + 1]);
      }

      /* BusAssignment: '<S153>/A-Side//Right Doors' incorporates:
       *  ForEachSliceSelector generated from: '<S150>/TCMSSystemVehicleOut'
       *  Logic: '<S153>/AND2'
       *  Logic: '<S153>/NOT1'
       *  Logic: '<S153>/OR2'
       *  Logic: '<S153>/OR4'
       *  Logic: '<S153>/OR6'
       *  Logic: '<S153>/OR7'
       *  Outport: '<Root>/ElectricalOutput'
       *  Outport: '<Root>/TCMSOutput'
       */
      rtb_ElectricalComputer_n = rtb_ElectricalComputer_k;
      rtb_ElectricalComputer_n.ElectricalSignals.DoorRelease =
        BEML_EMU_Y.TCMSOutput[ForEach_itr_n].
        Control.DoorSystem.RightSideDoorRelease;
      rtb_ElectricalComputer_n.ElectricalSignals.DoorOpen =
        (BEML_EMU_Y.TCMSOutput[ForEach_itr_n].
         Control.DoorSystem.RightSideDoorOpenRequest ||
         BEML_EMU_Y.ElectricalOutput[ForEach_itr_n].
         Doors.RightDoorOpenCmdInLimpHome);
      rtb_ElectricalComputer_n.ElectricalSignals.DoorClose =
        (BEML_EMU_Y.TCMSOutput[ForEach_itr_n].
         Control.DoorSystem.RightSideDoorCloseRequest ||
         BEML_EMU_Y.ElectricalOutput[ForEach_itr_n].Doors.RightDoorClose);
      rtb_ElectricalComputer_n.ElectricalSignals.DoorEmergencyRelease =
        BEML_EMU_Y.TCMSOutput[ForEach_itr_n].
        Control.DoorSystem.RightDoorEmergencyRelease;
      rtb_ElectricalComputer_n.ElectricalSignals.DoorEnable =
        ((BEML_EMU_Y.ElectricalOutput[ForEach_itr_n].Doors.RightDoorEnable &&
          BEML_EMU_Y.ElectricalOutput[ForEach_itr_n].Doors.ZeroSpeed &&
          (!BEML_EMU_Y.ElectricalOutput[ForEach_itr_n].Doors.RightHoldDoorClose))
         || rtb_AND_p);

      /* BusAssignment: '<S153>/B-Side//Left Doors' incorporates:
       *  ForEachSliceSelector generated from: '<S150>/TCMSSystemVehicleOut'
       *  Logic: '<S153>/AND1'
       *  Logic: '<S153>/NOT'
       *  Logic: '<S153>/OR1'
       *  Logic: '<S153>/OR3'
       *  Logic: '<S153>/OR5'
       *  Logic: '<S153>/OR7'
       *  Outport: '<Root>/ElectricalOutput'
       *  Outport: '<Root>/TCMSOutput'
       */
      rtb_ElectricalComputer_k.ElectricalSignals.DoorRelease =
        BEML_EMU_Y.TCMSOutput[ForEach_itr_n].
        Control.DoorSystem.LeftSideDoorRelease;
      rtb_ElectricalComputer_k.ElectricalSignals.DoorOpen =
        (BEML_EMU_Y.TCMSOutput[ForEach_itr_n].
         Control.DoorSystem.LeftSideDoorOpenRequest ||
         BEML_EMU_Y.ElectricalOutput[ForEach_itr_n].
         Doors.LeftDoorOpenCmdInLimpHome);
      rtb_ElectricalComputer_k.ElectricalSignals.DoorClose =
        (BEML_EMU_Y.TCMSOutput[ForEach_itr_n].
         Control.DoorSystem.LeftSideDoorCloseRequest ||
         BEML_EMU_Y.ElectricalOutput[ForEach_itr_n].Doors.LeftDoorClose);
      rtb_ElectricalComputer_k.ElectricalSignals.DoorEmergencyRelease =
        BEML_EMU_Y.TCMSOutput[ForEach_itr_n].
        Control.DoorSystem.LeftDoorEmergencyRelease;
      rtb_ElectricalComputer_k.ElectricalSignals.DoorEnable =
        ((BEML_EMU_Y.ElectricalOutput[ForEach_itr_n].Doors.LeftDoorEnable &&
          BEML_EMU_Y.ElectricalOutput[ForEach_itr_n].Doors.ZeroSpeed &&
          (!BEML_EMU_Y.ElectricalOutput[ForEach_itr_n].Doors.LeftHoldDoorClose))
         || rtb_AND_p);

      /* Logic: '<S154>/AND' incorporates:
       *  ForEachSliceSelector generated from: '<S150>/HasCab'
       */
      rtb_AND_p =
        (BEML_EMU_B.ImpAsg_InsertedFor_HasCab_at_inport_0[ForEach_itr_n] &&
         (BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_n]
          .LeftDoorEAD != 0.0));

      /* ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput' incorporates:
       *  BusAssignment: '<S157>/Controls1'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[0] = rtb_ElectricalComputer_k;

      /* BusAssignment: '<S157>/Controls1' incorporates:
       *  Constant: '<S157>/isLeft'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[0].Config.isLeft = BEML_EMU_P.CoreSubsys_lb.DL1_isLeft;

      /* BusAssignment: '<S157>/Controls' incorporates:
       *  DataTypeConversion: '<S157>/Data Type Conversion14'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[0].InputControlStates.EmergencyAccessDevice = rtb_AND_p;

      /* RelationalOperator: '<S237>/Compare' incorporates:
       *  Constant: '<S237>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_mk =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorEmergencyHandleActivation ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant_const_o);

      /* RelationalOperator: '<S238>/Compare' incorporates:
       *  Constant: '<S238>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_ll =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorEmergencyHandleActivation ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant1_const_i);

      /* RelationalOperator: '<S239>/Compare' incorporates:
       *  Constant: '<S239>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_gd =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorEmergencyHandleActivation ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant2_const_f);

      /* RelationalOperator: '<S240>/Compare' incorporates:
       *  Constant: '<S240>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_eib =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorEmergencyHandleActivation ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant3_const_l);

      /* RelationalOperator: '<S241>/Compare' incorporates:
       *  Constant: '<S241>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_ha =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorEmergencyHandleActivation ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant4_const_f);

      /* RelationalOperator: '<S242>/Compare' incorporates:
       *  Constant: '<S242>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_j1 =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorEmergencyHandleActivation ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant5_const_f);

      /* RelationalOperator: '<S243>/Compare' incorporates:
       *  Constant: '<S243>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_lx1 =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorEmergencyHandleActivation ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant6_const_a);

      /* RelationalOperator: '<S244>/Compare' incorporates:
       *  Constant: '<S244>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_og =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorEmergencyHandleActivation ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant7_const_g);

      /* MultiPortSwitch: '<S154>/Index Vector64' incorporates:
       *  Constant: '<S154>/Constant4'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant4_Value_m))
  {
       case 1:
        rtb_AND_p = rtb_Compare_mk;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_ll;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_gd;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_eib;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_ha;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_j1;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_lx1;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_og;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector64' */

      /* BusAssignment: '<S157>/Controls' incorporates:
       *  DataTypeConversion: '<S157>/Data Type Conversion1'
       *  DataTypeConversion: '<S157>/Data Type Conversion5'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       *  Gain: '<S157>/Gain'
       *  Logic: '<S154>/OR'
       *  Logic: '<S157>/OR'
       *  Sum: '<S157>/Sum'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[0].InputControlStates.LocalDoorOpenPB = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[0].InputControlStates.EmergencyEgressDevice = (rtb_AND_p ||
        (BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_n]
         .LeftDoor1EED != 0.0) ||
        (BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_n]
         .CabEEDLeft != 0.0));
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[0].InputControlStates.LocalDoorIsolationLock =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_n]
        .LeftDoor1Lockout;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[0].InputControlStates.OpenCloseWidget =
        BEML_EMU_P.CoreSubsys_lb.Gain_Gain *
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_n]
        .LeftDoor1ManualClose +
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_n]
        .LeftDoor1ManualOpen;

      /* RelationalOperator: '<S181>/Compare' incorporates:
       *  Constant: '<S181>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_nf2 =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.ObjectObstructingDoorWhileClosing ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant_const_g);

      /* RelationalOperator: '<S182>/Compare' incorporates:
       *  Constant: '<S182>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_oi =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.ObjectObstructingDoorWhileClosing ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant1_const_m);

      /* RelationalOperator: '<S183>/Compare' incorporates:
       *  Constant: '<S183>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_jb =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.ObjectObstructingDoorWhileClosing ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant2_const_i);

      /* RelationalOperator: '<S184>/Compare' incorporates:
       *  Constant: '<S184>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_ig =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.ObjectObstructingDoorWhileClosing ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant3_const_b);

      /* RelationalOperator: '<S185>/Compare' incorporates:
       *  Constant: '<S185>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_pr =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.ObjectObstructingDoorWhileClosing ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant4_const_l);

      /* RelationalOperator: '<S186>/Compare' incorporates:
       *  Constant: '<S186>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_h1i =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.ObjectObstructingDoorWhileClosing ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant5_const_m);

      /* RelationalOperator: '<S187>/Compare' incorporates:
       *  Constant: '<S187>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_cy =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.ObjectObstructingDoorWhileClosing ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant6_const_e);

      /* RelationalOperator: '<S188>/Compare' incorporates:
       *  Constant: '<S188>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_oj =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.ObjectObstructingDoorWhileClosing ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant7_const_d);

      /* MultiPortSwitch: '<S154>/Index Vector7' incorporates:
       *  Constant: '<S154>/Constant4'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant4_Value_m))
  {
       case 1:
        rtb_AND_p = rtb_Compare_nf2;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_oi;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_jb;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_ig;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_pr;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_h1i;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_cy;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_oj;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector7' */

      /* BusAssignment: '<S157>/Faults' incorporates:
       *  DataTypeConversion: '<S157>/Data Type Conversion2'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[0].Faults.ObjectObstructingDoorWhileClosing = rtb_AND_p;

      /* RelationalOperator: '<S189>/Compare' incorporates:
       *  Constant: '<S189>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_hg =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.ObjectObstructingDoorWhileOpening ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant_const_i);

      /* RelationalOperator: '<S190>/Compare' incorporates:
       *  Constant: '<S190>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_ec =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.ObjectObstructingDoorWhileOpening ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant1_const_l);

      /* RelationalOperator: '<S191>/Compare' incorporates:
       *  Constant: '<S191>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_pw =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.ObjectObstructingDoorWhileOpening ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant2_const_k);

      /* RelationalOperator: '<S192>/Compare' incorporates:
       *  Constant: '<S192>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_co =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.ObjectObstructingDoorWhileOpening ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant3_const_h);

      /* RelationalOperator: '<S193>/Compare' incorporates:
       *  Constant: '<S193>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_ld =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.ObjectObstructingDoorWhileOpening ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant4_const_g);

      /* RelationalOperator: '<S194>/Compare' incorporates:
       *  Constant: '<S194>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_gt =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.ObjectObstructingDoorWhileOpening ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant5_const_i);

      /* RelationalOperator: '<S195>/Compare' incorporates:
       *  Constant: '<S195>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_a5 =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.ObjectObstructingDoorWhileOpening ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant6_const_o);

      /* RelationalOperator: '<S196>/Compare' incorporates:
       *  Constant: '<S196>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_jzm =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.ObjectObstructingDoorWhileOpening ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant7_const_f);

      /* MultiPortSwitch: '<S154>/Index Vector8' incorporates:
       *  Constant: '<S154>/Constant4'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant4_Value_m))
  {
       case 1:
        rtb_AND_p = rtb_Compare_hg;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_ec;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_pw;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_co;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_ld;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_gt;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_a5;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_jzm;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector8' */

      /* BusAssignment: '<S157>/Faults' incorporates:
       *  DataTypeConversion: '<S157>/Data Type Conversion12'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[0].Faults.ObjectObstructingDoorWhileOpening = rtb_AND_p;

      /* RelationalOperator: '<S245>/Compare' incorporates:
       *  Constant: '<S245>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_fig =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorFailToClose ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant_const_p);

      /* RelationalOperator: '<S246>/Compare' incorporates:
       *  Constant: '<S246>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_mn =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorFailToClose ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant1_const_f);

      /* RelationalOperator: '<S247>/Compare' incorporates:
       *  Constant: '<S247>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_gni =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorFailToClose ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant2_const_b);

      /* RelationalOperator: '<S248>/Compare' incorporates:
       *  Constant: '<S248>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_ev =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorFailToClose ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant3_const_f);

      /* RelationalOperator: '<S249>/Compare' incorporates:
       *  Constant: '<S249>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_ky =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorFailToClose ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant4_const_e);

      /* RelationalOperator: '<S250>/Compare' incorporates:
       *  Constant: '<S250>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_ej =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorFailToClose ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant5_const_a);

      /* RelationalOperator: '<S251>/Compare' incorporates:
       *  Constant: '<S251>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_bd =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorFailToClose ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant6_const_c);

      /* RelationalOperator: '<S252>/Compare' incorporates:
       *  Constant: '<S252>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_cv2 =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorFailToClose ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant7_const_o);

      /* MultiPortSwitch: '<S154>/Index Vector20' incorporates:
       *  Constant: '<S154>/Constant4'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant4_Value_m))
  {
       case 1:
        rtb_AND_p = rtb_Compare_fig;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_mn;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_gni;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_ev;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_ky;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_ej;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_bd;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_cv2;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector20' */

      /* BusAssignment: '<S157>/Faults' incorporates:
       *  DataTypeConversion: '<S157>/Data Type Conversion6'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[0].Faults.DoorFailToClose = rtb_AND_p;

      /* RelationalOperator: '<S253>/Compare' incorporates:
       *  Constant: '<S253>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_b4 =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorFailToOpen ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant_const_a);

      /* RelationalOperator: '<S254>/Compare' incorporates:
       *  Constant: '<S254>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_d1 =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorFailToOpen ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant1_const_k);

      /* RelationalOperator: '<S255>/Compare' incorporates:
       *  Constant: '<S255>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_l =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorFailToOpen ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant2_const_p);

      /* RelationalOperator: '<S256>/Compare' incorporates:
       *  Constant: '<S256>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_ef =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorFailToOpen ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant3_const_n);

      /* RelationalOperator: '<S257>/Compare' incorporates:
       *  Constant: '<S257>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_mq =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorFailToOpen ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant4_const_fh);

      /* RelationalOperator: '<S258>/Compare' incorporates:
       *  Constant: '<S258>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_fz =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorFailToOpen ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant5_const_d);

      /* RelationalOperator: '<S259>/Compare' incorporates:
       *  Constant: '<S259>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_bw =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorFailToOpen ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant6_const_b);

      /* RelationalOperator: '<S260>/Compare' incorporates:
       *  Constant: '<S260>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_px =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorFailToOpen ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant7_const_i);

      /* MultiPortSwitch: '<S154>/Index Vector28' incorporates:
       *  Constant: '<S154>/Constant4'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant4_Value_m))
  {
       case 1:
        rtb_AND_p = rtb_Compare_b4;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_d1;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_l;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_ef;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_mq;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_fz;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_bw;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_px;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector28' */

      /* BusAssignment: '<S157>/Faults' incorporates:
       *  DataTypeConversion: '<S157>/Data Type Conversion4'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[0].Faults.DoorFailToOpen = rtb_AND_p;

      /* RelationalOperator: '<S261>/Compare' incorporates:
       *  Constant: '<S261>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_hut =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorMotorCircuitFailure ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant_const_k);

      /* RelationalOperator: '<S262>/Compare' incorporates:
       *  Constant: '<S262>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_fk =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorMotorCircuitFailure ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant1_const_kw);

      /* RelationalOperator: '<S263>/Compare' incorporates:
       *  Constant: '<S263>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_ot =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorMotorCircuitFailure ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant2_const_ko);

      /* RelationalOperator: '<S264>/Compare' incorporates:
       *  Constant: '<S264>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_bp =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorMotorCircuitFailure ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant3_const_m);

      /* RelationalOperator: '<S265>/Compare' incorporates:
       *  Constant: '<S265>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_kxn =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorMotorCircuitFailure ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant4_const_et);

      /* RelationalOperator: '<S266>/Compare' incorporates:
       *  Constant: '<S266>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_ds =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorMotorCircuitFailure ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant5_const_k);

      /* RelationalOperator: '<S267>/Compare' incorporates:
       *  Constant: '<S267>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_hcg =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorMotorCircuitFailure ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant6_const_cp);

      /* RelationalOperator: '<S268>/Compare' incorporates:
       *  Constant: '<S268>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_h1 =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorMotorCircuitFailure ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant7_const_gl);

      /* MultiPortSwitch: '<S154>/Index Vector35' incorporates:
       *  Constant: '<S154>/Constant4'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant4_Value_m))
  {
       case 1:
        rtb_AND_p = rtb_Compare_hut;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_fk;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_ot;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_bp;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_kxn;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_ds;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_hcg;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_h1;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector35' */

      /* BusAssignment: '<S157>/Faults' incorporates:
       *  DataTypeConversion: '<S157>/Data Type Conversion7'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[0].Faults.DoorMotorCircuitFailure = rtb_AND_p;

      /* RelationalOperator: '<S269>/Compare' incorporates:
       *  Constant: '<S269>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_mg =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorFailedToLock ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant_const_l);

      /* RelationalOperator: '<S270>/Compare' incorporates:
       *  Constant: '<S270>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_j1h =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorFailedToLock ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant1_const_j);

      /* RelationalOperator: '<S271>/Compare' incorporates:
       *  Constant: '<S271>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_fb =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorFailedToLock ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant2_const_a);

      /* RelationalOperator: '<S272>/Compare' incorporates:
       *  Constant: '<S272>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_bo =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorFailedToLock ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant3_const_fo);

      /* RelationalOperator: '<S273>/Compare' incorporates:
       *  Constant: '<S273>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_aj =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorFailedToLock ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant4_const_ep);

      /* RelationalOperator: '<S274>/Compare' incorporates:
       *  Constant: '<S274>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_ct =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorFailedToLock ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant5_const_b);

      /* RelationalOperator: '<S275>/Compare' incorporates:
       *  Constant: '<S275>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_np =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorFailedToLock ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant6_const_j);

      /* RelationalOperator: '<S276>/Compare' incorporates:
       *  Constant: '<S276>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_dw =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorFailedToLock ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant7_const_b);

      /* MultiPortSwitch: '<S154>/Index Vector36' incorporates:
       *  Constant: '<S154>/Constant4'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant4_Value_m))
  {
       case 1:
        rtb_AND_p = rtb_Compare_mg;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_j1h;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_fb;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_bo;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_aj;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_ct;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_np;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_dw;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector36' */

      /* BusAssignment: '<S157>/Faults' incorporates:
       *  DataTypeConversion: '<S157>/Data Type Conversion11'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[0].Faults.DoorFailedToLock = rtb_AND_p;

      /* RelationalOperator: '<S277>/Compare' incorporates:
       *  Constant: '<S277>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_ogo =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorFailedToUnlock ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant_const_j);

      /* RelationalOperator: '<S278>/Compare' incorporates:
       *  Constant: '<S278>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_h4 =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorFailedToUnlock ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant1_const_m0);

      /* RelationalOperator: '<S279>/Compare' incorporates:
       *  Constant: '<S279>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_c4 =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorFailedToUnlock ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant2_const_al);

      /* RelationalOperator: '<S280>/Compare' incorporates:
       *  Constant: '<S280>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_by =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorFailedToUnlock ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant3_const_hm);

      /* RelationalOperator: '<S281>/Compare' incorporates:
       *  Constant: '<S281>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_ff =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorFailedToUnlock ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant4_const_j);

      /* RelationalOperator: '<S282>/Compare' incorporates:
       *  Constant: '<S282>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_pwe =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorFailedToUnlock ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant5_const_dd);

      /* RelationalOperator: '<S283>/Compare' incorporates:
       *  Constant: '<S283>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_is =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorFailedToUnlock ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant6_const_jq);

      /* RelationalOperator: '<S284>/Compare' incorporates:
       *  Constant: '<S284>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_bj1 =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorFailedToUnlock ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant7_const_m);

      /* MultiPortSwitch: '<S154>/Index Vector33' incorporates:
       *  Constant: '<S154>/Constant4'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant4_Value_m))
  {
       case 1:
        rtb_AND_p = rtb_Compare_ogo;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_h4;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_c4;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_by;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_ff;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_pwe;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_is;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_bj1;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector33' */

      /* BusAssignment: '<S157>/Faults' incorporates:
       *  DataTypeConversion: '<S157>/Data Type Conversion10'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[0].Faults.DoorFailedToUnlock = rtb_AND_p;

      /* RelationalOperator: '<S285>/Compare' incorporates:
       *  Constant: '<S285>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_ioy =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorUnexpectedUnlocking ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant_const_pj);

      /* RelationalOperator: '<S286>/Compare' incorporates:
       *  Constant: '<S286>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_el =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorUnexpectedUnlocking ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant1_const_f1);

      /* RelationalOperator: '<S287>/Compare' incorporates:
       *  Constant: '<S287>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_i0r =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorUnexpectedUnlocking ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant2_const_h);

      /* RelationalOperator: '<S288>/Compare' incorporates:
       *  Constant: '<S288>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_da =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorUnexpectedUnlocking ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant3_const_nv);

      /* RelationalOperator: '<S289>/Compare' incorporates:
       *  Constant: '<S289>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_em =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorUnexpectedUnlocking ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant4_const_a);

      /* RelationalOperator: '<S290>/Compare' incorporates:
       *  Constant: '<S290>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_nz =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorUnexpectedUnlocking ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant5_const_p);

      /* RelationalOperator: '<S291>/Compare' incorporates:
       *  Constant: '<S291>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_mp =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorUnexpectedUnlocking ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant6_const_l);

      /* RelationalOperator: '<S292>/Compare' incorporates:
       *  Constant: '<S292>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_a0 =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorUnexpectedUnlocking ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant7_const_e);

      /* MultiPortSwitch: '<S154>/Index Vector34' incorporates:
       *  Constant: '<S154>/Constant4'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant4_Value_m))
  {
       case 1:
        rtb_AND_p = rtb_Compare_ioy;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_el;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_i0r;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_da;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_em;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_nz;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_mp;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_a0;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector34' */

      /* BusAssignment: '<S157>/Faults' incorporates:
       *  DataTypeConversion: '<S157>/Data Type Conversion16'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[0].Faults.DoorUnexpectedUnlocking = rtb_AND_p;

      /* RelationalOperator: '<S293>/Compare' incorporates:
       *  Constant: '<S293>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_j3m =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorDCUFailure ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant_const_f);

      /* RelationalOperator: '<S294>/Compare' incorporates:
       *  Constant: '<S294>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_of =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorDCUFailure ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant1_const_e);

      /* RelationalOperator: '<S295>/Compare' incorporates:
       *  Constant: '<S295>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_jc =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorDCUFailure ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant2_const_kq);

      /* RelationalOperator: '<S296>/Compare' incorporates:
       *  Constant: '<S296>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_mvr =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorDCUFailure ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant3_const_ls);

      /* RelationalOperator: '<S297>/Compare' incorporates:
       *  Constant: '<S297>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_gh =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorDCUFailure ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant4_const_gs);

      /* RelationalOperator: '<S298>/Compare' incorporates:
       *  Constant: '<S298>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_hs =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorDCUFailure ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant5_const_ft);

      /* RelationalOperator: '<S299>/Compare' incorporates:
       *  Constant: '<S299>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_oc =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorDCUFailure ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant6_const_g);

      /* RelationalOperator: '<S300>/Compare' incorporates:
       *  Constant: '<S300>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_ca =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorDCUFailure ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant7_const_k);

      /* MultiPortSwitch: '<S154>/Index Vector37' incorporates:
       *  Constant: '<S154>/Constant4'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant4_Value_m))
  {
       case 1:
        rtb_AND_p = rtb_Compare_j3m;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_of;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_jc;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_mvr;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_gh;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_hs;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_oc;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_ca;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector37' */

      /* BusAssignment: '<S157>/Faults' incorporates:
       *  DataTypeConversion: '<S157>/Data Type Conversion13'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[0].Faults.DoorDCUFailure = rtb_AND_p;

      /* RelationalOperator: '<S301>/Compare' incorporates:
       *  Constant: '<S301>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_h3 =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DCSRFailure ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant_const_m);

      /* RelationalOperator: '<S302>/Compare' incorporates:
       *  Constant: '<S302>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_nk =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DCSRFailure ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant1_const_h);

      /* RelationalOperator: '<S303>/Compare' incorporates:
       *  Constant: '<S303>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_kf =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DCSRFailure ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant2_const_g);

      /* RelationalOperator: '<S304>/Compare' incorporates:
       *  Constant: '<S304>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_lv =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DCSRFailure ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant3_const_lm);

      /* RelationalOperator: '<S305>/Compare' incorporates:
       *  Constant: '<S305>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_n2g =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DCSRFailure ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant4_const_d);

      /* RelationalOperator: '<S306>/Compare' incorporates:
       *  Constant: '<S306>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_po =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DCSRFailure ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant5_const_l);

      /* RelationalOperator: '<S307>/Compare' incorporates:
       *  Constant: '<S307>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_kn =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DCSRFailure ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant6_const_ch);

      /* RelationalOperator: '<S308>/Compare' incorporates:
       *  Constant: '<S308>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_oy =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DCSRFailure ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant7_const_kl);

      /* MultiPortSwitch: '<S154>/Index Vector38' incorporates:
       *  Constant: '<S154>/Constant4'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant4_Value_m))
  {
       case 1:
        rtb_AND_p = rtb_Compare_h3;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_nk;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_kf;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_lv;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_n2g;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_po;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_kn;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_oy;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector38' */

      /* BusAssignment: '<S157>/Faults' incorporates:
       *  DataTypeConversion: '<S157>/Data Type Conversion17'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[0].Faults.DCSRFailure = rtb_AND_p;

      /* RelationalOperator: '<S197>/Compare' incorporates:
       *  Constant: '<S197>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_ch =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DCSLFailure ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant_const_iz);

      /* RelationalOperator: '<S198>/Compare' incorporates:
       *  Constant: '<S198>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_jkj =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DCSLFailure ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant1_const_kp);

      /* RelationalOperator: '<S199>/Compare' incorporates:
       *  Constant: '<S199>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_dnu =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DCSLFailure ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant2_const_m);

      /* RelationalOperator: '<S200>/Compare' incorporates:
       *  Constant: '<S200>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_prw =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DCSLFailure ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant3_const_j);

      /* RelationalOperator: '<S201>/Compare' incorporates:
       *  Constant: '<S201>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_aw =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DCSLFailure ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant4_const_ac);

      /* RelationalOperator: '<S202>/Compare' incorporates:
       *  Constant: '<S202>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_e2 =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DCSLFailure ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant5_const_b4);

      /* RelationalOperator: '<S203>/Compare' incorporates:
       *  Constant: '<S203>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_gu =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DCSLFailure ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant6_const_d);

      /* RelationalOperator: '<S204>/Compare' incorporates:
       *  Constant: '<S204>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_kz =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DCSLFailure ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant7_const_dk);

      /* MultiPortSwitch: '<S154>/Index Vector41' incorporates:
       *  Constant: '<S154>/Constant4'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant4_Value_m))
  {
       case 1:
        rtb_AND_p = rtb_Compare_ch;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_jkj;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_dnu;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_prw;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_aw;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_e2;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_gu;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_kz;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector41' */

      /* BusAssignment: '<S157>/Faults' incorporates:
       *  DataTypeConversion: '<S157>/Data Type Conversion18'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[0].Faults.DCSLFailure = rtb_AND_p;

      /* RelationalOperator: '<S205>/Compare' incorporates:
       *  Constant: '<S205>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_od =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DLSRFailure ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant_const_e);

      /* RelationalOperator: '<S206>/Compare' incorporates:
       *  Constant: '<S206>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_bdp =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DLSRFailure ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant1_const_d);

      /* RelationalOperator: '<S207>/Compare' incorporates:
       *  Constant: '<S207>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_fp =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DLSRFailure ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant2_const_d);

      /* RelationalOperator: '<S208>/Compare' incorporates:
       *  Constant: '<S208>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_lx =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DLSRFailure ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant3_const_jr);

      /* RelationalOperator: '<S209>/Compare' incorporates:
       *  Constant: '<S209>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_hi =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DLSRFailure ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant4_const_i);

      /* RelationalOperator: '<S210>/Compare' incorporates:
       *  Constant: '<S210>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_eb =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DLSRFailure ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant5_const_n);

      /* RelationalOperator: '<S211>/Compare' incorporates:
       *  Constant: '<S211>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_bt =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DLSRFailure ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant6_const_i);

      /* RelationalOperator: '<S212>/Compare' incorporates:
       *  Constant: '<S212>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_oyf =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DLSRFailure ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant7_const_ku);

      /* MultiPortSwitch: '<S154>/Index Vector42' incorporates:
       *  Constant: '<S154>/Constant4'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant4_Value_m))
  {
       case 1:
        rtb_AND_p = rtb_Compare_od;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_bdp;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_fp;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_lx;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_hi;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_eb;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_bt;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_oyf;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector42' */

      /* BusAssignment: '<S157>/Faults' incorporates:
       *  DataTypeConversion: '<S157>/Data Type Conversion20'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[0].Faults.DLSRFailure = rtb_AND_p;

      /* RelationalOperator: '<S213>/Compare' incorporates:
       *  Constant: '<S213>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_n3 =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DLSLFailure ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant_const_ie);

      /* RelationalOperator: '<S214>/Compare' incorporates:
       *  Constant: '<S214>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_ht =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DLSLFailure ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant1_const_jh);

      /* RelationalOperator: '<S215>/Compare' incorporates:
       *  Constant: '<S215>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_am =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DLSLFailure ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant2_const_hc);

      /* RelationalOperator: '<S216>/Compare' incorporates:
       *  Constant: '<S216>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_ges =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DLSLFailure ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant3_const_p);

      /* RelationalOperator: '<S217>/Compare' incorporates:
       *  Constant: '<S217>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_hj =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DLSLFailure ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant4_const_k);

      /* RelationalOperator: '<S218>/Compare' incorporates:
       *  Constant: '<S218>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_hrr =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DLSLFailure ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant5_const_k2);

      /* RelationalOperator: '<S219>/Compare' incorporates:
       *  Constant: '<S219>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_dy =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DLSLFailure ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant6_const_h);

      /* RelationalOperator: '<S220>/Compare' incorporates:
       *  Constant: '<S220>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_au =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DLSLFailure ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant7_const_j);

      /* MultiPortSwitch: '<S154>/Index Vector39' incorporates:
       *  Constant: '<S154>/Constant4'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant4_Value_m))
  {
       case 1:
        rtb_AND_p = rtb_Compare_n3;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_ht;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_am;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_ges;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_hj;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_hrr;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_dy;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_au;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector39' */

      /* BusAssignment: '<S157>/Faults' incorporates:
       *  DataTypeConversion: '<S157>/Data Type Conversion19'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[0].Faults.DLSLFailure = rtb_AND_p;

      /* RelationalOperator: '<S221>/Compare' incorporates:
       *  Constant: '<S221>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_nb =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorMajorFault ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant_const_lp);

      /* RelationalOperator: '<S222>/Compare' incorporates:
       *  Constant: '<S222>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_mw =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorMajorFault ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant1_const_ia);

      /* RelationalOperator: '<S223>/Compare' incorporates:
       *  Constant: '<S223>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_i1 =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorMajorFault ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant2_const_l);

      /* RelationalOperator: '<S224>/Compare' incorporates:
       *  Constant: '<S224>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_hu =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorMajorFault ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant3_const_a);

      /* RelationalOperator: '<S225>/Compare' incorporates:
       *  Constant: '<S225>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_cf =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorMajorFault ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant4_const_b);

      /* RelationalOperator: '<S226>/Compare' incorporates:
       *  Constant: '<S226>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_eh =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorMajorFault ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant5_const_it);

      /* RelationalOperator: '<S227>/Compare' incorporates:
       *  Constant: '<S227>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_eb2 =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorMajorFault ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant6_const_ji);

      /* RelationalOperator: '<S228>/Compare' incorporates:
       *  Constant: '<S228>/Constant'
       *  ForEachSliceSelector generated from: '<S150>/VehicleFaults'
       */
      rtb_Compare_k01 =
        (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
         .DoorFaults.DoorMajorFault ==
         BEML_EMU_P.CoreSubsys_lb.CompareToConstant7_const_kn);

      /* MultiPortSwitch: '<S154>/Index Vector40' incorporates:
       *  Constant: '<S154>/Constant4'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant4_Value_m))
  {
       case 1:
        rtb_AND_p = rtb_Compare_nb;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_mw;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_i1;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_hu;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_cf;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_eh;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_eb2;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_k01;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector40' */

      /* BusAssignment: '<S157>/Faults' incorporates:
       *  DataTypeConversion: '<S157>/Data Type Conversion21'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[0].Faults.DoorMajorFault = rtb_AND_p;

      /* MultiPortSwitch: '<S154>/Index Vector56' incorporates:
       *  Constant: '<S154>/Constant4'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant4_Value_m))
  {
       case 1:
        rtb_AND_p = rtb_CollisionDetected;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_g42;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_ja;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_kq;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_nsw;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_nn;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_pg;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_or;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector56' */

      /* BusAssignment: '<S157>/Faults' incorporates:
       *  DataTypeConversion: '<S157>/Data Type Conversion22'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[0].Faults.UnexpectedDoorOpeningDetectedByCC = rtb_AND_p;

      /* BusAssignment: '<S157>/Electrical' incorporates:
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       *  Outport: '<Root>/ElectricalOutput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[0].ElectricalSignals.DoorControlPower =
        BEML_EMU_Y.ElectricalOutput[ForEach_itr_n].Doors.DCUPower[0];
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[0].ElectricalSignals.DoorMotorPower =
        BEML_EMU_Y.ElectricalOutput[ForEach_itr_n].Doors.DoorMotorPower;

      /* BusAssignment: '<S157>/ElectricalComputer' incorporates:
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       *  Outport: '<Root>/TCMSOutput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[0].ElectricalSignals.DoorIsolation =
        BEML_EMU_Y.TCMSOutput[ForEach_itr_n].
        Control.DoorSystem.DoorLeft1Isolation;

      /* ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput' incorporates:
       *  BusAssignment: '<S158>/Controls1'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[1] = rtb_ElectricalComputer_k;

      /* BusAssignment: '<S158>/Controls1' incorporates:
       *  Constant: '<S158>/isLeft'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[1].Config.isLeft = BEML_EMU_P.CoreSubsys_lb.DL2_isLeft;

      /* Logic: '<S158>/OR' */
      rtb_AND_p = false;

      /* BusAssignment: '<S158>/Controls' incorporates:
       *  DataTypeConversion: '<S158>/Data Type Conversion1'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[1].InputControlStates.LocalDoorOpenPB = 0.0;

      /* MultiPortSwitch: '<S154>/Index Vector62' incorporates:
       *  Constant: '<S154>/Constant3'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant3_Value)) {
       case 1:
        rtb_AND_p = rtb_Compare_mk;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_ll;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_gd;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_eib;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_ha;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_j1;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_lx1;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_og;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector62' */

      /* Logic: '<S154>/NOT' incorporates:
       *  ForEachSliceSelector generated from: '<S150>/HasCab'
       *  Logic: '<S154>/NOT2'
       */
      tmp_1 = !BEML_EMU_B.ImpAsg_InsertedFor_HasCab_at_inport_0[ForEach_itr_n];

      /* BusAssignment: '<S158>/Controls' incorporates:
       *  DataTypeConversion: '<S158>/Data Type Conversion14'
       *  DataTypeConversion: '<S158>/Data Type Conversion5'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       *  Gain: '<S158>/Gain'
       *  Logic: '<S154>/AND1'
       *  Logic: '<S154>/NOT'
       *  Logic: '<S154>/OR3'
       *  Sum: '<S158>/Sum'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[1].InputControlStates.EmergencyAccessDevice = (tmp_1 &&
        (BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_n]
         .LeftDoorEAD != 0.0));
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[1].InputControlStates.EmergencyEgressDevice = (rtb_AND_p ||
        (BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_n]
         .LeftDoor2EED != 0.0));
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[1].InputControlStates.LocalDoorIsolationLock =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_n]
        .LeftDoor2Lockout;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[1].InputControlStates.OpenCloseWidget =
        BEML_EMU_P.CoreSubsys_lb.Gain_Gain_g *
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_n]
        .LeftDoor2ManualClose +
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_n]
        .LeftDoor2ManualOpen;

      /* MultiPortSwitch: '<S154>/Index Vector5' incorporates:
       *  Constant: '<S154>/Constant3'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant3_Value)) {
       case 1:
        rtb_AND_p = rtb_Compare_nf2;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_oi;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_jb;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_ig;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_pr;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_h1i;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_cy;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_oj;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector5' */

      /* BusAssignment: '<S158>/Faults' incorporates:
       *  DataTypeConversion: '<S158>/Data Type Conversion2'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[1].Faults.ObjectObstructingDoorWhileClosing = rtb_AND_p;

      /* MultiPortSwitch: '<S154>/Index Vector6' incorporates:
       *  Constant: '<S154>/Constant3'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant3_Value)) {
       case 1:
        rtb_AND_p = rtb_Compare_hg;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_ec;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_pw;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_co;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_ld;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_gt;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_a5;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_jzm;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector6' */

      /* BusAssignment: '<S158>/Faults' incorporates:
       *  DataTypeConversion: '<S158>/Data Type Conversion12'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[1].Faults.ObjectObstructingDoorWhileOpening = rtb_AND_p;

      /* MultiPortSwitch: '<S154>/Index Vector19' incorporates:
       *  Constant: '<S154>/Constant3'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant3_Value)) {
       case 1:
        rtb_AND_p = rtb_Compare_fig;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_mn;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_gni;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_ev;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_ky;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_ej;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_bd;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_cv2;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector19' */

      /* BusAssignment: '<S158>/Faults' incorporates:
       *  DataTypeConversion: '<S158>/Data Type Conversion6'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[1].Faults.DoorFailToClose = rtb_AND_p;

      /* MultiPortSwitch: '<S154>/Index Vector27' incorporates:
       *  Constant: '<S154>/Constant3'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant3_Value)) {
       case 1:
        rtb_AND_p = rtb_Compare_b4;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_d1;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_l;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_ef;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_mq;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_fz;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_bw;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_px;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector27' */

      /* BusAssignment: '<S158>/Faults' incorporates:
       *  DataTypeConversion: '<S158>/Data Type Conversion4'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[1].Faults.DoorFailToOpen = rtb_AND_p;

      /* MultiPortSwitch: '<S154>/Index Vector55' incorporates:
       *  Constant: '<S154>/Constant3'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant3_Value)) {
       case 1:
        rtb_AND_p = rtb_CollisionDetected;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_g42;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_ja;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_kq;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_nsw;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_nn;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_pg;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_or;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector55' */

      /* BusAssignment: '<S158>/Faults' incorporates:
       *  DataTypeConversion: '<S158>/Data Type Conversion22'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[1].Faults.DoorMotorCircuitFailure = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[1].Faults.DoorFailedToLock = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[1].Faults.DoorFailedToUnlock = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[1].Faults.DoorUnexpectedUnlocking = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[1].Faults.DoorDCUFailure = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[1].Faults.DCSRFailure = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[1].Faults.DCSLFailure = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[1].Faults.DLSRFailure = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[1].Faults.DLSLFailure = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[1].Faults.DoorMajorFault = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[1].Faults.UnexpectedDoorOpeningDetectedByCC = rtb_AND_p;

      /* BusAssignment: '<S158>/Electrical' incorporates:
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       *  Outport: '<Root>/ElectricalOutput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[1].ElectricalSignals.DoorControlPower =
        BEML_EMU_Y.ElectricalOutput[ForEach_itr_n].Doors.DCUPower[1];
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[1].ElectricalSignals.DoorMotorPower =
        BEML_EMU_Y.ElectricalOutput[ForEach_itr_n].Doors.DoorMotorPower;

      /* BusAssignment: '<S158>/ElectricalComputer' incorporates:
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       *  Outport: '<Root>/TCMSOutput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[1].ElectricalSignals.DoorIsolation =
        BEML_EMU_Y.TCMSOutput[ForEach_itr_n].
        Control.DoorSystem.DoorLeft2Isolation;

      /* ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput' incorporates:
       *  BusAssignment: '<S159>/Controls1'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[2] = rtb_ElectricalComputer_k;

      /* BusAssignment: '<S159>/Controls1' incorporates:
       *  Constant: '<S159>/isLeft'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[2].Config.isLeft = BEML_EMU_P.CoreSubsys_lb.DL3_isLeft;

      /* Logic: '<S159>/OR' */
      rtb_AND_p = false;

      /* BusAssignment: '<S159>/Controls' incorporates:
       *  DataTypeConversion: '<S159>/Data Type Conversion1'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[2].InputControlStates.LocalDoorOpenPB = 0.0;

      /* MultiPortSwitch: '<S154>/Index Vector65' incorporates:
       *  Constant: '<S154>/Constant2'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant2_Value)) {
       case 1:
        rtb_AND_p = rtb_Compare_mk;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_ll;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_gd;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_eib;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_ha;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_j1;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_lx1;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_og;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector65' */

      /* BusAssignment: '<S159>/Controls' incorporates:
       *  DataTypeConversion: '<S159>/Data Type Conversion14'
       *  DataTypeConversion: '<S159>/Data Type Conversion5'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       *  Gain: '<S159>/Gain'
       *  Logic: '<S154>/OR6'
       *  Sum: '<S159>/Sum'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[2].InputControlStates.EmergencyAccessDevice = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[2].InputControlStates.EmergencyEgressDevice = (rtb_AND_p ||
        (BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_n]
         .LeftDoor3EED != 0.0));
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[2].InputControlStates.LocalDoorIsolationLock =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_n]
        .LeftDoor3Lockout;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[2].InputControlStates.OpenCloseWidget =
        BEML_EMU_P.CoreSubsys_lb.Gain_Gain_n *
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_n]
        .LeftDoor3ManualClose +
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_n]
        .LeftDoor3ManualOpen;

      /* MultiPortSwitch: '<S154>/Index Vector3' incorporates:
       *  Constant: '<S154>/Constant2'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant2_Value)) {
       case 1:
        rtb_AND_p = rtb_Compare_nf2;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_oi;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_jb;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_ig;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_pr;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_h1i;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_cy;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_oj;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector3' */

      /* BusAssignment: '<S159>/Faults' incorporates:
       *  DataTypeConversion: '<S159>/Data Type Conversion2'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[2].Faults.ObjectObstructingDoorWhileClosing = rtb_AND_p;

      /* MultiPortSwitch: '<S154>/Index Vector4' incorporates:
       *  Constant: '<S154>/Constant2'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant2_Value)) {
       case 1:
        rtb_AND_p = rtb_Compare_hg;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_ec;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_pw;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_co;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_ld;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_gt;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_a5;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_jzm;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector4' */

      /* BusAssignment: '<S159>/Faults' incorporates:
       *  DataTypeConversion: '<S159>/Data Type Conversion12'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[2].Faults.ObjectObstructingDoorWhileOpening = rtb_AND_p;

      /* MultiPortSwitch: '<S154>/Index Vector18' incorporates:
       *  Constant: '<S154>/Constant2'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant2_Value)) {
       case 1:
        rtb_AND_p = rtb_Compare_fig;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_mn;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_gni;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_ev;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_ky;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_ej;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_bd;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_cv2;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector18' */

      /* BusAssignment: '<S159>/Faults' incorporates:
       *  DataTypeConversion: '<S159>/Data Type Conversion6'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[2].Faults.DoorFailToClose = rtb_AND_p;

      /* MultiPortSwitch: '<S154>/Index Vector26' incorporates:
       *  Constant: '<S154>/Constant2'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant2_Value)) {
       case 1:
        rtb_AND_p = rtb_Compare_b4;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_d1;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_l;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_ef;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_mq;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_fz;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_bw;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_px;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector26' */

      /* BusAssignment: '<S159>/Faults' incorporates:
       *  DataTypeConversion: '<S159>/Data Type Conversion4'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[2].Faults.DoorFailToOpen = rtb_AND_p;

      /* MultiPortSwitch: '<S154>/Index Vector54' incorporates:
       *  Constant: '<S154>/Constant2'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant2_Value)) {
       case 1:
        rtb_AND_p = rtb_CollisionDetected;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_g42;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_ja;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_kq;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_nsw;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_nn;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_pg;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_or;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector54' */

      /* BusAssignment: '<S159>/Faults' incorporates:
       *  DataTypeConversion: '<S159>/Data Type Conversion22'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[2].Faults.DoorMotorCircuitFailure = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[2].Faults.DoorFailedToLock = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[2].Faults.DoorFailedToUnlock = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[2].Faults.DoorUnexpectedUnlocking = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[2].Faults.DoorDCUFailure = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[2].Faults.DCSRFailure = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[2].Faults.DCSLFailure = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[2].Faults.DLSRFailure = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[2].Faults.DLSLFailure = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[2].Faults.DoorMajorFault = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[2].Faults.UnexpectedDoorOpeningDetectedByCC = rtb_AND_p;

      /* BusAssignment: '<S159>/Electrical' incorporates:
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       *  Outport: '<Root>/ElectricalOutput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[2].ElectricalSignals.DoorControlPower =
        BEML_EMU_Y.ElectricalOutput[ForEach_itr_n].Doors.DCUPower[2];
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[2].ElectricalSignals.DoorMotorPower =
        BEML_EMU_Y.ElectricalOutput[ForEach_itr_n].Doors.DoorMotorPower;

      /* BusAssignment: '<S159>/ElectricalComputer' incorporates:
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       *  Outport: '<Root>/TCMSOutput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[2].ElectricalSignals.DoorIsolation =
        BEML_EMU_Y.TCMSOutput[ForEach_itr_n].
        Control.DoorSystem.DoorLeft3Isolation;

      /* BusAssignment: '<S160>/Controls1' incorporates:
       *  Constant: '<S160>/isLeft'
       */
      rtb_ElectricalComputer_k.Config.isLeft =
        BEML_EMU_P.CoreSubsys_lb.DL4_isLeft;

      /* Logic: '<S160>/OR' */
      rtb_AND_p = false;

      /* BusAssignment: '<S160>/Controls' incorporates:
       *  DataTypeConversion: '<S160>/Data Type Conversion1'
       */
      rtb_ElectricalComputer_k.InputControlStates.LocalDoorOpenPB = 0.0;

      /* MultiPortSwitch: '<S154>/Index Vector66' incorporates:
       *  Constant: '<S154>/Constant1'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant1_Value_n))
  {
       case 1:
        rtb_AND_p = rtb_Compare_mk;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_ll;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_gd;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_eib;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_ha;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_j1;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_lx1;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_og;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector66' */

      /* BusAssignment: '<S160>/Controls' incorporates:
       *  DataTypeConversion: '<S160>/Data Type Conversion14'
       *  DataTypeConversion: '<S160>/Data Type Conversion5'
       *  ForEachSliceSelector generated from: '<S150>/InputControlStates'
       *  Gain: '<S160>/Gain'
       *  Logic: '<S154>/OR7'
       *  Sum: '<S160>/Sum'
       */
      rtb_ElectricalComputer_k.InputControlStates.EmergencyAccessDevice = 0.0;
      rtb_ElectricalComputer_k.InputControlStates.EmergencyEgressDevice =
        (rtb_AND_p ||
         (BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_n]
          .LeftDoor4EED != 0.0));
      rtb_ElectricalComputer_k.InputControlStates.LocalDoorIsolationLock =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_n]
        .LeftDoor4Lockout;
      rtb_ElectricalComputer_k.InputControlStates.OpenCloseWidget =
        BEML_EMU_P.CoreSubsys_lb.Gain_Gain_gx *
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_n]
        .LeftDoor4ManualClose +
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_n]
        .LeftDoor4ManualOpen;

      /* MultiPortSwitch: '<S154>/Index Vector1' incorporates:
       *  Constant: '<S154>/Constant1'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant1_Value_n))
  {
       case 1:
        rtb_AND_p = rtb_Compare_nf2;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_oi;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_jb;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_ig;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_pr;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_h1i;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_cy;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_oj;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector1' */

      /* BusAssignment: '<S160>/Faults' incorporates:
       *  DataTypeConversion: '<S160>/Data Type Conversion2'
       */
      rtb_ElectricalComputer_k.Faults.ObjectObstructingDoorWhileClosing =
        rtb_AND_p;

      /* MultiPortSwitch: '<S154>/Index Vector2' incorporates:
       *  Constant: '<S154>/Constant1'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant1_Value_n))
  {
       case 1:
        rtb_AND_p = rtb_Compare_hg;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_ec;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_pw;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_co;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_ld;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_gt;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_a5;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_jzm;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector2' */

      /* BusAssignment: '<S160>/Faults' incorporates:
       *  DataTypeConversion: '<S160>/Data Type Conversion12'
       */
      rtb_ElectricalComputer_k.Faults.ObjectObstructingDoorWhileOpening =
        rtb_AND_p;

      /* MultiPortSwitch: '<S154>/Index Vector17' incorporates:
       *  Constant: '<S154>/Constant1'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant1_Value_n))
  {
       case 1:
        rtb_AND_p = rtb_Compare_fig;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_mn;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_gni;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_ev;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_ky;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_ej;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_bd;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_cv2;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector17' */

      /* BusAssignment: '<S160>/Faults' incorporates:
       *  DataTypeConversion: '<S160>/Data Type Conversion6'
       */
      rtb_ElectricalComputer_k.Faults.DoorFailToClose = rtb_AND_p;

      /* MultiPortSwitch: '<S154>/Index Vector25' incorporates:
       *  Constant: '<S154>/Constant1'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant1_Value_n))
  {
       case 1:
        rtb_AND_p = rtb_Compare_b4;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_d1;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_l;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_ef;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_mq;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_fz;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_bw;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_px;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector25' */

      /* BusAssignment: '<S160>/Faults' incorporates:
       *  DataTypeConversion: '<S160>/Data Type Conversion4'
       */
      rtb_ElectricalComputer_k.Faults.DoorFailToOpen = rtb_AND_p;

      /* MultiPortSwitch: '<S154>/Index Vector53' incorporates:
       *  Constant: '<S154>/Constant1'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant1_Value_n))
  {
       case 1:
        rtb_AND_p = rtb_CollisionDetected;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_g42;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_ja;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_kq;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_nsw;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_nn;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_pg;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_or;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector53' */

      /* BusAssignment: '<S160>/Faults' incorporates:
       *  DataTypeConversion: '<S160>/Data Type Conversion22'
       */
      rtb_ElectricalComputer_k.Faults.DoorMotorCircuitFailure = 0.0;
      rtb_ElectricalComputer_k.Faults.DoorFailedToLock = 0.0;
      rtb_ElectricalComputer_k.Faults.DoorFailedToUnlock = 0.0;
      rtb_ElectricalComputer_k.Faults.DoorUnexpectedUnlocking = 0.0;
      rtb_ElectricalComputer_k.Faults.DoorDCUFailure = 0.0;
      rtb_ElectricalComputer_k.Faults.DCSRFailure = 0.0;
      rtb_ElectricalComputer_k.Faults.DCSLFailure = 0.0;
      rtb_ElectricalComputer_k.Faults.DLSRFailure = 0.0;
      rtb_ElectricalComputer_k.Faults.DLSLFailure = 0.0;
      rtb_ElectricalComputer_k.Faults.DoorMajorFault = 0.0;
      rtb_ElectricalComputer_k.Faults.UnexpectedDoorOpeningDetectedByCC =
        rtb_AND_p;

      /* BusAssignment: '<S160>/Electrical' incorporates:
       *  ForEachSliceSelector generated from: '<S150>/ElectricalSystemVehicleOut'
       *  Outport: '<Root>/ElectricalOutput'
       */
      rtb_ElectricalComputer_k.ElectricalSignals.DoorControlPower =
        BEML_EMU_Y.ElectricalOutput[ForEach_itr_n].Doors.DCUPower[3];
      rtb_ElectricalComputer_k.ElectricalSignals.DoorMotorPower =
        BEML_EMU_Y.ElectricalOutput[ForEach_itr_n].Doors.DoorMotorPower;

      /* BusAssignment: '<S160>/ElectricalComputer' incorporates:
       *  ForEachSliceSelector generated from: '<S150>/TCMSSystemVehicleOut'
       *  Outport: '<Root>/TCMSOutput'
       */
      rtb_ElectricalComputer_k.ElectricalSignals.DoorIsolation =
        BEML_EMU_Y.TCMSOutput[ForEach_itr_n].
        Control.DoorSystem.DoorLeft4Isolation;

      /* ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput' incorporates:
       *  BusAssignment: '<S161>/Controls1'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[4] = rtb_ElectricalComputer_n;

      /* BusAssignment: '<S161>/Controls1' incorporates:
       *  Constant: '<S161>/isLeft'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[4].Config.isLeft = BEML_EMU_P.CoreSubsys_lb.DR1_isLeft;

      /* Logic: '<S161>/OR' */
      rtb_AND_p = false;

      /* BusAssignment: '<S161>/Controls' incorporates:
       *  DataTypeConversion: '<S161>/Data Type Conversion1'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[4].InputControlStates.LocalDoorOpenPB = 0.0;

      /* MultiPortSwitch: '<S154>/Index Vector68' incorporates:
       *  Constant: '<S154>/Constant5'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant5_Value)) {
       case 1:
        rtb_AND_p = rtb_Compare_mk;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_ll;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_gd;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_eib;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_ha;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_j1;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_lx1;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_og;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector68' */

      /* BusAssignment: '<S161>/Controls' incorporates:
       *  DataTypeConversion: '<S161>/Data Type Conversion14'
       *  DataTypeConversion: '<S161>/Data Type Conversion5'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       *  Gain: '<S161>/Gain'
       *  Logic: '<S154>/AND2'
       *  Logic: '<S154>/OR1'
       *  Sum: '<S161>/Sum'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[4].InputControlStates.EmergencyAccessDevice =
        (BEML_EMU_B.ImpAsg_InsertedFor_HasCab_at_inport_0[ForEach_itr_n] &&
         (BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_n]
          .RightDoorEAD != 0.0));
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[4].InputControlStates.EmergencyEgressDevice = (rtb_AND_p ||
        (BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_n]
         .RightDoor1EED != 0.0) ||
        (BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_n]
         .CabEEDRight != 0.0));
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[4].InputControlStates.LocalDoorIsolationLock =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_n]
        .RightDoor1Lockout;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[4].InputControlStates.OpenCloseWidget =
        BEML_EMU_P.CoreSubsys_lb.Gain_Gain_ng *
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_n]
        .RightDoor1ManualClose +
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_n]
        .RightDoor1ManualOpen;

      /* MultiPortSwitch: '<S154>/Index Vector9' incorporates:
       *  Constant: '<S154>/Constant5'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant5_Value)) {
       case 1:
        rtb_AND_p = rtb_Compare_nf2;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_oi;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_jb;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_ig;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_pr;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_h1i;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_cy;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_oj;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector9' */

      /* BusAssignment: '<S161>/Faults' incorporates:
       *  DataTypeConversion: '<S161>/Data Type Conversion2'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[4].Faults.ObjectObstructingDoorWhileClosing = rtb_AND_p;

      /* MultiPortSwitch: '<S154>/Index Vector10' incorporates:
       *  Constant: '<S154>/Constant5'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant5_Value)) {
       case 1:
        rtb_AND_p = rtb_Compare_hg;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_ec;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_pw;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_co;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_ld;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_gt;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_a5;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_jzm;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector10' */

      /* BusAssignment: '<S161>/Faults' incorporates:
       *  DataTypeConversion: '<S161>/Data Type Conversion12'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[4].Faults.ObjectObstructingDoorWhileOpening = rtb_AND_p;

      /* MultiPortSwitch: '<S154>/Index Vector21' incorporates:
       *  Constant: '<S154>/Constant5'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant5_Value)) {
       case 1:
        rtb_AND_p = rtb_Compare_fig;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_mn;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_gni;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_ev;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_ky;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_ej;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_bd;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_cv2;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector21' */

      /* BusAssignment: '<S161>/Faults' incorporates:
       *  DataTypeConversion: '<S161>/Data Type Conversion6'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[4].Faults.DoorFailToClose = rtb_AND_p;

      /* MultiPortSwitch: '<S154>/Index Vector29' incorporates:
       *  Constant: '<S154>/Constant5'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant5_Value)) {
       case 1:
        rtb_AND_p = rtb_Compare_b4;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_d1;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_l;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_ef;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_mq;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_fz;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_bw;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_px;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector29' */

      /* BusAssignment: '<S161>/Faults' incorporates:
       *  DataTypeConversion: '<S161>/Data Type Conversion4'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[4].Faults.DoorFailToOpen = rtb_AND_p;

      /* MultiPortSwitch: '<S154>/Index Vector59' incorporates:
       *  Constant: '<S154>/Constant5'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant5_Value)) {
       case 1:
        rtb_AND_p = rtb_CollisionDetected;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_g42;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_ja;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_kq;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_nsw;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_nn;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_pg;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_or;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector59' */

      /* BusAssignment: '<S161>/Faults' incorporates:
       *  DataTypeConversion: '<S161>/Data Type Conversion22'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[4].Faults.DoorMotorCircuitFailure = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[4].Faults.DoorFailedToLock = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[4].Faults.DoorFailedToUnlock = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[4].Faults.DoorUnexpectedUnlocking = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[4].Faults.DoorDCUFailure = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[4].Faults.DCSRFailure = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[4].Faults.DCSLFailure = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[4].Faults.DLSRFailure = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[4].Faults.DLSLFailure = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[4].Faults.DoorMajorFault = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[4].Faults.UnexpectedDoorOpeningDetectedByCC = rtb_AND_p;

      /* BusAssignment: '<S161>/Electrical' incorporates:
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       *  Outport: '<Root>/ElectricalOutput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[4].ElectricalSignals.DoorControlPower =
        BEML_EMU_Y.ElectricalOutput[ForEach_itr_n].Doors.DCUPower[4];
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[4].ElectricalSignals.DoorMotorPower =
        BEML_EMU_Y.ElectricalOutput[ForEach_itr_n].Doors.DoorMotorPower;

      /* BusAssignment: '<S161>/ElectricalComputer' incorporates:
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       *  Outport: '<Root>/TCMSOutput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[4].ElectricalSignals.DoorIsolation =
        BEML_EMU_Y.TCMSOutput[ForEach_itr_n].
        Control.DoorSystem.DoorRight1Isolation;

      /* ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput' incorporates:
       *  BusAssignment: '<S162>/Controls1'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[5] = rtb_ElectricalComputer_n;

      /* BusAssignment: '<S162>/Controls1' incorporates:
       *  Constant: '<S162>/isLeft'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[5].Config.isLeft = BEML_EMU_P.CoreSubsys_lb.DR2_isLeft;

      /* Logic: '<S162>/OR' */
      rtb_AND_p = false;

      /* BusAssignment: '<S162>/Controls' incorporates:
       *  DataTypeConversion: '<S162>/Data Type Conversion1'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[5].InputControlStates.LocalDoorOpenPB = 0.0;

      /* MultiPortSwitch: '<S154>/Index Vector63' incorporates:
       *  Constant: '<S154>/Constant6'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant6_Value)) {
       case 1:
        rtb_AND_p = rtb_Compare_mk;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_ll;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_gd;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_eib;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_ha;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_j1;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_lx1;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_og;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector63' */

      /* BusAssignment: '<S162>/Controls' incorporates:
       *  DataTypeConversion: '<S162>/Data Type Conversion14'
       *  DataTypeConversion: '<S162>/Data Type Conversion5'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       *  Gain: '<S162>/Gain'
       *  Logic: '<S154>/OR4'
       *  Sum: '<S162>/Sum'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[5].InputControlStates.EmergencyAccessDevice = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[5].InputControlStates.EmergencyEgressDevice = (rtb_AND_p ||
        (BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_n]
         .RightDoor2EED != 0.0));
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[5].InputControlStates.LocalDoorIsolationLock =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_n]
        .RightDoor2Lockout;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[5].InputControlStates.OpenCloseWidget =
        BEML_EMU_P.CoreSubsys_lb.Gain_Gain_h *
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_n]
        .RightDoor2ManualClose +
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_n]
        .RightDoor2ManualOpen;

      /* MultiPortSwitch: '<S154>/Index Vector12' incorporates:
       *  Constant: '<S154>/Constant6'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant6_Value)) {
       case 1:
        rtb_AND_p = rtb_Compare_nf2;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_oi;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_jb;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_ig;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_pr;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_h1i;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_cy;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_oj;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector12' */

      /* BusAssignment: '<S162>/Faults' incorporates:
       *  DataTypeConversion: '<S162>/Data Type Conversion2'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[5].Faults.ObjectObstructingDoorWhileClosing = rtb_AND_p;

      /* MultiPortSwitch: '<S154>/Index Vector11' incorporates:
       *  Constant: '<S154>/Constant6'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant6_Value)) {
       case 1:
        rtb_AND_p = rtb_Compare_hg;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_ec;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_pw;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_co;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_ld;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_gt;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_a5;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_jzm;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector11' */

      /* BusAssignment: '<S162>/Faults' incorporates:
       *  DataTypeConversion: '<S162>/Data Type Conversion12'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[5].Faults.ObjectObstructingDoorWhileOpening = rtb_AND_p;

      /* MultiPortSwitch: '<S154>/Index Vector22' incorporates:
       *  Constant: '<S154>/Constant6'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant6_Value)) {
       case 1:
        rtb_AND_p = rtb_Compare_fig;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_mn;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_gni;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_ev;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_ky;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_ej;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_bd;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_cv2;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector22' */

      /* BusAssignment: '<S162>/Faults' incorporates:
       *  DataTypeConversion: '<S162>/Data Type Conversion6'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[5].Faults.DoorFailToClose = rtb_AND_p;

      /* MultiPortSwitch: '<S154>/Index Vector30' incorporates:
       *  Constant: '<S154>/Constant6'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant6_Value)) {
       case 1:
        rtb_AND_p = rtb_Compare_b4;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_d1;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_l;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_ef;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_mq;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_fz;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_bw;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_px;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector30' */

      /* BusAssignment: '<S162>/Faults' incorporates:
       *  DataTypeConversion: '<S162>/Data Type Conversion4'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[5].Faults.DoorFailToOpen = rtb_AND_p;

      /* MultiPortSwitch: '<S154>/Index Vector58' incorporates:
       *  Constant: '<S154>/Constant6'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant6_Value)) {
       case 1:
        rtb_AND_p = rtb_CollisionDetected;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_g42;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_ja;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_kq;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_nsw;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_nn;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_pg;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_or;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector58' */

      /* BusAssignment: '<S162>/Faults' incorporates:
       *  DataTypeConversion: '<S162>/Data Type Conversion22'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[5].Faults.DoorMotorCircuitFailure = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[5].Faults.DoorFailedToLock = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[5].Faults.DoorFailedToUnlock = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[5].Faults.DoorUnexpectedUnlocking = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[5].Faults.DoorDCUFailure = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[5].Faults.DCSRFailure = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[5].Faults.DCSLFailure = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[5].Faults.DLSRFailure = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[5].Faults.DLSLFailure = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[5].Faults.DoorMajorFault = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[5].Faults.UnexpectedDoorOpeningDetectedByCC = rtb_AND_p;

      /* BusAssignment: '<S162>/Electrical' incorporates:
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       *  Outport: '<Root>/ElectricalOutput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[5].ElectricalSignals.DoorControlPower =
        BEML_EMU_Y.ElectricalOutput[ForEach_itr_n].Doors.DCUPower[5];
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[5].ElectricalSignals.DoorMotorPower =
        BEML_EMU_Y.ElectricalOutput[ForEach_itr_n].Doors.DoorMotorPower;

      /* BusAssignment: '<S162>/ElectricalComputer' incorporates:
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       *  Outport: '<Root>/TCMSOutput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[5].ElectricalSignals.DoorIsolation =
        BEML_EMU_Y.TCMSOutput[ForEach_itr_n].
        Control.DoorSystem.DoorRight2Isolation;

      /* ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput' incorporates:
       *  BusAssignment: '<S163>/Controls1'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[6] = rtb_ElectricalComputer_n;

      /* BusAssignment: '<S163>/Controls1' incorporates:
       *  Constant: '<S163>/isLeft'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[6].Config.isLeft = BEML_EMU_P.CoreSubsys_lb.DR3_isLeft;

      /* Logic: '<S163>/OR' */
      rtb_AND_p = false;

      /* BusAssignment: '<S163>/Controls' incorporates:
       *  DataTypeConversion: '<S163>/Data Type Conversion1'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[6].InputControlStates.LocalDoorOpenPB = 0.0;

      /* MultiPortSwitch: '<S154>/Index Vector67' incorporates:
       *  Constant: '<S154>/Constant7'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant7_Value)) {
       case 1:
        rtb_AND_p = rtb_Compare_mk;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_ll;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_gd;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_eib;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_ha;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_j1;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_lx1;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_og;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector67' */

      /* BusAssignment: '<S163>/Controls' incorporates:
       *  DataTypeConversion: '<S163>/Data Type Conversion14'
       *  DataTypeConversion: '<S163>/Data Type Conversion5'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       *  Gain: '<S163>/Gain'
       *  Logic: '<S154>/AND4'
       *  Logic: '<S154>/OR8'
       *  Sum: '<S163>/Sum'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[6].InputControlStates.EmergencyAccessDevice = (tmp_1 &&
        (BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_n]
         .RightDoorEAD != 0.0));
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[6].InputControlStates.EmergencyEgressDevice = (rtb_AND_p ||
        (BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_n]
         .RightDoor3EED != 0.0));
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[6].InputControlStates.LocalDoorIsolationLock =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_n]
        .RightDoor3Lockout;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[6].InputControlStates.OpenCloseWidget =
        BEML_EMU_P.CoreSubsys_lb.Gain_Gain_o *
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_n]
        .RightDoor3ManualClose +
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_n]
        .RightDoor3ManualOpen;

      /* MultiPortSwitch: '<S154>/Index Vector14' incorporates:
       *  Constant: '<S154>/Constant7'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant7_Value)) {
       case 1:
        rtb_AND_p = rtb_Compare_nf2;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_oi;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_jb;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_ig;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_pr;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_h1i;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_cy;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_oj;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector14' */

      /* BusAssignment: '<S163>/Faults' incorporates:
       *  DataTypeConversion: '<S163>/Data Type Conversion2'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[6].Faults.ObjectObstructingDoorWhileClosing = rtb_AND_p;

      /* MultiPortSwitch: '<S154>/Index Vector13' incorporates:
       *  Constant: '<S154>/Constant7'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant7_Value)) {
       case 1:
        rtb_AND_p = rtb_Compare_hg;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_ec;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_pw;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_co;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_ld;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_gt;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_a5;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_jzm;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector13' */

      /* BusAssignment: '<S163>/Faults' incorporates:
       *  DataTypeConversion: '<S163>/Data Type Conversion12'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[6].Faults.ObjectObstructingDoorWhileOpening = rtb_AND_p;

      /* MultiPortSwitch: '<S154>/Index Vector23' incorporates:
       *  Constant: '<S154>/Constant7'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant7_Value)) {
       case 1:
        rtb_AND_p = rtb_Compare_fig;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_mn;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_gni;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_ev;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_ky;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_ej;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_bd;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_cv2;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector23' */

      /* BusAssignment: '<S163>/Faults' incorporates:
       *  DataTypeConversion: '<S163>/Data Type Conversion6'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[6].Faults.DoorFailToClose = rtb_AND_p;

      /* MultiPortSwitch: '<S154>/Index Vector31' incorporates:
       *  Constant: '<S154>/Constant7'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant7_Value)) {
       case 1:
        rtb_AND_p = rtb_Compare_b4;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_d1;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_l;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_ef;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_mq;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_fz;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_bw;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_px;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector31' */

      /* BusAssignment: '<S163>/Faults' incorporates:
       *  DataTypeConversion: '<S163>/Data Type Conversion4'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[6].Faults.DoorFailToOpen = rtb_AND_p;

      /* MultiPortSwitch: '<S154>/Index Vector57' incorporates:
       *  Constant: '<S154>/Constant7'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant7_Value)) {
       case 1:
        rtb_AND_p = rtb_CollisionDetected;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_g42;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_ja;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_kq;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_nsw;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_nn;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_pg;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_or;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector57' */

      /* BusAssignment: '<S163>/Faults' incorporates:
       *  DataTypeConversion: '<S163>/Data Type Conversion22'
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[6].Faults.DoorMotorCircuitFailure = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[6].Faults.DoorFailedToLock = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[6].Faults.DoorFailedToUnlock = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[6].Faults.DoorUnexpectedUnlocking = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[6].Faults.DoorDCUFailure = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[6].Faults.DCSRFailure = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[6].Faults.DCSLFailure = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[6].Faults.DLSRFailure = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[6].Faults.DLSLFailure = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[6].Faults.DoorMajorFault = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[6].Faults.UnexpectedDoorOpeningDetectedByCC = rtb_AND_p;

      /* BusAssignment: '<S163>/Electrical' incorporates:
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       *  Outport: '<Root>/ElectricalOutput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[6].ElectricalSignals.DoorControlPower =
        BEML_EMU_Y.ElectricalOutput[ForEach_itr_n].Doors.DCUPower[6];
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[6].ElectricalSignals.DoorMotorPower =
        BEML_EMU_Y.ElectricalOutput[ForEach_itr_n].Doors.DoorMotorPower;

      /* BusAssignment: '<S163>/ElectricalComputer' incorporates:
       *  ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput'
       *  Outport: '<Root>/TCMSOutput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[6].ElectricalSignals.DoorIsolation =
        BEML_EMU_Y.TCMSOutput[ForEach_itr_n].
        Control.DoorSystem.DoorRight3Isolation;

      /* BusAssignment: '<S164>/Controls1' incorporates:
       *  Constant: '<S164>/isLeft'
       */
      rtb_ElectricalComputer_n.Config.isLeft =
        BEML_EMU_P.CoreSubsys_lb.DR4_isLeft;

      /* Logic: '<S164>/OR' */
      rtb_AND_p = false;

      /* BusAssignment: '<S164>/Controls' incorporates:
       *  DataTypeConversion: '<S164>/Data Type Conversion1'
       */
      rtb_ElectricalComputer_n.InputControlStates.LocalDoorOpenPB = 0.0;

      /* MultiPortSwitch: '<S154>/Index Vector61' incorporates:
       *  Constant: '<S154>/Constant8'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant8_Value)) {
       case 1:
        rtb_AND_p = rtb_Compare_mk;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_ll;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_gd;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_eib;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_ha;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_j1;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_lx1;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_og;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector61' */

      /* BusAssignment: '<S164>/Controls' incorporates:
       *  DataTypeConversion: '<S164>/Data Type Conversion14'
       *  DataTypeConversion: '<S164>/Data Type Conversion5'
       *  ForEachSliceSelector generated from: '<S150>/InputControlStates'
       *  Gain: '<S164>/Gain'
       *  Logic: '<S154>/OR2'
       *  Sum: '<S164>/Sum'
       */
      rtb_ElectricalComputer_n.InputControlStates.EmergencyAccessDevice = 0.0;
      rtb_ElectricalComputer_n.InputControlStates.EmergencyEgressDevice =
        (rtb_AND_p ||
         (BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_n]
          .RightDoor4EED != 0.0));
      rtb_ElectricalComputer_n.InputControlStates.LocalDoorIsolationLock =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_n]
        .RightDoor4Lockout;
      rtb_ElectricalComputer_n.InputControlStates.OpenCloseWidget =
        BEML_EMU_P.CoreSubsys_lb.Gain_Gain_j *
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_n]
        .RightDoor4ManualClose +
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_n]
        .RightDoor4ManualOpen;

      /* MultiPortSwitch: '<S154>/Index Vector16' incorporates:
       *  Constant: '<S154>/Constant8'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant8_Value)) {
       case 1:
        rtb_AND_p = rtb_Compare_nf2;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_oi;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_jb;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_ig;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_pr;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_h1i;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_cy;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_oj;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector16' */

      /* BusAssignment: '<S164>/Faults' incorporates:
       *  DataTypeConversion: '<S164>/Data Type Conversion2'
       */
      rtb_ElectricalComputer_n.Faults.ObjectObstructingDoorWhileClosing =
        rtb_AND_p;

      /* MultiPortSwitch: '<S154>/Index Vector15' incorporates:
       *  Constant: '<S154>/Constant8'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant8_Value)) {
       case 1:
        rtb_AND_p = rtb_Compare_hg;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_ec;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_pw;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_co;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_ld;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_gt;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_a5;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_jzm;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector15' */

      /* BusAssignment: '<S164>/Faults' incorporates:
       *  DataTypeConversion: '<S164>/Data Type Conversion12'
       */
      rtb_ElectricalComputer_n.Faults.ObjectObstructingDoorWhileOpening =
        rtb_AND_p;

      /* MultiPortSwitch: '<S154>/Index Vector24' incorporates:
       *  Constant: '<S154>/Constant8'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant8_Value)) {
       case 1:
        rtb_AND_p = rtb_Compare_fig;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_mn;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_gni;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_ev;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_ky;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_ej;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_bd;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_cv2;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector24' */

      /* BusAssignment: '<S164>/Faults' incorporates:
       *  DataTypeConversion: '<S164>/Data Type Conversion6'
       */
      rtb_ElectricalComputer_n.Faults.DoorFailToClose = rtb_AND_p;

      /* MultiPortSwitch: '<S154>/Index Vector32' incorporates:
       *  Constant: '<S154>/Constant8'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant8_Value)) {
       case 1:
        rtb_AND_p = rtb_Compare_b4;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_d1;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_l;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_ef;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_mq;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_fz;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_bw;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_px;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector32' */

      /* BusAssignment: '<S164>/Faults' incorporates:
       *  DataTypeConversion: '<S164>/Data Type Conversion4'
       */
      rtb_ElectricalComputer_n.Faults.DoorFailToOpen = rtb_AND_p;

      /* MultiPortSwitch: '<S154>/Index Vector45' incorporates:
       *  Constant: '<S154>/Constant8'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant8_Value)) {
       case 1:
        rtb_AND_p = rtb_Compare_hut;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_fk;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_ot;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_bp;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_kxn;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_ds;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_hcg;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_h1;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector45' */

      /* BusAssignment: '<S164>/Faults' incorporates:
       *  DataTypeConversion: '<S164>/Data Type Conversion7'
       */
      rtb_ElectricalComputer_n.Faults.DoorMotorCircuitFailure = rtb_AND_p;

      /* MultiPortSwitch: '<S154>/Index Vector46' incorporates:
       *  Constant: '<S154>/Constant8'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant8_Value)) {
       case 1:
        rtb_AND_p = rtb_Compare_mg;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_j1h;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_fb;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_bo;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_aj;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_ct;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_np;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_dw;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector46' */

      /* BusAssignment: '<S164>/Faults' incorporates:
       *  DataTypeConversion: '<S164>/Data Type Conversion11'
       */
      rtb_ElectricalComputer_n.Faults.DoorFailedToLock = rtb_AND_p;

      /* MultiPortSwitch: '<S154>/Index Vector43' incorporates:
       *  Constant: '<S154>/Constant8'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant8_Value)) {
       case 1:
        rtb_AND_p = rtb_Compare_ogo;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_h4;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_c4;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_by;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_ff;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_pwe;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_is;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_bj1;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector43' */

      /* BusAssignment: '<S164>/Faults' incorporates:
       *  DataTypeConversion: '<S164>/Data Type Conversion10'
       */
      rtb_ElectricalComputer_n.Faults.DoorFailedToUnlock = rtb_AND_p;

      /* MultiPortSwitch: '<S154>/Index Vector44' incorporates:
       *  Constant: '<S154>/Constant8'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant8_Value)) {
       case 1:
        rtb_AND_p = rtb_Compare_ioy;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_el;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_i0r;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_da;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_em;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_nz;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_mp;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_a0;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector44' */

      /* BusAssignment: '<S164>/Faults' incorporates:
       *  DataTypeConversion: '<S164>/Data Type Conversion16'
       */
      rtb_ElectricalComputer_n.Faults.DoorUnexpectedUnlocking = rtb_AND_p;

      /* MultiPortSwitch: '<S154>/Index Vector47' incorporates:
       *  Constant: '<S154>/Constant8'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant8_Value)) {
       case 1:
        rtb_AND_p = rtb_Compare_j3m;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_of;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_jc;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_mvr;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_gh;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_hs;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_oc;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_ca;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector47' */

      /* BusAssignment: '<S164>/Faults' incorporates:
       *  DataTypeConversion: '<S164>/Data Type Conversion13'
       */
      rtb_ElectricalComputer_n.Faults.DoorDCUFailure = rtb_AND_p;

      /* MultiPortSwitch: '<S154>/Index Vector48' incorporates:
       *  Constant: '<S154>/Constant8'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant8_Value)) {
       case 1:
        rtb_AND_p = rtb_Compare_h3;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_nk;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_kf;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_lv;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_n2g;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_po;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_kn;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_oy;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector48' */

      /* BusAssignment: '<S164>/Faults' incorporates:
       *  DataTypeConversion: '<S164>/Data Type Conversion17'
       */
      rtb_ElectricalComputer_n.Faults.DCSRFailure = rtb_AND_p;

      /* MultiPortSwitch: '<S154>/Index Vector51' incorporates:
       *  Constant: '<S154>/Constant8'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant8_Value)) {
       case 1:
        rtb_AND_p = rtb_Compare_ch;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_jkj;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_dnu;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_prw;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_aw;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_e2;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_gu;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_kz;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector51' */

      /* BusAssignment: '<S164>/Faults' incorporates:
       *  DataTypeConversion: '<S164>/Data Type Conversion18'
       */
      rtb_ElectricalComputer_n.Faults.DCSLFailure = rtb_AND_p;

      /* MultiPortSwitch: '<S154>/Index Vector52' incorporates:
       *  Constant: '<S154>/Constant8'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant8_Value)) {
       case 1:
        rtb_AND_p = rtb_Compare_od;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_bdp;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_fp;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_lx;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_hi;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_eb;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_bt;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_oyf;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector52' */

      /* BusAssignment: '<S164>/Faults' incorporates:
       *  DataTypeConversion: '<S164>/Data Type Conversion20'
       */
      rtb_ElectricalComputer_n.Faults.DLSRFailure = rtb_AND_p;

      /* MultiPortSwitch: '<S154>/Index Vector49' incorporates:
       *  Constant: '<S154>/Constant8'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant8_Value)) {
       case 1:
        rtb_AND_p = rtb_Compare_n3;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_ht;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_am;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_ges;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_hj;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_hrr;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_dy;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_au;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector49' */

      /* BusAssignment: '<S164>/Faults' incorporates:
       *  DataTypeConversion: '<S164>/Data Type Conversion19'
       */
      rtb_ElectricalComputer_n.Faults.DLSLFailure = rtb_AND_p;

      /* MultiPortSwitch: '<S154>/Index Vector50' incorporates:
       *  Constant: '<S154>/Constant8'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant8_Value)) {
       case 1:
        rtb_AND_p = rtb_Compare_nb;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_mw;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_i1;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_hu;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_cf;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_eh;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_eb2;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_k01;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector50' */

      /* BusAssignment: '<S164>/Faults' incorporates:
       *  DataTypeConversion: '<S164>/Data Type Conversion21'
       */
      rtb_ElectricalComputer_n.Faults.DoorMajorFault = rtb_AND_p;

      /* MultiPortSwitch: '<S154>/Index Vector60' incorporates:
       *  Constant: '<S154>/Constant8'
       */
      switch (static_cast<int32_T>(BEML_EMU_P.CoreSubsys_lb.Constant8_Value)) {
       case 1:
        rtb_AND_p = rtb_CollisionDetected;
        break;

       case 2:
        rtb_AND_p = rtb_Compare_g42;
        break;

       case 3:
        rtb_AND_p = rtb_Compare_ja;
        break;

       case 4:
        rtb_AND_p = rtb_Compare_kq;
        break;

       case 5:
        rtb_AND_p = rtb_Compare_nsw;
        break;

       case 6:
        rtb_AND_p = rtb_Compare_nn;
        break;

       case 7:
        rtb_AND_p = rtb_Compare_pg;
        break;

       case 8:
        rtb_AND_p = rtb_Compare_or;
        break;
      }

      /* End of MultiPortSwitch: '<S154>/Index Vector60' */

      /* BusAssignment: '<S164>/Faults' incorporates:
       *  DataTypeConversion: '<S164>/Data Type Conversion22'
       */
      rtb_ElectricalComputer_n.Faults.UnexpectedDoorOpeningDetectedByCC =
        rtb_AND_p;

      /* BusAssignment: '<S164>/Electrical' incorporates:
       *  ForEachSliceSelector generated from: '<S150>/ElectricalSystemVehicleOut'
       *  Outport: '<Root>/ElectricalOutput'
       */
      rtb_ElectricalComputer_n.ElectricalSignals.DoorControlPower =
        BEML_EMU_Y.ElectricalOutput[ForEach_itr_n].Doors.DCUPower[7];
      rtb_ElectricalComputer_n.ElectricalSignals.DoorMotorPower =
        BEML_EMU_Y.ElectricalOutput[ForEach_itr_n].Doors.DoorMotorPower;

      /* BusAssignment: '<S164>/ElectricalComputer' incorporates:
       *  ForEachSliceSelector generated from: '<S150>/TCMSSystemVehicleOut'
       *  Outport: '<Root>/TCMSOutput'
       */
      rtb_ElectricalComputer_n.ElectricalSignals.DoorIsolation =
        BEML_EMU_Y.TCMSOutput[ForEach_itr_n].
        Control.DoorSystem.DoorRight4Isolation;

      /* ForEachSliceAssignment generated from: '<S150>/Overrides' incorporates:
       *  Constant: '<S150>/Constant1'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_Overrides_at_inport_0_j[ForEach_itr_n] =
        BEML_EMU_P.CoreSubsys_lb.Constant1_Value_p;

      /* ForEachSliceAssignment generated from: '<S150>/EmergencyDoorInputs' incorporates:
       *  DataTypeConversion: '<S155>/Data Type Conversion'
       *  DataTypeConversion: '<S155>/Data Type Conversion1'
       *  DataTypeConversion: '<S155>/Data Type Conversion5'
       *  DataTypeConversion: '<S155>/Data Type Conversion6'
       *  Outport: '<Root>/ElectricalOutput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_EmergencyDoorInputs_at_inport_0[ForEach_itr_n]
        .RampHandle =
        (BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_n]
         .RampHandle != 0.0);
      BEML_EMU_B.ImpAsg_InsertedFor_EmergencyDoorInputs_at_inport_0[ForEach_itr_n]
        .EmergencyDoorHandle =
        (BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_n]
         .RampCover != 0.0);
      BEML_EMU_B.ImpAsg_InsertedFor_EmergencyDoorInputs_at_inport_0[ForEach_itr_n]
        .DoorWinder =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_n]
        .DoorWinder;
      BEML_EMU_B.ImpAsg_InsertedFor_EmergencyDoorInputs_at_inport_0[ForEach_itr_n]
        .RampWinder =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_n]
        .RampWinder;
      BEML_EMU_B.ImpAsg_InsertedFor_EmergencyDoorInputs_at_inport_0[ForEach_itr_n]
        .EmerDoorLatched = BEML_EMU_Y.ElectricalOutput[ForEach_itr_n].
        Doors.EmerDoorLatched;
      BEML_EMU_B.ImpAsg_InsertedFor_EmergencyDoorInputs_at_inport_0[ForEach_itr_n]
        .EmerDoorOpenFault = BEML_EMU_Y.ElectricalOutput[ForEach_itr_n].
        Doors.EmerDoorOpenFault;
      BEML_EMU_B.ImpAsg_InsertedFor_EmergencyDoorInputs_at_inport_0[ForEach_itr_n]
        .EmergencyDoorMechanicalUnlocked =
        BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_n]
        .DoorFaults.EmergencyDoorMechanicalUnlocked;
      BEML_EMU_B.ImpAsg_InsertedFor_EmergencyDoorInputs_at_inport_0[ForEach_itr_n]
        .RampCoverLockingLever =
        BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_n]
        .RampCoverLockingLever;
      BEML_EMU_B.ImpAsg_InsertedFor_EmergencyDoorInputs_at_inport_0[ForEach_itr_n]
        .RampMiddleSupport =
        (BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_n]
         .RampMiddleSupport != 0.0);
      BEML_EMU_B.ImpAsg_InsertedFor_EmergencyDoorInputs_at_inport_0[ForEach_itr_n]
        .EmergencyDoorGasSpring =
        (BEML_EMU_B.ImpAsg_InsertedFor_InputControlStates_at_inport_0[ForEach_itr_n]
         .EmergencyDoorGasSpring != 0.0);
      BEML_EMU_B.ImpAsg_InsertedFor_EmergencyDoorInputs_at_inport_0[ForEach_itr_n]
        .HasCab = BEML_EMU_B.ImpAsg_InsertedFor_HasCab_at_inport_0[ForEach_itr_n];

      /* ForEachSliceAssignment generated from: '<S150>/DoorsVehicleInput' incorporates:
       *  Concatenate: '<S154>/Vector Concatenate1'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[3] = rtb_ElectricalComputer_k;
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[ForEach_itr_n]
        .Doors[7] = rtb_ElectricalComputer_n;
    }

    /* End of Outputs for SubSystem: '<S148>/VehicleInputAdapter' */
    /* End of Outputs for SubSystem: '<S8>/DoorsInputAdapter' */

    /* ModelReference: '<S8>/DoorsSystem' incorporates:
     *  Outport: '<Root>/DoorsVehicleOut'
     */
    DoorSystem
      (&BEML_EMU_B.ImpAsg_InsertedFor_CommonVehicleConfig_at_inport_0_ds[0],
       &BEML_EMU_B.ImpAsg_InsertedFor_DoorsVehicleInput_at_inport_0[0],
       &BEML_EMU_B.ImpAsg_InsertedFor_Overrides_at_inport_0_j[0],
       &BEML_EMU_B.ImpAsg_InsertedFor_EmergencyDoorInputs_at_inport_0[0],
       &BEML_EMU_Y.DoorsVehicleOut[0],
       &(BEML_EMU_DW.DoorsSystem_InstanceData.rtb),
       &(BEML_EMU_DW.DoorsSystem_InstanceData.rtdw),
       &BEML_EMU_P.DoorsSystem_PRM_DoorSystem);
  }

  if ((&BEML_EMU_M)->Timing.TaskCounters.TID[1] == 0) {
    /* Outputs for Atomic SubSystem: '<S14>/TractionInputAdapter' */
    /* Outputs for Atomic SubSystem: '<S5>/BrakesInputAdapter' */
    /* Step: '<S15>/Step' incorporates:
     *  Step: '<S383>/Step'
     */
    rtb_Switch4_f = ((((&BEML_EMU_M)->Timing.clockTick1+(&BEML_EMU_M)
                       ->Timing.clockTickH1* 4294967296.0)) * 0.01);

    /* End of Outputs for SubSystem: '<S14>/TractionInputAdapter' */
    if (rtb_Switch4_f < BEML_EMU_P.Step_Time) {
      rtb_Product_cv = BEML_EMU_P.Step_Y0;
    } else {
      rtb_Product_cv = BEML_EMU_P.Step_YFinal;
    }

    /* End of Step: '<S15>/Step' */

    /* Outputs for Enabled SubSystem: '<S15>/ExtractConfig' incorporates:
     *  EnablePort: '<S16>/Enable'
     */
    if (rtb_Product_cv > 0.0) {
      /* Outputs for Iterator SubSystem: '<S16>/ExtractConfig' incorporates:
       *  ForEach: '<S18>/For Each'
       */
      for (ForEach_itr_ap = 0; ForEach_itr_ap < 8; ForEach_itr_ap++) {
        /* ForEachSliceAssignment generated from: '<S18>/CommonVehicleConfig' incorporates:
         *  Outport: '<Root>/ProcessedVehConf'
         */
        BEML_EMU_B.ImpAsg_InsertedFor_CommonVehicleConfig_at_inport_0_ly[ForEach_itr_ap]
          = BEML_EMU_Y.ProcessedVehConf[ForEach_itr_ap].Common;

        /* ForEachSliceAssignment generated from: '<S18>/BrakesVehicleConfig' incorporates:
         *  Outport: '<Root>/ProcessedVehConf'
         */
        BEML_EMU_B.ImpAsg_InsertedFor_BrakesVehicleConfig_at_inport_0[ForEach_itr_ap]
          = BEML_EMU_Y.ProcessedVehConf[ForEach_itr_ap].Brakes;
      }

      /* End of Outputs for SubSystem: '<S16>/ExtractConfig' */
    }

    /* End of Outputs for SubSystem: '<S15>/ExtractConfig' */

    /* Outputs for Iterator SubSystem: '<S15>/VehicleInputAdapter' incorporates:
     *  ForEach: '<S17>/For Each'
     */
    for (ForEach_itr_jw = 0; ForEach_itr_jw < 8; ForEach_itr_jw++) {
      /* Outputs for Iterator SubSystem: '<S17>/For Each Subsystem' incorporates:
       *  ForEach: '<S19>/For Each'
       */
      for (ForEach_itr_im = 0; ForEach_itr_im < 6; ForEach_itr_im++) {
        /* ForEachSliceAssignment generated from: '<S19>/WheelSpeed' */
        rtb_ImpAsg_InsertedFor_WheelSpeed_at_inport_0_c[ForEach_itr_im] =
          BEML_EMU_B.UnitDelay_j[ForEach_itr_jw].Wheel[ForEach_itr_im].Speed;
      }

      /* End of Outputs for SubSystem: '<S17>/For Each Subsystem' */

      /* ForEachSliceAssignment generated from: '<S17>/BrakesFaults' incorporates:
       *  BusAssignment: '<S17>/Bus Assignment2'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_BrakesFaults_at_inport_0[ForEach_itr_jw].
        BrakeShoeOverheatFault = 0.0;

      /* ForEachSliceAssignment generated from: '<S17>/Overrides' incorporates:
       *  BusAssignment: '<S17>/Bus Assignment1'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_Overrides_at_inport_0_n[ForEach_itr_jw].
        FrictionBrakeForceVariation = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_Overrides_at_inport_0_n[ForEach_itr_jw].
        ParkBrakeOverride = 0.0;

      /* ForEachSliceAssignment generated from: '<S17>/BrakesVehicleInput' incorporates:
       *  BusAssignment: '<S17>/Bus Assignment'
       *  Outport: '<Root>/PneumaticsVehicleOut'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_BrakesVehicleInput_at_inport_0[ForEach_itr_jw]
        .VehicleVelocity = BEML_EMU_B.UnitDelay_j[ForEach_itr_jw].
        Inertia.Velocity;
      for (i = 0; i < 6; i++) {
        BEML_EMU_B.ImpAsg_InsertedFor_BrakesVehicleInput_at_inport_0[ForEach_itr_jw]
          .WheelSpeed[i] = rtb_ImpAsg_InsertedFor_WheelSpeed_at_inport_0_c[i];
        BEML_EMU_B.ImpAsg_InsertedFor_BrakesVehicleInput_at_inport_0[ForEach_itr_jw]
          .BrakeCylinderPressure[i] =
          BEML_EMU_Y.PneumaticsVehicleOut[ForEach_itr_jw].
          AxleBrakes.BrakeCylinderPressures[i];
        BEML_EMU_B.ImpAsg_InsertedFor_BrakesVehicleInput_at_inport_0[ForEach_itr_jw]
          .ParkBrakePressure[i] = BEML_EMU_Y.PneumaticsVehicleOut[ForEach_itr_jw]
          .AxleBrakes.ParkBrakePressures[i];
      }

      BEML_EMU_B.ImpAsg_InsertedFor_BrakesVehicleInput_at_inport_0[ForEach_itr_jw]
        .ManualHandBrakeApplication = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_BrakesVehicleInput_at_inport_0[ForEach_itr_jw]
        .ElectricParkBrakeApplication = 0.0;
    }

    /* End of Outputs for SubSystem: '<S15>/VehicleInputAdapter' */
    /* End of Outputs for SubSystem: '<S5>/BrakesInputAdapter' */

    /* ModelReference: '<S5>/TrainBrakes' incorporates:
     *  Outport: '<Root>/BrakesVehicleOut'
     */
    TrainBrakes
      (&BEML_EMU_B.ImpAsg_InsertedFor_CommonVehicleConfig_at_inport_0_ly[0],
       &BEML_EMU_B.ImpAsg_InsertedFor_BrakesVehicleConfig_at_inport_0[0],
       &BEML_EMU_B.ImpAsg_InsertedFor_BrakesVehicleInput_at_inport_0[0],
       &BEML_EMU_B.ImpAsg_InsertedFor_Overrides_at_inport_0_n[0],
       &BEML_EMU_B.ImpAsg_InsertedFor_BrakesFaults_at_inport_0[0],
       &BEML_EMU_Y.BrakesVehicleOut[0],
       &(BEML_EMU_DW.TrainBrakes_InstanceData.rtb),
       &(BEML_EMU_DW.TrainBrakes_InstanceData.rtdw),
       &BEML_EMU_P.TrainBrakes_PRM_TrainBrakes_Vehicles);

    /* Outputs for Atomic SubSystem: '<S14>/TractionInputAdapter' */
    /* Step: '<S383>/Step' */
    if (rtb_Switch4_f < BEML_EMU_P.Step_Time_d) {
      rtb_Switch4_f = BEML_EMU_P.Step_Y0_h;
    } else {
      rtb_Switch4_f = BEML_EMU_P.Step_YFinal_iz;
    }

    /* Outputs for Enabled SubSystem: '<S383>/ExtractConfig' incorporates:
     *  EnablePort: '<S384>/Enable'
     */
    if (rtb_Switch4_f > 0.0) {
      /* Outputs for Iterator SubSystem: '<S384>/ExtractConfig' incorporates:
       *  ForEach: '<S386>/For Each'
       */
      for (ForEach_itr_hc = 0; ForEach_itr_hc < 8; ForEach_itr_hc++) {
        /* ForEachSliceAssignment generated from: '<S386>/TractionVehicleConfig' incorporates:
         *  Outport: '<Root>/ProcessedVehConf'
         */
        BEML_EMU_B.ImpAsg_InsertedFor_TractionVehicleConfig_at_inport_0[ForEach_itr_hc]
          = BEML_EMU_Y.ProcessedVehConf[ForEach_itr_hc].Traction;

        /* ForEachSliceAssignment generated from: '<S386>/CommonVehicleConfig' incorporates:
         *  Outport: '<Root>/ProcessedVehConf'
         */
        BEML_EMU_B.ImpAsg_InsertedFor_CommonVehicleConfig_at_inport_0[ForEach_itr_hc]
          = BEML_EMU_Y.ProcessedVehConf[ForEach_itr_hc].Common;
      }

      /* End of Outputs for SubSystem: '<S384>/ExtractConfig' */
    }

    /* End of Outputs for SubSystem: '<S383>/ExtractConfig' */

    /* Outputs for Iterator SubSystem: '<S383>/VehicleInputAdapter' incorporates:
     *  ForEach: '<S385>/For Each'
     */
    for (ForEach_itr_as = 0; ForEach_itr_as < 8; ForEach_itr_as++) {
      /* Abs: '<S385>/Abs' incorporates:
       *  ForEachSliceSelector generated from: '<S385>/DynamicsVehicleFB'
       */
      rtb_Product_cv = fabs(BEML_EMU_B.UnitDelay_j[ForEach_itr_as].
                            Inertia.Velocity);

      /* Gain: '<S385>/Gain' */
      diff = BEML_EMU_P.CoreSubsys_cr.Gain_Gain * rtb_Product_cv;

      /* Logic: '<S385>/AND' incorporates:
       *  Constant: '<S387>/Constant'
       *  ForEachSliceSelector generated from: '<S385>/VehicleFaults'
       *  RelationalOperator: '<S387>/Compare'
       *  Sum: '<S390>/Diff'
       *  UnitDelay: '<S390>/UD'
       */
      rtb_AND_p = ((diff - BEML_EMU_DW.CoreSubsys_cr[ForEach_itr_as].UD_DSTATE >
                    BEML_EMU_P.CoreSubsys_cr.Constant_Value_c) &&
                   (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[
                    ForEach_itr_as].TractionFaults.HeavyWheelSlide != 0.0));

      /* Sum: '<S391>/Diff' incorporates:
       *  UnitDelay: '<S391>/UD'
       */
      DiscreteTimeIntegrator_a = rtb_Product_cv -
        BEML_EMU_DW.CoreSubsys_cr[ForEach_itr_as].UD_DSTATE_n;

      /* Outputs for Iterator SubSystem: '<S392>/BogieAssignment' incorporates:
       *  ForEach: '<S395>/For Each'
       */
      for (ForEach_itr_jp = 0; ForEach_itr_jp < 2; ForEach_itr_jp++) {
        /* ForEachSliceAssignment generated from: '<S395>/BogieSignals' incorporates:
         *  Constant: '<S392>/Constant1'
         *  Logic: '<S395>/AND'
         *  Logic: '<S395>/NOT'
         *  Outport: '<Root>/ElectricalOutput'
         */
        rtb_ImpAsg_InsertedFor_BogieSignals_at_inport_0[ForEach_itr_jp].TCUPower
          = (BEML_EMU_Y.ElectricalOutput[ForEach_itr_as].
             Traction.TCUPowerAvailable &&
             (!(BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_as]
                .TractionFaults.CIFailure != 0.0)));
        rtb_ImpAsg_InsertedFor_BogieSignals_at_inport_0[ForEach_itr_jp].
          TractionAuthorisation = BEML_EMU_Y.ElectricalOutput[ForEach_itr_as].
          Traction.TractionSafe;
        rtb_ImpAsg_InsertedFor_BogieSignals_at_inport_0[ForEach_itr_jp].
          TractionCutoff = BEML_EMU_Y.ElectricalOutput[ForEach_itr_as].
          Traction.CIIsolated;
        rtb_ImpAsg_InsertedFor_BogieSignals_at_inport_0[ForEach_itr_jp].
          DynamicBrakingCutoff =
          BEML_EMU_P.CoreSubsys_cr.Constant1_Value_ip[ForEach_itr_jp].
          DynamicBrakingCutoff;
      }

      /* End of Outputs for SubSystem: '<S392>/BogieAssignment' */

      /* Outputs for Iterator SubSystem: '<S389>/For Each Subsystem' incorporates:
       *  ForEach: '<S394>/For Each'
       */
      for (ForEach_itr_b4 = 0; ForEach_itr_b4 < 2; ForEach_itr_b4++) {
        /* ForEachSliceAssignment generated from: '<S394>/TractionBogieControl' incorporates:
         *  Outport: '<Root>/TCMSOutput'
         */
        rtb_ImpAsg_InsertedFor_TractionBogieControl_at_inport_0[ForEach_itr_b4].
          TCMSTractionInhibit = BEML_EMU_Y.TCMSOutput[ForEach_itr_as].
          Control.TractionSBraking.Bogie[ForEach_itr_b4].TractionInhibit;
        rtb_ImpAsg_InsertedFor_TractionBogieControl_at_inport_0[ForEach_itr_b4].
          TCMSDynamicBrakingInhibit = BEML_EMU_Y.TCMSOutput[ForEach_itr_as].
          Control.TractionSBraking.Bogie[ForEach_itr_b4].EDBrakingInhibit;
        rtb_ImpAsg_InsertedFor_TractionBogieControl_at_inport_0[ForEach_itr_b4].
          BogieSupportedMass = BEML_EMU_Y.TCMSOutput[ForEach_itr_as].
          Control.TractionSBraking.Bogie[ForEach_itr_b4].BogieSupportedMass;
        rtb_ImpAsg_InsertedFor_TractionBogieControl_at_inport_0[ForEach_itr_b4].
          BogieIsolationStatus = BEML_EMU_Y.TCMSOutput[ForEach_itr_as].
          Control.TractionSBraking.Bogie[ForEach_itr_b4].BogieIsolationStatus;
      }

      /* End of Outputs for SubSystem: '<S389>/For Each Subsystem' */

      /* Outputs for Iterator SubSystem: '<S396>/For Each Subsystem' incorporates:
       *  ForEach: '<S399>/For Each'
       */
      for (ForEach_itr_l = 0; ForEach_itr_l < 6; ForEach_itr_l++) {
        /* ForEachSliceAssignment generated from: '<S399>/WheelSpeed' */
        rtb_ImpAsg_InsertedFor_WheelSpeed_at_inport_0[ForEach_itr_l] =
          BEML_EMU_B.UnitDelay_j[ForEach_itr_as].Wheel[ForEach_itr_l].Speed;

        /* ForEachSliceAssignment generated from: '<S399>/WheelSlip' */
        rtb_ImpAsg_InsertedFor_WheelSlip_at_inport_0[ForEach_itr_l] =
          BEML_EMU_B.UnitDelay_j[ForEach_itr_as].Wheel[ForEach_itr_l].Spin;

        /* ForEachSliceAssignment generated from: '<S399>/WheelSlide' */
        rtb_ImpAsg_InsertedFor_WheelSlide_at_inport_0[ForEach_itr_l] =
          BEML_EMU_B.UnitDelay_j[ForEach_itr_as].Wheel[ForEach_itr_l].Skid;
      }

      /* End of Outputs for SubSystem: '<S396>/For Each Subsystem' */

      /* Update for UnitDelay: '<S390>/UD' */
      BEML_EMU_DW.CoreSubsys_cr[ForEach_itr_as].UD_DSTATE = diff;

      /* Update for UnitDelay: '<S391>/UD' */
      BEML_EMU_DW.CoreSubsys_cr[ForEach_itr_as].UD_DSTATE_n = rtb_Product_cv;

      /* ForEachSliceAssignment generated from: '<S385>/Overrides' incorporates:
       *  BusAssignment: '<S385>/Bus Assignment1'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_Overrides_at_inport_0_i[ForEach_itr_as].
        TractionForceVariation = 0.0;
      BEML_EMU_B.ImpAsg_InsertedFor_Overrides_at_inport_0_i[ForEach_itr_as].
        DynamicBrakeForceVariation = 0.0;

      /* ForEachSliceAssignment generated from: '<S385>/TractionVehicleInput' incorporates:
       *  Outport: '<Root>/ElectricalOutput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_TractionVehicleInput_at_inport_0[ForEach_itr_as]
        .ElectricalSystem.PowerAvailable =
        BEML_EMU_Y.ElectricalOutput[ForEach_itr_as].Traction.MotorPowerAvailable;
      BEML_EMU_B.ImpAsg_InsertedFor_TractionVehicleInput_at_inport_0[ForEach_itr_as]
        .ElectricalSystem.ForwardTW = BEML_EMU_Y.ElectricalOutput[ForEach_itr_as]
        .Traction.ForwardDirection;
      BEML_EMU_B.ImpAsg_InsertedFor_TractionVehicleInput_at_inport_0[ForEach_itr_as]
        .ElectricalSystem.ReverseTW = BEML_EMU_Y.ElectricalOutput[ForEach_itr_as]
        .Traction.ReverseDirection;
      BEML_EMU_B.ImpAsg_InsertedFor_TractionVehicleInput_at_inport_0[ForEach_itr_as]
        .ElectricalSystem.TractionActiveTW =
        BEML_EMU_Y.ElectricalOutput[ForEach_itr_as].Traction.TBCTraction;
      BEML_EMU_B.ImpAsg_InsertedFor_TractionVehicleInput_at_inport_0[ForEach_itr_as]
        .ElectricalSystem.NoEmergencyBrakeActiveTW =
        BEML_EMU_Y.ElectricalOutput[ForEach_itr_as].Traction.NoEmergencyBrake;
      BEML_EMU_B.ImpAsg_InsertedFor_TractionVehicleInput_at_inport_0[ForEach_itr_as]
        .ElectricalSystem.VCBState = BEML_EMU_Y.ElectricalOutput[ForEach_itr_as]
        .Traction.VCBStatus;
      BEML_EMU_B.ImpAsg_InsertedFor_TractionVehicleInput_at_inport_0[ForEach_itr_as]
        .ElectricalSystem.ContactorsFailure =
        BEML_EMU_Y.ElectricalOutput[ForEach_itr_as].Traction.ContactorsFailure;
      BEML_EMU_B.ImpAsg_InsertedFor_TractionVehicleInput_at_inport_0[ForEach_itr_as]
        .Dynamics.Velocity = BEML_EMU_B.UnitDelay_j[ForEach_itr_as].
        Inertia.Velocity;

      /* BusAssignment: '<S397>/Bus Assignment1' incorporates:
       *  ForEachSliceAssignment generated from: '<S385>/TractionVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_TractionVehicleInput_at_inport_0[ForEach_itr_as]
        .Dynamics.Bogie[0].WheelSpeed[0] =
        rtb_ImpAsg_InsertedFor_WheelSpeed_at_inport_0[0];
      BEML_EMU_B.ImpAsg_InsertedFor_TractionVehicleInput_at_inport_0[ForEach_itr_as]
        .Dynamics.Bogie[0].WheelSlip[0] =
        rtb_ImpAsg_InsertedFor_WheelSlip_at_inport_0[0];
      BEML_EMU_B.ImpAsg_InsertedFor_TractionVehicleInput_at_inport_0[ForEach_itr_as]
        .Dynamics.Bogie[0].WheelSlide[0] =
        rtb_ImpAsg_InsertedFor_WheelSlide_at_inport_0[0];

      /* BusAssignment: '<S398>/Bus Assignment1' incorporates:
       *  ForEachSliceAssignment generated from: '<S385>/TractionVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_TractionVehicleInput_at_inport_0[ForEach_itr_as]
        .Dynamics.Bogie[1].WheelSpeed[0] =
        rtb_ImpAsg_InsertedFor_WheelSpeed_at_inport_0[2];
      BEML_EMU_B.ImpAsg_InsertedFor_TractionVehicleInput_at_inport_0[ForEach_itr_as]
        .Dynamics.Bogie[1].WheelSlip[0] =
        rtb_ImpAsg_InsertedFor_WheelSlip_at_inport_0[2];
      BEML_EMU_B.ImpAsg_InsertedFor_TractionVehicleInput_at_inport_0[ForEach_itr_as]
        .Dynamics.Bogie[1].WheelSlide[0] =
        rtb_ImpAsg_InsertedFor_WheelSlide_at_inport_0[2];

      /* ForEachSliceAssignment generated from: '<S385>/TractionVehicleInput' incorporates:
       *  BusAssignment: '<S389>/Bus Assignment3'
       *  BusAssignment: '<S392>/Bus Assignment3'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_TractionVehicleInput_at_inport_0[ForEach_itr_as]
        .ElectricalSystem.Bogie[0] =
        rtb_ImpAsg_InsertedFor_BogieSignals_at_inport_0[0];
      BEML_EMU_B.ImpAsg_InsertedFor_TractionVehicleInput_at_inport_0[ForEach_itr_as]
        .TCMS.Bogie[0] =
        rtb_ImpAsg_InsertedFor_TractionBogieControl_at_inport_0[0];

      /* ForEachSliceAssignment generated from: '<S385>/TractionFaults' */
      BEML_EMU_B.ImpAsg_InsertedFor_TractionFaults_at_inport_0[ForEach_itr_as].
        Bogie[0] =
        BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_as]
        .TractionFaults.Bogie[0];

      /* BusAssignment: '<S397>/Bus Assignment1' incorporates:
       *  ForEachSliceAssignment generated from: '<S385>/TractionVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_TractionVehicleInput_at_inport_0[ForEach_itr_as]
        .Dynamics.Bogie[0].WheelSpeed[1] =
        rtb_ImpAsg_InsertedFor_WheelSpeed_at_inport_0[1];
      BEML_EMU_B.ImpAsg_InsertedFor_TractionVehicleInput_at_inport_0[ForEach_itr_as]
        .Dynamics.Bogie[0].WheelSlip[1] =
        rtb_ImpAsg_InsertedFor_WheelSlip_at_inport_0[1];
      BEML_EMU_B.ImpAsg_InsertedFor_TractionVehicleInput_at_inport_0[ForEach_itr_as]
        .Dynamics.Bogie[0].WheelSlide[1] =
        rtb_ImpAsg_InsertedFor_WheelSlide_at_inport_0[1];

      /* BusAssignment: '<S398>/Bus Assignment1' incorporates:
       *  ForEachSliceAssignment generated from: '<S385>/TractionVehicleInput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_TractionVehicleInput_at_inport_0[ForEach_itr_as]
        .Dynamics.Bogie[1].WheelSpeed[1] =
        rtb_ImpAsg_InsertedFor_WheelSpeed_at_inport_0[3];
      BEML_EMU_B.ImpAsg_InsertedFor_TractionVehicleInput_at_inport_0[ForEach_itr_as]
        .Dynamics.Bogie[1].WheelSlip[1] =
        rtb_ImpAsg_InsertedFor_WheelSlip_at_inport_0[3];
      BEML_EMU_B.ImpAsg_InsertedFor_TractionVehicleInput_at_inport_0[ForEach_itr_as]
        .Dynamics.Bogie[1].WheelSlide[1] =
        rtb_ImpAsg_InsertedFor_WheelSlide_at_inport_0[3];

      /* ForEachSliceAssignment generated from: '<S385>/TractionVehicleInput' incorporates:
       *  BusAssignment: '<S389>/Bus Assignment3'
       *  BusAssignment: '<S392>/Bus Assignment3'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_TractionVehicleInput_at_inport_0[ForEach_itr_as]
        .ElectricalSystem.Bogie[1] =
        rtb_ImpAsg_InsertedFor_BogieSignals_at_inport_0[1];
      BEML_EMU_B.ImpAsg_InsertedFor_TractionVehicleInput_at_inport_0[ForEach_itr_as]
        .TCMS.Bogie[1] =
        rtb_ImpAsg_InsertedFor_TractionBogieControl_at_inport_0[1];

      /* ForEachSliceAssignment generated from: '<S385>/TractionFaults' */
      BEML_EMU_B.ImpAsg_InsertedFor_TractionFaults_at_inport_0[ForEach_itr_as].
        Bogie[1] =
        BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_as]
        .TractionFaults.Bogie[1];

      /* ForEachSliceAssignment generated from: '<S385>/TractionVehicleInput' incorporates:
       *  Outport: '<Root>/TCMSOutput'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_TractionVehicleInput_at_inport_0[ForEach_itr_as]
        .TCMS.TCMSTractionCmd = BEML_EMU_Y.TCMSOutput[ForEach_itr_as].
        Control.TractionSBraking.TractionCommand;
      BEML_EMU_B.ImpAsg_InsertedFor_TractionVehicleInput_at_inport_0[ForEach_itr_as]
        .TCMS.TCMSEDBrakingCmd = BEML_EMU_Y.TCMSOutput[ForEach_itr_as].
        Control.TractionSBraking.EDBrakingCommand;
      BEML_EMU_B.ImpAsg_InsertedFor_TractionVehicleInput_at_inport_0[ForEach_itr_as]
        .TCMS.TractiveLosses = BEML_EMU_Y.TCMSOutput[ForEach_itr_as].
        Control.TractionSBraking.HTERequired;

      /* ForEachSliceAssignment generated from: '<S385>/TractionFaults' incorporates:
       *  Constant: '<S388>/Constant'
       *  DataTypeConversion: '<S385>/Data Type Conversion'
       *  DataTypeConversion: '<S385>/Data Type Conversion1'
       *  Logic: '<S385>/AND1'
       *  Logic: '<S385>/Logical Operator'
       *  RelationalOperator: '<S388>/Compare'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_TractionFaults_at_inport_0[ForEach_itr_as].
        PCUFailure =
        BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_as]
        .TractionFaults.PCUFailure;
      BEML_EMU_B.ImpAsg_InsertedFor_TractionFaults_at_inport_0[ForEach_itr_as].
        CIFailure =
        BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_as]
        .TractionFaults.CIFailure;
      BEML_EMU_B.ImpAsg_InsertedFor_TractionFaults_at_inport_0[ForEach_itr_as].
        CIIsolated =
        BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_as]
        .TractionFaults.CIIsolated;
      BEML_EMU_B.ImpAsg_InsertedFor_TractionFaults_at_inport_0[ForEach_itr_as].
        CIMicroprocessorAbnormal =
        BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_as]
        .TractionFaults.CIMicroprocessorAbnormal;
      BEML_EMU_B.ImpAsg_InsertedFor_TractionFaults_at_inport_0[ForEach_itr_as].
        CILocalCommunicationFailure =
        BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_as]
        .TractionFaults.CILocalCommunicationFailure;
      BEML_EMU_B.ImpAsg_InsertedFor_TractionFaults_at_inport_0[ForEach_itr_as].
        CIGateSignalAbnormal =
        BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_as]
        .TractionFaults.CIGateSignalAbnormal;
      BEML_EMU_B.ImpAsg_InsertedFor_TractionFaults_at_inport_0[ForEach_itr_as].
        CITCMSCommunicationFailure =
        BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_as]
        .TractionFaults.CITCMSCommunicationFailure;
      BEML_EMU_B.ImpAsg_InsertedFor_TractionFaults_at_inport_0[ForEach_itr_as].
        DCLinkOverVoltageLevel1 =
        BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_as]
        .TractionFaults.DCLinkOverVoltageLevel1;
      BEML_EMU_B.ImpAsg_InsertedFor_TractionFaults_at_inport_0[ForEach_itr_as].
        DCLinkLowVoltageLevel1 =
        BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_as]
        .TractionFaults.DCLinkLowVoltageLevel1;
      BEML_EMU_B.ImpAsg_InsertedFor_TractionFaults_at_inport_0[ForEach_itr_as].
        HeavyWheelSlide = (rtb_AND_p ||
                           (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0
                            [ForEach_itr_as].TractionFaults.WSPActiveBogie1 !=
                            0.0));
      BEML_EMU_B.ImpAsg_InsertedFor_TractionFaults_at_inport_0[ForEach_itr_as].
        HeavyWheelSlip =
        ((BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_as]
          .TractionFaults.HeavyWheelSlip != 0.0) && (DiscreteTimeIntegrator_a >
          BEML_EMU_P.CoreSubsys_cr.Constant_Value_i));
      BEML_EMU_B.ImpAsg_InsertedFor_TractionFaults_at_inport_0[ForEach_itr_as].
        CIAKOpenFailure =
        BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_as]
        .TractionFaults.CIAKOpenFailure;
      BEML_EMU_B.ImpAsg_InsertedFor_TractionFaults_at_inport_0[ForEach_itr_as].
        CIKOpenFailure =
        BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_as]
        .TractionFaults.CIKOpenFailure;
      BEML_EMU_B.ImpAsg_InsertedFor_TractionFaults_at_inport_0[ForEach_itr_as].
        DerailmentDetectedRightSide =
        BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_as]
        .TractionFaults.DerailmentDetectedRightSide;
      BEML_EMU_B.ImpAsg_InsertedFor_TractionFaults_at_inport_0[ForEach_itr_as].
        BogieDerailed =
        BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_as]
        .TractionFaults.BogieDerailed;
      BEML_EMU_B.ImpAsg_InsertedFor_TractionFaults_at_inport_0[ForEach_itr_as].
        WSPActiveBogie1 =
        BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_as]
        .TractionFaults.WSPActiveBogie1;
      BEML_EMU_B.ImpAsg_InsertedFor_TractionFaults_at_inport_0[ForEach_itr_as].
        BECU1FailureAllSpeedSensors =
        BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_as]
        .TractionFaults.BECU1FailureAllSpeedSensors;
    }

    /* End of Outputs for SubSystem: '<S383>/VehicleInputAdapter' */
    /* End of Outputs for SubSystem: '<S14>/TractionInputAdapter' */

    /* ModelReference: '<S14>/TractionSystem' incorporates:
     *  Outport: '<Root>/TractionVehicleOut'
     */
    TractionSystem(&(BEML_EMU_DW.TractionSystem_InstanceData.rtm),
                   &BEML_EMU_B.ImpAsg_InsertedFor_CommonVehicleConfig_at_inport_0
                   [0],
                   &BEML_EMU_B.ImpAsg_InsertedFor_TractionVehicleConfig_at_inport_0
                   [0],
                   &BEML_EMU_B.ImpAsg_InsertedFor_TractionVehicleInput_at_inport_0
                   [0], &BEML_EMU_B.ImpAsg_InsertedFor_Overrides_at_inport_0_i[0],
                   &BEML_EMU_B.ImpAsg_InsertedFor_TractionFaults_at_inport_0[0],
                   &BEML_EMU_Y.TractionVehicleOut[0],
                   &(BEML_EMU_DW.TractionSystem_InstanceData.rtb),
                   &(BEML_EMU_DW.TractionSystem_InstanceData.rtdw),
                   &BEML_EMU_P.TractionSystem_Prm_TractionSystem);
  }

  /* Outputs for Atomic SubSystem: '<S9>/DynamicsInputAdapter' */
  /* Step: '<S309>/Step' */
  if (((((&BEML_EMU_M)->Timing.clockTick0+(&BEML_EMU_M)->Timing.clockTickH0*
         4294967296.0)) * 0.001) < BEML_EMU_P.Step_Time_h) {
    rtb_Switch4_f = BEML_EMU_P.Step_Y0_i;
  } else {
    rtb_Switch4_f = BEML_EMU_P.Step_YFinal_d;
  }

  /* End of Step: '<S309>/Step' */

  /* Outputs for Enabled SubSystem: '<S309>/ExtractConfig' incorporates:
   *  EnablePort: '<S310>/Enable'
   */
  if (rtb_Switch4_f > 0.0) {
    /* Outputs for Iterator SubSystem: '<S310>/ExtractConfig' incorporates:
     *  ForEach: '<S312>/For Each'
     */
    for (ForEach_itr_iy = 0; ForEach_itr_iy < 8; ForEach_itr_iy++) {
      /* ForEachSliceAssignment generated from: '<S312>/DynamicsVehicleConfig' incorporates:
       *  Outport: '<Root>/ProcessedVehConf'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_DynamicsVehicleConfig_at_inport_0[ForEach_itr_iy]
        = BEML_EMU_Y.ProcessedVehConf[ForEach_itr_iy].Dynamics;

      /* ForEachSliceAssignment generated from: '<S312>/CommonVehicleConfig' incorporates:
       *  Outport: '<Root>/ProcessedVehConf'
       */
      BEML_EMU_B.ImpAsg_InsertedFor_CommonVehicleConfig_at_inport_0_d[ForEach_itr_iy]
        = BEML_EMU_Y.ProcessedVehConf[ForEach_itr_iy].Common;
    }

    /* End of Outputs for SubSystem: '<S310>/ExtractConfig' */
  }

  /* End of Outputs for SubSystem: '<S309>/ExtractConfig' */

  /* Outputs for Iterator SubSystem: '<S309>/VehicleInputAdapter' incorporates:
   *  ForEach: '<S311>/For Each'
   */
  for (ForEach_itr_jt = 0; ForEach_itr_jt < 8; ForEach_itr_jt++) {
    /* Outputs for Iterator SubSystem: '<S311>/For Each Subsystem' incorporates:
     *  ForEach: '<S314>/For Each'
     */
    for (ForEach_itr_ah = 0; ForEach_itr_ah < 6; ForEach_itr_ah++) {
      /* ForEachSliceAssignment generated from: '<S314>/BrakingForce' incorporates:
       *  Abs: '<S314>/Abs'
       *  Outport: '<Root>/BrakesVehicleOut'
       *  Outport: '<Root>/TractionVehicleOut'
       *  Sum: '<S314>/Sum'
       */
      rtb_ImpAsg_InsertedFor_BrakingForce_at_inport_0[ForEach_itr_ah] =
        BEML_EMU_Y.BrakesVehicleOut[ForEach_itr_jt].Axle[ForEach_itr_ah].
        BrakingForce + fabs(BEML_EMU_Y.TractionVehicleOut[ForEach_itr_jt].
                            Dynamics.BrakingForce[ForEach_itr_ah]);
    }

    /* End of Outputs for SubSystem: '<S311>/For Each Subsystem' */

    /* Outputs for Iterator SubSystem: '<S311>/For Each Subsystem1' incorporates:
     *  ForEach: '<S315>/For Each'
     */
    for (ForEach_itr_eh = 0; ForEach_itr_eh < 2; ForEach_itr_eh++) {
      /* ForEachSliceAssignment generated from: '<S315>/CouplersOut' incorporates:
       *  Outport: '<Root>/CouplingOutput'
       */
      rtb_ImpAsg_InsertedFor_CouplersOut_at_inport_0[ForEach_itr_eh].End =
        BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_jt]
        .Couplers.Coupler[ForEach_itr_eh].CouplingPhysical.End;
      rtb_ImpAsg_InsertedFor_CouplersOut_at_inport_0[ForEach_itr_eh].
        OtherVehicleID = BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_jt].
        Couplers.Coupler[ForEach_itr_eh].CouplingPhysical.OtherVehicleID;
      rtb_ImpAsg_InsertedFor_CouplersOut_at_inport_0[ForEach_itr_eh].
        OtherVehicleEnd = BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_jt].
        Couplers.Coupler[ForEach_itr_eh].CouplingPhysical.OtherVehicleEnd;
      rtb_ImpAsg_InsertedFor_CouplersOut_at_inport_0[ForEach_itr_eh].
        OtherVehicleOrientation =
        BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_jt]
        .Couplers.Coupler[ForEach_itr_eh].
        CouplingPhysical.OtherVehicleOrientation;
      rtb_ImpAsg_InsertedFor_CouplersOut_at_inport_0[ForEach_itr_eh].Available =
        BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_jt]
        .Couplers.Coupler[ForEach_itr_eh].CouplingPhysical.Available;
      rtb_ImpAsg_InsertedFor_CouplersOut_at_inport_0[ForEach_itr_eh].Separation =
        BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_jt]
        .Couplers.Coupler[ForEach_itr_eh].CouplingPhysical.Separation;
      rtb_ImpAsg_InsertedFor_CouplersOut_at_inport_0[ForEach_itr_eh].
        SeparationRate = BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_jt].
        Couplers.Coupler[ForEach_itr_eh].CouplingPhysical.SeparationRate;
      rtb_ImpAsg_InsertedFor_CouplersOut_at_inport_0[ForEach_itr_eh].
        OurCouplingPosition = BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_jt].
        Couplers.Coupler[ForEach_itr_eh].CouplingPhysical.OurCouplingPosition;
      rtb_ImpAsg_InsertedFor_CouplersOut_at_inport_0[ForEach_itr_eh].
        OtherCouplingPosition = BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_jt]
        .Couplers.Coupler[ForEach_itr_eh].CouplingPhysical.OtherCouplingPosition;
      rtb_ImpAsg_InsertedFor_CouplersOut_at_inport_0[ForEach_itr_eh].
        CouplingSeparation = BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_jt].
        Couplers.Coupler[ForEach_itr_eh].CouplingPhysical.CouplingSeparation;
      rtb_ImpAsg_InsertedFor_CouplersOut_at_inport_0[ForEach_itr_eh].Interfacing
        = BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_jt]
        .Couplers.Coupler[ForEach_itr_eh].CouplingPhysical.Interfacing;
      rtb_ImpAsg_InsertedFor_CouplersOut_at_inport_0[ForEach_itr_eh].
        CoupledChainLength = BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_jt].
        Couplers.Coupler[ForEach_itr_eh].CouplingPhysical.CoupledChainLength;
      rtb_ImpAsg_InsertedFor_CouplersOut_at_inport_0[ForEach_itr_eh].
        MechanicallyCoupled = BEML_EMU_Y.CouplingOutput[ForEach_itr_jt].
        Couplers.Coupler[ForEach_itr_eh].PhysicalSignals.MechanicalCouplerState;
      rtb_ImpAsg_InsertedFor_CouplersOut_at_inport_0[ForEach_itr_eh].Mimic =
        BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_jt]
        .Couplers.Coupler[ForEach_itr_eh].CouplingPhysical.Mimic;
    }

    /* End of Outputs for SubSystem: '<S311>/For Each Subsystem1' */

    /* ForEachSliceAssignment generated from: '<S311>/DynamicsFaults' incorporates:
     *  BusAssignment: '<S311>/Bus Assignment2'
     *  DataTypeConversion: '<S311>/Data Type Conversion'
     *  Logic: '<S311>/OR'
     */
    BEML_EMU_B.ImpAsg_InsertedFor_DynamicsFaults_at_inport_0[ForEach_itr_jt].
      LockedAxle =
      ((BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_jt]
        .PneumaticsFaults.BECU1AxleLockedWheelSet1 != 0.0) ||
       (BEML_EMU_B.ImpAsg_InsertedFor_VehicleModelFaults_at_inport_0[ForEach_itr_jt]
        .PneumaticsFaults.BECU2AxleLockedWheelSet2 != 0.0));
    BEML_EMU_B.ImpAsg_InsertedFor_DynamicsFaults_at_inport_0[ForEach_itr_jt].
      WheelFlat = 0.0;
    BEML_EMU_B.ImpAsg_InsertedFor_DynamicsFaults_at_inport_0[ForEach_itr_jt].
      PoorSanding = 0.0;

    /* ForEachSliceAssignment generated from: '<S311>/Overrides' incorporates:
     *  BusAssignment: '<S311>/Bus Assignment1'
     */
    BEML_EMU_B.ImpAsg_InsertedFor_Overrides_at_inport_0[ForEach_itr_jt].
      FreezeDynamics = BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_jt].
      Common.CollisionAndDerailment.Frozen;
    BEML_EMU_B.ImpAsg_InsertedFor_Overrides_at_inport_0[ForEach_itr_jt].
      SandingApplied = 0.0;
    BEML_EMU_B.ImpAsg_InsertedFor_Overrides_at_inport_0[ForEach_itr_jt].
      TrackAdhesionVariation = 0.0;
    BEML_EMU_B.ImpAsg_InsertedFor_Overrides_at_inport_0[ForEach_itr_jt].
      LoadingVariation = BEML_EMU_B.BusAssignment.Overrides.TrainLoadOverride;
    BEML_EMU_B.ImpAsg_InsertedFor_Overrides_at_inport_0[ForEach_itr_jt].
      CouplerBreakageLimit = 0.0;
    BEML_EMU_B.ImpAsg_InsertedFor_Overrides_at_inport_0[ForEach_itr_jt].
      VelocitySetFlag = false;
    BEML_EMU_B.ImpAsg_InsertedFor_Overrides_at_inport_0[ForEach_itr_jt].
      VelocitySetValue = 0.0;
    BEML_EMU_B.ImpAsg_InsertedFor_Overrides_at_inport_0[ForEach_itr_jt].
      BearingFrictionVariation = 0.0;
    BEML_EMU_B.ImpAsg_InsertedFor_Overrides_at_inport_0[ForEach_itr_jt].
      LateralFrictionVariation = 0.0;

    /* ForEachSliceAssignment generated from: '<S311>/DynamicsVehicleInput' incorporates:
     *  BusAssignment: '<S311>/Bus Assignment'
     *  BusAssignment: '<S313>/Bus Assignment3'
     *  Outport: '<Root>/TractionVehicleOut'
     */
    for (i = 0; i < 6; i++) {
      BEML_EMU_B.ImpAsg_InsertedFor_DynamicsVehicleInput_at_inport_0[ForEach_itr_jt]
        .TractionForce[i] = BEML_EMU_Y.TractionVehicleOut[ForEach_itr_jt].
        Dynamics.TractionForce[i];
      BEML_EMU_B.ImpAsg_InsertedFor_DynamicsVehicleInput_at_inport_0[ForEach_itr_jt]
        .BrakingForce[i] = rtb_ImpAsg_InsertedFor_BrakingForce_at_inport_0[i];
    }

    BEML_EMU_B.ImpAsg_InsertedFor_DynamicsVehicleInput_at_inport_0[ForEach_itr_jt]
      .TrackData = BEML_EMU_B.ProcessedVehicleInput[ForEach_itr_jt].
      Dynamics.TrackData;
    BEML_EMU_B.ImpAsg_InsertedFor_DynamicsVehicleInput_at_inport_0[ForEach_itr_jt]
      .Couplers[0] = rtb_ImpAsg_InsertedFor_CouplersOut_at_inport_0[0];
    BEML_EMU_B.ImpAsg_InsertedFor_DynamicsVehicleInput_at_inport_0[ForEach_itr_jt]
      .Couplers[1] = rtb_ImpAsg_InsertedFor_CouplersOut_at_inport_0[1];
    BEML_EMU_B.ImpAsg_InsertedFor_DynamicsVehicleInput_at_inport_0[ForEach_itr_jt]
      .CustomDragForces.AerodynamicDragForce = 0.0;
    BEML_EMU_B.ImpAsg_InsertedFor_DynamicsVehicleInput_at_inport_0[ForEach_itr_jt]
      .CustomDragForces.BearingDragForce = 0.0;
    BEML_EMU_B.ImpAsg_InsertedFor_DynamicsVehicleInput_at_inport_0[ForEach_itr_jt]
      .NonWheelStoppingForce = 0.0;
    BEML_EMU_B.ImpAsg_InsertedFor_DynamicsVehicleInput_at_inport_0[ForEach_itr_jt]
      .BogieSupportedMass = BEML_EMU_B.UnitDelay_j[ForEach_itr_jt].Inertia.Mass;
  }

  /* End of Outputs for SubSystem: '<S309>/VehicleInputAdapter' */
  /* End of Outputs for SubSystem: '<S9>/DynamicsInputAdapter' */

  /* ModelReference: '<S9>/TrainDynamics' incorporates:
   *  Inport: '<Root>/SimData'
   *  Outport: '<Root>/DynamicsOutput'
   */
  TrainDynamics(&(BEML_EMU_DW.TrainDynamics_InstanceData.rtm),
                &BEML_EMU_U.SimData,
                &BEML_EMU_B.ImpAsg_InsertedFor_CommonVehicleConfig_at_inport_0_d[
                0],
                &BEML_EMU_B.ImpAsg_InsertedFor_DynamicsVehicleConfig_at_inport_0[
                0],
                &BEML_EMU_B.ImpAsg_InsertedFor_DynamicsVehicleInput_at_inport_0
                [0], &BEML_EMU_B.ImpAsg_InsertedFor_Overrides_at_inport_0[0],
                &BEML_EMU_B.ImpAsg_InsertedFor_DynamicsFaults_at_inport_0[0],
                &BEML_EMU_Y.DynamicsOutput[0],
                &(BEML_EMU_DW.TrainDynamics_InstanceData.rtb),
                &(BEML_EMU_DW.TrainDynamics_InstanceData.rtdw),
                &(BEML_EMU_DW.TrainDynamics_InstanceData.rtzce));
  if ((&BEML_EMU_M)->Timing.TaskCounters.TID[2] == 0) {
    /* Outputs for Atomic SubSystem: '<S4>/AudioSystemInterface' */
    /* Outputs for Iterator SubSystem: '<S734>/Subsystem1' incorporates:
     *  ForEach: '<S738>/For Each'
     */
    for (ForEach_itr_m = 0; ForEach_itr_m < 8; ForEach_itr_m++) {
      /* Outputs for Iterator SubSystem: '<S738>/For Each Subsystem2' incorporates:
       *  ForEach: '<S742>/For Each'
       */
      for (ForEach_itr_j = 0; ForEach_itr_j < 1; ForEach_itr_j++) {
        /* ForEachSliceAssignment generated from: '<S742>/BCPressures' incorporates:
         *  ForEachSliceSelector generated from: '<S738>/Pneumatics'
         *  Outport: '<Root>/PneumaticsVehicleOut'
         */
        for (i = 0; i < 6; i++) {
          rtb_ImpAsg_InsertedFor_BCPressures_at_inport_0[i + ForEach_itr_j * 6] =
            BEML_EMU_Y.PneumaticsVehicleOut[ForEach_itr_m].
            AxleBrakes.BrakeCylinderPressures[i];
        }

        /* End of ForEachSliceAssignment generated from: '<S742>/BCPressures' */
      }

      /* End of Outputs for SubSystem: '<S738>/For Each Subsystem2' */

      /* MinMax: '<S738>/Max2' */
      rtb_Product_cv = rtb_ImpAsg_InsertedFor_BCPressures_at_inport_0[0];
      for (uElOffset1 = 0; uElOffset1 < 5; uElOffset1++) {
        DiscreteTimeIntegrator_a =
          rtb_ImpAsg_InsertedFor_BCPressures_at_inport_0[uElOffset1 + 1];
        if ((!(rtb_Product_cv > DiscreteTimeIntegrator_a)) && (!rtIsNaN
             (DiscreteTimeIntegrator_a))) {
          rtb_Product_cv = DiscreteTimeIntegrator_a;
        }
      }

      /* Relay: '<S738>/Relay' incorporates:
       *  MinMax: '<S738>/Max2'
       */
      self_CoreSubsys_pnaevvf[ForEach_itr_m].dwork.Relay_Mode = ((rtb_Product_cv
        >= BEML_EMU_P.CoreSubsys_pnaevvf.Relay_OnVal) || ((!(rtb_Product_cv <=
        BEML_EMU_P.CoreSubsys_pnaevvf.Relay_OffVal)) &&
        self_CoreSubsys_pnaevvf[ForEach_itr_m].dwork.Relay_Mode));

      /* Outputs for Iterator SubSystem: '<S738>/For Each Subsystem' incorporates:
       *  ForEach: '<S740>/For Each'
       */
      for (ForEach_itr_d = 0; ForEach_itr_d < 16; ForEach_itr_d++) {
        /* ForEachSliceAssignment generated from: '<S740>/OpeningorClosingAlarm' incorporates:
         *  ForEachSliceSelector generated from: '<S738>/Doors'
         *  ForEachSliceSelector generated from: '<S740>/Doors'
         *  Logic: '<S740>/OR'
         *  Outport: '<Root>/DoorsVehicleOut'
         */
        rtb_ImpAsg_InsertedFor_OpeningorClosingAlarm_at_inport_0[ForEach_itr_d] =
          ((BEML_EMU_Y.DoorsVehicleOut[ForEach_itr_m].Doors[ForEach_itr_d].
            Audio.DoorOpeningAlarm != 0.0) ||
           (BEML_EMU_Y.DoorsVehicleOut[ForEach_itr_m].Doors[ForEach_itr_d].
            Audio.DoorClosingAlarm != 0.0));

        /* ForEachSliceAssignment generated from: '<S740>/Opening' incorporates:
         *  ForEachSliceSelector generated from: '<S738>/Doors'
         *  ForEachSliceSelector generated from: '<S740>/Doors'
         *  Outport: '<Root>/DoorsVehicleOut'
         */
        rtb_ImpAsg_InsertedFor_Opening_at_inport_0[ForEach_itr_d] =
          BEML_EMU_Y.DoorsVehicleOut[ForEach_itr_m].Doors[ForEach_itr_d].
          Audio.DoorOpening;

        /* ForEachSliceAssignment generated from: '<S740>/EED_EADOperated' incorporates:
         *  ForEachSliceSelector generated from: '<S738>/Doors'
         *  ForEachSliceSelector generated from: '<S740>/Doors'
         *  Outport: '<Root>/DoorsVehicleOut'
         */
        rtb_ImpAsg_InsertedFor_EED_EADOperated_at_inport_0[ForEach_itr_d] =
          BEML_EMU_Y.DoorsVehicleOut[ForEach_itr_m].Doors[ForEach_itr_d].
          Audio.DoorEmergencyReleased;

        /* ForEachSliceAssignment generated from: '<S740>/Closing' incorporates:
         *  ForEachSliceSelector generated from: '<S738>/Doors'
         *  ForEachSliceSelector generated from: '<S740>/Doors'
         *  Outport: '<Root>/DoorsVehicleOut'
         */
        rtb_ImpAsg_InsertedFor_Closing_at_inport_0[ForEach_itr_d] =
          BEML_EMU_Y.DoorsVehicleOut[ForEach_itr_m].Doors[ForEach_itr_d].
          Audio.DoorClosing;
      }

      /* End of Outputs for SubSystem: '<S738>/For Each Subsystem' */

      /* Logic: '<S738>/OR2' */
      rtb_AND_p = (rtb_ImpAsg_InsertedFor_Opening_at_inport_0[0] != 0.0);

      /* Logic: '<S738>/OR3' */
      rtb_Compare_g42 = (rtb_ImpAsg_InsertedFor_Closing_at_inport_0[0] != 0.0);

      /* Logic: '<S738>/OR4' */
      rtb_Compare_ja = rtb_ImpAsg_InsertedFor_OpeningorClosingAlarm_at_inport_0
        [0];

      /* Logic: '<S738>/OR6' */
      rtb_Compare_kq = (rtb_ImpAsg_InsertedFor_EED_EADOperated_at_inport_0[0] !=
                        0.0);
      for (i = 0; i < 15; i++) {
        /* Logic: '<S738>/OR2' */
        rtb_AND_p = (rtb_AND_p || (rtb_ImpAsg_InsertedFor_Opening_at_inport_0[i
          + 1] != 0.0));

        /* Logic: '<S738>/OR3' */
        rtb_Compare_g42 = (rtb_Compare_g42 ||
                           (rtb_ImpAsg_InsertedFor_Closing_at_inport_0[i + 1] !=
                            0.0));

        /* Logic: '<S738>/OR4' */
        rtb_Compare_ja = (rtb_Compare_ja ||
                          rtb_ImpAsg_InsertedFor_OpeningorClosingAlarm_at_inport_0
                          [i + 1]);

        /* Logic: '<S738>/OR6' */
        rtb_Compare_kq = (rtb_Compare_kq ||
                          (rtb_ImpAsg_InsertedFor_EED_EADOperated_at_inport_0[i
                           + 1] != 0.0));
      }

      /* Outputs for Iterator SubSystem: '<S738>/For Each Subsystem1' incorporates:
       *  ForEach: '<S741>/For Each'
       */
      for (ForEach_itr_e = 0; ForEach_itr_e < 2; ForEach_itr_e++) {
        /* ForEachSliceAssignment generated from: '<S741>/Slip' incorporates:
         *  ForEachSliceSelector generated from: '<S738>/Traction'
         *  ForEachSliceSelector generated from: '<S741>/Traction'
         *  Outport: '<Root>/TractionVehicleOut'
         */
        rtb_Compare[ForEach_itr_e] = BEML_EMU_Y.TractionVehicleOut[ForEach_itr_m]
          .TractionControl.TCMS.Bogie[ForEach_itr_e].TCUSlipDetected;

        /* ForEachSliceAssignment generated from: '<S741>/Slide' incorporates:
         *  ForEachSliceSelector generated from: '<S738>/Traction'
         *  ForEachSliceSelector generated from: '<S741>/Traction'
         *  Outport: '<Root>/TractionVehicleOut'
         */
        rtb_ImpAsg_InsertedFor_Slide_at_inport_0[ForEach_itr_e] =
          BEML_EMU_Y.TractionVehicleOut[ForEach_itr_m].
          TractionControl.TCMS.Bogie[ForEach_itr_e].TCUSlideDetected;
      }

      /* End of Outputs for SubSystem: '<S738>/For Each Subsystem1' */

      /* Abs: '<S743>/Abs1' incorporates:
       *  ForEachSliceSelector generated from: '<S738>/Dynamics'
       *  Outport: '<Root>/DynamicsOutput'
       */
      diff = fabs(BEML_EMU_Y.DynamicsOutput[ForEach_itr_m].Inertia.Velocity);

      /* RelationalOperator: '<S744>/Compare' incorporates:
       *  Constant: '<S744>/Constant'
       */
      rtb_CollisionDetected = (diff >
        BEML_EMU_P.CoreSubsys_pnaevvf.CompareToConstant1_const);

      /* DataTypeConversion: '<S743>/Data Type Conversion18' incorporates:
       *  Logic: '<S743>/Logical Operator3'
       *  MinMax: '<S738>/Max'
       *  RelationalOperator: '<S745>/FixPt Relational Operator'
       *  UnitDelay: '<S745>/Delay Input1'
       */
      DiscreteTimeIntegrator_a = ((rtb_Compare[0] || rtb_Compare[1]) && (diff >
        self_CoreSubsys_pnaevvf[ForEach_itr_m].dwork.DelayInput1_DSTATE_i) &&
        rtb_CollisionDetected);

      /* Logic: '<S743>/Logical Operator2' incorporates:
       *  MinMax: '<S738>/Max1'
       */
      rtb_CollisionDetected = (rtb_CollisionDetected &&
        (rtb_ImpAsg_InsertedFor_Slide_at_inport_0[0] ||
         rtb_ImpAsg_InsertedFor_Slide_at_inport_0[1]));

      /* ForEachSliceAssignment generated from: '<S738>/AudioOut' incorporates:
       *  BusAssignment: '<S738>/Bus Assignment'
       *  Constant: '<S738>/Constant'
       */
      rtb_ImpAsg_InsertedFor_AudioOut_at_inport_0[ForEach_itr_m] =
        BEML_EMU_P.CoreSubsys_pnaevvf.Constant_Value;

      /* BusAssignment: '<S738>/Bus Assignment' incorporates:
       *  ForEachSliceAssignment generated from: '<S738>/AudioOut'
       *  ForEachSliceSelector generated from: '<S738>/Pneumatics'
       *  Outport: '<Root>/PneumaticsVehicleOut'
       */
      rtb_ImpAsg_InsertedFor_AudioOut_at_inport_0[ForEach_itr_m].HornHigh =
        BEML_EMU_Y.PneumaticsVehicleOut[ForEach_itr_m].Audio.HornHigh;
      rtb_ImpAsg_InsertedFor_AudioOut_at_inport_0[ForEach_itr_m].HornLow =
        BEML_EMU_Y.PneumaticsVehicleOut[ForEach_itr_m].Audio.HornLow;

      /* Relay: '<S738>/Relay' */
      if (self_CoreSubsys_pnaevvf[ForEach_itr_m].dwork.Relay_Mode) {
        rtb_Switch4_f = BEML_EMU_P.CoreSubsys_pnaevvf.Relay_YOn;
      } else {
        rtb_Switch4_f = BEML_EMU_P.CoreSubsys_pnaevvf.Relay_YOff;
      }

      /* BusAssignment: '<S738>/Bus Assignment' incorporates:
       *  DataTypeConversion: '<S738>/Data Type Conversion10'
       *  DataTypeConversion: '<S738>/Data Type Conversion11'
       *  DataTypeConversion: '<S738>/Data Type Conversion12'
       *  DataTypeConversion: '<S738>/Data Type Conversion13'
       *  DataTypeConversion: '<S738>/Data Type Conversion14'
       *  DataTypeConversion: '<S738>/Data Type Conversion16'
       *  DataTypeConversion: '<S738>/Data Type Conversion17'
       *  DataTypeConversion: '<S738>/Data Type Conversion18'
       *  DataTypeConversion: '<S738>/Data Type Conversion2'
       *  DataTypeConversion: '<S738>/Data Type Conversion3'
       *  DataTypeConversion: '<S738>/Data Type Conversion4'
       *  DataTypeConversion: '<S738>/Data Type Conversion5'
       *  DataTypeConversion: '<S738>/Data Type Conversion6'
       *  DataTypeConversion: '<S738>/Data Type Conversion7'
       *  DataTypeConversion: '<S738>/Data Type Conversion8'
       *  DataTypeConversion: '<S738>/Data Type Conversion9'
       *  DataTypeConversion: '<S743>/Data Type Conversion19'
       *  ForEachSliceAssignment generated from: '<S738>/AudioOut'
       *  ForEachSliceSelector generated from: '<S738>/CouplingOutput'
       *  ForEachSliceSelector generated from: '<S738>/Electrical'
       *  ForEachSliceSelector generated from: '<S738>/Panto'
       *  ForEachSliceSelector generated from: '<S738>/Pneumatics'
       *  ForEachSliceSelector generated from: '<S738>/Traction'
       *  Logic: '<S738>/AND2'
       *  Logic: '<S738>/AND3'
       *  Logic: '<S738>/AND5'
       *  Logic: '<S738>/NOT'
       *  Logic: '<S738>/OR2'
       *  Logic: '<S738>/OR3'
       *  Logic: '<S738>/OR4'
       *  Logic: '<S738>/OR5'
       *  Logic: '<S738>/OR6'
       *  MinMax: '<S738>/Max2'
       *  Outport: '<Root>/CouplingOutput'
       *  Outport: '<Root>/ElectricalOutput'
       *  Outport: '<Root>/PantographVehicleOut'
       *  Outport: '<Root>/PneumaticsVehicleOut'
       *  Outport: '<Root>/TractionVehicleOut'
       *  RelationalOperator: '<S739>/FixPt Relational Operator'
       *  UnitDelay: '<S739>/Delay Input1'
       */
      rtb_ImpAsg_InsertedFor_AudioOut_at_inport_0[ForEach_itr_m].AirBrakeRelease
        = ((rtb_Switch4_f != 0.0) && (rtb_Product_cv <
            self_CoreSubsys_pnaevvf[ForEach_itr_m].dwork.DelayInput1_DSTATE));
      rtb_ImpAsg_InsertedFor_AudioOut_at_inport_0[ForEach_itr_m].
        PneumaticPressureRelease = BEML_EMU_Y.PneumaticsVehicleOut[ForEach_itr_m]
        .Audio.PneumaticPressureRelease;
      rtb_ImpAsg_InsertedFor_AudioOut_at_inport_0[ForEach_itr_m].
        EmergencyBrakeApplicationSound =
        BEML_EMU_Y.PneumaticsVehicleOut[ForEach_itr_m].
        Audio.EmergencyBrakeActive;
      rtb_ImpAsg_InsertedFor_AudioOut_at_inport_0[ForEach_itr_m].
        SaloonDoorOpeningBuzzer = rtb_AND_p;
      rtb_ImpAsg_InsertedFor_AudioOut_at_inport_0[ForEach_itr_m].
        SaloonDoorClosingBuzzer = rtb_Compare_g42;
      rtb_ImpAsg_InsertedFor_AudioOut_at_inport_0[ForEach_itr_m].
        DoorWarningBuzzer = rtb_Compare_ja;
      rtb_ImpAsg_InsertedFor_AudioOut_at_inport_0[ForEach_itr_m].EEDEADOperated =
        rtb_Compare_kq;
      rtb_ImpAsg_InsertedFor_AudioOut_at_inport_0[ForEach_itr_m].
        PantographLowering = BEML_EMU_Y.PantographVehicleOut[ForEach_itr_m].
        PantoLowering;
      rtb_ImpAsg_InsertedFor_AudioOut_at_inport_0[ForEach_itr_m].
        PantographRaising = BEML_EMU_Y.PantographVehicleOut[ForEach_itr_m].
        PantoRising;
      rtb_ImpAsg_InsertedFor_AudioOut_at_inport_0[ForEach_itr_m].VCBOpenSound =
        BEML_EMU_Y.ElectricalOutput[ForEach_itr_m].Audio.VCBOpen;
      rtb_ImpAsg_InsertedFor_AudioOut_at_inport_0[ForEach_itr_m].VCBCloseSound =
        BEML_EMU_Y.ElectricalOutput[ForEach_itr_m].Audio.VCBClose;
      rtb_ImpAsg_InsertedFor_AudioOut_at_inport_0[ForEach_itr_m].WiperSound =
        BEML_EMU_Y.ElectricalOutput[ForEach_itr_m].Audio.WiperOn;
      rtb_ImpAsg_InsertedFor_AudioOut_at_inport_0[ForEach_itr_m].
        CompressorStartAndRunSound = BEML_EMU_Y.ElectricalOutput[ForEach_itr_m].
        Audio.CompressorOn;
      rtb_ImpAsg_InsertedFor_AudioOut_at_inport_0[ForEach_itr_m].
        FlasherLightOperationSound = BEML_EMU_Y.ElectricalOutput[ForEach_itr_m].
        Audio.FlasherLightSound;
      rtb_ImpAsg_InsertedFor_AudioOut_at_inport_0[ForEach_itr_m].DeadmanAlarm =
        ((!BEML_EMU_Y.ElectricalOutput[ForEach_itr_m].Audio.DeadmanVigilance) &&
         BEML_EMU_Y.ElectricalOutput[ForEach_itr_m].TCMS.CabActive);
      rtb_ImpAsg_InsertedFor_AudioOut_at_inport_0[ForEach_itr_m].WheelSlip =
        DiscreteTimeIntegrator_a;
      rtb_ImpAsg_InsertedFor_AudioOut_at_inport_0[ForEach_itr_m].WheelSlide =
        rtb_CollisionDetected;
      rtb_ImpAsg_InsertedFor_AudioOut_at_inport_0[ForEach_itr_m].Derailment =
        ((BEML_EMU_Y.TractionVehicleOut[ForEach_itr_m].
          TractionControl.TCMS.VehicleDerailed != 0.0) ||
         (BEML_EMU_Y.TractionVehicleOut[ForEach_itr_m].
          TractionControl.TCMS.VehicleBogieDerailed != 0.0));
      rtb_ImpAsg_InsertedFor_AudioOut_at_inport_0[ForEach_itr_m].
        CollisionDetectionCoupling = BEML_EMU_Y.CouplingOutput[ForEach_itr_m].
        CouplerAudio.MechanicalCouple;
      rtb_ImpAsg_InsertedFor_AudioOut_at_inport_0[ForEach_itr_m].
        MechanicalUncouple = BEML_EMU_Y.CouplingOutput[ForEach_itr_m].
        CouplerAudio.MechanicalUncouple;
      rtb_ImpAsg_InsertedFor_AudioOut_at_inport_0[ForEach_itr_m].
        ObstacleSoftCollision = (BEML_EMU_Y.ElectricalOutput[ForEach_itr_m].
        TCMS.CabActive && (BEML_EMU_Y.ElectricalOutput[ForEach_itr_m].
                           Audio.ObstacleSoftCollision != 0.0));

      /* Update for UnitDelay: '<S739>/Delay Input1' incorporates:
       *  MinMax: '<S738>/Max2'
       */
      self_CoreSubsys_pnaevvf[ForEach_itr_m].dwork.DelayInput1_DSTATE =
        rtb_Product_cv;

      /* Update for UnitDelay: '<S745>/Delay Input1' */
      self_CoreSubsys_pnaevvf[ForEach_itr_m].dwork.DelayInput1_DSTATE_i = diff;
    }

    /* End of Outputs for SubSystem: '<S734>/Subsystem1' */
    /* End of Outputs for SubSystem: '<S4>/AudioSystemInterface' */

    /* Outport: '<Root>/AudioOutput' */
    memcpy(&BEML_EMU_Y.AudioOutput[0],
           &rtb_ImpAsg_InsertedFor_AudioOut_at_inport_0[0], sizeof
           (BD_SimIntegration_Out_Vehicle_Audio) << 3U);

    /* Outputs for Atomic SubSystem: '<S4>/ScoringSystemInterface' */
    /* Outputs for Iterator SubSystem: '<S746>/For Each Subsystem' incorporates:
     *  ForEach: '<S748>/For Each'
     */
    for (ForEach_itr_a = 0; ForEach_itr_a < 8; ForEach_itr_a++) {
      /* Outputs for Iterator SubSystem: '<S750>/Subsystem' incorporates:
       *  ForEach: '<S751>/For Each'
       */
      for (ForEach_itr_h = 0; ForEach_itr_h < 2; ForEach_itr_h++) {
        /* ForEachSliceAssignment generated from: '<S751>/Out1' incorporates:
         *  DiscreteIntegrator: '<S751>/Discrete-Time Integrator'
         */
        rtb_ImpAsg_InsertedFor_Out1_at_inport_0_d[ForEach_itr_h] =
          self_CoreSubsys_pnaevvfpg[ForEach_itr_a].self_CoreSubsys[ForEach_itr_h]
          .dwork.DiscreteTimeIntegrator_DSTATE;

        /* ForEachSliceAssignment generated from: '<S751>/Out2' incorporates:
         *  DiscreteIntegrator: '<S751>/Discrete-Time Integrator1'
         */
        rtb_ImpAsg_InsertedFor_Out2_at_inport_0[ForEach_itr_h] =
          self_CoreSubsys_pnaevvfpg[ForEach_itr_a].self_CoreSubsys[ForEach_itr_h]
          .dwork.DiscreteTimeIntegrator1_DSTATE;

        /* Update for DiscreteIntegrator: '<S751>/Discrete-Time Integrator' incorporates:
         *  ForEachSliceSelector generated from: '<S748>/In1'
         *  ForEachSliceSelector generated from: '<S751>/<Bogie>'
         *  Outport: '<Root>/TractionVehicleOut'
         */
        self_CoreSubsys_pnaevvfpg[ForEach_itr_a].self_CoreSubsys[ForEach_itr_h].
          dwork.DiscreteTimeIntegrator_DSTATE =
          BEML_EMU_P.CoreSubsys_pnaevvfpg.CoreSubsys.DiscreteTimeIntegrator_gainval
          * BEML_EMU_Y.TractionVehicleOut[ForEach_itr_a].
          TractionControl.TCMS.Bogie[ForEach_itr_h].TractionPower +
          self_CoreSubsys_pnaevvfpg[ForEach_itr_a].self_CoreSubsys[ForEach_itr_h]
          .dwork.DiscreteTimeIntegrator_DSTATE;

        /* Update for DiscreteIntegrator: '<S751>/Discrete-Time Integrator1' incorporates:
         *  ForEachSliceSelector generated from: '<S748>/In1'
         *  ForEachSliceSelector generated from: '<S751>/<Bogie>'
         *  Outport: '<Root>/TractionVehicleOut'
         */
        self_CoreSubsys_pnaevvfpg[ForEach_itr_a].self_CoreSubsys[ForEach_itr_h].
          dwork.DiscreteTimeIntegrator1_DSTATE =
          BEML_EMU_P.CoreSubsys_pnaevvfpg.CoreSubsys.DiscreteTimeIntegrator1_gainval
          * BEML_EMU_Y.TractionVehicleOut[ForEach_itr_a].
          TractionControl.TCMS.Bogie[ForEach_itr_h].EDBrakingPower +
          self_CoreSubsys_pnaevvfpg[ForEach_itr_a].self_CoreSubsys[ForEach_itr_h]
          .dwork.DiscreteTimeIntegrator1_DSTATE;
      }

      /* End of Outputs for SubSystem: '<S750>/Subsystem' */

      /* ForEachSliceAssignment generated from: '<S748>/VehicleTractiveEnergy' incorporates:
       *  Sum: '<S748>/Sum of Elements'
       */
      rtb_ImpAsg_InsertedFor_VehicleTractiveEnergy_at_inport_0[ForEach_itr_a] =
        rtb_ImpAsg_InsertedFor_Out1_at_inport_0_d[0] +
        rtb_ImpAsg_InsertedFor_Out1_at_inport_0_d[1];

      /* ForEachSliceAssignment generated from: '<S748>/VehicleEDBrakingEnergy' incorporates:
       *  Sum: '<S748>/Sum of Elements1'
       */
      rtb_Abs1_h[ForEach_itr_a] = rtb_ImpAsg_InsertedFor_Out2_at_inport_0[0] +
        rtb_ImpAsg_InsertedFor_Out2_at_inport_0[1];
    }

    /* End of Outputs for SubSystem: '<S746>/For Each Subsystem' */

    /* Sum: '<S746>/Sum of Elements' */
    rtb_DataTypeConversion1_gv = -0.0;

    /* Sum: '<S746>/Sum of Elements1' */
    rtb_DataTypeConversion_d = -0.0;
    for (i = 0; i < 8; i++) {
      /* Abs: '<S746>/Abs1' */
      rtb_Product_cv = fabs(rtb_Abs1_h[i]);

      /* Sum: '<S746>/Sum of Elements' incorporates:
       *  Abs: '<S746>/Abs'
       */
      rtb_DataTypeConversion1_gv += fabs
        (rtb_ImpAsg_InsertedFor_VehicleTractiveEnergy_at_inport_0[i]);

      /* Sum: '<S746>/Sum of Elements1' */
      rtb_DataTypeConversion_d += rtb_Product_cv;

      /* Abs: '<S746>/Abs1' */
      rtb_Abs1_h[i] = rtb_Product_cv;
    }

    /* Outport: '<Root>/ScoringTrainOutput ' incorporates:
     *  DiscreteIntegrator: '<S746>/Discrete-Time Integrator'
     *  Sum: '<S746>/Add'
     */
    BEML_EMU_Y.ScoringTrainOutput.TotalEnergyConsumption =
      (rtb_DataTypeConversion1_gv - rtb_DataTypeConversion_d) +
      BEML_EMU_DW.DiscreteTimeIntegrator_DSTATE;

    /* Outputs for Iterator SubSystem: '<S746>/For Each Subsystem1' incorporates:
     *  ForEach: '<S749>/For Each'
     */
    for (ForEach_itr_b = 0; ForEach_itr_b < 8; ForEach_itr_b++) {
      /* ForEachSliceAssignment generated from: '<S749>/Out1' incorporates:
       *  ForEachSliceSelector generated from: '<S749>/In1'
       *  Outport: '<Root>/ElectricalOutput'
       */
      rtb_ImpAsg_InsertedFor_Out1_at_inport_0_cy[ForEach_itr_b] =
        BEML_EMU_Y.ElectricalOutput[ForEach_itr_b].
        OutputControlStates.AuxModuleON;
    }

    /* End of Outputs for SubSystem: '<S746>/For Each Subsystem1' */

    /* Sum: '<S746>/Sum of Elements2' */
    rtb_DataTypeConversion_d = -0.0;
    for (i = 0; i < 8; i++) {
      rtb_DataTypeConversion_d += rtb_ImpAsg_InsertedFor_Out1_at_inport_0_cy[i];
    }

    /* End of Sum: '<S746>/Sum of Elements2' */

    /* Outputs for Iterator SubSystem: '<S736>/VehicleLevelScoring' incorporates:
     *  ForEach: '<S747>/For Each'
     */
    for (ForEach_itr_p = 0; ForEach_itr_p < 8; ForEach_itr_p++) {
      /* ForEachSliceAssignment generated from: '<S747>/Scoring' incorporates:
       *  DataTypeConversion: '<S747>/Data Type Conversion'
       *  DataTypeConversion: '<S747>/Data Type Conversion1'
       *  ForEachSliceSelector generated from: '<S747>/ElectricalOut'
       *  ForEachSliceSelector generated from: '<S747>/PneumaticsVehicleOut'
       *  Logic: '<S747>/Logical Operator'
       *  Logic: '<S747>/Logical Operator1'
       *  Logic: '<S747>/Logical Operator2'
       *  Logic: '<S747>/Logical Operator3'
       *  Logic: '<S747>/Logical Operator4'
       *  Logic: '<S747>/OR'
       *  Outport: '<Root>/ElectricalOutput'
       *  Outport: '<Root>/PneumaticsVehicleOut'
       */
      rtb_ImpAsg_InsertedFor_Scoring_at_inport_0[ForEach_itr_p].
        VigilanceIntervention = (BEML_EMU_Y.ElectricalOutput[ForEach_itr_p].
        TCMS.CabActive && (!(BEML_EMU_Y.ElectricalOutput[ForEach_itr_p].
        SignalSys.ATOMode != 0.0)) &&
        (!(BEML_EMU_Y.ElectricalOutput[ForEach_itr_p].SignalSys.ATBMode != 0.0))
        && (!(BEML_EMU_Y.ElectricalOutput[ForEach_itr_p].SignalSys.UTOMode !=
              0.0)) && (!BEML_EMU_Y.ElectricalOutput[ForEach_itr_p].
                        Scoring.DeadmanRelay));
      rtb_ImpAsg_InsertedFor_Scoring_at_inport_0[ForEach_itr_p].HornActivation =
        ((BEML_EMU_Y.PneumaticsVehicleOut[ForEach_itr_p].Audio.HornHigh != 0.0) ||
         (BEML_EMU_Y.PneumaticsVehicleOut[ForEach_itr_p].Audio.HornLow != 0.0));
    }

    /* End of Outputs for SubSystem: '<S736>/VehicleLevelScoring' */

    /* Switch: '<S746>/Switch' incorporates:
     *  Constant: '<S746>/Constant'
     *  Constant: '<S746>/Constant2'
     */
    if (rtb_DataTypeConversion_d > BEML_EMU_P.Switch_Threshold) {
      rtb_DataTypeConversion_d = BEML_EMU_P.Constant_Value;
    } else {
      rtb_DataTypeConversion_d = BEML_EMU_P.Constant2_Value;
    }

    /* End of Switch: '<S746>/Switch' */

    /* Update for DiscreteIntegrator: '<S746>/Discrete-Time Integrator' */
    BEML_EMU_DW.DiscreteTimeIntegrator_DSTATE +=
      BEML_EMU_P.DiscreteTimeIntegrator_gainval * rtb_DataTypeConversion_d;

    /* End of Outputs for SubSystem: '<S4>/ScoringSystemInterface' */

    /* Outport: '<Root>/ScoringVehicleOutput' */
    memcpy(&BEML_EMU_Y.ScoringVehicleOutput[0],
           &rtb_ImpAsg_InsertedFor_Scoring_at_inport_0[0], sizeof
           (BD_SimIntegration_Out_Vehicle_Scoring) << 3U);
  }

  /* Outport: '<Root>/TrainFaultStates' */
  BEML_EMU_Y.TrainFaultStates = rtb_Faults;

  /* Outport: '<Root>/VehicleFaultStates' */
  memcpy(&BEML_EMU_Y.VehicleFaultStates[0],
         &BEML_EMU_B.ImpAsg_InsertedFor_VehicleFaultStates_at_inport_0[0],
         sizeof(BD_SimIntegration_Faults_Vehicle) << 3U);

  /* Outputs for Iterator SubSystem: '<S737>/Input Adapter' incorporates:
   *  ForEach: '<S752>/For Each'
   */
  for (ForEach_itr_k = 0; ForEach_itr_k < 8; ForEach_itr_k++) {
    /* Trigonometry: '<S760>/theta' incorporates:
     *  ForEachSliceSelector generated from: '<S752>/Vehicle Input'
     *  Inport: '<Root>/VehicleInput'
     */
    diff = atan(BEML_EMU_U.VehicleInput[ForEach_itr_k].
                Dynamics.TrackData.Gradient);

    /* Trigonometry: '<S766>/Trigonometric Function2' */
    rtb_DataTypeConversion1_gv = sin(diff);

    /* Trigonometry: '<S766>/Trigonometric Function3' */
    rtb_DataTypeConversion_d = cos(diff);

    /* Sum: '<S766>/Add1' incorporates:
     *  Constant: '<S766>/Constant1'
     *  Gain: '<S766>/Gain1'
     *  Gain: '<S766>/Gain3'
     */
    for (i = 0; i < 9; i++) {
      rtb_PermuteDimensions[i] =
        (BEML_EMU_P.CoreSubsys_pnaevvfpgh5z.Gain3_Gain[i] *
         rtb_DataTypeConversion1_gv +
         BEML_EMU_P.CoreSubsys_pnaevvfpgh5z.Gain1_Gain[i] *
         rtb_DataTypeConversion_d) +
        BEML_EMU_P.CoreSubsys_pnaevvfpgh5z.Constant1_Value_p[i];
    }

    /* End of Sum: '<S766>/Add1' */

    /* Trigonometry: '<S765>/Trigonometric Function' incorporates:
     *  DiscreteIntegrator: '<S760>/Discrete-Time Integrator'
     */
    rtb_DataTypeConversion1_gv = sin(self_CoreSubsys_pnaevvfpgh5z[ForEach_itr_k]
      .dwork.DiscreteTimeIntegrator_DSTATE);

    /* Trigonometry: '<S765>/Trigonometric Function1' incorporates:
     *  DiscreteIntegrator: '<S760>/Discrete-Time Integrator'
     */
    rtb_DataTypeConversion_d = cos(self_CoreSubsys_pnaevvfpgh5z[ForEach_itr_k].
      dwork.DiscreteTimeIntegrator_DSTATE);

    /* ForEachSliceAssignment generated from: '<S752>/MotionBaseInput' incorporates:
     *  BusAssignment: '<S754>/Bus Assignment'
     *  DiscreteIntegrator: '<S760>/Discrete-Time Integrator'
     */
    BEML_EMU_B.ImpAsg_InsertedFor_MotionBaseInput_at_inport_0[ForEach_itr_k].
      Dynamics.Transform.H = self_CoreSubsys_pnaevvfpgh5z[ForEach_itr_k].
      dwork.DiscreteTimeIntegrator_DSTATE;

    /* MATLAB Function: '<S763>/Replace Zeros' incorporates:
     *  ForEachSliceSelector generated from: '<S752>/Vehicle Input'
     *  Inport: '<Root>/VehicleInput'
     */
    rtb_Product_cv = BEML_EMU_U.VehicleInput[ForEach_itr_k].
      Dynamics.TrackData.Radius;
    if (BEML_EMU_U.VehicleInput[ForEach_itr_k].Dynamics.TrackData.Radius == 0.0)
    {
      rtb_Product_cv = 4.94065645841247E-324;
    }

    /* Update for DiscreteIntegrator: '<S760>/Discrete-Time Integrator' incorporates:
     *  ForEachSliceSelector generated from: '<S752>/DynamicsOut'
     *  MATLAB Function: '<S763>/Replace Zeros'
     *  Outport: '<Root>/DynamicsOutput'
     *  Product: '<S763>/Divide'
     */
    self_CoreSubsys_pnaevvfpgh5z[ForEach_itr_k].
      dwork.DiscreteTimeIntegrator_DSTATE =
      BEML_EMU_Y.DynamicsOutput[ForEach_itr_k].Inertia.Velocity / rtb_Product_cv
      * BEML_EMU_P.CoreSubsys_pnaevvfpgh5z.DiscreteTimeIntegrator_gainval +
      self_CoreSubsys_pnaevvfpgh5z[ForEach_itr_k].
      dwork.DiscreteTimeIntegrator_DSTATE;

    /* ForEachSliceAssignment generated from: '<S752>/MotionBaseInput' incorporates:
     *  BusAssignment: '<S762>/Bus Assignment2'
     *  Constant: '<S762>/Constant8'
     */
    BEML_EMU_B.ImpAsg_InsertedFor_MotionBaseInput_at_inport_0[ForEach_itr_k].
      Dynamics.Transform.Position[0] =
      BEML_EMU_P.CoreSubsys_pnaevvfpgh5z.Constant8_Value.Position[0];
    BEML_EMU_B.ImpAsg_InsertedFor_MotionBaseInput_at_inport_0[ForEach_itr_k].
      Dynamics.Transform.Position[1] =
      BEML_EMU_P.CoreSubsys_pnaevvfpgh5z.Constant8_Value.Position[1];
    BEML_EMU_B.ImpAsg_InsertedFor_MotionBaseInput_at_inport_0[ForEach_itr_k].
      Dynamics.Transform.Position[2] =
      BEML_EMU_P.CoreSubsys_pnaevvfpgh5z.Constant8_Value.Position[2];

    /* Sum: '<S765>/Add' incorporates:
     *  Constant: '<S765>/Constant'
     *  Gain: '<S765>/Gain'
     *  Gain: '<S765>/Gain2'
     */
    for (i = 0; i < 9; i++) {
      tmp[i] = (BEML_EMU_P.CoreSubsys_pnaevvfpgh5z.Gain_Gain[i] *
                rtb_DataTypeConversion1_gv +
                BEML_EMU_P.CoreSubsys_pnaevvfpgh5z.Gain2_Gain[i] *
                rtb_DataTypeConversion_d) +
        BEML_EMU_P.CoreSubsys_pnaevvfpgh5z.Constant_Value_c[i];
    }

    /* End of Sum: '<S765>/Add' */

    /* ForEachSliceAssignment generated from: '<S752>/MotionBaseInput' incorporates:
     *  BusAssignment: '<S752>/Bus Assignment'
     *  BusAssignment: '<S757>/Bus Assignment4'
     *  BusAssignment: '<S760>/Bus Assignment1'
     *  BusAssignment: '<S762>/Bus Assignment2'
     *  Constant: '<S752>/Constant1'
     *  Constant: '<S756>/InputValue'
     *  Constant: '<S758>/Constant5'
     *  Constant: '<S759>/Constant5'
     *  Constant: '<S760>/Constant2'
     *  Constant: '<S760>/Constant3'
     *  Constant: '<S760>/Lateral Velocity'
     *  Constant: '<S760>/Vertical Acceleration'
     *  Constant: '<S760>/Vertical Velocity'
     *  Constant: '<S762>/Constant8'
     *  Constant: '<S762>/Roll'
     *  DataTypeConversion: '<S754>/Data Type Conversion'
     *  ForEachSliceSelector generated from: '<S752>/DynamicsOut'
     *  ForEachSliceSelector generated from: '<S752>/MotionBaseInputs'
     *  Inport: '<Root>/MotionBaseControllerInput'
     *  Outport: '<Root>/DynamicsOutput'
     *  Product: '<S764>/Matrix Multiply'
     *  Sum: '<S752>/Add1'
     */
    for (i = 0; i < 3; i++) {
      for (uElOffset1 = 0; uElOffset1 < 3; uElOffset1++) {
        /* Product: '<S764>/Matrix Multiply' */
        ntIdx1 = i + 3 * uElOffset1;
        BEML_EMU_B.ImpAsg_InsertedFor_MotionBaseInput_at_inport_0[ForEach_itr_k]
          .Dynamics.Transform.OrientationDCM[ntIdx1] = 0.0;
        BEML_EMU_B.ImpAsg_InsertedFor_MotionBaseInput_at_inport_0[ForEach_itr_k]
          .Dynamics.Transform.OrientationDCM[ntIdx1] += tmp[3 * uElOffset1] *
          rtb_PermuteDimensions[i];
        BEML_EMU_B.ImpAsg_InsertedFor_MotionBaseInput_at_inport_0[ForEach_itr_k]
          .Dynamics.Transform.OrientationDCM[ntIdx1] += tmp[3 * uElOffset1 + 1] *
          rtb_PermuteDimensions[i + 3];
        BEML_EMU_B.ImpAsg_InsertedFor_MotionBaseInput_at_inport_0[ForEach_itr_k]
          .Dynamics.Transform.OrientationDCM[ntIdx1] += tmp[3 * uElOffset1 + 2] *
          rtb_PermuteDimensions[i + 6];
      }
    }

    BEML_EMU_B.ImpAsg_InsertedFor_MotionBaseInput_at_inport_0[ForEach_itr_k].
      Dynamics.Transform.OrientationQ[0] =
      BEML_EMU_P.CoreSubsys_pnaevvfpgh5z.Constant8_Value.OrientationQ[0];
    BEML_EMU_B.ImpAsg_InsertedFor_MotionBaseInput_at_inport_0[ForEach_itr_k].
      Dynamics.Transform.OrientationQ[1] =
      BEML_EMU_P.CoreSubsys_pnaevvfpgh5z.Constant8_Value.OrientationQ[1];
    BEML_EMU_B.ImpAsg_InsertedFor_MotionBaseInput_at_inport_0[ForEach_itr_k].
      Dynamics.Transform.OrientationQ[2] =
      BEML_EMU_P.CoreSubsys_pnaevvfpgh5z.Constant8_Value.OrientationQ[2];
    BEML_EMU_B.ImpAsg_InsertedFor_MotionBaseInput_at_inport_0[ForEach_itr_k].
      Dynamics.Transform.OrientationQ[3] =
      BEML_EMU_P.CoreSubsys_pnaevvfpgh5z.Constant8_Value.OrientationQ[3];
    BEML_EMU_B.ImpAsg_InsertedFor_MotionBaseInput_at_inport_0[ForEach_itr_k].
      Dynamics.Transform.P = diff;
    BEML_EMU_B.ImpAsg_InsertedFor_MotionBaseInput_at_inport_0[ForEach_itr_k].
      Dynamics.Transform.R = BEML_EMU_P.CoreSubsys_pnaevvfpgh5z.Roll_Value;
    BEML_EMU_B.ImpAsg_InsertedFor_MotionBaseInput_at_inport_0[ForEach_itr_k].
      Dynamics.Velocity[0] = BEML_EMU_Y.DynamicsOutput[ForEach_itr_k].
      Inertia.Velocity;
    BEML_EMU_B.ImpAsg_InsertedFor_MotionBaseInput_at_inport_0[ForEach_itr_k].
      Dynamics.Velocity[1] =
      BEML_EMU_P.CoreSubsys_pnaevvfpgh5z.LateralVelocity_Value;
    BEML_EMU_B.ImpAsg_InsertedFor_MotionBaseInput_at_inport_0[ForEach_itr_k].
      Dynamics.Velocity[2] =
      BEML_EMU_P.CoreSubsys_pnaevvfpgh5z.VerticalVelocity_Value;
    BEML_EMU_B.ImpAsg_InsertedFor_MotionBaseInput_at_inport_0[ForEach_itr_k].
      Dynamics.Acceleration[0] = BEML_EMU_Y.DynamicsOutput[ForEach_itr_k].
      Inertia.Acceleration;
    BEML_EMU_B.ImpAsg_InsertedFor_MotionBaseInput_at_inport_0[ForEach_itr_k].
      Dynamics.Acceleration[1] = BEML_EMU_Y.DynamicsOutput[ForEach_itr_k].
      TrackGeometry.LateralAcceleration +
      BEML_EMU_P.CoreSubsys_pnaevvfpgh5z.Constant1_Value;
    BEML_EMU_B.ImpAsg_InsertedFor_MotionBaseInput_at_inport_0[ForEach_itr_k].
      Dynamics.Acceleration[2] =
      BEML_EMU_P.CoreSubsys_pnaevvfpgh5z.VerticalAcceleration_Value;
    BEML_EMU_B.ImpAsg_InsertedFor_MotionBaseInput_at_inport_0[ForEach_itr_k].
      Dynamics.AngularVelocity[0] =
      BEML_EMU_P.CoreSubsys_pnaevvfpgh5z.Constant2_Value[0];
    BEML_EMU_B.ImpAsg_InsertedFor_MotionBaseInput_at_inport_0[ForEach_itr_k].
      Dynamics.AngularAcceleration[0] =
      BEML_EMU_P.CoreSubsys_pnaevvfpgh5z.Constant3_Value[0];
    BEML_EMU_B.ImpAsg_InsertedFor_MotionBaseInput_at_inport_0[ForEach_itr_k].
      Dynamics.AngularVelocity[1] =
      BEML_EMU_P.CoreSubsys_pnaevvfpgh5z.Constant2_Value[1];
    BEML_EMU_B.ImpAsg_InsertedFor_MotionBaseInput_at_inport_0[ForEach_itr_k].
      Dynamics.AngularAcceleration[1] =
      BEML_EMU_P.CoreSubsys_pnaevvfpgh5z.Constant3_Value[1];
    BEML_EMU_B.ImpAsg_InsertedFor_MotionBaseInput_at_inport_0[ForEach_itr_k].
      Dynamics.AngularVelocity[2] =
      BEML_EMU_P.CoreSubsys_pnaevvfpgh5z.Constant2_Value[2];
    BEML_EMU_B.ImpAsg_InsertedFor_MotionBaseInput_at_inport_0[ForEach_itr_k].
      Dynamics.AngularAcceleration[2] =
      BEML_EMU_P.CoreSubsys_pnaevvfpgh5z.Constant3_Value[2];
    BEML_EMU_B.ImpAsg_InsertedFor_MotionBaseInput_at_inport_0[ForEach_itr_k].
      Effects.ExternalEffects.DegradedTrack =
      BEML_EMU_U.MotionBaseControllerInput[ForEach_itr_k].Effects.DegradedTrack;
    BEML_EMU_B.ImpAsg_InsertedFor_MotionBaseInput_at_inport_0[ForEach_itr_k].
      Effects.ExternalEffects.OnRoughTrack = 0.0;
    BEML_EMU_B.ImpAsg_InsertedFor_MotionBaseInput_at_inport_0[ForEach_itr_k].
      Effects.LongitudinalJolt = false;
    BEML_EMU_B.ImpAsg_InsertedFor_MotionBaseInput_at_inport_0[ForEach_itr_k].
      Effects.LateralJolt = false;
    BEML_EMU_B.ImpAsg_InsertedFor_MotionBaseInput_at_inport_0[ForEach_itr_k].
      Effects.VerticalJolt = false;
    BEML_EMU_B.ImpAsg_InsertedFor_MotionBaseInput_at_inport_0[ForEach_itr_k].
      Effects.VerticalJoltDown = false;
    BEML_EMU_B.ImpAsg_InsertedFor_MotionBaseInput_at_inport_0[ForEach_itr_k].
      Environment.Contact = BEML_EMU_P.CoreSubsys_pnaevvfpgh5z.Constant5_Value;
    BEML_EMU_B.ImpAsg_InsertedFor_MotionBaseInput_at_inport_0[ForEach_itr_k].
      Tuning.HeadingRateLimit =
      BEML_EMU_P.CoreSubsys_pnaevvfpgh5z.Constant5_Value_h;
    BEML_EMU_B.ImpAsg_InsertedFor_MotionBaseInput_at_inport_0[ForEach_itr_k].
      Tuning.PitchRateLimit = BEML_EMU_U.MotionBaseControllerInput[ForEach_itr_k]
      .Tuning.PitchRateLimit;
    BEML_EMU_B.ImpAsg_InsertedFor_MotionBaseInput_at_inport_0[ForEach_itr_k].
      Tuning.RollRateLimit = BEML_EMU_U.MotionBaseControllerInput[ForEach_itr_k]
      .Tuning.RollRateLimit;
    BEML_EMU_B.ImpAsg_InsertedFor_MotionBaseInput_at_inport_0[ForEach_itr_k].
      Tuning.LinearVelocitySaturation =
      BEML_EMU_U.MotionBaseControllerInput[ForEach_itr_k].
      Tuning.LinearVelocitySaturation;
    BEML_EMU_B.ImpAsg_InsertedFor_MotionBaseInput_at_inport_0[ForEach_itr_k].
      Tuning.LinearAccelerationSaturation =
      BEML_EMU_U.MotionBaseControllerInput[ForEach_itr_k].
      Tuning.LinearAccelerationSaturation;
    BEML_EMU_B.ImpAsg_InsertedFor_MotionBaseInput_at_inport_0[ForEach_itr_k].
      Tuning.LinearVelocityLPFConstant =
      BEML_EMU_U.MotionBaseControllerInput[ForEach_itr_k].
      Tuning.LinearVelocityLPFConstant;
    BEML_EMU_B.ImpAsg_InsertedFor_MotionBaseInput_at_inport_0[ForEach_itr_k].
      Tuning.LinearAccelerationLPFConstant =
      BEML_EMU_U.MotionBaseControllerInput[ForEach_itr_k].
      Tuning.LinearAccelerationLPFConstant;
    BEML_EMU_B.ImpAsg_InsertedFor_MotionBaseInput_at_inport_0[ForEach_itr_k].
      Tuning.AngularVelocitySaturation =
      BEML_EMU_U.MotionBaseControllerInput[ForEach_itr_k].
      Tuning.AngularVelocitySaturation;
    BEML_EMU_B.ImpAsg_InsertedFor_MotionBaseInput_at_inport_0[ForEach_itr_k].
      Tuning.AngularAccelerationSaturation =
      BEML_EMU_U.MotionBaseControllerInput[ForEach_itr_k].
      Tuning.AngularAccelerationSaturation;
    BEML_EMU_B.ImpAsg_InsertedFor_MotionBaseInput_at_inport_0[ForEach_itr_k].
      Tuning.AngularVelocityLPFConstant =
      BEML_EMU_U.MotionBaseControllerInput[ForEach_itr_k].
      Tuning.AngularVelocityLPFConstant;
    BEML_EMU_B.ImpAsg_InsertedFor_MotionBaseInput_at_inport_0[ForEach_itr_k].
      Tuning.AngularAccelerationLPFConstant =
      BEML_EMU_U.MotionBaseControllerInput[ForEach_itr_k].
      Tuning.AngularAccelerationLPFConstant;
    BEML_EMU_B.ImpAsg_InsertedFor_MotionBaseInput_at_inport_0[ForEach_itr_k].
      Tuning.RoughnessProfileType =
      BEML_EMU_U.MotionBaseControllerInput[ForEach_itr_k].
      Tuning.RoughnessProfileType;
    BEML_EMU_B.ImpAsg_InsertedFor_MotionBaseInput_at_inport_0[ForEach_itr_k].
      Tuning.RoughnessProfileFactor =
      BEML_EMU_U.MotionBaseControllerInput[ForEach_itr_k].
      Tuning.RoughnessProfileFactor;
    BEML_EMU_B.ImpAsg_InsertedFor_MotionBaseInput_at_inport_0[ForEach_itr_k].
      Tuning.RoughnessProfileFrequencyFactor =
      BEML_EMU_U.MotionBaseControllerInput[ForEach_itr_k].
      Tuning.RoughnessProfileFrequencyFactor;
    BEML_EMU_B.ImpAsg_InsertedFor_MotionBaseInput_at_inport_0[ForEach_itr_k].
      Tuning.RoughnessProfileSpeedFactor =
      BEML_EMU_U.MotionBaseControllerInput[ForEach_itr_k].
      Tuning.RoughnessProfileSpeedFactor;
    BEML_EMU_B.ImpAsg_InsertedFor_MotionBaseInput_at_inport_0[ForEach_itr_k].
      Tuning.RoughnessProfileSpeedSaturation =
      BEML_EMU_U.MotionBaseControllerInput[ForEach_itr_k].
      Tuning.RoughnessProfileSpeedSaturation;
    BEML_EMU_B.ImpAsg_InsertedFor_MotionBaseInput_at_inport_0[ForEach_itr_k].
      MotionBaseSafetyCutout =
      (BEML_EMU_P.CoreSubsys_pnaevvfpgh5z.BinarySwitch_value != 0.0);
  }

  /* End of Outputs for SubSystem: '<S737>/Input Adapter' */

  /* Outputs for Iterator SubSystem: '<S753>/MotionBasePerVehicle' incorporates:
   *  ForEach: '<S768>/For Each'
   */
  for (ForEach_itr = 0; ForEach_itr < 8; ForEach_itr++) {
    /* ForEachSliceSelector generated from: '<S768>/MotionBaseInput' */
    rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0 =
      BEML_EMU_B.ImpAsg_InsertedFor_MotionBaseInput_at_inport_0[ForEach_itr];

    /* RelationalOperator: '<S776>/Relational Operator' */
    rtb_RelationalOperator[0] = rtIsNaN
      (rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Dynamics.Velocity[0]);
    rtb_RelationalOperator[3] = rtIsNaN
      (rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Dynamics.Acceleration[
       0]);
    rtb_RelationalOperator[6] = rtIsNaN
      (rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Dynamics.AngularVelocity
       [0]);
    rtb_RelationalOperator[9] = rtIsNaN
      (rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Dynamics.AngularAcceleration
       [0]);
    rtb_RelationalOperator[1] = rtIsNaN
      (rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Dynamics.Velocity[1]);
    rtb_RelationalOperator[4] = rtIsNaN
      (rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Dynamics.Acceleration[
       1]);
    rtb_RelationalOperator[7] = rtIsNaN
      (rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Dynamics.AngularVelocity
       [1]);
    rtb_RelationalOperator[10] = rtIsNaN
      (rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Dynamics.AngularAcceleration
       [1]);
    rtb_RelationalOperator[2] = rtIsNaN
      (rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Dynamics.Velocity[2]);
    rtb_RelationalOperator[5] = rtIsNaN
      (rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Dynamics.Acceleration[
       2]);
    rtb_RelationalOperator[8] = rtIsNaN
      (rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Dynamics.AngularVelocity
       [2]);
    rtb_RelationalOperator[11] = rtIsNaN
      (rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Dynamics.AngularAcceleration
       [2]);
    for (i = 0; i < 9; i++) {
      rtb_RelationalOperator[i + 12] = rtIsNaN
        (rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Dynamics.Transform.OrientationDCM
         [i]);
    }

    /* End of RelationalOperator: '<S776>/Relational Operator' */

    /* Logic: '<S776>/Logical Operator' */
    rtb_AND_p = rtb_RelationalOperator[0];
    for (i = 0; i < 20; i++) {
      rtb_AND_p = (rtb_AND_p || rtb_RelationalOperator[i + 1]);
    }

    /* DataTypeConversion: '<S776>/Data Type Conversion1' incorporates:
     *  Abs: '<S776>/Abs'
     *  Constant: '<S843>/Constant'
     *  Logic: '<S776>/Logical Operator'
     *  Logic: '<S776>/Logical Operator1'
     *  Logic: '<S776>/Logical Operator2'
     *  Logic: '<S776>/Logical Operator3'
     *  Logic: '<S776>/Logical Operator7'
     *  RelationalOperator: '<S843>/Compare'
     *  UnitDelay: '<S776>/Unit Delay1'
     */
    rtb_DataTypeConversion1_gv =
      (rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.MotionBaseSafetyCutout
       && (!rtb_AND_p) && ((!(fabs
          (rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Dynamics.Transform.P)
          > BEML_EMU_P.CoreSubsys_m.Above20Degrees_const)) && (!(fabs
          (rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Dynamics.Transform.R)
          > BEML_EMU_P.CoreSubsys_m.Above20Degrees_const))) &&
       (!BEML_EMU_DW.CoreSubsys_m[ForEach_itr].UnitDelay1_DSTATE));

    /* Switch: '<S799>/Switch1' incorporates:
     *  Constant: '<S799>/Constant1'
     *  Constant: '<S799>/Constant2'
     *  Constant: '<S822>/Constant'
     *  DataTypeConversion: '<S797>/Data Type Conversion7'
     *  Logic: '<S797>/OR'
     *  RelationalOperator: '<S822>/Compare'
     *  Switch: '<S799>/Switch'
     */
    if (rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Tuning.RoughnessProfileType
        < BEML_EMU_P.CoreSubsys_m.Constant_Value_lv) {
      tmp_0 = BEML_EMU_P.CoreSubsys_m.Constant1_Value_cc;
    } else if (static_cast<real_T>
               (((rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Effects.ExternalEffects.OnRoughTrack
                  != 0.0) ||
                 (rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Effects.ExternalEffects.DegradedTrack
                  != 0.0))) > BEML_EMU_P.CoreSubsys_m.Switch_Threshold_cy) {
      /* Switch: '<S799>/Switch' incorporates:
       *  Constant: '<S799>/Constant'
       */
      tmp_0 = BEML_EMU_P.CoreSubsys_m.Constant_Value_mf;
    } else {
      tmp_0 = BEML_EMU_P.CoreSubsys_m.Constant2_Value_ht;
    }

    /* End of Switch: '<S799>/Switch1' */

    /* SwitchCase: '<S797>/Switch Case' incorporates:
     *  Constant: '<S815>/Constant1'
     *  Constant: '<S816>/Constant1'
     *  Constant: '<S817>/Constant1'
     *  Constant: '<S818>/Constant1'
     *  Constant: '<S819>/Constant1'
     *  Constant: '<S820>/Constant1'
     *  Constant: '<S836>/Constant1'
     *  Constant: '<S837>/Constant1'
     *  Constant: '<S838>/Constant1'
     *  Constant: '<S839>/Constant1'
     *  Constant: '<S840>/Constant1'
     *  Constant: '<S841>/Constant1'
     */
    switch (tmp_0) {
     case StandardTrack:
      /* Outputs for IfAction SubSystem: '<S797>/StandardTrackFeel' incorporates:
       *  ActionPort: '<S801>/Action Port'
       */
      /* Saturate: '<S838>/Saturation' incorporates:
       *  Constant: '<S838>/FilterSpecification'
       */
      if (BEML_EMU_P.CoreSubsys_m.FilterSpecification_Value >
          BEML_EMU_P.CoreSubsys_m.Saturation_UpperSat) {
        rtb_Switch4_f = BEML_EMU_P.CoreSubsys_m.Saturation_UpperSat;
      } else if (BEML_EMU_P.CoreSubsys_m.FilterSpecification_Value <
                 BEML_EMU_P.CoreSubsys_m.Saturation_LowerSat) {
        rtb_Switch4_f = BEML_EMU_P.CoreSubsys_m.Saturation_LowerSat;
      } else {
        rtb_Switch4_f = BEML_EMU_P.CoreSubsys_m.FilterSpecification_Value;
      }

      /* End of Saturate: '<S838>/Saturation' */

      /* Product: '<S838>/Divide' incorporates:
       *  Fcn: '<S838>/SpecificationTypeConversion'
       *  SampleTimeMath: '<S838>/Weighted Sample Time'
       *  Sum: '<S838>/Den'
       *
       * About '<S838>/Weighted Sample Time':
       *  y = K where K = ( w * Ts )
       */
      rtb_DataTypeConversion_d = BEML_EMU_P.CoreSubsys_m.WeightedSampleTime_WtEt
        / (1.0 / (6.2831853071795862 * rtb_Switch4_f) +
           BEML_EMU_P.CoreSubsys_m.WeightedSampleTime_WtEt);

      /* SignalConversion generated from: '<S838>/Vector Concatenate1' */
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_l0[0] =
        rtb_DataTypeConversion_d;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_l0[1] =
        BEML_EMU_P.CoreSubsys_m.Constant1_Value_k;

      /* SignalConversion generated from: '<S838>/Vector Concatenate' incorporates:
       *  Constant: '<S838>/Constant'
       *  Constant: '<S838>/Constant1'
       */
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_i[0] =
        BEML_EMU_P.CoreSubsys_m.Constant_Value_l;

      /* Sum: '<S838>/Subtract' incorporates:
       *  Constant: '<S838>/Constant'
       */
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_i[1] =
        rtb_DataTypeConversion_d - BEML_EMU_P.CoreSubsys_m.Constant_Value_l;

      /* DiscreteTransferFcn: '<S838>/Discrete Transfer Fcn' incorporates:
       *  Gain: '<S825>/Output'
       *  RandomNumber: '<S825>/White Noise'
       */
      rtb_DataTypeConversion_d = sqrt
        (BEML_EMU_P.CoreSubsys_m.BandLimitedWhiteNoise_Cov) /
        0.031622776601683791 * BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
        NextOutput_c - BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_i
        [1] * BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_j;

      /* Saturate: '<S839>/Saturation' incorporates:
       *  Constant: '<S839>/FilterSpecification'
       */
      if (BEML_EMU_P.CoreSubsys_m.FilterSpecification_Value_c >
          BEML_EMU_P.CoreSubsys_m.Saturation_UpperSat_o) {
        rtb_Switch4_f = BEML_EMU_P.CoreSubsys_m.Saturation_UpperSat_o;
      } else if (BEML_EMU_P.CoreSubsys_m.FilterSpecification_Value_c <
                 BEML_EMU_P.CoreSubsys_m.Saturation_LowerSat_n) {
        rtb_Switch4_f = BEML_EMU_P.CoreSubsys_m.Saturation_LowerSat_n;
      } else {
        rtb_Switch4_f = BEML_EMU_P.CoreSubsys_m.FilterSpecification_Value_c;
      }

      /* End of Saturate: '<S839>/Saturation' */

      /* Product: '<S839>/Divide' incorporates:
       *  Fcn: '<S839>/SpecificationTypeConversion'
       *  SampleTimeMath: '<S839>/Weighted Sample Time'
       *  Sum: '<S839>/Den'
       *
       * About '<S839>/Weighted Sample Time':
       *  y = K where K = ( w * Ts )
       */
      rtb_Switch4_f = BEML_EMU_P.CoreSubsys_m.WeightedSampleTime_WtEt_g / (1.0 /
        (6.2831853071795862 * rtb_Switch4_f) +
        BEML_EMU_P.CoreSubsys_m.WeightedSampleTime_WtEt_g);

      /* SignalConversion generated from: '<S839>/Vector Concatenate1' */
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_g[0] =
        rtb_Switch4_f;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_g[1] =
        BEML_EMU_P.CoreSubsys_m.Constant1_Value_m;

      /* SignalConversion generated from: '<S839>/Vector Concatenate' incorporates:
       *  Constant: '<S839>/Constant'
       *  Constant: '<S839>/Constant1'
       */
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_go[0] =
        BEML_EMU_P.CoreSubsys_m.Constant_Value_o;

      /* Sum: '<S839>/Subtract' incorporates:
       *  Constant: '<S839>/Constant'
       */
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_go[1] =
        rtb_Switch4_f - BEML_EMU_P.CoreSubsys_m.Constant_Value_o;

      /* DiscreteTransferFcn: '<S839>/Discrete Transfer Fcn' incorporates:
       *  DiscreteTransferFcn: '<S838>/Discrete Transfer Fcn'
       */
      rtb_Output_i = (BEML_EMU_B.CoreSubsys_m[ForEach_itr]
                      .VectorConcatenate1_l0[0] * rtb_DataTypeConversion_d +
                      BEML_EMU_B.CoreSubsys_m[ForEach_itr]
                      .VectorConcatenate1_l0[1] *
                      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
                      DiscreteTransferFcn_states_j) -
        BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_go[1] *
        BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_ln;
      rtb_DiscreteTransferFcn_l = BEML_EMU_B.CoreSubsys_m[ForEach_itr].
        VectorConcatenate1_g[0] * rtb_Output_i +
        BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_g[1] *
        BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_ln;

      /* Saturate: '<S836>/Saturation' incorporates:
       *  Constant: '<S836>/FilterSpecification'
       */
      if (BEML_EMU_P.CoreSubsys_m.FilterSpecification_Value_h >
          BEML_EMU_P.CoreSubsys_m.Saturation_UpperSat_o0) {
        rtb_Switch4_f = BEML_EMU_P.CoreSubsys_m.Saturation_UpperSat_o0;
      } else if (BEML_EMU_P.CoreSubsys_m.FilterSpecification_Value_h <
                 BEML_EMU_P.CoreSubsys_m.Saturation_LowerSat_k) {
        rtb_Switch4_f = BEML_EMU_P.CoreSubsys_m.Saturation_LowerSat_k;
      } else {
        rtb_Switch4_f = BEML_EMU_P.CoreSubsys_m.FilterSpecification_Value_h;
      }

      /* End of Saturate: '<S836>/Saturation' */

      /* Product: '<S836>/Divide' incorporates:
       *  Fcn: '<S836>/SpecificationTypeConversion'
       *  SampleTimeMath: '<S836>/Weighted Sample Time'
       *  Sum: '<S836>/Den'
       *
       * About '<S836>/Weighted Sample Time':
       *  y = K where K = ( w * Ts )
       */
      rtb_Switch4_f = BEML_EMU_P.CoreSubsys_m.WeightedSampleTime_WtEt_j / (1.0 /
        (6.2831853071795862 * rtb_Switch4_f) +
        BEML_EMU_P.CoreSubsys_m.WeightedSampleTime_WtEt_j);

      /* SignalConversion generated from: '<S836>/Vector Concatenate1' */
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_om[0] =
        rtb_Switch4_f;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_om[1] =
        BEML_EMU_P.CoreSubsys_m.Constant1_Value_d;

      /* SignalConversion generated from: '<S836>/Vector Concatenate' incorporates:
       *  Constant: '<S836>/Constant'
       *  Constant: '<S836>/Constant1'
       */
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_n[0] =
        BEML_EMU_P.CoreSubsys_m.Constant_Value_gy;

      /* Sum: '<S836>/Subtract' incorporates:
       *  Constant: '<S836>/Constant'
       */
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_n[1] =
        rtb_Switch4_f - BEML_EMU_P.CoreSubsys_m.Constant_Value_gy;

      /* DiscreteTransferFcn: '<S836>/Discrete Transfer Fcn' */
      DiscreteTransferFcn_tmp_j = rtb_DiscreteTransferFcn_l -
        BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_n[1] *
        BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_l2;

      /* Saturate: '<S837>/Saturation' incorporates:
       *  Constant: '<S837>/FilterSpecification'
       */
      if (BEML_EMU_P.CoreSubsys_m.FilterSpecification_Value_b >
          BEML_EMU_P.CoreSubsys_m.Saturation_UpperSat_c) {
        rtb_Switch4_f = BEML_EMU_P.CoreSubsys_m.Saturation_UpperSat_c;
      } else if (BEML_EMU_P.CoreSubsys_m.FilterSpecification_Value_b <
                 BEML_EMU_P.CoreSubsys_m.Saturation_LowerSat_l) {
        rtb_Switch4_f = BEML_EMU_P.CoreSubsys_m.Saturation_LowerSat_l;
      } else {
        rtb_Switch4_f = BEML_EMU_P.CoreSubsys_m.FilterSpecification_Value_b;
      }

      /* End of Saturate: '<S837>/Saturation' */

      /* Product: '<S837>/Divide' incorporates:
       *  Fcn: '<S837>/SpecificationTypeConversion'
       *  SampleTimeMath: '<S837>/Weighted Sample Time'
       *  Sum: '<S837>/Den'
       *
       * About '<S837>/Weighted Sample Time':
       *  y = K where K = ( w * Ts )
       */
      rtb_Switch4_f = BEML_EMU_P.CoreSubsys_m.WeightedSampleTime_WtEt_l / (1.0 /
        (6.2831853071795862 * rtb_Switch4_f) +
        BEML_EMU_P.CoreSubsys_m.WeightedSampleTime_WtEt_l);

      /* SignalConversion generated from: '<S837>/Vector Concatenate1' */
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_iv[0] =
        rtb_Switch4_f;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_iv[1] =
        BEML_EMU_P.CoreSubsys_m.Constant1_Value_f;

      /* SignalConversion generated from: '<S837>/Vector Concatenate' incorporates:
       *  Constant: '<S837>/Constant'
       *  Constant: '<S837>/Constant1'
       */
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_i4[0] =
        BEML_EMU_P.CoreSubsys_m.Constant_Value_lr;

      /* Sum: '<S837>/Subtract' incorporates:
       *  Constant: '<S837>/Constant'
       */
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_i4[1] =
        rtb_Switch4_f - BEML_EMU_P.CoreSubsys_m.Constant_Value_lr;

      /* DiscreteTransferFcn: '<S837>/Discrete Transfer Fcn' incorporates:
       *  DiscreteTransferFcn: '<S836>/Discrete Transfer Fcn'
       */
      DiscreteTransferFcn_tmp_f = (BEML_EMU_B.CoreSubsys_m[ForEach_itr].
        VectorConcatenate1_om[0] * DiscreteTransferFcn_tmp_j +
        BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_om[1] *
        BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_l2) -
        BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_i4[1] *
        BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_m;

      /* DataTypeConversion: '<S835>/Data Type Conversion7' incorporates:
       *  Constant: '<S833>/Constant'
       *  RelationalOperator: '<S833>/Compare'
       */
      rtb_DataTypeConversion7_a =
        (rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Tuning.RoughnessProfileFrequencyFactor
         > BEML_EMU_P.CoreSubsys_m.Constant_Value_g);

      /* DiscreteIntegrator: '<S835>/Discrete-Time Integrator' */
      if (((rtb_DataTypeConversion7_a > 0.0) &&
           (BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
            DiscreteTimeIntegrator_PrevResetState_j <= 0)) ||
          ((rtb_DataTypeConversion7_a <= 0.0) &&
           (BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
            DiscreteTimeIntegrator_PrevResetState_j == 1))) {
        BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE_c =
          BEML_EMU_P.CoreSubsys_m.DiscreteTimeIntegrator_IC;
      }

      DiscreteTimeIntegrator_a =
        BEML_EMU_P.CoreSubsys_m.DiscreteTimeIntegrator_gainval_p *
        rtb_DataTypeConversion7_a + BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
        DiscreteTimeIntegrator_DSTATE_c;

      /* End of DiscreteIntegrator: '<S835>/Discrete-Time Integrator' */

      /* Product: '<S835>/Product1' */
      rtb_Switch4_f = DiscreteTimeIntegrator_a *
        rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Tuning.RoughnessProfileFrequencyFactor;

      /* DiscretePulseGenerator: '<S835>/Pulse Generator' */
      if (rtb_Switch4_f >= BEML_EMU_P.CoreSubsys_m.PulseGenerator_PhaseDelay) {
        diff = rtb_Switch4_f - BEML_EMU_P.CoreSubsys_m.PulseGenerator_PhaseDelay;
        ratio = diff / BEML_EMU_P.CoreSubsys_m.PulseGenerator_Period;
        numCycles = static_cast<uint32_T>(floor(ratio));
        if (fabs(static_cast<real_T>((numCycles + 1U)) - ratio) < DBL_EPSILON *
            ratio) {
          numCycles++;
        }

        if (diff < BEML_EMU_P.CoreSubsys_m.PulseGenerator_Duty / 100.0 *
            BEML_EMU_P.CoreSubsys_m.PulseGenerator_Period +
            BEML_EMU_P.CoreSubsys_m.PulseGenerator_Period * static_cast<real_T>
            (numCycles)) {
          rtb_Switch4_f = BEML_EMU_P.CoreSubsys_m.PulseGenerator_Amp;
        } else {
          rtb_Switch4_f = 0.0;
        }
      } else {
        rtb_Switch4_f = 0.0;
      }

      /* End of DiscretePulseGenerator: '<S835>/Pulse Generator' */

      /* Product: '<S835>/Product' */
      rtb_Product_cv = rtb_DataTypeConversion7_a * rtb_Switch4_f;

      /* DiscretePulseGenerator: '<S823>/Pulse Generator1' */
      rtb_Switch4_f = (BEML_EMU_DW.CoreSubsys_m[ForEach_itr].clockTickCounter_b <
                       BEML_EMU_P.CoreSubsys_m.PulseGenerator1_Duty) &&
        (BEML_EMU_DW.CoreSubsys_m[ForEach_itr].clockTickCounter_b >= 0) ?
        BEML_EMU_P.CoreSubsys_m.PulseGenerator1_Amp : 0.0;
      if (BEML_EMU_DW.CoreSubsys_m[ForEach_itr].clockTickCounter_b >=
          BEML_EMU_P.CoreSubsys_m.PulseGenerator1_Period - 1.0) {
        BEML_EMU_DW.CoreSubsys_m[ForEach_itr].clockTickCounter_b = 0;
      } else {
        BEML_EMU_DW.CoreSubsys_m[ForEach_itr].clockTickCounter_b++;
      }

      /* End of DiscretePulseGenerator: '<S823>/Pulse Generator1' */

      /* Switch: '<S827>/Switch' incorporates:
       *  RelationalOperator: '<S834>/FixPt Relational Operator'
       *  UnitDelay: '<S834>/Delay Input1'
       */
      if (rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Tuning.RoughnessProfileFrequencyFactor
          > BEML_EMU_P.CoreSubsys_m.Switch_Threshold) {
        rtb_Switch4_f = (rtb_Product_cv > BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
                         DelayInput1_DSTATE_p);
      }

      /* End of Switch: '<S827>/Switch' */

      /* Switch: '<S831>/Latch' incorporates:
       *  Gain: '<S826>/Output'
       *  RandomNumber: '<S826>/White Noise'
       *  UnitDelay: '<S831>/Unit Delay'
       */
      if (rtb_Switch4_f > BEML_EMU_P.CoreSubsys_m.Latch_Threshold) {
        diff = sqrt(BEML_EMU_P.CoreSubsys_m.BandLimitedWhiteNoise1_Cov) /
          0.031622776601683791 * BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
          NextOutput_a;
      } else {
        diff = BEML_EMU_DW.CoreSubsys_m[ForEach_itr].UnitDelay_DSTATE_h;
      }

      /* End of Switch: '<S831>/Latch' */

      /* Saturate: '<S840>/Saturation' incorporates:
       *  Constant: '<S840>/FilterSpecification'
       */
      if (BEML_EMU_P.CoreSubsys_m.FilterSpecification_Value_k >
          BEML_EMU_P.CoreSubsys_m.Saturation_UpperSat_g) {
        rtb_Switch4_f = BEML_EMU_P.CoreSubsys_m.Saturation_UpperSat_g;
      } else if (BEML_EMU_P.CoreSubsys_m.FilterSpecification_Value_k <
                 BEML_EMU_P.CoreSubsys_m.Saturation_LowerSat_h) {
        rtb_Switch4_f = BEML_EMU_P.CoreSubsys_m.Saturation_LowerSat_h;
      } else {
        rtb_Switch4_f = BEML_EMU_P.CoreSubsys_m.FilterSpecification_Value_k;
      }

      /* End of Saturate: '<S840>/Saturation' */

      /* Product: '<S840>/Divide' incorporates:
       *  Fcn: '<S840>/SpecificationTypeConversion'
       *  SampleTimeMath: '<S840>/Weighted Sample Time'
       *  Sum: '<S840>/Den'
       *
       * About '<S840>/Weighted Sample Time':
       *  y = K where K = ( w * Ts )
       */
      rtb_Switch4_f = BEML_EMU_P.CoreSubsys_m.WeightedSampleTime_WtEt_i / (1.0 /
        (6.2831853071795862 * rtb_Switch4_f) +
        BEML_EMU_P.CoreSubsys_m.WeightedSampleTime_WtEt_i);

      /* SignalConversion generated from: '<S840>/Vector Concatenate1' */
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_hg[0] =
        rtb_Switch4_f;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_hg[1] =
        BEML_EMU_P.CoreSubsys_m.Constant1_Value_e;

      /* SignalConversion generated from: '<S840>/Vector Concatenate' incorporates:
       *  Constant: '<S840>/Constant'
       *  Constant: '<S840>/Constant1'
       */
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_d[0] =
        BEML_EMU_P.CoreSubsys_m.Constant_Value_p;

      /* Sum: '<S840>/Subtract' incorporates:
       *  Constant: '<S840>/Constant'
       */
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_d[1] =
        rtb_Switch4_f - BEML_EMU_P.CoreSubsys_m.Constant_Value_p;

      /* DiscreteTransferFcn: '<S840>/Discrete Transfer Fcn' */
      DiscreteTransferFcn_tmp_e = diff - BEML_EMU_B.CoreSubsys_m[ForEach_itr].
        VectorConcatenate_d[1] * BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
        DiscreteTransferFcn_states_op;

      /* Saturate: '<S841>/Saturation' incorporates:
       *  Constant: '<S841>/FilterSpecification'
       */
      if (BEML_EMU_P.CoreSubsys_m.FilterSpecification_Value_j >
          BEML_EMU_P.CoreSubsys_m.Saturation_UpperSat_i) {
        rtb_Switch4_f = BEML_EMU_P.CoreSubsys_m.Saturation_UpperSat_i;
      } else if (BEML_EMU_P.CoreSubsys_m.FilterSpecification_Value_j <
                 BEML_EMU_P.CoreSubsys_m.Saturation_LowerSat_a) {
        rtb_Switch4_f = BEML_EMU_P.CoreSubsys_m.Saturation_LowerSat_a;
      } else {
        rtb_Switch4_f = BEML_EMU_P.CoreSubsys_m.FilterSpecification_Value_j;
      }

      /* End of Saturate: '<S841>/Saturation' */

      /* Product: '<S841>/Divide' incorporates:
       *  Fcn: '<S841>/SpecificationTypeConversion'
       *  SampleTimeMath: '<S841>/Weighted Sample Time'
       *  Sum: '<S841>/Den'
       *
       * About '<S841>/Weighted Sample Time':
       *  y = K where K = ( w * Ts )
       */
      rtb_Switch4_f = BEML_EMU_P.CoreSubsys_m.WeightedSampleTime_WtEt_c / (1.0 /
        (6.2831853071795862 * rtb_Switch4_f) +
        BEML_EMU_P.CoreSubsys_m.WeightedSampleTime_WtEt_c);

      /* SignalConversion generated from: '<S841>/Vector Concatenate1' */
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_b[0] =
        rtb_Switch4_f;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_b[1] =
        BEML_EMU_P.CoreSubsys_m.Constant1_Value_g;

      /* SignalConversion generated from: '<S841>/Vector Concatenate' incorporates:
       *  Constant: '<S841>/Constant'
       *  Constant: '<S841>/Constant1'
       */
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_oc[0] =
        BEML_EMU_P.CoreSubsys_m.Constant_Value_k;

      /* Sum: '<S841>/Subtract' incorporates:
       *  Constant: '<S841>/Constant'
       */
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_oc[1] =
        rtb_Switch4_f - BEML_EMU_P.CoreSubsys_m.Constant_Value_k;

      /* DiscreteTransferFcn: '<S841>/Discrete Transfer Fcn' incorporates:
       *  DiscreteTransferFcn: '<S840>/Discrete Transfer Fcn'
       */
      DiscreteTransferFcn_tmp_m = (BEML_EMU_B.CoreSubsys_m[ForEach_itr].
        VectorConcatenate1_hg[0] * DiscreteTransferFcn_tmp_e +
        BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_hg[1] *
        BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_op) -
        BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_oc[1] *
        BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_k;

      /* Switch: '<S823>/Switch4' incorporates:
       *  Constant: '<S801>/Constant'
       *  Constant: '<S823>/Constant6'
       *  Constant: '<S832>/Constant5'
       *  Product: '<S823>/Product'
       */
      if (BEML_EMU_P.CoreSubsys_m.Constant_Value_b >
          BEML_EMU_P.CoreSubsys_m.Switch4_Threshold) {
        /* Switch: '<S824>/Switch2' incorporates:
         *  Constant: '<S823>/Constant3'
         */
        if (rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Tuning.RoughnessProfileFactor
            > BEML_EMU_P.CoreSubsys_m.Switch2_Threshold) {
          rtb_Abs_g1 =
            rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Tuning.RoughnessProfileFactor;
        } else {
          rtb_Abs_g1 = BEML_EMU_P.CoreSubsys_m.Constant3_Value;
        }

        /* End of Switch: '<S824>/Switch2' */

        /* Product: '<S823>/Product1' incorporates:
         *  DiscreteTransferFcn: '<S837>/Discrete Transfer Fcn'
         *  DiscreteTransferFcn: '<S841>/Discrete Transfer Fcn'
         *  Gain: '<S823>/Gain'
         *  Gain: '<S823>/Gain1'
         *  Sum: '<S823>/Sum'
         *  Sum: '<S828>/Sum'
         */
        rtb_Switch4_f = ((rtb_DiscreteTransferFcn_l -
                          (BEML_EMU_B.CoreSubsys_m[ForEach_itr].
                           VectorConcatenate1_iv[0] * DiscreteTransferFcn_tmp_f
                           + BEML_EMU_B.CoreSubsys_m[ForEach_itr].
                           VectorConcatenate1_iv[1] *
                           BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
                           DiscreteTransferFcn_states_m)) *
                         BEML_EMU_P.CoreSubsys_m.Gain_Gain_g +
                         (BEML_EMU_B.CoreSubsys_m[ForEach_itr].
                          VectorConcatenate1_b[0] * DiscreteTransferFcn_tmp_m +
                          BEML_EMU_B.CoreSubsys_m[ForEach_itr].
                          VectorConcatenate1_b[1] *
                          BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
                          DiscreteTransferFcn_states_k) *
                         BEML_EMU_P.CoreSubsys_m.Gain1_Gain) * rtb_Abs_g1;

        /* Switch: '<S842>/Switch' incorporates:
         *  Constant: '<S842>/Default'
         */
        if (rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Tuning.RoughnessProfileSpeedSaturation
            > BEML_EMU_P.CoreSubsys_m.TuningFactor_Threshold) {
          ratio =
            rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Tuning.RoughnessProfileSpeedSaturation;
        } else {
          ratio =
            BEML_EMU_P.CoreSubsys_m.StandardRoughnessGenerator_SpeedSaturation;
        }

        /* End of Switch: '<S842>/Switch' */

        /* MinMax: '<S832>/MinMax' incorporates:
         *  Constant: '<S832>/Constant1'
         */
        if ((ratio > BEML_EMU_P.CoreSubsys_m.Constant1_Value) || rtIsNaN
            (BEML_EMU_P.CoreSubsys_m.Constant1_Value)) {
          rtb_VectorConcatenate_d[1] = ratio;
        } else {
          rtb_VectorConcatenate_d[1] = BEML_EMU_P.CoreSubsys_m.Constant1_Value;
        }

        /* End of MinMax: '<S832>/MinMax' */
        rtb_VectorConcatenate_d[0] = BEML_EMU_P.CoreSubsys_m.Constant5_Value;

        /* Abs: '<S832>/Abs' incorporates:
         *  Constant: '<S832>/Constant5'
         */
        rtb_Abs_g1 = fabs
          (rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Dynamics.Velocity[
           0]);

        /* S-Function (sfix_look1_dyn): '<S832>/Lookup Table Dynamic' incorporates:
         *  Constant: '<S832>/Constant4'
         */
        /* Dynamic Look-Up Table Block: '<S832>/Lookup Table Dynamic'
         * Input0  Data Type:  Floating Point real_T
         * Input1  Data Type:  Floating Point real_T
         * Input2  Data Type:  Floating Point real_T
         * Output0 Data Type:  Floating Point real_T
         * Lookup Method: Linear_Endpoint
         *
         */
        LookUp_real_T_real_T( &(rtb_LookupTableDynamic_e),
                             &BEML_EMU_P.CoreSubsys_m.Constant4_Value[0],
                             rtb_Abs_g1, &rtb_VectorConcatenate_d[0], 1U);
        rtb_Switch4_f *= rtb_LookupTableDynamic_e;
      } else {
        rtb_Switch4_f = BEML_EMU_P.CoreSubsys_m.Constant6_Value;
      }

      /* End of Switch: '<S823>/Switch4' */

      /* Assignment: '<S801>/AssignZ' incorporates:
       *  Constant: '<S801>/Zeros'
       */
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].ManualPosition[0] =
        BEML_EMU_P.CoreSubsys_m.Zeros_Value[0];
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].ManualPosition[1] =
        BEML_EMU_P.CoreSubsys_m.Zeros_Value[1];
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].ManualPosition[2] =
        BEML_EMU_P.CoreSubsys_m.Zeros_Value[2];
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].ManualPosition[2] = rtb_Switch4_f;

      /* Update for RandomNumber: '<S825>/White Noise' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].NextOutput_c =
        rt_nrand_Upu32_Yd_f_pw_snf(&BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
        RandSeed_p) * BEML_EMU_P.CoreSubsys_m.WhiteNoise_StdDev +
        BEML_EMU_P.CoreSubsys_m.WhiteNoise_Mean;

      /* Update for DiscreteTransferFcn: '<S838>/Discrete Transfer Fcn' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_j =
        rtb_DataTypeConversion_d;

      /* Update for DiscreteTransferFcn: '<S839>/Discrete Transfer Fcn' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_ln =
        rtb_Output_i;

      /* Update for DiscreteTransferFcn: '<S836>/Discrete Transfer Fcn' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_l2 =
        DiscreteTransferFcn_tmp_j;

      /* Update for DiscreteTransferFcn: '<S837>/Discrete Transfer Fcn' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_m =
        DiscreteTransferFcn_tmp_f;

      /* Update for RandomNumber: '<S826>/White Noise' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].NextOutput_a =
        rt_nrand_Upu32_Yd_f_pw_snf(&BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
        RandSeed_e) * BEML_EMU_P.CoreSubsys_m.WhiteNoise_StdDev_d +
        BEML_EMU_P.CoreSubsys_m.WhiteNoise_Mean_m;

      /* Update for DiscreteIntegrator: '<S835>/Discrete-Time Integrator' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE_c =
        DiscreteTimeIntegrator_a;
      if (rtb_DataTypeConversion7_a > 0.0) {
        BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
          DiscreteTimeIntegrator_PrevResetState_j = 1;
      } else if (rtb_DataTypeConversion7_a < 0.0) {
        BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
          DiscreteTimeIntegrator_PrevResetState_j = -1;
      } else if (rtb_DataTypeConversion7_a == 0.0) {
        BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
          DiscreteTimeIntegrator_PrevResetState_j = 0;
      } else {
        BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
          DiscreteTimeIntegrator_PrevResetState_j = 2;
      }

      /* End of Update for DiscreteIntegrator: '<S835>/Discrete-Time Integrator' */

      /* Update for UnitDelay: '<S834>/Delay Input1' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DelayInput1_DSTATE_p =
        rtb_Product_cv;

      /* Update for UnitDelay: '<S831>/Unit Delay' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].UnitDelay_DSTATE_h = diff;

      /* Update for DiscreteTransferFcn: '<S840>/Discrete Transfer Fcn' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_op =
        DiscreteTransferFcn_tmp_e;

      /* Update for DiscreteTransferFcn: '<S841>/Discrete Transfer Fcn' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_k =
        DiscreteTransferFcn_tmp_m;

      /* End of Outputs for SubSystem: '<S797>/StandardTrackFeel' */
      break;

     case DegradedTrack:
      /* Outputs for IfAction SubSystem: '<S797>/DegradedTrackFeel' incorporates:
       *  ActionPort: '<S798>/Action Port'
       */
      /* Saturate: '<S817>/Saturation' incorporates:
       *  Constant: '<S817>/FilterSpecification'
       */
      if (BEML_EMU_P.CoreSubsys_m.FilterSpecification_Value_b0 >
          BEML_EMU_P.CoreSubsys_m.Saturation_UpperSat_f) {
        rtb_Switch4_f = BEML_EMU_P.CoreSubsys_m.Saturation_UpperSat_f;
      } else if (BEML_EMU_P.CoreSubsys_m.FilterSpecification_Value_b0 <
                 BEML_EMU_P.CoreSubsys_m.Saturation_LowerSat_j) {
        rtb_Switch4_f = BEML_EMU_P.CoreSubsys_m.Saturation_LowerSat_j;
      } else {
        rtb_Switch4_f = BEML_EMU_P.CoreSubsys_m.FilterSpecification_Value_b0;
      }

      /* End of Saturate: '<S817>/Saturation' */

      /* Product: '<S817>/Divide' incorporates:
       *  Fcn: '<S817>/SpecificationTypeConversion'
       *  SampleTimeMath: '<S817>/Weighted Sample Time'
       *  Sum: '<S817>/Den'
       *
       * About '<S817>/Weighted Sample Time':
       *  y = K where K = ( w * Ts )
       */
      rtb_DataTypeConversion_d =
        BEML_EMU_P.CoreSubsys_m.WeightedSampleTime_WtEt_e / (1.0 /
        (6.2831853071795862 * rtb_Switch4_f) +
        BEML_EMU_P.CoreSubsys_m.WeightedSampleTime_WtEt_e);

      /* SignalConversion generated from: '<S817>/Vector Concatenate1' */
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_i[0] =
        rtb_DataTypeConversion_d;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_i[1] =
        BEML_EMU_P.CoreSubsys_m.Constant1_Value_d5;

      /* SignalConversion generated from: '<S817>/Vector Concatenate' incorporates:
       *  Constant: '<S817>/Constant'
       *  Constant: '<S817>/Constant1'
       */
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_ko[0] =
        BEML_EMU_P.CoreSubsys_m.Constant_Value_ks;

      /* Sum: '<S817>/Subtract' incorporates:
       *  Constant: '<S817>/Constant'
       */
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_ko[1] =
        rtb_DataTypeConversion_d - BEML_EMU_P.CoreSubsys_m.Constant_Value_ks;

      /* DiscreteTransferFcn: '<S817>/Discrete Transfer Fcn' incorporates:
       *  Gain: '<S804>/Output'
       *  RandomNumber: '<S804>/White Noise'
       */
      rtb_DataTypeConversion_d = sqrt
        (BEML_EMU_P.CoreSubsys_m.BandLimitedWhiteNoise_Cov_c) /
        0.031622776601683791 * BEML_EMU_DW.CoreSubsys_m[ForEach_itr].NextOutput
        - BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_ko[1] *
        BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_o;

      /* Saturate: '<S818>/Saturation' incorporates:
       *  Constant: '<S818>/FilterSpecification'
       */
      if (BEML_EMU_P.CoreSubsys_m.FilterSpecification_Value_i >
          BEML_EMU_P.CoreSubsys_m.Saturation_UpperSat_k) {
        rtb_Switch4_f = BEML_EMU_P.CoreSubsys_m.Saturation_UpperSat_k;
      } else if (BEML_EMU_P.CoreSubsys_m.FilterSpecification_Value_i <
                 BEML_EMU_P.CoreSubsys_m.Saturation_LowerSat_f) {
        rtb_Switch4_f = BEML_EMU_P.CoreSubsys_m.Saturation_LowerSat_f;
      } else {
        rtb_Switch4_f = BEML_EMU_P.CoreSubsys_m.FilterSpecification_Value_i;
      }

      /* End of Saturate: '<S818>/Saturation' */

      /* Product: '<S818>/Divide' incorporates:
       *  Fcn: '<S818>/SpecificationTypeConversion'
       *  SampleTimeMath: '<S818>/Weighted Sample Time'
       *  Sum: '<S818>/Den'
       *
       * About '<S818>/Weighted Sample Time':
       *  y = K where K = ( w * Ts )
       */
      rtb_Switch4_f = BEML_EMU_P.CoreSubsys_m.WeightedSampleTime_WtEt_c2 / (1.0 /
        (6.2831853071795862 * rtb_Switch4_f) +
        BEML_EMU_P.CoreSubsys_m.WeightedSampleTime_WtEt_c2);

      /* SignalConversion generated from: '<S818>/Vector Concatenate1' */
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_o[0] =
        rtb_Switch4_f;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_o[1] =
        BEML_EMU_P.CoreSubsys_m.Constant1_Value_a;

      /* SignalConversion generated from: '<S818>/Vector Concatenate' incorporates:
       *  Constant: '<S818>/Constant'
       *  Constant: '<S818>/Constant1'
       */
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_a[0] =
        BEML_EMU_P.CoreSubsys_m.Constant_Value_c;

      /* Sum: '<S818>/Subtract' incorporates:
       *  Constant: '<S818>/Constant'
       */
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_a[1] =
        rtb_Switch4_f - BEML_EMU_P.CoreSubsys_m.Constant_Value_c;

      /* DiscreteTransferFcn: '<S818>/Discrete Transfer Fcn' incorporates:
       *  DiscreteTransferFcn: '<S817>/Discrete Transfer Fcn'
       */
      rtb_Output_i = (BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_i
                      [0] * rtb_DataTypeConversion_d +
                      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_i
                      [1] * BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
                      DiscreteTransferFcn_states_o) -
        BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_a[1] *
        BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_cq;
      rtb_DiscreteTransferFcn_l = BEML_EMU_B.CoreSubsys_m[ForEach_itr].
        VectorConcatenate1_o[0] * rtb_Output_i +
        BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_o[1] *
        BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_cq;

      /* Saturate: '<S815>/Saturation' incorporates:
       *  Constant: '<S815>/FilterSpecification'
       */
      if (BEML_EMU_P.CoreSubsys_m.FilterSpecification_Value_f >
          BEML_EMU_P.CoreSubsys_m.Saturation_UpperSat_d) {
        rtb_Switch4_f = BEML_EMU_P.CoreSubsys_m.Saturation_UpperSat_d;
      } else if (BEML_EMU_P.CoreSubsys_m.FilterSpecification_Value_f <
                 BEML_EMU_P.CoreSubsys_m.Saturation_LowerSat_i) {
        rtb_Switch4_f = BEML_EMU_P.CoreSubsys_m.Saturation_LowerSat_i;
      } else {
        rtb_Switch4_f = BEML_EMU_P.CoreSubsys_m.FilterSpecification_Value_f;
      }

      /* End of Saturate: '<S815>/Saturation' */

      /* Product: '<S815>/Divide' incorporates:
       *  Fcn: '<S815>/SpecificationTypeConversion'
       *  SampleTimeMath: '<S815>/Weighted Sample Time'
       *  Sum: '<S815>/Den'
       *
       * About '<S815>/Weighted Sample Time':
       *  y = K where K = ( w * Ts )
       */
      rtb_Switch4_f = BEML_EMU_P.CoreSubsys_m.WeightedSampleTime_WtEt_lp / (1.0 /
        (6.2831853071795862 * rtb_Switch4_f) +
        BEML_EMU_P.CoreSubsys_m.WeightedSampleTime_WtEt_lp);

      /* SignalConversion generated from: '<S815>/Vector Concatenate1' */
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_c[0] =
        rtb_Switch4_f;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_c[1] =
        BEML_EMU_P.CoreSubsys_m.Constant1_Value_mz;

      /* SignalConversion generated from: '<S815>/Vector Concatenate' incorporates:
       *  Constant: '<S815>/Constant'
       *  Constant: '<S815>/Constant1'
       */
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_g[0] =
        BEML_EMU_P.CoreSubsys_m.Constant_Value_d;

      /* Sum: '<S815>/Subtract' incorporates:
       *  Constant: '<S815>/Constant'
       */
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_g[1] =
        rtb_Switch4_f - BEML_EMU_P.CoreSubsys_m.Constant_Value_d;

      /* DiscreteTransferFcn: '<S815>/Discrete Transfer Fcn' */
      DiscreteTransferFcn_tmp_j = rtb_DiscreteTransferFcn_l -
        BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_g[1] *
        BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_l;

      /* Saturate: '<S816>/Saturation' incorporates:
       *  Constant: '<S816>/FilterSpecification'
       */
      if (BEML_EMU_P.CoreSubsys_m.FilterSpecification_Value_e >
          BEML_EMU_P.CoreSubsys_m.Saturation_UpperSat_gu) {
        rtb_Switch4_f = BEML_EMU_P.CoreSubsys_m.Saturation_UpperSat_gu;
      } else if (BEML_EMU_P.CoreSubsys_m.FilterSpecification_Value_e <
                 BEML_EMU_P.CoreSubsys_m.Saturation_LowerSat_h5) {
        rtb_Switch4_f = BEML_EMU_P.CoreSubsys_m.Saturation_LowerSat_h5;
      } else {
        rtb_Switch4_f = BEML_EMU_P.CoreSubsys_m.FilterSpecification_Value_e;
      }

      /* End of Saturate: '<S816>/Saturation' */

      /* Product: '<S816>/Divide' incorporates:
       *  Fcn: '<S816>/SpecificationTypeConversion'
       *  SampleTimeMath: '<S816>/Weighted Sample Time'
       *  Sum: '<S816>/Den'
       *
       * About '<S816>/Weighted Sample Time':
       *  y = K where K = ( w * Ts )
       */
      rtb_Switch4_f = BEML_EMU_P.CoreSubsys_m.WeightedSampleTime_WtEt_ja / (1.0 /
        (6.2831853071795862 * rtb_Switch4_f) +
        BEML_EMU_P.CoreSubsys_m.WeightedSampleTime_WtEt_ja);

      /* SignalConversion generated from: '<S816>/Vector Concatenate1' */
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_iu[0] =
        rtb_Switch4_f;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_iu[1] =
        BEML_EMU_P.CoreSubsys_m.Constant1_Value_b;

      /* SignalConversion generated from: '<S816>/Vector Concatenate' incorporates:
       *  Constant: '<S816>/Constant'
       *  Constant: '<S816>/Constant1'
       */
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_o[0] =
        BEML_EMU_P.CoreSubsys_m.Constant_Value_e;

      /* Sum: '<S816>/Subtract' incorporates:
       *  Constant: '<S816>/Constant'
       */
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_o[1] =
        rtb_Switch4_f - BEML_EMU_P.CoreSubsys_m.Constant_Value_e;

      /* DiscreteTransferFcn: '<S816>/Discrete Transfer Fcn' incorporates:
       *  DiscreteTransferFcn: '<S815>/Discrete Transfer Fcn'
       */
      DiscreteTransferFcn_tmp_f = (BEML_EMU_B.CoreSubsys_m[ForEach_itr].
        VectorConcatenate1_c[0] * DiscreteTransferFcn_tmp_j +
        BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_c[1] *
        BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_l) -
        BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_o[1] *
        BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_d;

      /* DataTypeConversion: '<S814>/Data Type Conversion7' incorporates:
       *  Constant: '<S812>/Constant'
       *  RelationalOperator: '<S812>/Compare'
       */
      rtb_DataTypeConversion7 =
        (rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Tuning.RoughnessProfileFrequencyFactor
         > BEML_EMU_P.CoreSubsys_m.Constant_Value_f);

      /* DiscreteIntegrator: '<S814>/Discrete-Time Integrator' */
      if (((rtb_DataTypeConversion7 > 0.0) &&
           (BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
            DiscreteTimeIntegrator_PrevResetState_m <= 0)) ||
          ((rtb_DataTypeConversion7 <= 0.0) &&
           (BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
            DiscreteTimeIntegrator_PrevResetState_m == 1))) {
        BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE_hq =
          BEML_EMU_P.CoreSubsys_m.DiscreteTimeIntegrator_IC_g;
      }

      rtb_Product_cv = BEML_EMU_P.CoreSubsys_m.DiscreteTimeIntegrator_gainval_n *
        rtb_DataTypeConversion7 + BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
        DiscreteTimeIntegrator_DSTATE_hq;

      /* End of DiscreteIntegrator: '<S814>/Discrete-Time Integrator' */

      /* Product: '<S814>/Product1' */
      rtb_Switch4_f = rtb_Product_cv *
        rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Tuning.RoughnessProfileFrequencyFactor;

      /* DiscretePulseGenerator: '<S814>/Pulse Generator' */
      if (rtb_Switch4_f >= BEML_EMU_P.CoreSubsys_m.PulseGenerator_PhaseDelay_f)
      {
        diff = rtb_Switch4_f -
          BEML_EMU_P.CoreSubsys_m.PulseGenerator_PhaseDelay_f;
        ratio = diff / BEML_EMU_P.CoreSubsys_m.PulseGenerator_Period_b;
        numCycles = static_cast<uint32_T>(floor(ratio));
        if (fabs(static_cast<real_T>((numCycles + 1U)) - ratio) < DBL_EPSILON *
            ratio) {
          numCycles++;
        }

        if (diff < BEML_EMU_P.CoreSubsys_m.PulseGenerator_Duty_l / 100.0 *
            BEML_EMU_P.CoreSubsys_m.PulseGenerator_Period_b +
            BEML_EMU_P.CoreSubsys_m.PulseGenerator_Period_b * static_cast<real_T>
            (numCycles)) {
          rtb_Switch4_f = BEML_EMU_P.CoreSubsys_m.PulseGenerator_Amp_k;
        } else {
          rtb_Switch4_f = 0.0;
        }
      } else {
        rtb_Switch4_f = 0.0;
      }

      /* End of DiscretePulseGenerator: '<S814>/Pulse Generator' */

      /* Product: '<S814>/Product' */
      diff = rtb_DataTypeConversion7 * rtb_Switch4_f;

      /* DiscretePulseGenerator: '<S802>/Pulse Generator' */
      rtb_Switch4_f = (BEML_EMU_DW.CoreSubsys_m[ForEach_itr].clockTickCounter <
                       BEML_EMU_P.CoreSubsys_m.PulseGenerator_Duty_p) &&
        (BEML_EMU_DW.CoreSubsys_m[ForEach_itr].clockTickCounter >= 0) ?
        BEML_EMU_P.CoreSubsys_m.PulseGenerator_Amp_e : 0.0;
      if (BEML_EMU_DW.CoreSubsys_m[ForEach_itr].clockTickCounter >=
          BEML_EMU_P.CoreSubsys_m.PulseGenerator_Period_c - 1.0) {
        BEML_EMU_DW.CoreSubsys_m[ForEach_itr].clockTickCounter = 0;
      } else {
        BEML_EMU_DW.CoreSubsys_m[ForEach_itr].clockTickCounter++;
      }

      /* End of DiscretePulseGenerator: '<S802>/Pulse Generator' */

      /* Switch: '<S806>/Switch' incorporates:
       *  RelationalOperator: '<S813>/FixPt Relational Operator'
       *  UnitDelay: '<S813>/Delay Input1'
       */
      if (rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Tuning.RoughnessProfileFrequencyFactor
          > BEML_EMU_P.CoreSubsys_m.Switch_Threshold_c) {
        rtb_Switch4_f = (diff > BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
                         DelayInput1_DSTATE);
      }

      /* End of Switch: '<S806>/Switch' */

      /* Switch: '<S810>/Latch' incorporates:
       *  Gain: '<S805>/Output'
       *  RandomNumber: '<S805>/White Noise'
       *  UnitDelay: '<S810>/Unit Delay'
       */
      if (rtb_Switch4_f > BEML_EMU_P.CoreSubsys_m.Latch_Threshold_j) {
        DiscreteTimeIntegrator_a = sqrt
          (BEML_EMU_P.CoreSubsys_m.BandLimitedWhiteNoise1_Cov_o) /
          0.031622776601683791 * BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
          NextOutput_m;
      } else {
        DiscreteTimeIntegrator_a = BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
          UnitDelay_DSTATE;
      }

      /* End of Switch: '<S810>/Latch' */

      /* Saturate: '<S819>/Saturation' incorporates:
       *  Constant: '<S819>/FilterSpecification'
       */
      if (BEML_EMU_P.CoreSubsys_m.FilterSpecification_Value_fd >
          BEML_EMU_P.CoreSubsys_m.Saturation_UpperSat_p) {
        rtb_Switch4_f = BEML_EMU_P.CoreSubsys_m.Saturation_UpperSat_p;
      } else if (BEML_EMU_P.CoreSubsys_m.FilterSpecification_Value_fd <
                 BEML_EMU_P.CoreSubsys_m.Saturation_LowerSat_kr) {
        rtb_Switch4_f = BEML_EMU_P.CoreSubsys_m.Saturation_LowerSat_kr;
      } else {
        rtb_Switch4_f = BEML_EMU_P.CoreSubsys_m.FilterSpecification_Value_fd;
      }

      /* End of Saturate: '<S819>/Saturation' */

      /* Product: '<S819>/Divide' incorporates:
       *  Fcn: '<S819>/SpecificationTypeConversion'
       *  SampleTimeMath: '<S819>/Weighted Sample Time'
       *  Sum: '<S819>/Den'
       *
       * About '<S819>/Weighted Sample Time':
       *  y = K where K = ( w * Ts )
       */
      rtb_Switch4_f = BEML_EMU_P.CoreSubsys_m.WeightedSampleTime_WtEt_lr / (1.0 /
        (6.2831853071795862 * rtb_Switch4_f) +
        BEML_EMU_P.CoreSubsys_m.WeightedSampleTime_WtEt_lr);

      /* SignalConversion generated from: '<S819>/Vector Concatenate1' */
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_h[0] =
        rtb_Switch4_f;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_h[1] =
        BEML_EMU_P.CoreSubsys_m.Constant1_Value_l;

      /* SignalConversion generated from: '<S819>/Vector Concatenate' incorporates:
       *  Constant: '<S819>/Constant'
       *  Constant: '<S819>/Constant1'
       */
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_o4[0] =
        BEML_EMU_P.CoreSubsys_m.Constant_Value_gv;

      /* Sum: '<S819>/Subtract' incorporates:
       *  Constant: '<S819>/Constant'
       */
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_o4[1] =
        rtb_Switch4_f - BEML_EMU_P.CoreSubsys_m.Constant_Value_gv;

      /* DiscreteTransferFcn: '<S819>/Discrete Transfer Fcn' */
      DiscreteTransferFcn_tmp_e = DiscreteTimeIntegrator_a -
        BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_o4[1] *
        BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_bh;

      /* Saturate: '<S820>/Saturation' incorporates:
       *  Constant: '<S820>/FilterSpecification'
       */
      if (BEML_EMU_P.CoreSubsys_m.FilterSpecification_Value_fm >
          BEML_EMU_P.CoreSubsys_m.Saturation_UpperSat_fe) {
        rtb_Switch4_f = BEML_EMU_P.CoreSubsys_m.Saturation_UpperSat_fe;
      } else if (BEML_EMU_P.CoreSubsys_m.FilterSpecification_Value_fm <
                 BEML_EMU_P.CoreSubsys_m.Saturation_LowerSat_je) {
        rtb_Switch4_f = BEML_EMU_P.CoreSubsys_m.Saturation_LowerSat_je;
      } else {
        rtb_Switch4_f = BEML_EMU_P.CoreSubsys_m.FilterSpecification_Value_fm;
      }

      /* End of Saturate: '<S820>/Saturation' */

      /* Product: '<S820>/Divide' incorporates:
       *  Fcn: '<S820>/SpecificationTypeConversion'
       *  SampleTimeMath: '<S820>/Weighted Sample Time'
       *  Sum: '<S820>/Den'
       *
       * About '<S820>/Weighted Sample Time':
       *  y = K where K = ( w * Ts )
       */
      rtb_Switch4_f = BEML_EMU_P.CoreSubsys_m.WeightedSampleTime_WtEt_b / (1.0 /
        (6.2831853071795862 * rtb_Switch4_f) +
        BEML_EMU_P.CoreSubsys_m.WeightedSampleTime_WtEt_b);

      /* SignalConversion generated from: '<S820>/Vector Concatenate1' */
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_l[0] =
        rtb_Switch4_f;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_l[1] =
        BEML_EMU_P.CoreSubsys_m.Constant1_Value_b2;

      /* SignalConversion generated from: '<S820>/Vector Concatenate' incorporates:
       *  Constant: '<S820>/Constant'
       *  Constant: '<S820>/Constant1'
       */
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_ge[0] =
        BEML_EMU_P.CoreSubsys_m.Constant_Value_j;

      /* Sum: '<S820>/Subtract' incorporates:
       *  Constant: '<S820>/Constant'
       */
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_ge[1] =
        rtb_Switch4_f - BEML_EMU_P.CoreSubsys_m.Constant_Value_j;

      /* DiscreteTransferFcn: '<S820>/Discrete Transfer Fcn' incorporates:
       *  DiscreteTransferFcn: '<S819>/Discrete Transfer Fcn'
       */
      DiscreteTransferFcn_tmp_m = (BEML_EMU_B.CoreSubsys_m[ForEach_itr].
        VectorConcatenate1_h[0] * DiscreteTransferFcn_tmp_e +
        BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_h[1] *
        BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_bh) -
        BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_ge[1] *
        BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_d1;

      /* Switch: '<S802>/Switch4' incorporates:
       *  Constant: '<S798>/Constant'
       *  Constant: '<S802>/Constant6'
       *  Constant: '<S811>/Constant5'
       *  Product: '<S802>/Product'
       */
      if (BEML_EMU_P.CoreSubsys_m.Constant_Value_n >
          BEML_EMU_P.CoreSubsys_m.Switch4_Threshold_a) {
        /* Switch: '<S803>/Switch2' incorporates:
         *  Constant: '<S802>/Constant2'
         */
        if (rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Tuning.RoughnessProfileFactor
            > BEML_EMU_P.CoreSubsys_m.Switch2_Threshold_g) {
          rtb_Abs_aar =
            rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Tuning.RoughnessProfileFactor;
        } else {
          rtb_Abs_aar = BEML_EMU_P.CoreSubsys_m.Constant2_Value;
        }

        /* End of Switch: '<S803>/Switch2' */

        /* Product: '<S802>/Product1' incorporates:
         *  DiscreteTransferFcn: '<S816>/Discrete Transfer Fcn'
         *  DiscreteTransferFcn: '<S820>/Discrete Transfer Fcn'
         *  Gain: '<S802>/Gain'
         *  Gain: '<S802>/Gain1'
         *  Sum: '<S802>/Sum'
         *  Sum: '<S807>/Sum'
         */
        rtb_Switch4_f = ((rtb_DiscreteTransferFcn_l -
                          (BEML_EMU_B.CoreSubsys_m[ForEach_itr].
                           VectorConcatenate1_iu[0] * DiscreteTransferFcn_tmp_f
                           + BEML_EMU_B.CoreSubsys_m[ForEach_itr].
                           VectorConcatenate1_iu[1] *
                           BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
                           DiscreteTransferFcn_states_d)) *
                         BEML_EMU_P.CoreSubsys_m.Gain_Gain_m +
                         (BEML_EMU_B.CoreSubsys_m[ForEach_itr].
                          VectorConcatenate1_l[0] * DiscreteTransferFcn_tmp_m +
                          BEML_EMU_B.CoreSubsys_m[ForEach_itr].
                          VectorConcatenate1_l[1] *
                          BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
                          DiscreteTransferFcn_states_d1) *
                         BEML_EMU_P.CoreSubsys_m.Gain1_Gain_j) * rtb_Abs_aar;

        /* Switch: '<S821>/Switch' incorporates:
         *  Constant: '<S821>/Default'
         */
        if (rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Tuning.RoughnessProfileSpeedSaturation
            > BEML_EMU_P.CoreSubsys_m.TuningFactor_Threshold_c) {
          ratio =
            rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Tuning.RoughnessProfileSpeedSaturation;
        } else {
          ratio =
            BEML_EMU_P.CoreSubsys_m.DegradedRoughnessGenerator_SpeedSaturation;
        }

        /* End of Switch: '<S821>/Switch' */

        /* MinMax: '<S811>/MinMax' incorporates:
         *  Constant: '<S811>/Constant2'
         */
        if ((ratio > BEML_EMU_P.CoreSubsys_m.Constant2_Value_h) || rtIsNaN
            (BEML_EMU_P.CoreSubsys_m.Constant2_Value_h)) {
          rtb_VectorConcatenate[1] = ratio;
        } else {
          rtb_VectorConcatenate[1] = BEML_EMU_P.CoreSubsys_m.Constant2_Value_h;
        }

        /* End of MinMax: '<S811>/MinMax' */
        rtb_VectorConcatenate[0] = BEML_EMU_P.CoreSubsys_m.Constant5_Value_a;

        /* Abs: '<S811>/Abs' incorporates:
         *  Constant: '<S811>/Constant5'
         */
        rtb_Abs_aar = fabs
          (rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Dynamics.Velocity[
           0]);

        /* S-Function (sfix_look1_dyn): '<S811>/Lookup Table Dynamic' incorporates:
         *  Constant: '<S811>/Constant4'
         */
        /* Dynamic Look-Up Table Block: '<S811>/Lookup Table Dynamic'
         * Input0  Data Type:  Floating Point real_T
         * Input1  Data Type:  Floating Point real_T
         * Input2  Data Type:  Floating Point real_T
         * Output0 Data Type:  Floating Point real_T
         * Lookup Method: Linear_Endpoint
         *
         */
        LookUp_real_T_real_T( &(rtb_LookupTableDynamic),
                             &BEML_EMU_P.CoreSubsys_m.Constant4_Value_j[0],
                             rtb_Abs_aar, &rtb_VectorConcatenate[0], 1U);
        rtb_Switch4_f *= rtb_LookupTableDynamic;
      } else {
        rtb_Switch4_f = BEML_EMU_P.CoreSubsys_m.Constant6_Value_p;
      }

      /* End of Switch: '<S802>/Switch4' */

      /* Assignment: '<S798>/AssignZ' incorporates:
       *  Constant: '<S798>/Zeros'
       */
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].ManualPosition[0] =
        BEML_EMU_P.CoreSubsys_m.Zeros_Value_b[0];
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].ManualPosition[1] =
        BEML_EMU_P.CoreSubsys_m.Zeros_Value_b[1];
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].ManualPosition[2] =
        BEML_EMU_P.CoreSubsys_m.Zeros_Value_b[2];
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].ManualPosition[2] = rtb_Switch4_f;

      /* Update for RandomNumber: '<S804>/White Noise' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].NextOutput =
        rt_nrand_Upu32_Yd_f_pw_snf(&BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
        RandSeed) * BEML_EMU_P.CoreSubsys_m.WhiteNoise_StdDev_b +
        BEML_EMU_P.CoreSubsys_m.WhiteNoise_Mean_k;

      /* Update for DiscreteTransferFcn: '<S817>/Discrete Transfer Fcn' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_o =
        rtb_DataTypeConversion_d;

      /* Update for DiscreteTransferFcn: '<S818>/Discrete Transfer Fcn' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_cq =
        rtb_Output_i;

      /* Update for DiscreteTransferFcn: '<S815>/Discrete Transfer Fcn' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_l =
        DiscreteTransferFcn_tmp_j;

      /* Update for DiscreteTransferFcn: '<S816>/Discrete Transfer Fcn' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_d =
        DiscreteTransferFcn_tmp_f;

      /* Update for RandomNumber: '<S805>/White Noise' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].NextOutput_m =
        rt_nrand_Upu32_Yd_f_pw_snf(&BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
        RandSeed_f) * BEML_EMU_P.CoreSubsys_m.WhiteNoise_StdDev_e +
        BEML_EMU_P.CoreSubsys_m.WhiteNoise_Mean_o;

      /* Update for DiscreteIntegrator: '<S814>/Discrete-Time Integrator' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE_hq =
        rtb_Product_cv;
      if (rtb_DataTypeConversion7 > 0.0) {
        BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
          DiscreteTimeIntegrator_PrevResetState_m = 1;
      } else if (rtb_DataTypeConversion7 < 0.0) {
        BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
          DiscreteTimeIntegrator_PrevResetState_m = -1;
      } else if (rtb_DataTypeConversion7 == 0.0) {
        BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
          DiscreteTimeIntegrator_PrevResetState_m = 0;
      } else {
        BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
          DiscreteTimeIntegrator_PrevResetState_m = 2;
      }

      /* End of Update for DiscreteIntegrator: '<S814>/Discrete-Time Integrator' */

      /* Update for UnitDelay: '<S813>/Delay Input1' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DelayInput1_DSTATE = diff;

      /* Update for UnitDelay: '<S810>/Unit Delay' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].UnitDelay_DSTATE =
        DiscreteTimeIntegrator_a;

      /* Update for DiscreteTransferFcn: '<S819>/Discrete Transfer Fcn' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_bh =
        DiscreteTransferFcn_tmp_e;

      /* Update for DiscreteTransferFcn: '<S820>/Discrete Transfer Fcn' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_d1 =
        DiscreteTransferFcn_tmp_m;

      /* End of Outputs for SubSystem: '<S797>/DegradedTrackFeel' */
      break;

     default:
      /* Outputs for IfAction SubSystem: '<S797>/NoTrackFeel' incorporates:
       *  ActionPort: '<S800>/Action Port'
       */
      /* SignalConversion generated from: '<S800>/Out1' incorporates:
       *  Constant: '<S800>/Zeros'
       */
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].ManualPosition[0] =
        BEML_EMU_P.CoreSubsys_m.Zeros_Value_p[0];
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].ManualPosition[1] =
        BEML_EMU_P.CoreSubsys_m.Zeros_Value_p[1];
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].ManualPosition[2] =
        BEML_EMU_P.CoreSubsys_m.Zeros_Value_p[2];

      /* End of Outputs for SubSystem: '<S797>/NoTrackFeel' */
      break;
    }

    /* End of SwitchCase: '<S797>/Switch Case' */

    /* Outputs for Atomic SubSystem: '<S846>/TimerOffDelay NoInit' */
    /* InitialCondition: '<S857>/IC' incorporates:
     *  Constant: '<S857>/Initialise'
     */
    if (BEML_EMU_DW.CoreSubsys_m[ForEach_itr].IC_FirstOutputTime_j) {
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].IC_FirstOutputTime_j = false;
      diff = BEML_EMU_P.CoreSubsys_m.IC_Value;
    } else {
      diff = BEML_EMU_P.CoreSubsys_m.Initialise_Value;
    }

    /* End of InitialCondition: '<S857>/IC' */

    /* Switch: '<S857>/Switch2' incorporates:
     *  Constant: '<S857>/Initialise'
     *  Constant: '<S857>/OffTime'
     */
    if (diff != 0.0) {
      rtb_DataTypeConversion_d = BEML_EMU_P.CoreSubsys_m.Initialise_Value;
    } else {
      rtb_DataTypeConversion_d = BEML_EMU_P.CoreSubsys_m.OffTime_Value;
    }

    /* End of Switch: '<S857>/Switch2' */

    /* DiscreteIntegrator: '<S857>/Discrete-Time Integrator' incorporates:
     *  DataTypeConversion: '<S857>/Data Type Conversion'
     *  Gain: '<S857>/Gain'
     *  Logic: '<S857>/Logical Operator'
     */
    if (BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_IC_LOADING
        != 0) {
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE_j =
        rtb_DataTypeConversion_d;
      if (BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE_j >=
          BEML_EMU_P.CoreSubsys_m.DiscreteTimeIntegrator_UpperSat) {
        BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE_j =
          BEML_EMU_P.CoreSubsys_m.DiscreteTimeIntegrator_UpperSat;
      } else {
        if (BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
            DiscreteTimeIntegrator_DSTATE_j <=
            BEML_EMU_P.CoreSubsys_m.DiscreteTimeIntegrator_LowerSat) {
          BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE_j =
            BEML_EMU_P.CoreSubsys_m.DiscreteTimeIntegrator_LowerSat;
        }
      }
    }

    if ((rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Environment.Contact
         != 0.0) || (BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
                     DiscreteTimeIntegrator_PrevResetState_g != 0)) {
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE_j =
        rtb_DataTypeConversion_d;
      if (BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE_j >=
          BEML_EMU_P.CoreSubsys_m.DiscreteTimeIntegrator_UpperSat) {
        BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE_j =
          BEML_EMU_P.CoreSubsys_m.DiscreteTimeIntegrator_UpperSat;
      } else {
        if (BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
            DiscreteTimeIntegrator_DSTATE_j <=
            BEML_EMU_P.CoreSubsys_m.DiscreteTimeIntegrator_LowerSat) {
          BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE_j =
            BEML_EMU_P.CoreSubsys_m.DiscreteTimeIntegrator_LowerSat;
        }
      }
    }

    rtb_DataTypeConversion_d = static_cast<real_T>
      (!(rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Environment.Contact
         != 0.0)) * BEML_EMU_P.CoreSubsys_m.Gain_Gain *
      BEML_EMU_P.CoreSubsys_m.DiscreteTimeIntegrator_gainval +
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE_j;
    if (rtb_DataTypeConversion_d >=
        BEML_EMU_P.CoreSubsys_m.DiscreteTimeIntegrator_UpperSat) {
      rtb_DataTypeConversion_d =
        BEML_EMU_P.CoreSubsys_m.DiscreteTimeIntegrator_UpperSat;
      diff = 1.0;
    } else if (rtb_DataTypeConversion_d <=
               BEML_EMU_P.CoreSubsys_m.DiscreteTimeIntegrator_LowerSat) {
      rtb_DataTypeConversion_d =
        BEML_EMU_P.CoreSubsys_m.DiscreteTimeIntegrator_LowerSat;
      diff = -1.0;
    } else {
      diff = 0.0;
    }

    /* End of DiscreteIntegrator: '<S857>/Discrete-Time Integrator' */

    /* Logic: '<S857>/Logical Operator1' incorporates:
     *  Constant: '<S858>/Constant'
     *  RelationalOperator: '<S858>/Compare'
     */
    rtb_LogicalOperator1 = ((diff >= BEML_EMU_P.CoreSubsys_m.Constant_Value) ||
      (rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Environment.Contact
       != 0.0));

    /* Update for DiscreteIntegrator: '<S857>/Discrete-Time Integrator' */
    BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_IC_LOADING = 0U;
    BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE_j =
      rtb_DataTypeConversion_d;
    if (rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Environment.Contact >
        0.0) {
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
        DiscreteTimeIntegrator_PrevResetState_g = 1;
    } else if
        (rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Environment.Contact
         < 0.0) {
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
        DiscreteTimeIntegrator_PrevResetState_g = -1;
    } else if
        (rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Environment.Contact
         == 0.0) {
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
        DiscreteTimeIntegrator_PrevResetState_g = 0;
    } else {
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
        DiscreteTimeIntegrator_PrevResetState_g = 2;
    }

    /* End of Update for DiscreteIntegrator: '<S857>/Discrete-Time Integrator' */
    /* End of Outputs for SubSystem: '<S846>/TimerOffDelay NoInit' */

    /* InitialCondition: '<S846>/IC' incorporates:
     *  Constant: '<S846>/CollisionGainReset'
     */
    if (BEML_EMU_DW.CoreSubsys_m[ForEach_itr].IC_FirstOutputTime) {
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].IC_FirstOutputTime = false;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].IC =
        BEML_EMU_P.CoreSubsys_m.IC_Value_p;
    } else {
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].IC =
        BEML_EMU_P.CoreSubsys_m.CollisionGainReset_Value;
    }

    /* End of InitialCondition: '<S846>/IC' */

    /* DiscreteIntegrator: '<S846>/Discrete-Time Integrator' */
    if (rtb_LogicalOperator1 || (BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
         DiscreteTimeIntegrator_PrevResetState != 0)) {
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE =
        BEML_EMU_B.CoreSubsys_m[ForEach_itr].IC;
      if (BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE >=
          BEML_EMU_P.CoreSubsys_m.DiscreteTimeIntegrator_UpperSat_i) {
        BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE =
          BEML_EMU_P.CoreSubsys_m.DiscreteTimeIntegrator_UpperSat_i;
      } else {
        if (BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE <=
            BEML_EMU_P.CoreSubsys_m.DiscreteTimeIntegrator_LowerSat_c) {
          BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE =
            BEML_EMU_P.CoreSubsys_m.DiscreteTimeIntegrator_LowerSat_c;
        }
      }
    }

    if (BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE >=
        BEML_EMU_P.CoreSubsys_m.DiscreteTimeIntegrator_UpperSat_i) {
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE =
        BEML_EMU_P.CoreSubsys_m.DiscreteTimeIntegrator_UpperSat_i;
    } else {
      if (BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE <=
          BEML_EMU_P.CoreSubsys_m.DiscreteTimeIntegrator_LowerSat_c) {
        BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE =
          BEML_EMU_P.CoreSubsys_m.DiscreteTimeIntegrator_LowerSat_c;
      }
    }

    /* Switch: '<S866>/Switch' incorporates:
     *  Constant: '<S866>/Default'
     */
    if (rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Tuning.LinearVelocitySaturation
        > BEML_EMU_P.CoreSubsys_m.SaturationTuning_Threshold) {
      rtb_Switch4_f =
        rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Tuning.LinearVelocitySaturation;
    } else {
      rtb_Switch4_f = BEML_EMU_P.CoreSubsys_m.SaturationTuning_DefaultValue;
    }

    /* End of Switch: '<S866>/Switch' */

    /* Product: '<S848>/Product' incorporates:
     *  DiscreteIntegrator: '<S846>/Discrete-Time Integrator'
     *  Lookup_n-D: '<S848>/1-D Lookup Table'
     */
    rtb_DataTypeConversion_d = look1_binlcapw
      (BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE,
       BEML_EMU_P.CoreSubsys_m.uDLookupTable_bp01Data,
       BEML_EMU_P.CoreSubsys_m.uDLookupTable_tableData, 1U) * rtb_Switch4_f;

    /* Switch: '<S864>/Switch' incorporates:
     *  Constant: '<S864>/Default'
     */
    if (rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Tuning.LinearVelocityLPFConstant
        > BEML_EMU_P.CoreSubsys_m.LPFConstantTuning_Threshold) {
      ratio =
        rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Tuning.LinearVelocityLPFConstant;
    } else {
      ratio = BEML_EMU_P.CoreSubsys_m.LPFConstantTuning_DefaultValue;
    }

    /* End of Switch: '<S864>/Switch' */

    /* Saturate: '<S863>/Saturation' */
    if (ratio > BEML_EMU_P.CoreSubsys_m.Saturation_UpperSat_e) {
      ratio = BEML_EMU_P.CoreSubsys_m.Saturation_UpperSat_e;
    } else {
      if (ratio < BEML_EMU_P.CoreSubsys_m.Saturation_LowerSat_nl) {
        ratio = BEML_EMU_P.CoreSubsys_m.Saturation_LowerSat_nl;
      }
    }

    /* End of Saturate: '<S863>/Saturation' */

    /* Product: '<S863>/Divide' incorporates:
     *  Fcn: '<S863>/SpecificationTypeConversion'
     *  SampleTimeMath: '<S863>/Weighted Sample Time'
     *  Sum: '<S863>/Den'
     *
     * About '<S863>/Weighted Sample Time':
     *  y = K where K = ( w * Ts )
     */
    rtb_Output_i = BEML_EMU_P.CoreSubsys_m.WeightedSampleTime_WtEt_m / (1.0 /
      (6.2831853071795862 * ratio) +
      BEML_EMU_P.CoreSubsys_m.WeightedSampleTime_WtEt_m);

    /* SignalConversion generated from: '<S863>/Vector Concatenate1' */
    BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1[0] = rtb_Output_i;

    /* Constant: '<S863>/Constant1' */
    BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1[1] =
      BEML_EMU_P.CoreSubsys_m.Constant1_Value_c;

    /* SignalConversion generated from: '<S863>/Vector Concatenate' incorporates:
     *  Constant: '<S863>/Constant'
     */
    BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate[0] =
      BEML_EMU_P.CoreSubsys_m.Constant_Value_jf;

    /* Sum: '<S863>/Subtract' incorporates:
     *  Constant: '<S863>/Constant'
     */
    BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate[1] = rtb_Output_i -
      BEML_EMU_P.CoreSubsys_m.Constant_Value_jf;

    /* DiscreteTransferFcn: '<S863>/Discrete Transfer Fcn' */
    BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_tmp[0U] = 0.0;

    /* Gain: '<S848>/Gain' */
    rtb_Output_i = BEML_EMU_P.CoreSubsys_m.Gain_Gain_a *
      rtb_DataTypeConversion_d;

    /* DiscreteTransferFcn: '<S863>/Discrete Transfer Fcn' */
    BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_tmp[0] =
      rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Dynamics.Velocity[0] -
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate[1] *
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states[0];
    DiscreteTransferFcn_tmp_j = BEML_EMU_B.CoreSubsys_m[ForEach_itr].
      VectorConcatenate1[0] * BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
      DiscreteTransferFcn_tmp[0] + BEML_EMU_B.CoreSubsys_m[ForEach_itr].
      VectorConcatenate1[1] * BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
      DiscreteTransferFcn_states[0];
    rtb_Switch2_o[0] = DiscreteTransferFcn_tmp_j;

    /* Switch: '<S865>/Switch' incorporates:
     *  DiscreteTransferFcn: '<S863>/Discrete Transfer Fcn'
     *  RelationalOperator: '<S865>/UpperRelop'
     */
    if (DiscreteTransferFcn_tmp_j < rtb_Output_i) {
      rtb_Switch2_o[0] = rtb_Output_i;
    }

    /* Switch: '<S865>/Switch2' incorporates:
     *  DiscreteTransferFcn: '<S863>/Discrete Transfer Fcn'
     *  RelationalOperator: '<S865>/LowerRelop1'
     */
    if (DiscreteTransferFcn_tmp_j > rtb_DataTypeConversion_d) {
      rtb_Switch2_o[0] = rtb_DataTypeConversion_d;
    }

    /* DiscreteTransferFcn: '<S863>/Discrete Transfer Fcn' */
    BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_tmp[1] =
      rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Dynamics.Velocity[1] -
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate[1] *
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states[1];
    DiscreteTransferFcn_tmp_j = BEML_EMU_B.CoreSubsys_m[ForEach_itr].
      VectorConcatenate1[0] * BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
      DiscreteTransferFcn_tmp[1] + BEML_EMU_B.CoreSubsys_m[ForEach_itr].
      VectorConcatenate1[1] * BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
      DiscreteTransferFcn_states[1];
    rtb_Switch2_o[1] = DiscreteTransferFcn_tmp_j;

    /* Switch: '<S865>/Switch' incorporates:
     *  DiscreteTransferFcn: '<S863>/Discrete Transfer Fcn'
     *  RelationalOperator: '<S865>/UpperRelop'
     */
    if (DiscreteTransferFcn_tmp_j < rtb_Output_i) {
      rtb_Switch2_o[1] = rtb_Output_i;
    }

    /* Switch: '<S865>/Switch2' incorporates:
     *  DiscreteTransferFcn: '<S863>/Discrete Transfer Fcn'
     *  RelationalOperator: '<S865>/LowerRelop1'
     */
    if (DiscreteTransferFcn_tmp_j > rtb_DataTypeConversion_d) {
      rtb_Switch2_o[1] = rtb_DataTypeConversion_d;
    }

    /* DiscreteTransferFcn: '<S863>/Discrete Transfer Fcn' */
    BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_tmp[2] =
      rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Dynamics.Velocity[2] -
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate[1] *
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states[2];
    DiscreteTransferFcn_tmp_j = BEML_EMU_B.CoreSubsys_m[ForEach_itr].
      VectorConcatenate1[0] * BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
      DiscreteTransferFcn_tmp[2] + BEML_EMU_B.CoreSubsys_m[ForEach_itr].
      VectorConcatenate1[1] * BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
      DiscreteTransferFcn_states[2];
    rtb_Switch2_o[2] = DiscreteTransferFcn_tmp_j;

    /* Switch: '<S865>/Switch' incorporates:
     *  DiscreteTransferFcn: '<S863>/Discrete Transfer Fcn'
     *  RelationalOperator: '<S865>/UpperRelop'
     */
    if (DiscreteTransferFcn_tmp_j < rtb_Output_i) {
      rtb_Switch2_o[2] = rtb_Output_i;
    }

    /* Switch: '<S865>/Switch2' incorporates:
     *  DiscreteTransferFcn: '<S863>/Discrete Transfer Fcn'
     *  RelationalOperator: '<S865>/LowerRelop1'
     */
    if (DiscreteTransferFcn_tmp_j > rtb_DataTypeConversion_d) {
      rtb_Switch2_o[2] = rtb_DataTypeConversion_d;
    }

    /* Switch: '<S862>/Switch' incorporates:
     *  Constant: '<S862>/Default'
     */
    if (rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Tuning.LinearAccelerationSaturation
        > BEML_EMU_P.CoreSubsys_m.SaturationTuning_Threshold_p) {
      rtb_Switch4_f =
        rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Tuning.LinearAccelerationSaturation;
    } else {
      rtb_Switch4_f = BEML_EMU_P.CoreSubsys_m.SaturationTuning_DefaultValue_n;
    }

    /* End of Switch: '<S862>/Switch' */

    /* Product: '<S847>/Product' incorporates:
     *  DiscreteIntegrator: '<S846>/Discrete-Time Integrator'
     */
    rtb_Output_i = BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
      DiscreteTimeIntegrator_DSTATE * rtb_Switch4_f;

    /* RelationalOperator: '<S783>/FixPt Relational Operator' incorporates:
     *  UnitDelay: '<S783>/Delay Input1'
     */
    rtb_FixPtRelationalOperator = (static_cast<int32_T>
      (rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Effects.LongitudinalJolt)
      > static_cast<int32_T>(BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
      DelayInput1_DSTATE_l));

    /* Outputs for Atomic SubSystem: '<S779>/Jolt Duration' */
    BEML_EMU_JoltDuration(rtb_FixPtRelationalOperator,
                          &BEML_EMU_B.CoreSubsys_m[ForEach_itr].JoltDuration_o,
                          &BEML_EMU_DW.CoreSubsys_m[ForEach_itr].JoltDuration_o,
                          &BEML_EMU_P.CoreSubsys_m.JoltDuration_o);

    /* End of Outputs for SubSystem: '<S779>/Jolt Duration' */

    /* DiscreteIntegrator: '<S779>/Discrete-Time Integrator' */
    if ((!BEML_EMU_B.CoreSubsys_m[ForEach_itr].JoltDuration_o.LogicalOperator1) &&
        (BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
         DiscreteTimeIntegrator_PrevResetState_l == 1)) {
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE_g =
        BEML_EMU_P.CoreSubsys_m.DiscreteTimeIntegrator_IC_i;
    }

    /* RelationalOperator: '<S786>/FixPt Relational Operator' incorporates:
     *  UnitDelay: '<S786>/Delay Input1'
     */
    rtb_FixPtRelationalOperator_d = (static_cast<int32_T>
      (rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Effects.LateralJolt) >
      static_cast<int32_T>(BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
      DelayInput1_DSTATE_pk));

    /* Outputs for Atomic SubSystem: '<S780>/Jolt Duration' */
    BEML_EMU_JoltDuration(rtb_FixPtRelationalOperator_d,
                          &BEML_EMU_B.CoreSubsys_m[ForEach_itr].JoltDuration_n,
                          &BEML_EMU_DW.CoreSubsys_m[ForEach_itr].JoltDuration_n,
                          &BEML_EMU_P.CoreSubsys_m.JoltDuration_n);

    /* End of Outputs for SubSystem: '<S780>/Jolt Duration' */

    /* DiscreteIntegrator: '<S780>/Discrete-Time Integrator' */
    if ((!BEML_EMU_B.CoreSubsys_m[ForEach_itr].JoltDuration_n.LogicalOperator1) &&
        (BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
         DiscreteTimeIntegrator_PrevResetState_p == 1)) {
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE_m =
        BEML_EMU_P.CoreSubsys_m.DiscreteTimeIntegrator_IC_p;
    }

    /* RelationalOperator: '<S789>/FixPt Relational Operator' incorporates:
     *  UnitDelay: '<S789>/Delay Input1'
     */
    rtb_FixPtRelationalOperator_n = (static_cast<int32_T>
      (rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Effects.VerticalJolt)
      > static_cast<int32_T>(BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
      DelayInput1_DSTATE_o));

    /* Outputs for Atomic SubSystem: '<S781>/Jolt Duration' */
    BEML_EMU_JoltDuration(rtb_FixPtRelationalOperator_n,
                          &BEML_EMU_B.CoreSubsys_m[ForEach_itr].JoltDuration_e,
                          &BEML_EMU_DW.CoreSubsys_m[ForEach_itr].JoltDuration_e,
                          &BEML_EMU_P.CoreSubsys_m.JoltDuration_e);

    /* End of Outputs for SubSystem: '<S781>/Jolt Duration' */

    /* DiscreteIntegrator: '<S781>/Discrete-Time Integrator' */
    if ((!BEML_EMU_B.CoreSubsys_m[ForEach_itr].JoltDuration_e.LogicalOperator1) &&
        (BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
         DiscreteTimeIntegrator_PrevResetState_f == 1)) {
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE_d =
        BEML_EMU_P.CoreSubsys_m.DiscreteTimeIntegrator_IC_a;
    }

    /* RelationalOperator: '<S792>/FixPt Relational Operator' incorporates:
     *  UnitDelay: '<S792>/Delay Input1'
     */
    rtb_FixPtRelationalOperator_o = (static_cast<int32_T>
      (rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Effects.VerticalJoltDown)
      > static_cast<int32_T>(BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
      DelayInput1_DSTATE_g));

    /* Outputs for Atomic SubSystem: '<S782>/Jolt Duration' */
    BEML_EMU_JoltDuration(rtb_FixPtRelationalOperator_o,
                          &BEML_EMU_B.CoreSubsys_m[ForEach_itr].JoltDuration,
                          &BEML_EMU_DW.CoreSubsys_m[ForEach_itr].JoltDuration,
                          &BEML_EMU_P.CoreSubsys_m.JoltDuration);

    /* End of Outputs for SubSystem: '<S782>/Jolt Duration' */

    /* DiscreteIntegrator: '<S782>/Discrete-Time Integrator' */
    if ((!BEML_EMU_B.CoreSubsys_m[ForEach_itr].JoltDuration.LogicalOperator1) &&
        (BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
         DiscreteTimeIntegrator_PrevResetState_h == 1)) {
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE_h =
        BEML_EMU_P.CoreSubsys_m.DiscreteTimeIntegrator_IC_k;
    }

    /* Switch: '<S860>/Switch' incorporates:
     *  Constant: '<S860>/Default'
     */
    if (rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Tuning.LinearAccelerationLPFConstant
        > BEML_EMU_P.CoreSubsys_m.LPFConstantTuning_Threshold_a) {
      ratio =
        rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Tuning.LinearAccelerationLPFConstant;
    } else {
      ratio = BEML_EMU_P.CoreSubsys_m.LPFConstantTuning_DefaultValue_k;
    }

    /* End of Switch: '<S860>/Switch' */

    /* Saturate: '<S859>/Saturation' */
    if (ratio > BEML_EMU_P.CoreSubsys_m.Saturation_UpperSat_d3) {
      ratio = BEML_EMU_P.CoreSubsys_m.Saturation_UpperSat_d3;
    } else {
      if (ratio < BEML_EMU_P.CoreSubsys_m.Saturation_LowerSat_l3) {
        ratio = BEML_EMU_P.CoreSubsys_m.Saturation_LowerSat_l3;
      }
    }

    /* End of Saturate: '<S859>/Saturation' */

    /* Product: '<S859>/Divide' incorporates:
     *  Fcn: '<S859>/SpecificationTypeConversion'
     *  SampleTimeMath: '<S859>/Weighted Sample Time'
     *  Sum: '<S859>/Den'
     *
     * About '<S859>/Weighted Sample Time':
     *  y = K where K = ( w * Ts )
     */
    diff = BEML_EMU_P.CoreSubsys_m.WeightedSampleTime_WtEt_mk / (1.0 /
      (6.2831853071795862 * ratio) +
      BEML_EMU_P.CoreSubsys_m.WeightedSampleTime_WtEt_mk);

    /* SignalConversion generated from: '<S859>/Vector Concatenate1' */
    BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_j[0] = diff;

    /* Constant: '<S859>/Constant1' */
    BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_j[1] =
      BEML_EMU_P.CoreSubsys_m.Constant1_Value_eq;

    /* SignalConversion generated from: '<S859>/Vector Concatenate' incorporates:
     *  Constant: '<S859>/Constant'
     */
    BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_p[0] =
      BEML_EMU_P.CoreSubsys_m.Constant_Value_h;

    /* Sum: '<S859>/Subtract' incorporates:
     *  Constant: '<S859>/Constant'
     */
    BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_p[1] = diff -
      BEML_EMU_P.CoreSubsys_m.Constant_Value_h;

    /* DiscreteTransferFcn: '<S859>/Discrete Transfer Fcn' */
    BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_tmp_p[0U] = 0.0;

    /* Gain: '<S847>/Gain' */
    diff = BEML_EMU_P.CoreSubsys_m.Gain_Gain_e * rtb_Output_i;

    /* DiscreteTransferFcn: '<S859>/Discrete Transfer Fcn' incorporates:
     *  DiscreteIntegrator: '<S779>/Discrete-Time Integrator'
     *  Gain: '<S778>/Gain'
     *  Lookup_n-D: '<S779>/Jolt Profile'
     *  Sum: '<S778>/Add'
     */
    BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_tmp_p[0] =
      (BEML_EMU_P.CoreSubsys_m.Gain_Gain_o * look1_binlcpw
       (BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE_g,
        BEML_EMU_P.CoreSubsys_m.Jolt_JoltBreakPoints,
        BEML_EMU_P.CoreSubsys_m.Jolt_JoltProfile, 5U) +
       rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Dynamics.Acceleration[
       0]) - BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_p[1] *
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_b[0];
    DiscreteTransferFcn_tmp_j = BEML_EMU_B.CoreSubsys_m[ForEach_itr].
      VectorConcatenate1_j[0] * BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
      DiscreteTransferFcn_tmp_p[0] + BEML_EMU_B.CoreSubsys_m[ForEach_itr].
      VectorConcatenate1_j[1] * BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
      DiscreteTransferFcn_states_b[0];
    rtb_Switch2_m[0] = DiscreteTransferFcn_tmp_j;

    /* Switch: '<S861>/Switch' incorporates:
     *  DiscreteTransferFcn: '<S859>/Discrete Transfer Fcn'
     *  RelationalOperator: '<S861>/UpperRelop'
     */
    if (DiscreteTransferFcn_tmp_j < diff) {
      rtb_Switch2_m[0] = diff;
    }

    /* Switch: '<S861>/Switch2' incorporates:
     *  DiscreteTransferFcn: '<S859>/Discrete Transfer Fcn'
     *  RelationalOperator: '<S861>/LowerRelop1'
     */
    if (DiscreteTransferFcn_tmp_j > rtb_Output_i) {
      rtb_Switch2_m[0] = rtb_Output_i;
    }

    /* DiscreteTransferFcn: '<S859>/Discrete Transfer Fcn' incorporates:
     *  DiscreteIntegrator: '<S780>/Discrete-Time Integrator'
     *  Lookup_n-D: '<S780>/Jolt Profile'
     *  Sum: '<S778>/Add1'
     */
    BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_tmp_p[1] =
      (look1_binlcpw(BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
                     DiscreteTimeIntegrator_DSTATE_m,
                     BEML_EMU_P.CoreSubsys_m.Jolt1_JoltBreakPoints,
                     BEML_EMU_P.CoreSubsys_m.Jolt1_JoltProfile, 5U) +
       rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Dynamics.Acceleration[
       1]) - BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_p[1] *
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_b[1];
    DiscreteTransferFcn_tmp_j = BEML_EMU_B.CoreSubsys_m[ForEach_itr].
      VectorConcatenate1_j[0] * BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
      DiscreteTransferFcn_tmp_p[1] + BEML_EMU_B.CoreSubsys_m[ForEach_itr].
      VectorConcatenate1_j[1] * BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
      DiscreteTransferFcn_states_b[1];
    rtb_Switch2_m[1] = DiscreteTransferFcn_tmp_j;

    /* Switch: '<S861>/Switch' incorporates:
     *  DiscreteTransferFcn: '<S859>/Discrete Transfer Fcn'
     *  RelationalOperator: '<S861>/UpperRelop'
     */
    if (DiscreteTransferFcn_tmp_j < diff) {
      rtb_Switch2_m[1] = diff;
    }

    /* Switch: '<S861>/Switch2' incorporates:
     *  DiscreteTransferFcn: '<S859>/Discrete Transfer Fcn'
     *  RelationalOperator: '<S861>/LowerRelop1'
     */
    if (DiscreteTransferFcn_tmp_j > rtb_Output_i) {
      rtb_Switch2_m[1] = rtb_Output_i;
    }

    /* DiscreteTransferFcn: '<S859>/Discrete Transfer Fcn' incorporates:
     *  DiscreteIntegrator: '<S781>/Discrete-Time Integrator'
     *  DiscreteIntegrator: '<S782>/Discrete-Time Integrator'
     *  Gain: '<S778>/Gain1'
     *  Lookup_n-D: '<S781>/Jolt Profile'
     *  Lookup_n-D: '<S782>/Jolt Profile'
     *  Sum: '<S778>/Add2'
     */
    BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_tmp_p[2] =
      ((look1_binlcpw(BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
                      DiscreteTimeIntegrator_DSTATE_d,
                      BEML_EMU_P.CoreSubsys_m.Jolt2_JoltBreakPoints,
                      BEML_EMU_P.CoreSubsys_m.Jolt2_JoltProfile, 5U) +
        rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Dynamics.Acceleration
        [2]) + BEML_EMU_P.CoreSubsys_m.Gain1_Gain_d * look1_binlcpw
       (BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE_h,
        BEML_EMU_P.CoreSubsys_m.Jolt3_JoltBreakPoints,
        BEML_EMU_P.CoreSubsys_m.Jolt3_JoltProfile, 5U)) -
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_p[1] *
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_b[2];
    DiscreteTransferFcn_tmp_j = BEML_EMU_B.CoreSubsys_m[ForEach_itr].
      VectorConcatenate1_j[0] * BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
      DiscreteTransferFcn_tmp_p[2] + BEML_EMU_B.CoreSubsys_m[ForEach_itr].
      VectorConcatenate1_j[1] * BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
      DiscreteTransferFcn_states_b[2];
    rtb_Switch2_m[2] = DiscreteTransferFcn_tmp_j;

    /* Switch: '<S861>/Switch' incorporates:
     *  DiscreteTransferFcn: '<S859>/Discrete Transfer Fcn'
     *  RelationalOperator: '<S861>/UpperRelop'
     */
    if (DiscreteTransferFcn_tmp_j < diff) {
      rtb_Switch2_m[2] = diff;
    }

    /* Switch: '<S861>/Switch2' incorporates:
     *  DiscreteTransferFcn: '<S859>/Discrete Transfer Fcn'
     *  RelationalOperator: '<S861>/LowerRelop1'
     */
    if (DiscreteTransferFcn_tmp_j > rtb_Output_i) {
      rtb_Switch2_m[2] = rtb_Output_i;
    }

    /* Switch: '<S856>/Switch' incorporates:
     *  Constant: '<S856>/Default'
     */
    if (rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Tuning.AngularVelocitySaturation
        > BEML_EMU_P.CoreSubsys_m.SaturationTuning_Threshold_a) {
      rtb_Switch4_f =
        rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Tuning.AngularVelocitySaturation;
    } else {
      rtb_Switch4_f = BEML_EMU_P.CoreSubsys_m.SaturationTuning_DefaultValue_g;
    }

    /* End of Switch: '<S856>/Switch' */

    /* Product: '<S845>/Product' incorporates:
     *  DiscreteIntegrator: '<S846>/Discrete-Time Integrator'
     *  Lookup_n-D: '<S845>/1-D Lookup Table'
     */
    diff = look1_binlcapw(BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
                          DiscreteTimeIntegrator_DSTATE,
                          BEML_EMU_P.CoreSubsys_m.uDLookupTable_bp01Data_i,
                          BEML_EMU_P.CoreSubsys_m.uDLookupTable_tableData_d, 1U)
      * rtb_Switch4_f;

    /* Switch: '<S854>/Switch' incorporates:
     *  Constant: '<S854>/Default'
     */
    if (rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Tuning.AngularVelocityLPFConstant
        > BEML_EMU_P.CoreSubsys_m.LPFConstantTuning_Threshold_d) {
      ratio =
        rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Tuning.AngularVelocityLPFConstant;
    } else {
      ratio = BEML_EMU_P.CoreSubsys_m.LPFConstantTuning_DefaultValue_l;
    }

    /* End of Switch: '<S854>/Switch' */

    /* Saturate: '<S853>/Saturation' */
    if (ratio > BEML_EMU_P.CoreSubsys_m.Saturation_UpperSat_a) {
      ratio = BEML_EMU_P.CoreSubsys_m.Saturation_UpperSat_a;
    } else {
      if (ratio < BEML_EMU_P.CoreSubsys_m.Saturation_LowerSat_a1) {
        ratio = BEML_EMU_P.CoreSubsys_m.Saturation_LowerSat_a1;
      }
    }

    /* End of Saturate: '<S853>/Saturation' */

    /* Product: '<S853>/Divide' incorporates:
     *  Fcn: '<S853>/SpecificationTypeConversion'
     *  SampleTimeMath: '<S853>/Weighted Sample Time'
     *  Sum: '<S853>/Den'
     *
     * About '<S853>/Weighted Sample Time':
     *  y = K where K = ( w * Ts )
     */
    rtb_DataTypeConversion_d =
      BEML_EMU_P.CoreSubsys_m.WeightedSampleTime_WtEt_gw / (1.0 /
      (6.2831853071795862 * ratio) +
      BEML_EMU_P.CoreSubsys_m.WeightedSampleTime_WtEt_gw);

    /* SignalConversion generated from: '<S853>/Vector Concatenate1' */
    BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_jf[0] =
      rtb_DataTypeConversion_d;

    /* Constant: '<S853>/Constant1' */
    BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_jf[1] =
      BEML_EMU_P.CoreSubsys_m.Constant1_Value_ae;

    /* SignalConversion generated from: '<S853>/Vector Concatenate' incorporates:
     *  Constant: '<S853>/Constant'
     */
    BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_m[0] =
      BEML_EMU_P.CoreSubsys_m.Constant_Value_nh;

    /* Sum: '<S853>/Subtract' incorporates:
     *  Constant: '<S853>/Constant'
     */
    BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_m[1] =
      rtb_DataTypeConversion_d - BEML_EMU_P.CoreSubsys_m.Constant_Value_nh;

    /* DiscreteTransferFcn: '<S853>/Discrete Transfer Fcn' */
    BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_tmp_i[0U] = 0.0;

    /* Gain: '<S845>/Gain' */
    rtb_DataTypeConversion_d = BEML_EMU_P.CoreSubsys_m.Gain_Gain_gb * diff;

    /* DiscreteTransferFcn: '<S853>/Discrete Transfer Fcn' */
    BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_tmp_i[0] =
      rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Dynamics.AngularVelocity
      [0] - BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_m[1] *
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_c[0];
    DiscreteTransferFcn_tmp_j = BEML_EMU_B.CoreSubsys_m[ForEach_itr].
      VectorConcatenate1_jf[0] * BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
      DiscreteTransferFcn_tmp_i[0] + BEML_EMU_B.CoreSubsys_m[ForEach_itr].
      VectorConcatenate1_jf[1] * BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
      DiscreteTransferFcn_states_c[0];
    rtb_Product_cv = DiscreteTransferFcn_tmp_j;

    /* Switch: '<S855>/Switch' incorporates:
     *  DiscreteTransferFcn: '<S853>/Discrete Transfer Fcn'
     *  RelationalOperator: '<S855>/UpperRelop'
     */
    if (DiscreteTransferFcn_tmp_j < rtb_DataTypeConversion_d) {
      rtb_Product_cv = rtb_DataTypeConversion_d;
    }

    /* Switch: '<S855>/Switch2' incorporates:
     *  DiscreteTransferFcn: '<S853>/Discrete Transfer Fcn'
     *  RelationalOperator: '<S855>/LowerRelop1'
     */
    if (DiscreteTransferFcn_tmp_j > diff) {
      rtb_Product_cv = diff;
    }

    /* DeadZone: '<S777>/Dead Zone' */
    if (rtb_Product_cv > BEML_EMU_P.CoreSubsys_m.DeadZone_End) {
      /* DiscreteTransferFcn: '<S853>/Discrete Transfer Fcn' */
      rtb_DeadZone[0] = rtb_Product_cv - BEML_EMU_P.CoreSubsys_m.DeadZone_End;
    } else if (rtb_Product_cv >= BEML_EMU_P.CoreSubsys_m.DeadZone_Start) {
      /* DiscreteTransferFcn: '<S853>/Discrete Transfer Fcn' */
      rtb_DeadZone[0] = 0.0;
    } else {
      /* DiscreteTransferFcn: '<S853>/Discrete Transfer Fcn' */
      rtb_DeadZone[0] = rtb_Product_cv - BEML_EMU_P.CoreSubsys_m.DeadZone_Start;
    }

    /* DiscreteTransferFcn: '<S853>/Discrete Transfer Fcn' */
    BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_tmp_i[1] =
      rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Dynamics.AngularVelocity
      [1] - BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_m[1] *
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_c[1];
    DiscreteTransferFcn_tmp_j = BEML_EMU_B.CoreSubsys_m[ForEach_itr].
      VectorConcatenate1_jf[0] * BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
      DiscreteTransferFcn_tmp_i[1] + BEML_EMU_B.CoreSubsys_m[ForEach_itr].
      VectorConcatenate1_jf[1] * BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
      DiscreteTransferFcn_states_c[1];
    rtb_Product_cv = DiscreteTransferFcn_tmp_j;

    /* Switch: '<S855>/Switch' incorporates:
     *  DiscreteTransferFcn: '<S853>/Discrete Transfer Fcn'
     *  RelationalOperator: '<S855>/UpperRelop'
     */
    if (DiscreteTransferFcn_tmp_j < rtb_DataTypeConversion_d) {
      rtb_Product_cv = rtb_DataTypeConversion_d;
    }

    /* Switch: '<S855>/Switch2' incorporates:
     *  DiscreteTransferFcn: '<S853>/Discrete Transfer Fcn'
     *  RelationalOperator: '<S855>/LowerRelop1'
     */
    if (DiscreteTransferFcn_tmp_j > diff) {
      rtb_Product_cv = diff;
    }

    /* DeadZone: '<S777>/Dead Zone' */
    if (rtb_Product_cv > BEML_EMU_P.CoreSubsys_m.DeadZone_End) {
      /* DiscreteTransferFcn: '<S853>/Discrete Transfer Fcn' */
      rtb_DeadZone[1] = rtb_Product_cv - BEML_EMU_P.CoreSubsys_m.DeadZone_End;
    } else if (rtb_Product_cv >= BEML_EMU_P.CoreSubsys_m.DeadZone_Start) {
      /* DiscreteTransferFcn: '<S853>/Discrete Transfer Fcn' */
      rtb_DeadZone[1] = 0.0;
    } else {
      /* DiscreteTransferFcn: '<S853>/Discrete Transfer Fcn' */
      rtb_DeadZone[1] = rtb_Product_cv - BEML_EMU_P.CoreSubsys_m.DeadZone_Start;
    }

    /* DiscreteTransferFcn: '<S853>/Discrete Transfer Fcn' */
    BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_tmp_i[2] =
      rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Dynamics.AngularVelocity
      [2] - BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_m[1] *
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_c[2];
    DiscreteTransferFcn_tmp_j = BEML_EMU_B.CoreSubsys_m[ForEach_itr].
      VectorConcatenate1_jf[0] * BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
      DiscreteTransferFcn_tmp_i[2] + BEML_EMU_B.CoreSubsys_m[ForEach_itr].
      VectorConcatenate1_jf[1] * BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
      DiscreteTransferFcn_states_c[2];
    rtb_Product_cv = DiscreteTransferFcn_tmp_j;

    /* Switch: '<S855>/Switch' incorporates:
     *  DiscreteTransferFcn: '<S853>/Discrete Transfer Fcn'
     *  RelationalOperator: '<S855>/UpperRelop'
     */
    if (DiscreteTransferFcn_tmp_j < rtb_DataTypeConversion_d) {
      rtb_Product_cv = rtb_DataTypeConversion_d;
    }

    /* Switch: '<S855>/Switch2' incorporates:
     *  DiscreteTransferFcn: '<S853>/Discrete Transfer Fcn'
     *  RelationalOperator: '<S855>/LowerRelop1'
     */
    if (DiscreteTransferFcn_tmp_j > diff) {
      rtb_Product_cv = diff;
    }

    /* DeadZone: '<S777>/Dead Zone' */
    if (rtb_Product_cv > BEML_EMU_P.CoreSubsys_m.DeadZone_End) {
      /* DiscreteTransferFcn: '<S853>/Discrete Transfer Fcn' */
      rtb_DeadZone[2] = rtb_Product_cv - BEML_EMU_P.CoreSubsys_m.DeadZone_End;
    } else if (rtb_Product_cv >= BEML_EMU_P.CoreSubsys_m.DeadZone_Start) {
      /* DiscreteTransferFcn: '<S853>/Discrete Transfer Fcn' */
      rtb_DeadZone[2] = 0.0;
    } else {
      /* DiscreteTransferFcn: '<S853>/Discrete Transfer Fcn' */
      rtb_DeadZone[2] = rtb_Product_cv - BEML_EMU_P.CoreSubsys_m.DeadZone_Start;
    }

    /* Switch: '<S852>/Switch' incorporates:
     *  Constant: '<S852>/Default'
     */
    if (rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Tuning.AngularAccelerationSaturation
        > BEML_EMU_P.CoreSubsys_m.SaturationTuning_Threshold_k) {
      rtb_Switch4_f =
        rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Tuning.AngularAccelerationSaturation;
    } else {
      rtb_Switch4_f = BEML_EMU_P.CoreSubsys_m.SaturationTuning_DefaultValue_k;
    }

    /* End of Switch: '<S852>/Switch' */

    /* Product: '<S844>/Product' incorporates:
     *  DiscreteIntegrator: '<S846>/Discrete-Time Integrator'
     *  Lookup_n-D: '<S844>/1-D Lookup Table'
     */
    diff = look1_binlcapw(BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
                          DiscreteTimeIntegrator_DSTATE,
                          BEML_EMU_P.CoreSubsys_m.uDLookupTable_bp01Data_im,
                          BEML_EMU_P.CoreSubsys_m.uDLookupTable_tableData_a, 1U)
      * rtb_Switch4_f;

    /* Switch: '<S850>/Switch' incorporates:
     *  Constant: '<S850>/Default'
     */
    if (rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Tuning.AngularAccelerationLPFConstant
        > BEML_EMU_P.CoreSubsys_m.LPFConstantTuning_Threshold_l) {
      ratio =
        rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Tuning.AngularAccelerationLPFConstant;
    } else {
      ratio = BEML_EMU_P.CoreSubsys_m.LPFConstantTuning_DefaultValue_p;
    }

    /* End of Switch: '<S850>/Switch' */

    /* Saturate: '<S849>/Saturation' */
    if (ratio > BEML_EMU_P.CoreSubsys_m.Saturation_UpperSat_cl) {
      ratio = BEML_EMU_P.CoreSubsys_m.Saturation_UpperSat_cl;
    } else {
      if (ratio < BEML_EMU_P.CoreSubsys_m.Saturation_LowerSat_js) {
        ratio = BEML_EMU_P.CoreSubsys_m.Saturation_LowerSat_js;
      }
    }

    /* End of Saturate: '<S849>/Saturation' */

    /* Product: '<S849>/Divide' incorporates:
     *  Fcn: '<S849>/SpecificationTypeConversion'
     *  SampleTimeMath: '<S849>/Weighted Sample Time'
     *  Sum: '<S849>/Den'
     *
     * About '<S849>/Weighted Sample Time':
     *  y = K where K = ( w * Ts )
     */
    rtb_DataTypeConversion_d = BEML_EMU_P.CoreSubsys_m.WeightedSampleTime_WtEt_f
      / (1.0 / (6.2831853071795862 * ratio) +
         BEML_EMU_P.CoreSubsys_m.WeightedSampleTime_WtEt_f);

    /* SignalConversion generated from: '<S849>/Vector Concatenate1' */
    BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_n[0] =
      rtb_DataTypeConversion_d;

    /* Constant: '<S849>/Constant1' */
    BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_n[1] =
      BEML_EMU_P.CoreSubsys_m.Constant1_Value_fm;

    /* SignalConversion generated from: '<S849>/Vector Concatenate' incorporates:
     *  Constant: '<S849>/Constant'
     */
    BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_k[0] =
      BEML_EMU_P.CoreSubsys_m.Constant_Value_m;

    /* Sum: '<S849>/Subtract' incorporates:
     *  Constant: '<S849>/Constant'
     */
    BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_k[1] =
      rtb_DataTypeConversion_d - BEML_EMU_P.CoreSubsys_m.Constant_Value_m;

    /* DiscreteTransferFcn: '<S849>/Discrete Transfer Fcn' */
    BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_tmp_ib[0U] = 0.0;

    /* Gain: '<S844>/Gain' */
    rtb_DataTypeConversion_d = BEML_EMU_P.CoreSubsys_m.Gain_Gain_d * diff;

    /* DiscreteTransferFcn: '<S849>/Discrete Transfer Fcn' */
    BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_tmp_ib[0] =
      rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Dynamics.AngularAcceleration
      [0] - BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_k[1] *
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_a[0];
    DiscreteTransferFcn_tmp_j = BEML_EMU_B.CoreSubsys_m[ForEach_itr].
      VectorConcatenate1_n[0] * BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
      DiscreteTransferFcn_tmp_ib[0] + BEML_EMU_B.CoreSubsys_m[ForEach_itr].
      VectorConcatenate1_n[1] * BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
      DiscreteTransferFcn_states_a[0];
    rtb_Switch2_ps[0] = DiscreteTransferFcn_tmp_j;

    /* Switch: '<S851>/Switch' incorporates:
     *  DiscreteTransferFcn: '<S849>/Discrete Transfer Fcn'
     *  RelationalOperator: '<S851>/UpperRelop'
     */
    if (DiscreteTransferFcn_tmp_j < rtb_DataTypeConversion_d) {
      rtb_Switch2_ps[0] = rtb_DataTypeConversion_d;
    }

    /* Switch: '<S851>/Switch2' incorporates:
     *  DiscreteTransferFcn: '<S849>/Discrete Transfer Fcn'
     *  RelationalOperator: '<S851>/LowerRelop1'
     */
    if (DiscreteTransferFcn_tmp_j > diff) {
      rtb_Switch2_ps[0] = diff;
    }

    /* DiscreteTransferFcn: '<S849>/Discrete Transfer Fcn' */
    BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_tmp_ib[1] =
      rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Dynamics.AngularAcceleration
      [1] - BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_k[1] *
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_a[1];
    DiscreteTransferFcn_tmp_j = BEML_EMU_B.CoreSubsys_m[ForEach_itr].
      VectorConcatenate1_n[0] * BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
      DiscreteTransferFcn_tmp_ib[1] + BEML_EMU_B.CoreSubsys_m[ForEach_itr].
      VectorConcatenate1_n[1] * BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
      DiscreteTransferFcn_states_a[1];
    rtb_Switch2_ps[1] = DiscreteTransferFcn_tmp_j;

    /* Switch: '<S851>/Switch' incorporates:
     *  DiscreteTransferFcn: '<S849>/Discrete Transfer Fcn'
     *  RelationalOperator: '<S851>/UpperRelop'
     */
    if (DiscreteTransferFcn_tmp_j < rtb_DataTypeConversion_d) {
      rtb_Switch2_ps[1] = rtb_DataTypeConversion_d;
    }

    /* Switch: '<S851>/Switch2' incorporates:
     *  DiscreteTransferFcn: '<S849>/Discrete Transfer Fcn'
     *  RelationalOperator: '<S851>/LowerRelop1'
     */
    if (DiscreteTransferFcn_tmp_j > diff) {
      rtb_Switch2_ps[1] = diff;
    }

    /* DiscreteTransferFcn: '<S849>/Discrete Transfer Fcn' */
    BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_tmp_ib[2] =
      rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Dynamics.AngularAcceleration
      [2] - BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_k[1] *
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_a[2];
    DiscreteTransferFcn_tmp_j = BEML_EMU_B.CoreSubsys_m[ForEach_itr].
      VectorConcatenate1_n[0] * BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
      DiscreteTransferFcn_tmp_ib[2] + BEML_EMU_B.CoreSubsys_m[ForEach_itr].
      VectorConcatenate1_n[1] * BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
      DiscreteTransferFcn_states_a[2];
    rtb_Switch2_ps[2] = DiscreteTransferFcn_tmp_j;

    /* Switch: '<S851>/Switch' incorporates:
     *  DiscreteTransferFcn: '<S849>/Discrete Transfer Fcn'
     *  RelationalOperator: '<S851>/UpperRelop'
     */
    if (DiscreteTransferFcn_tmp_j < rtb_DataTypeConversion_d) {
      rtb_Switch2_ps[2] = rtb_DataTypeConversion_d;
    }

    /* Switch: '<S851>/Switch2' incorporates:
     *  DiscreteTransferFcn: '<S849>/Discrete Transfer Fcn'
     *  RelationalOperator: '<S851>/LowerRelop1'
     */
    if (DiscreteTransferFcn_tmp_j > diff) {
      rtb_Switch2_ps[2] = diff;
    }

    /* PermuteDimensions: '<S795>/Permute Dimensions' */
    i = 0;
    uElOffset1 = 0;
    for (ntIdx1 = 0; ntIdx1 < 3; ntIdx1++) {
      rtb_PermuteDimensions[i] =
        rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Dynamics.Transform.OrientationDCM
        [uElOffset1];
      i++;
      uElOffset0 = uElOffset1 + 3;
      rtb_PermuteDimensions[i] =
        rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Dynamics.Transform.OrientationDCM
        [uElOffset0];
      i++;
      uElOffset0 += 3;
      rtb_PermuteDimensions[i] =
        rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Dynamics.Transform.OrientationDCM
        [uElOffset0];
      i++;
      uElOffset1++;
    }

    /* End of PermuteDimensions: '<S795>/Permute Dimensions' */

    /* Switch: '<S770>/Switch1' */
    if (rtb_DataTypeConversion1_gv > BEML_EMU_P.CoreSubsys_m.Switch1_Threshold)
    {
      /* ForEachSliceAssignment generated from: '<S768>/MotionBaseOutputs' incorporates:
       *  BusAssignment: '<S771>/MotionBaseOut'
       *  Constant: '<S774>/GravitationalAcceleration'
       *  Constant: '<S775>/ManualOrientationAdjustment'
       *  Product: '<S796>/Product'
       */
      rtb_ImpAsg_InsertedFor_MotionBaseOutputs_at_inport_0[ForEach_itr].
        ApplyMotion = rtb_DataTypeConversion1_gv;
      for (i = 0; i < 3; i++) {
        rtb_ImpAsg_InsertedFor_MotionBaseOutputs_at_inport_0[ForEach_itr].
          ManualPosition[i] = BEML_EMU_B.CoreSubsys_m[ForEach_itr].
          ManualPosition[i];
        rtb_ImpAsg_InsertedFor_MotionBaseOutputs_at_inport_0[ForEach_itr].
          LinearVelocity[i] = rtb_Switch2_o[i];
        rtb_ImpAsg_InsertedFor_MotionBaseOutputs_at_inport_0[ForEach_itr].
          LinearAcceleration[i] = rtb_Switch2_m[i];
        rtb_ImpAsg_InsertedFor_MotionBaseOutputs_at_inport_0[ForEach_itr].
          ManualOrientation[i] =
          BEML_EMU_P.CoreSubsys_m.ManualOrientationAdjustment_Value[i];
        rtb_ImpAsg_InsertedFor_MotionBaseOutputs_at_inport_0[ForEach_itr].
          AngularVelocity[i] = rtb_DeadZone[i];
        rtb_ImpAsg_InsertedFor_MotionBaseOutputs_at_inport_0[ForEach_itr].
          AngularAcceleration[i] = rtb_Switch2_ps[i];
        rtb_ImpAsg_InsertedFor_MotionBaseOutputs_at_inport_0[ForEach_itr].
          GravitationalAcceleration[i] = 0.0;
        rtb_ImpAsg_InsertedFor_MotionBaseOutputs_at_inport_0[ForEach_itr].
          GravitationalAcceleration[i] += rtb_PermuteDimensions[i] *
          BEML_EMU_P.CoreSubsys_m.GravitationalAcceleration_Value[0];
        rtb_ImpAsg_InsertedFor_MotionBaseOutputs_at_inport_0[ForEach_itr].
          GravitationalAcceleration[i] += rtb_PermuteDimensions[i + 3] *
          BEML_EMU_P.CoreSubsys_m.GravitationalAcceleration_Value[1];
        rtb_ImpAsg_InsertedFor_MotionBaseOutputs_at_inport_0[ForEach_itr].
          GravitationalAcceleration[i] += rtb_PermuteDimensions[i + 6] *
          BEML_EMU_P.CoreSubsys_m.GravitationalAcceleration_Value[2];
      }

      for (i = 0; i < 9; i++) {
        rtb_ImpAsg_InsertedFor_MotionBaseOutputs_at_inport_0[ForEach_itr].
          OrientationDCM[i] =
          rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Dynamics.Transform.OrientationDCM
          [i];
      }
    } else {
      /* ForEachSliceAssignment generated from: '<S768>/MotionBaseOutputs' incorporates:
       *  BusAssignment: '<S772>/SafeMotionBaseOut'
       *  Constant: '<S772>/InitMotionBaseOut1'
       *  Constant: '<S772>/SafeGravitationalAcceleration'
       *  Constant: '<S772>/SafeRotationMatrix'
       */
      rtb_ImpAsg_InsertedFor_MotionBaseOutputs_at_inport_0[ForEach_itr].
        ApplyMotion =
        BEML_EMU_P.CoreSubsys_m.InitMotionBaseOut1_Value.ApplyMotion;
      rtb_ImpAsg_InsertedFor_MotionBaseOutputs_at_inport_0[ForEach_itr].
        ManualPosition[0] =
        BEML_EMU_P.CoreSubsys_m.InitMotionBaseOut1_Value.ManualPosition[0];
      rtb_ImpAsg_InsertedFor_MotionBaseOutputs_at_inport_0[ForEach_itr].
        LinearVelocity[0] =
        BEML_EMU_P.CoreSubsys_m.InitMotionBaseOut1_Value.LinearVelocity[0];
      rtb_ImpAsg_InsertedFor_MotionBaseOutputs_at_inport_0[ForEach_itr].
        LinearAcceleration[0] =
        BEML_EMU_P.CoreSubsys_m.InitMotionBaseOut1_Value.LinearAcceleration[0];
      rtb_ImpAsg_InsertedFor_MotionBaseOutputs_at_inport_0[ForEach_itr].
        ManualOrientation[0] =
        BEML_EMU_P.CoreSubsys_m.InitMotionBaseOut1_Value.ManualOrientation[0];
      rtb_ImpAsg_InsertedFor_MotionBaseOutputs_at_inport_0[ForEach_itr].
        AngularVelocity[0] =
        BEML_EMU_P.CoreSubsys_m.InitMotionBaseOut1_Value.AngularVelocity[0];
      rtb_ImpAsg_InsertedFor_MotionBaseOutputs_at_inport_0[ForEach_itr].
        AngularAcceleration[0] =
        BEML_EMU_P.CoreSubsys_m.InitMotionBaseOut1_Value.AngularAcceleration[0];
      rtb_ImpAsg_InsertedFor_MotionBaseOutputs_at_inport_0[ForEach_itr].
        GravitationalAcceleration[0] =
        BEML_EMU_P.CoreSubsys_m.SafeGravitationalAcceleration_Value[0];
      rtb_ImpAsg_InsertedFor_MotionBaseOutputs_at_inport_0[ForEach_itr].
        ManualPosition[1] =
        BEML_EMU_P.CoreSubsys_m.InitMotionBaseOut1_Value.ManualPosition[1];
      rtb_ImpAsg_InsertedFor_MotionBaseOutputs_at_inport_0[ForEach_itr].
        LinearVelocity[1] =
        BEML_EMU_P.CoreSubsys_m.InitMotionBaseOut1_Value.LinearVelocity[1];
      rtb_ImpAsg_InsertedFor_MotionBaseOutputs_at_inport_0[ForEach_itr].
        LinearAcceleration[1] =
        BEML_EMU_P.CoreSubsys_m.InitMotionBaseOut1_Value.LinearAcceleration[1];
      rtb_ImpAsg_InsertedFor_MotionBaseOutputs_at_inport_0[ForEach_itr].
        ManualOrientation[1] =
        BEML_EMU_P.CoreSubsys_m.InitMotionBaseOut1_Value.ManualOrientation[1];
      rtb_ImpAsg_InsertedFor_MotionBaseOutputs_at_inport_0[ForEach_itr].
        AngularVelocity[1] =
        BEML_EMU_P.CoreSubsys_m.InitMotionBaseOut1_Value.AngularVelocity[1];
      rtb_ImpAsg_InsertedFor_MotionBaseOutputs_at_inport_0[ForEach_itr].
        AngularAcceleration[1] =
        BEML_EMU_P.CoreSubsys_m.InitMotionBaseOut1_Value.AngularAcceleration[1];
      rtb_ImpAsg_InsertedFor_MotionBaseOutputs_at_inport_0[ForEach_itr].
        GravitationalAcceleration[1] =
        BEML_EMU_P.CoreSubsys_m.SafeGravitationalAcceleration_Value[1];
      rtb_ImpAsg_InsertedFor_MotionBaseOutputs_at_inport_0[ForEach_itr].
        ManualPosition[2] =
        BEML_EMU_P.CoreSubsys_m.InitMotionBaseOut1_Value.ManualPosition[2];
      rtb_ImpAsg_InsertedFor_MotionBaseOutputs_at_inport_0[ForEach_itr].
        LinearVelocity[2] =
        BEML_EMU_P.CoreSubsys_m.InitMotionBaseOut1_Value.LinearVelocity[2];
      rtb_ImpAsg_InsertedFor_MotionBaseOutputs_at_inport_0[ForEach_itr].
        LinearAcceleration[2] =
        BEML_EMU_P.CoreSubsys_m.InitMotionBaseOut1_Value.LinearAcceleration[2];
      rtb_ImpAsg_InsertedFor_MotionBaseOutputs_at_inport_0[ForEach_itr].
        ManualOrientation[2] =
        BEML_EMU_P.CoreSubsys_m.InitMotionBaseOut1_Value.ManualOrientation[2];
      rtb_ImpAsg_InsertedFor_MotionBaseOutputs_at_inport_0[ForEach_itr].
        AngularVelocity[2] =
        BEML_EMU_P.CoreSubsys_m.InitMotionBaseOut1_Value.AngularVelocity[2];
      rtb_ImpAsg_InsertedFor_MotionBaseOutputs_at_inport_0[ForEach_itr].
        AngularAcceleration[2] =
        BEML_EMU_P.CoreSubsys_m.InitMotionBaseOut1_Value.AngularAcceleration[2];
      rtb_ImpAsg_InsertedFor_MotionBaseOutputs_at_inport_0[ForEach_itr].
        GravitationalAcceleration[2] =
        BEML_EMU_P.CoreSubsys_m.SafeGravitationalAcceleration_Value[2];
      for (i = 0; i < 9; i++) {
        rtb_ImpAsg_InsertedFor_MotionBaseOutputs_at_inport_0[ForEach_itr].
          OrientationDCM[i] = BEML_EMU_P.CoreSubsys_m.SafeRotationMatrix_Value[i];
      }
    }

    /* End of Switch: '<S770>/Switch1' */

    /* Update for DiscreteIntegrator: '<S846>/Discrete-Time Integrator' incorporates:
     *  Constant: '<S846>/RampRate'
     */
    BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE +=
      BEML_EMU_P.CoreSubsys_m.DiscreteTimeIntegrator_gainval_j *
      BEML_EMU_P.CoreSubsys_m.RampRate_Value;
    if (BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE >=
        BEML_EMU_P.CoreSubsys_m.DiscreteTimeIntegrator_UpperSat_i) {
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE =
        BEML_EMU_P.CoreSubsys_m.DiscreteTimeIntegrator_UpperSat_i;
    } else {
      if (BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE <=
          BEML_EMU_P.CoreSubsys_m.DiscreteTimeIntegrator_LowerSat_c) {
        BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE =
          BEML_EMU_P.CoreSubsys_m.DiscreteTimeIntegrator_LowerSat_c;
      }
    }

    BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_PrevResetState =
      static_cast<int8_T>(rtb_LogicalOperator1);

    /* End of Update for DiscreteIntegrator: '<S846>/Discrete-Time Integrator' */

    /* Update for DiscreteTransferFcn: '<S863>/Discrete Transfer Fcn' */
    BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states[0] =
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_tmp[0];
    BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states[1] =
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_tmp[1];
    BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states[2] =
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_tmp[2];

    /* Update for UnitDelay: '<S783>/Delay Input1' */
    BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DelayInput1_DSTATE_l =
      rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Effects.LongitudinalJolt;

    /* Update for DiscreteIntegrator: '<S779>/Discrete-Time Integrator' incorporates:
     *  DataTypeConversion: '<S779>/Data Type Conversion'
     */
    BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE_g +=
      BEML_EMU_P.CoreSubsys_m.DiscreteTimeIntegrator_gainval_k *
      static_cast<real_T>(BEML_EMU_B.CoreSubsys_m[ForEach_itr].
                          JoltDuration_o.LogicalOperator1);
    BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
      DiscreteTimeIntegrator_PrevResetState_l = static_cast<int8_T>
      (BEML_EMU_B.CoreSubsys_m[ForEach_itr].JoltDuration_o.LogicalOperator1);

    /* Update for UnitDelay: '<S786>/Delay Input1' */
    BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DelayInput1_DSTATE_pk =
      rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Effects.LateralJolt;

    /* Update for DiscreteIntegrator: '<S780>/Discrete-Time Integrator' incorporates:
     *  DataTypeConversion: '<S780>/Data Type Conversion'
     */
    BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE_m +=
      BEML_EMU_P.CoreSubsys_m.DiscreteTimeIntegrator_gainval_m *
      static_cast<real_T>(BEML_EMU_B.CoreSubsys_m[ForEach_itr].
                          JoltDuration_n.LogicalOperator1);
    BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
      DiscreteTimeIntegrator_PrevResetState_p = static_cast<int8_T>
      (BEML_EMU_B.CoreSubsys_m[ForEach_itr].JoltDuration_n.LogicalOperator1);

    /* Update for UnitDelay: '<S789>/Delay Input1' */
    BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DelayInput1_DSTATE_o =
      rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Effects.VerticalJolt;

    /* Update for DiscreteIntegrator: '<S781>/Discrete-Time Integrator' incorporates:
     *  DataTypeConversion: '<S781>/Data Type Conversion'
     */
    BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE_d +=
      BEML_EMU_P.CoreSubsys_m.DiscreteTimeIntegrator_gainval_p3 *
      static_cast<real_T>(BEML_EMU_B.CoreSubsys_m[ForEach_itr].
                          JoltDuration_e.LogicalOperator1);
    BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
      DiscreteTimeIntegrator_PrevResetState_f = static_cast<int8_T>
      (BEML_EMU_B.CoreSubsys_m[ForEach_itr].JoltDuration_e.LogicalOperator1);

    /* Update for UnitDelay: '<S792>/Delay Input1' */
    BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DelayInput1_DSTATE_g =
      rtb_ImpSel_InsertedFor_MotionBaseInput_at_outport_0.Effects.VerticalJoltDown;

    /* Update for DiscreteIntegrator: '<S782>/Discrete-Time Integrator' incorporates:
     *  DataTypeConversion: '<S782>/Data Type Conversion'
     */
    BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE_h +=
      BEML_EMU_P.CoreSubsys_m.DiscreteTimeIntegrator_gainval_g *
      static_cast<real_T>(BEML_EMU_B.CoreSubsys_m[ForEach_itr].
                          JoltDuration.LogicalOperator1);
    BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
      DiscreteTimeIntegrator_PrevResetState_h = static_cast<int8_T>
      (BEML_EMU_B.CoreSubsys_m[ForEach_itr].JoltDuration.LogicalOperator1);

    /* Update for DiscreteTransferFcn: '<S859>/Discrete Transfer Fcn' */
    BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_b[0] =
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_tmp_p[0];
    BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_b[1] =
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_tmp_p[1];
    BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_b[2] =
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_tmp_p[2];

    /* Update for DiscreteTransferFcn: '<S853>/Discrete Transfer Fcn' */
    BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_c[0] =
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_tmp_i[0];
    BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_c[1] =
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_tmp_i[1];
    BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_c[2] =
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_tmp_i[2];

    /* Update for DiscreteTransferFcn: '<S849>/Discrete Transfer Fcn' */
    BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_a[0] =
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_tmp_ib[0];
    BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_a[1] =
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_tmp_ib[1];
    BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_a[2] =
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_tmp_ib[2];
  }

  /* End of Outputs for SubSystem: '<S753>/MotionBasePerVehicle' */

  /* Outport: '<Root>/MotionBaseControllerOutput' */
  memcpy(&BEML_EMU_Y.MotionBaseControllerOutput[0],
         &rtb_ImpAsg_InsertedFor_MotionBaseOutputs_at_inport_0[0], sizeof
         (BD_SimIntegration_Out_Vehicle_MotionBaseController) << 3U);
  if ((&BEML_EMU_M)->Timing.TaskCounters.TID[2] == 0) {
    /* Update for UnitDelay: '<Root>/Unit Delay' incorporates:
     *  Outport: '<Root>/ElectricalOutput'
     */
    memcpy(&BEML_EMU_DW.UnitDelay_DSTATE_i[0], &BEML_EMU_Y.ElectricalOutput[0],
           sizeof(BD_ElectricalSystem_Out_Vehicle) << 3U);

    /* Update for UnitDelay: '<Root>/Unit Delay1' incorporates:
     *  Outport: '<Root>/DoorsVehicleOut'
     */
    memcpy(&BEML_EMU_DW.UnitDelay1_DSTATE[0], &BEML_EMU_Y.DoorsVehicleOut[0],
           sizeof(BD_DoorSystem_Out_Vehicle) << 3U);

    /* Update for UnitDelay: '<Root>/Unit Delay3' incorporates:
     *  Outport: '<Root>/TCMSOutput'
     */
    memcpy(&BEML_EMU_DW.UnitDelay3_DSTATE[0], &BEML_EMU_Y.TCMSOutput[0], sizeof
           (BD_TCMSSystem_Out_Vehicle) << 3U);
  }

  if ((&BEML_EMU_M)->Timing.TaskCounters.TID[1] == 0) {
    /* Update for UnitDelay: '<Root>/Unit Delay2' incorporates:
     *  Outport: '<Root>/PneumaticsVehicleOut'
     */
    memcpy(&BEML_EMU_DW.UnitDelay2_DSTATE[0], &BEML_EMU_Y.PneumaticsVehicleOut[0],
           sizeof(BD_PneumaticsSystem_Out_Vehicle) << 3U);
  }

  /* Update for UnitDelay: '<S1>/Unit Delay' incorporates:
   *  Outport: '<Root>/DynamicsOutput'
   */
  memcpy(&BEML_EMU_DW.UnitDelay_DSTATE_d[0], &BEML_EMU_Y.DynamicsOutput[0],
         sizeof(BD_TrainDynamics_Out_Vehicle) << 3U);
  if ((&BEML_EMU_M)->Timing.TaskCounters.TID[2] == 0) {
    /* Update for UnitDelay: '<S1>/Unit Delay5' incorporates:
     *  Outport: '<Root>/ElectricalOutput'
     */
    memcpy(&BEML_EMU_DW.UnitDelay5_DSTATE[0], &BEML_EMU_Y.ElectricalOutput[0],
           sizeof(BD_ElectricalSystem_Out_Vehicle) << 3U);

    /* Update for UnitDelay: '<S1>/Unit Delay3' incorporates:
     *  Outport: '<Root>/DoorsVehicleOut'
     */
    memcpy(&BEML_EMU_DW.UnitDelay3_DSTATE_n[0], &BEML_EMU_Y.DoorsVehicleOut[0],
           sizeof(BD_DoorSystem_Out_Vehicle) << 3U);

    /* Update for UnitDelay: '<S1>/Unit Delay2' incorporates:
     *  Outport: '<Root>/PantographVehicleOut'
     */
    memcpy(&BEML_EMU_DW.UnitDelay2_DSTATE_d[0],
           &BEML_EMU_Y.PantographVehicleOut[0], sizeof
           (BD_PantographSystem_Out_Vehicle) << 3U);

    /* Update for UnitDelay: '<S1>/Unit Delay6' incorporates:
     *  Outport: '<Root>/TCMSOutput'
     */
    memcpy(&BEML_EMU_DW.UnitDelay6_DSTATE[0], &BEML_EMU_Y.TCMSOutput[0], sizeof
           (BD_TCMSSystem_Out_Vehicle) << 3U);
  }

  if ((&BEML_EMU_M)->Timing.TaskCounters.TID[1] == 0) {
    /* Update for UnitDelay: '<S1>/Unit Delay1' incorporates:
     *  Outport: '<Root>/PneumaticsVehicleOut'
     */
    memcpy(&BEML_EMU_DW.UnitDelay1_DSTATE_l[0],
           &BEML_EMU_Y.PneumaticsVehicleOut[0], sizeof
           (BD_PneumaticsSystem_Out_Vehicle) << 3U);

    /* Update for UnitDelay: '<S1>/Unit Delay4' incorporates:
     *  Outport: '<Root>/TractionVehicleOut'
     */
    memcpy(&BEML_EMU_DW.UnitDelay4_DSTATE[0], &BEML_EMU_Y.TractionVehicleOut[0],
           sizeof(BD_TractionSystem_Out_Vehicle) << 3U);

    /* Update for UnitDelay: '<S1>/Unit Delay7' incorporates:
     *  Outport: '<Root>/BrakesVehicleOut'
     */
    memcpy(&BEML_EMU_DW.UnitDelay7_DSTATE[0], &BEML_EMU_Y.BrakesVehicleOut[0],
           sizeof(BD_TrainBrakes_Out_Vehicle) << 3U);
  }

  /* Update absolute time for base rate */
  /* The "clockTick0" counts the number of times the code of this task has
   * been executed. The resolution of this integer timer is 0.001, which is the step size
   * of the task. Size of "clockTick0" ensures timer will not overflow during the
   * application lifespan selected.
   * Timer of this task consists of two 32 bit unsigned integers.
   * The two integers represent the low bits Timing.clockTick0 and the high bits
   * Timing.clockTickH0. When the low bit overflows to 0, the high bits increment.
   */
  (&BEML_EMU_M)->Timing.clockTick0++;
  if (!(&BEML_EMU_M)->Timing.clockTick0) {
    (&BEML_EMU_M)->Timing.clockTickH0++;
  }

  if ((&BEML_EMU_M)->Timing.TaskCounters.TID[1] == 0) {
    /* Update absolute timer for sample time: [0.01s, 0.0s] */
    /* The "clockTick1" counts the number of times the code of this task has
     * been executed. The resolution of this integer timer is 0.01, which is the step size
     * of the task. Size of "clockTick1" ensures timer will not overflow during the
     * application lifespan selected.
     * Timer of this task consists of two 32 bit unsigned integers.
     * The two integers represent the low bits Timing.clockTick1 and the high bits
     * Timing.clockTickH1. When the low bit overflows to 0, the high bits increment.
     */
    (&BEML_EMU_M)->Timing.clockTick1++;
    if (!(&BEML_EMU_M)->Timing.clockTick1) {
      (&BEML_EMU_M)->Timing.clockTickH1++;
    }
  }

  if ((&BEML_EMU_M)->Timing.TaskCounters.TID[2] == 0) {
    /* Update absolute timer for sample time: [0.05s, 0.0s] */
    /* The "clockTick2" counts the number of times the code of this task has
     * been executed. The resolution of this integer timer is 0.05, which is the step size
     * of the task. Size of "clockTick2" ensures timer will not overflow during the
     * application lifespan selected.
     * Timer of this task consists of two 32 bit unsigned integers.
     * The two integers represent the low bits Timing.clockTick2 and the high bits
     * Timing.clockTickH2. When the low bit overflows to 0, the high bits increment.
     */
    (&BEML_EMU_M)->Timing.clockTick2++;
    if (!(&BEML_EMU_M)->Timing.clockTick2) {
      (&BEML_EMU_M)->Timing.clockTickH2++;
    }
  }

  if ((&BEML_EMU_M)->Timing.TaskCounters.TID[4] == 0) {
    /* Update absolute timer for sample time: [0.5s, 0.0s] */
    /* The "clockTick4" counts the number of times the code of this task has
     * been executed. The resolution of this integer timer is 0.5, which is the step size
     * of the task. Size of "clockTick4" ensures timer will not overflow during the
     * application lifespan selected.
     * Timer of this task consists of two 32 bit unsigned integers.
     * The two integers represent the low bits Timing.clockTick4 and the high bits
     * Timing.clockTickH4. When the low bit overflows to 0, the high bits increment.
     */
    (&BEML_EMU_M)->Timing.clockTick4++;
    if (!(&BEML_EMU_M)->Timing.clockTick4) {
      (&BEML_EMU_M)->Timing.clockTickH4++;
    }
  }

  rate_scheduler((&BEML_EMU_M));
}

/* Model initialize function */
void BEML_EMUModelClass::initialize()
{
  /* Registration code */

  /* initialize non-finites */
  rt_InitInfAndNaN(sizeof(real_T));

  /* non-finite (run-time) assignments */
  BEML_EMU_P.CoreSubsys_m.Saturation_UpperSat = rtInf;
  BEML_EMU_P.CoreSubsys_m.Saturation_UpperSat_o = rtInf;
  BEML_EMU_P.CoreSubsys_m.Saturation_UpperSat_o0 = rtInf;
  BEML_EMU_P.CoreSubsys_m.Saturation_UpperSat_c = rtInf;
  BEML_EMU_P.CoreSubsys_m.Saturation_UpperSat_g = rtInf;
  BEML_EMU_P.CoreSubsys_m.Saturation_UpperSat_i = rtInf;
  BEML_EMU_P.CoreSubsys_m.Saturation_UpperSat_f = rtInf;
  BEML_EMU_P.CoreSubsys_m.Saturation_UpperSat_k = rtInf;
  BEML_EMU_P.CoreSubsys_m.Saturation_UpperSat_d = rtInf;
  BEML_EMU_P.CoreSubsys_m.Saturation_UpperSat_gu = rtInf;
  BEML_EMU_P.CoreSubsys_m.Saturation_UpperSat_p = rtInf;
  BEML_EMU_P.CoreSubsys_m.Saturation_UpperSat_fe = rtInf;
  BEML_EMU_P.CoreSubsys_m.Saturation_UpperSat_e = rtInf;
  BEML_EMU_P.CoreSubsys_m.Saturation_UpperSat_d3 = rtInf;
  BEML_EMU_P.CoreSubsys_m.Saturation_UpperSat_a = rtInf;
  BEML_EMU_P.CoreSubsys_m.Saturation_UpperSat_cl = rtInf;
  BEML_EMU_P.CoreSubsys_h.Min0_UpperSat = rtInf;

  {
    /* states (dwork) */
    (void) memset(static_cast<void *>(&BEML_EMU_DW), 0,
                  sizeof(DW_BEML_EMU_T));

    /* external inputs */
    {
      int32_T i;
      (void)memset(&BEML_EMU_U, 0, sizeof(ExtU_BEML_EMU_T));
      for (i = 0; i < 8; i++) {
        BEML_EMU_U.VehicleConfig[i] = BEML_EMU_rtZBD_SimIntegration_Cfg_Vehicle;
      }
    }

    /* external outputs */
    (void) memset(static_cast<void *>(&BEML_EMU_Y), 0,
                  sizeof(ExtY_BEML_EMU_T));

    /* Initialize DataMapInfo substructure containing ModelMap for C API */
    BEML_EMU_InitializeDataMapInfo((&BEML_EMU_M), &BEML_EMU_B, &BEML_EMU_P,
      &BEML_EMU_DW, self_CoreSubsys_pnaevvfpgh5z, self_CoreSubsys_pnaevvfpgh5,
      self_CoreSubsys_pnaevvfpg, self_CoreSubsys_pnaevvf, self_CoreSubsys_pnae,
      self_CoreSubsys_pna, self_CoreSubsys_p);
  }

  {
    static uint32_T *clockTickPtrs[5];
    static uint32_T *clockTickHPtrs[5];
    static uint32_T *taskCounterPtrs;
    (&BEML_EMU_M)->timingBridge.nTasks = 5;
    clockTickPtrs[0] = &((&BEML_EMU_M)->Timing.clockTick0);
    clockTickHPtrs[0] = &((&BEML_EMU_M)->Timing.clockTickH0);
    clockTickPtrs[1] = &((&BEML_EMU_M)->Timing.clockTick1);
    clockTickHPtrs[1] = &((&BEML_EMU_M)->Timing.clockTickH1);
    clockTickPtrs[2] = &((&BEML_EMU_M)->Timing.clockTick2);
    clockTickHPtrs[2] = &((&BEML_EMU_M)->Timing.clockTickH2);
    clockTickPtrs[3] = (NULL);
    clockTickHPtrs[3] = (NULL);
    clockTickPtrs[4] = &((&BEML_EMU_M)->Timing.clockTick4);
    clockTickHPtrs[4] = &((&BEML_EMU_M)->Timing.clockTickH4);
    (&BEML_EMU_M)->timingBridge.clockTick = clockTickPtrs;
    (&BEML_EMU_M)->timingBridge.clockTickH = clockTickHPtrs;
    taskCounterPtrs = &((&BEML_EMU_M)->Timing.TaskCounters.TID[0]);
    (&BEML_EMU_M)->timingBridge.taskCounter = taskCounterPtrs;
  }

  /* Model Initialize function for ModelReference Block: '<S5>/TrainBrakes' */
  TrainBrakes_initialize(rtmGetErrorStatusPointer((&BEML_EMU_M)),
    &(BEML_EMU_DW.TrainBrakes_InstanceData.rtm),
    &(BEML_EMU_DW.TrainBrakes_InstanceData.rtb),
    &(BEML_EMU_DW.TrainBrakes_InstanceData.rtdw), &((&BEML_EMU_M)
    ->DataMapInfo.mmi), "BEML_EMU/BEML_EMU/BrakesInterface/TrainBrakes", 0, -1);

  /* Model Initialize function for ModelReference Block: '<S7>/Model' */
  CouplingSystem_initialize(rtmGetErrorStatusPointer((&BEML_EMU_M)),
    &(&BEML_EMU_M)->timingBridge, 2, &(BEML_EMU_DW.Model_InstanceData.rtm),
    &(BEML_EMU_DW.Model_InstanceData.rtb), &(BEML_EMU_DW.Model_InstanceData.rtdw),
    &((&BEML_EMU_M)->DataMapInfo.mmi),
    "BEML_EMU/BEML_EMU/CouplingInterface/Model", 1, -1);

  /* Model Initialize function for ModelReference Block: '<S8>/DoorsSystem' */
  DoorSystem_initialize(rtmGetErrorStatusPointer((&BEML_EMU_M)),
                        &(BEML_EMU_DW.DoorsSystem_InstanceData.rtm),
                        &(BEML_EMU_DW.DoorsSystem_InstanceData.rtb),
                        &(BEML_EMU_DW.DoorsSystem_InstanceData.rtdw),
                        &((&BEML_EMU_M)->DataMapInfo.mmi),
                        "BEML_EMU/BEML_EMU/DoorsInterface/DoorsSystem", 2, -1);

  /* Model Initialize function for ModelReference Block: '<S9>/TrainDynamics' */
  TrainDynamics_initialize(rtmGetErrorStatusPointer((&BEML_EMU_M)),
    &(&BEML_EMU_M)->timingBridge, 0, 3,
    &(BEML_EMU_DW.TrainDynamics_InstanceData.rtm),
    &(BEML_EMU_DW.TrainDynamics_InstanceData.rtb),
    &(BEML_EMU_DW.TrainDynamics_InstanceData.rtdw), &((&BEML_EMU_M)
    ->DataMapInfo.mmi), "BEML_EMU/BEML_EMU/DynamicsInterface/TrainDynamics", 3,
    -1);

  /* Model Initialize function for ModelReference Block: '<S10>/ElectricalSystem' */
  ElectricalSystem_initialize(rtmGetErrorStatusPointer((&BEML_EMU_M)),
    &(&BEML_EMU_M)->timingBridge, 2,
    &(BEML_EMU_DW.ElectricalSystem_InstanceData.rtm),
    &(BEML_EMU_DW.ElectricalSystem_InstanceData.rtb),
    &(BEML_EMU_DW.ElectricalSystem_InstanceData.rtdw), &((&BEML_EMU_M)
    ->DataMapInfo.mmi), "BEML_EMU/BEML_EMU/ElectricalInterface/ElectricalSystem",
    4, -1);

  /* Model Initialize function for ModelReference Block: '<S11>/PantographSystem' */
  PantographSystem_initialize(rtmGetErrorStatusPointer((&BEML_EMU_M)),
    &(BEML_EMU_DW.PantographSystem_InstanceData.rtm),
    &(BEML_EMU_DW.PantographSystem_InstanceData.rtb),
    &(BEML_EMU_DW.PantographSystem_InstanceData.rtdw), &((&BEML_EMU_M)
    ->DataMapInfo.mmi), "BEML_EMU/BEML_EMU/PantographInterface/PantographSystem",
    5, -1);

  /* Model Initialize function for ModelReference Block: '<S12>/PneumaticsSystem' */
  PneumaticsSystem_initialize(rtmGetErrorStatusPointer((&BEML_EMU_M)),
    &(BEML_EMU_DW.PneumaticsSystem_InstanceData.rtm),
    &(BEML_EMU_DW.PneumaticsSystem_InstanceData.rtb),
    &(BEML_EMU_DW.PneumaticsSystem_InstanceData.rtdw), &((&BEML_EMU_M)
    ->DataMapInfo.mmi), "BEML_EMU/BEML_EMU/PneumaticsInterface/PneumaticsSystem",
    6, -1);

  /* Model Initialize function for ModelReference Block: '<S13>/TCMSSystem' */
  TCMSSystem_initialize(rtmGetErrorStatusPointer((&BEML_EMU_M)),
                        &(BEML_EMU_DW.TCMSSystem_InstanceData.rtm),
                        &(BEML_EMU_DW.TCMSSystem_InstanceData.rtb),
                        &(BEML_EMU_DW.TCMSSystem_InstanceData.rtdw),
                        &((&BEML_EMU_M)->DataMapInfo.mmi),
                        "BEML_EMU/BEML_EMU/TCMSInterface/TCMSSystem", 7, -1);

  /* Model Initialize function for ModelReference Block: '<S14>/TractionSystem' */
  TractionSystem_initialize(rtmGetErrorStatusPointer((&BEML_EMU_M)),
    &(&BEML_EMU_M)->timingBridge, 1,
    &(BEML_EMU_DW.TractionSystem_InstanceData.rtm),
    &(BEML_EMU_DW.TractionSystem_InstanceData.rtb),
    &(BEML_EMU_DW.TractionSystem_InstanceData.rtdw), &((&BEML_EMU_M)
    ->DataMapInfo.mmi), "BEML_EMU/BEML_EMU/TractionInterface/TractionSystem", 8,
    -1);

  /* Model Initialize function for ModelReference Block: '<S401>/IOControlsModel' */
  IOControls_initialize(rtmGetErrorStatusPointer((&BEML_EMU_M)),
                        &(BEML_EMU_DW.IOControlsModel_InstanceData.rtm),
                        &(BEML_EMU_DW.IOControlsModel_InstanceData.rtb),
                        &(BEML_EMU_DW.IOControlsModel_InstanceData.rtdw),
                        &((&BEML_EMU_M)->DataMapInfo.mmi),
                        "BEML_EMU/InputsInterface/IOControlsInterface/IOControlsModel",
                        9, -1);

  {
    /* local scratch DWork variables */
    int32_T ForEach_itr;
    int32_T ForEach_itr_k;
    int32_T ForEach_itr_a;
    int32_T ForEach_itr_h;
    int32_T ForEach_itr_m;
    int32_T ForEach_itr_oc;
    int32_T ForEach_itr_ae;
    int32_T ForEach_itr_as;
    int32_T ForEach_itr_jg;
    int32_T ForEach_itr_jn;
    int32_T ForEach_itr_hg;
    int32_T ForEach_itr_jt;
    int32_T ForEach_itr_kt;
    int32_T ForEach_itr_mu;
    int32_T ForEach_itr_jw;

    /* Start for Atomic SubSystem: '<Root>/InputsInterface' */
    /* Start for Iterator SubSystem: '<S400>/Subsystem' */
    for (ForEach_itr_ae = 0; ForEach_itr_ae < 8; ForEach_itr_ae++) {
      self_CoreSubsys_p[ForEach_itr_ae].blockIO.OR = false;
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DelayInput1_DSTATE = 0.0;
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DelayInput1_DSTATE_i = 0.0;
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DelayInput1_DSTATE_iw = 0.0;
      self_CoreSubsys_p[ForEach_itr_ae].blockIO.AND = false;
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DelayInput1_DSTATE_b = 0.0;
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DelayInput1_DSTATE_l = 0.0;
      self_CoreSubsys_p[ForEach_itr_ae].blockIO.FixPtRelationalOperator = false;
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE =
        0.0;
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_p =
        0.0;
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_o =
        0.0;
      self_CoreSubsys_p[ForEach_itr_ae].blockIO.DataTypeConversion6 = 0.0;
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_j =
        0.0;
      self_CoreSubsys_p[ForEach_itr_ae].blockIO.DataTypeConversion8 = 0.0;
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_g =
        0.0;
      self_CoreSubsys_p[ForEach_itr_ae].blockIO.DataTypeConversion10 = 0.0;
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_go =
        0.0;
      self_CoreSubsys_p[ForEach_itr_ae].blockIO.DataTypeConversion11 = 0.0;
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_d =
        0.0;
      self_CoreSubsys_p[ForEach_itr_ae].blockIO.DataTypeConversion13 = 0.0;
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_i =
        0.0;
      self_CoreSubsys_p[ForEach_itr_ae].blockIO.DataTypeConversion15 = 0.0;
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_dm =
        0.0;
      self_CoreSubsys_p[ForEach_itr_ae].blockIO.DataTypeConversion17 = 0.0;
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_b =
        0.0;
      self_CoreSubsys_p[ForEach_itr_ae].blockIO.DataTypeConversion19 = 0.0;
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_l =
        0.0;
      self_CoreSubsys_p[ForEach_itr_ae].blockIO.DataTypeConversion21 = 0.0;
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_k =
        0.0;
      self_CoreSubsys_p[ForEach_itr_ae].blockIO.DataTypeConversion23 = 0.0;
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_h =
        0.0;
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_ks =
        0.0;
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_ls =
        0.0;
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_f =
        0.0;
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_ik =
        0.0;
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_iq =
        0.0;
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_oh =
        0.0;
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_e =
        0.0;
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_c =
        0.0;
      self_CoreSubsys_p[ForEach_itr_ae].blockIO.DataTypeConversion41 = 0.0;
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_pp =
        0.0;
      self_CoreSubsys_p[ForEach_itr_ae].blockIO.APSICBInternalRequest = false;
      self_CoreSubsys_p[ForEach_itr_ae].blockIO.FDSCBInternalRequest = false;
      self_CoreSubsys_p[ForEach_itr_ae].blockIO.SAC1CBInternalRequest = false;
      self_CoreSubsys_p[ForEach_itr_ae].blockIO.SAC2CBInternalRequest = false;

      /* Start for Chart: '<S427>/IRQRequestStateMachine' */
      BEML_EMU_IRQRequestStateMachine_Start(&self_CoreSubsys_p[ForEach_itr_ae].
        blockIO.sf_IRQRequestStateMachine_in);

      /* Start for Chart: '<S428>/IRQRequestStateMachine' */
      BEML_EMU_IRQRequestStateMachine_Start(&self_CoreSubsys_p[ForEach_itr_ae].
        blockIO.sf_IRQRequestStateMachine_fm);

      /* Start for Chart: '<S439>/IRQRequestStateMachine' */
      BEML_EMU_IRQRequestStateMachine_Start(&self_CoreSubsys_p[ForEach_itr_ae].
        blockIO.sf_IRQRequestStateMachine_h);

      /* Start for Chart: '<S442>/IRQRequestStateMachine' */
      BEML_EMU_IRQRequestStateMachine_Start(&self_CoreSubsys_p[ForEach_itr_ae].
        blockIO.sf_IRQRequestStateMachine_b);

      /* Start for Chart: '<S443>/IRQRequestStateMachine' */
      BEML_EMU_IRQRequestStateMachine_Start(&self_CoreSubsys_p[ForEach_itr_ae].
        blockIO.sf_IRQRequestStateMachine_o);

      /* Start for Chart: '<S444>/IRQRequestStateMachine' */
      BEML_EMU_IRQRequestStateMachine_Start(&self_CoreSubsys_p[ForEach_itr_ae].
        blockIO.sf_IRQRequestStateMachine_mb);

      /* Start for Chart: '<S445>/IRQRequestStateMachine' */
      BEML_EMU_IRQRequestStateMachine_Start(&self_CoreSubsys_p[ForEach_itr_ae].
        blockIO.sf_IRQRequestStateMachine_m);

      /* Start for Chart: '<S446>/IRQRequestStateMachine' */
      BEML_EMU_IRQRequestStateMachine_Start(&self_CoreSubsys_p[ForEach_itr_ae].
        blockIO.sf_IRQRequestStateMachine_l);

      /* Start for Chart: '<S447>/IRQRequestStateMachine' */
      BEML_EMU_IRQRequestStateMachine_Start(&self_CoreSubsys_p[ForEach_itr_ae].
        blockIO.sf_IRQRequestStateMachine_e);

      /* Start for Chart: '<S448>/IRQRequestStateMachine' */
      BEML_EMU_IRQRequestStateMachine_Start(&self_CoreSubsys_p[ForEach_itr_ae].
        blockIO.sf_IRQRequestStateMachine);

      /* Start for Chart: '<S429>/IRQRequestStateMachine' */
      BEML_EMU_IRQRequestStateMachine_Start(&self_CoreSubsys_p[ForEach_itr_ae].
        blockIO.sf_IRQRequestStateMachine_a);

      /* Start for Chart: '<S430>/IRQRequestStateMachine' */
      BEML_EMU_IRQRequestStateMachine_Start(&self_CoreSubsys_p[ForEach_itr_ae].
        blockIO.sf_IRQRequestStateMachine_d);

      /* Start for Chart: '<S431>/IRQRequestStateMachine' */
      BEML_EMU_IRQRequestStateMachine_Start(&self_CoreSubsys_p[ForEach_itr_ae].
        blockIO.sf_IRQRequestStateMachine_f);

      /* Start for Chart: '<S432>/IRQRequestStateMachine' */
      BEML_EMU_IRQRequestStateMachine_Start(&self_CoreSubsys_p[ForEach_itr_ae].
        blockIO.sf_IRQRequestStateMachine_hr);

      /* Start for Chart: '<S433>/IRQRequestStateMachine' */
      BEML_EMU_IRQRequestStateMachine_Start(&self_CoreSubsys_p[ForEach_itr_ae].
        blockIO.sf_IRQRequestStateMachine_e5);

      /* Start for Chart: '<S434>/IRQRequestStateMachine' */
      BEML_EMU_IRQRequestStateMachine_Start(&self_CoreSubsys_p[ForEach_itr_ae].
        blockIO.sf_IRQRequestStateMachine_e2);

      /* Start for Chart: '<S435>/IRQRequestStateMachine' */
      BEML_EMU_IRQRequestStateMachine_Start(&self_CoreSubsys_p[ForEach_itr_ae].
        blockIO.sf_IRQRequestStateMachine_i);

      /* Start for Chart: '<S436>/IRQRequestStateMachine' */
      BEML_EMU_IRQRequestStateMachine_Start(&self_CoreSubsys_p[ForEach_itr_ae].
        blockIO.sf_IRQRequestStateMachine_h1);

      /* Start for Chart: '<S437>/IRQRequestStateMachine' */
      BEML_EMU_IRQRequestStateMachine_Start(&self_CoreSubsys_p[ForEach_itr_ae].
        blockIO.sf_IRQRequestStateMachine_c);

      /* Start for Chart: '<S438>/IRQRequestStateMachine' */
      BEML_EMU_IRQRequestStateMachine_Start(&self_CoreSubsys_p[ForEach_itr_ae].
        blockIO.sf_IRQRequestStateMachine_j);

      /* Start for Chart: '<S440>/IRQRequestStateMachine' */
      BEML_EMU_IRQRequestStateMachine_Start(&self_CoreSubsys_p[ForEach_itr_ae].
        blockIO.sf_IRQRequestStateMachine_p);

      /* Start for Chart: '<S441>/IRQRequestStateMachine' */
      BEML_EMU_IRQRequestStateMachine_Start(&self_CoreSubsys_p[ForEach_itr_ae].
        blockIO.sf_IRQRequestStateMachine_ma);

      /* Start for RateTransition: '<S409>/Rate Transition1' */
      self_CoreSubsys_p[ForEach_itr_ae].blockIO.APSICBInternalRequest =
        BEML_EMU_P.CoreSubsys_p.RateTransition1_InitialCondition;

      /* Start for RateTransition: '<S409>/Rate Transition2' */
      self_CoreSubsys_p[ForEach_itr_ae].blockIO.FDSCBInternalRequest =
        BEML_EMU_P.CoreSubsys_p.RateTransition2_InitialCondition;

      /* Start for RateTransition: '<S409>/Rate Transition3' */
      self_CoreSubsys_p[ForEach_itr_ae].blockIO.SAC1CBInternalRequest =
        BEML_EMU_P.CoreSubsys_p.RateTransition3_InitialCondition;

      /* Start for RateTransition: '<S409>/Rate Transition4' */
      self_CoreSubsys_p[ForEach_itr_ae].blockIO.SAC2CBInternalRequest =
        BEML_EMU_P.CoreSubsys_p.RateTransition4_InitialCondition;

      /* Start for Chart: '<S423>/Chart' */
      BEML_EMU_Chart_Start(&self_CoreSubsys_p[ForEach_itr_ae].blockIO.sf_Chart_f);

      /* Start for Enabled SubSystem: '<S423>/ControlStateRequest' */
      BEML_EMU_ControlStateRequest_Start(&self_CoreSubsys_p[ForEach_itr_ae].
        blockIO.ControlStateRequest_a, &self_CoreSubsys_p[ForEach_itr_ae].
        dwork.ControlStateRequest_a);

      /* End of Start for SubSystem: '<S423>/ControlStateRequest' */

      /* Start for Chart: '<S424>/Chart' */
      BEML_EMU_Chart_Start(&self_CoreSubsys_p[ForEach_itr_ae].blockIO.sf_Chart_k);

      /* Start for Enabled SubSystem: '<S424>/ControlStateRequest' */
      BEML_EMU_ControlStateRequest_Start(&self_CoreSubsys_p[ForEach_itr_ae].
        blockIO.ControlStateRequest_n, &self_CoreSubsys_p[ForEach_itr_ae].
        dwork.ControlStateRequest_n);

      /* End of Start for SubSystem: '<S424>/ControlStateRequest' */

      /* Start for Chart: '<S425>/Chart' */
      BEML_EMU_Chart_Start(&self_CoreSubsys_p[ForEach_itr_ae].blockIO.sf_Chart_e);

      /* Start for Enabled SubSystem: '<S425>/ControlStateRequest' */
      BEML_EMU_ControlStateRequest_Start(&self_CoreSubsys_p[ForEach_itr_ae].
        blockIO.ControlStateRequest_i, &self_CoreSubsys_p[ForEach_itr_ae].
        dwork.ControlStateRequest_i);

      /* End of Start for SubSystem: '<S425>/ControlStateRequest' */

      /* Start for Chart: '<S426>/Chart' */
      BEML_EMU_Chart_Start(&self_CoreSubsys_p[ForEach_itr_ae].blockIO.sf_Chart);

      /* Start for Enabled SubSystem: '<S426>/ControlStateRequest' */
      BEML_EMU_ControlStateRequest_Start(&self_CoreSubsys_p[ForEach_itr_ae].
        blockIO.ControlStateRequest, &self_CoreSubsys_p[ForEach_itr_ae].
        dwork.ControlStateRequest);

      /* End of Start for SubSystem: '<S426>/ControlStateRequest' */
    }

    /* End of Start for SubSystem: '<S400>/Subsystem' */
    /* End of Start for SubSystem: '<Root>/InputsInterface' */
    /* Start for Atomic SubSystem: '<Root>/InputsInterface' */
    /* Start for ModelReference: '<S401>/IOControlsModel' incorporates:
     *  Outport: '<Root>/IOControlsOutput'
     */
    IOControls_Start(&(BEML_EMU_DW.IOControlsModel_InstanceData.rtb),
                     &(BEML_EMU_DW.IOControlsModel_InstanceData.rtdw));

    /* End of Start for SubSystem: '<Root>/InputsInterface' */
    /* Start for Atomic SubSystem: '<S1>/CouplingInterface' */
    /* Start for ModelReference: '<S7>/Model' incorporates:
     *  Outport: '<Root>/CouplingOutput'
     */
    CouplingSystem_Start(&(BEML_EMU_DW.Model_InstanceData.rtb),
                         &(BEML_EMU_DW.Model_InstanceData.rtdw));

    /* End of Start for SubSystem: '<S1>/CouplingInterface' */

    /* Start for Atomic SubSystem: '<S6>/CBTCInterfacingUnit' */
    /* Start for Iterator SubSystem: '<S20>/CBTCModel' */
    for (ForEach_itr_mu = 0; ForEach_itr_mu < 8; ForEach_itr_mu++) {
      BEML_EMU_DW.CoreSubsys_h[ForEach_itr_mu].UnitDelay2_DSTATE = 0.0;
      BEML_EMU_DW.CoreSubsys_h[ForEach_itr_mu].UnitDelay1_DSTATE = 0.0;
      BEML_EMU_DW.CoreSubsys_h[ForEach_itr_mu].UnitDelay_DSTATE = 0.0;

      /* Start for Enabled SubSystem: '<S21>/ATO' */
      BEML_EMU_B.CoreSubsys_h[ForEach_itr_mu].ATOBrake = false;
      BEML_EMU_B.CoreSubsys_h[ForEach_itr_mu].ATOTraction = false;
      BEML_EMU_B.CoreSubsys_h[ForEach_itr_mu].ATOTBDemand = 0.0;

      /* Start for If: '<S23>/If' */
      BEML_EMU_DW.CoreSubsys_h[ForEach_itr_mu].If_ActiveSubsystem = -1;

      /* Start for IfAction SubSystem: '<S23>/ATO Braking Demand' */
      BEML_EMU_DW.CoreSubsys_h[ForEach_itr_mu].UD_DSTATE_k = 0.0;
      BEML_EMU_DW.CoreSubsys_h[ForEach_itr_mu].Integrator_DSTATE_f = 0.0;

      /* End of Start for SubSystem: '<S23>/ATO Braking Demand' */

      /* Start for IfAction SubSystem: '<S23>/ATO Traction Demand' */
      BEML_EMU_DW.CoreSubsys_h[ForEach_itr_mu].UD_DSTATE = 0.0;
      BEML_EMU_DW.CoreSubsys_h[ForEach_itr_mu].Integrator_DSTATE = 0.0;

      /* End of Start for SubSystem: '<S23>/ATO Traction Demand' */
      /* End of Start for SubSystem: '<S21>/ATO' */
    }

    /* End of Start for SubSystem: '<S20>/CBTCModel' */
    /* End of Start for SubSystem: '<S6>/CBTCInterfacingUnit' */

    /* Start for Atomic SubSystem: '<S10>/ElectricalInputAdapter' */
    /* Start for Iterator SubSystem: '<S316>/VehicleInputAdapter' */
    for (ForEach_itr_hg = 0; ForEach_itr_hg < 8; ForEach_itr_hg++) {
      BEML_EMU_DW.CoreSubsys_ij1[ForEach_itr_hg].DelayInput1_DSTATE = 0.0;
    }

    /* End of Start for SubSystem: '<S316>/VehicleInputAdapter' */
    /* End of Start for SubSystem: '<S10>/ElectricalInputAdapter' */

    /* Start for ModelReference: '<S10>/ElectricalSystem' incorporates:
     *  Outport: '<Root>/ElectricalOutput'
     */
    ElectricalSystem_Start(&(BEML_EMU_DW.ElectricalSystem_InstanceData.rtb),
      &(BEML_EMU_DW.ElectricalSystem_InstanceData.rtdw));

    /* Start for ModelReference: '<S13>/TCMSSystem' incorporates:
     *  Outport: '<Root>/TCMSOutput'
     */
    TCMSSystem_Start(&(BEML_EMU_DW.TCMSSystem_InstanceData.rtb),
                     &(BEML_EMU_DW.TCMSSystem_InstanceData.rtdw));

    /* Start for ModelReference: '<S12>/PneumaticsSystem' incorporates:
     *  Outport: '<Root>/PneumaticsVehicleOut'
     */
    PneumaticsSystem_Start(&(BEML_EMU_DW.PneumaticsSystem_InstanceData.rtb),
      &(BEML_EMU_DW.PneumaticsSystem_InstanceData.rtdw));

    /* Start for ModelReference: '<S11>/PantographSystem' incorporates:
     *  Outport: '<Root>/PantographVehicleOut'
     */
    PantographSystem_Start(&(BEML_EMU_DW.PantographSystem_InstanceData.rtb),
      &(BEML_EMU_DW.PantographSystem_InstanceData.rtdw));

    /* Start for ModelReference: '<S8>/DoorsSystem' incorporates:
     *  Outport: '<Root>/DoorsVehicleOut'
     */
    DoorSystem_Start(&(BEML_EMU_DW.DoorsSystem_InstanceData.rtb),
                     &(BEML_EMU_DW.DoorsSystem_InstanceData.rtdw));

    /* Start for ModelReference: '<S5>/TrainBrakes' incorporates:
     *  Outport: '<Root>/BrakesVehicleOut'
     */
    TrainBrakes_Start(&(BEML_EMU_DW.TrainBrakes_InstanceData.rtb),
                      &(BEML_EMU_DW.TrainBrakes_InstanceData.rtdw));

    /* Start for Atomic SubSystem: '<S14>/TractionInputAdapter' */
    /* Start for Iterator SubSystem: '<S383>/VehicleInputAdapter' */
    for (ForEach_itr_as = 0; ForEach_itr_as < 8; ForEach_itr_as++) {
      BEML_EMU_DW.CoreSubsys_cr[ForEach_itr_as].UD_DSTATE = 0.0;
      BEML_EMU_DW.CoreSubsys_cr[ForEach_itr_as].UD_DSTATE_n = 0.0;
    }

    /* End of Start for SubSystem: '<S383>/VehicleInputAdapter' */
    /* End of Start for SubSystem: '<S14>/TractionInputAdapter' */

    /* Start for ModelReference: '<S14>/TractionSystem' incorporates:
     *  Outport: '<Root>/TractionVehicleOut'
     */
    TractionSystem_Start(&(BEML_EMU_DW.TractionSystem_InstanceData.rtb),
                         &(BEML_EMU_DW.TractionSystem_InstanceData.rtdw));

    /* Start for ModelReference: '<S9>/TrainDynamics' incorporates:
     *  Inport: '<Root>/SimData'
     *  Outport: '<Root>/DynamicsOutput'
     */
    TrainDynamics_Start(&(BEML_EMU_DW.TrainDynamics_InstanceData.rtb),
                        &(BEML_EMU_DW.TrainDynamics_InstanceData.rtdw),
                        &(BEML_EMU_DW.TrainDynamics_InstanceData.rtzce));

    /* Start for Atomic SubSystem: '<S4>/AudioSystemInterface' */
    /* Start for Iterator SubSystem: '<S734>/Subsystem1' */
    for (ForEach_itr_m = 0; ForEach_itr_m < 8; ForEach_itr_m++) {
      self_CoreSubsys_pnaevvf[ForEach_itr_m].dwork.DelayInput1_DSTATE = 0.0;
      self_CoreSubsys_pnaevvf[ForEach_itr_m].dwork.DelayInput1_DSTATE_i = 0.0;
    }

    /* End of Start for SubSystem: '<S734>/Subsystem1' */
    /* End of Start for SubSystem: '<S4>/AudioSystemInterface' */

    /* Start for Atomic SubSystem: '<S4>/ScoringSystemInterface' */
    /* Start for Iterator SubSystem: '<S746>/For Each Subsystem' */
    for (ForEach_itr_a = 0; ForEach_itr_a < 8; ForEach_itr_a++) {
      /* Start for Iterator SubSystem: '<S750>/Subsystem' */
      for (ForEach_itr_h = 0; ForEach_itr_h < 2; ForEach_itr_h++) {
        self_CoreSubsys_pnaevvfpg[ForEach_itr_a].self_CoreSubsys[ForEach_itr_h].
          dwork.DiscreteTimeIntegrator_DSTATE = 0.0;
        self_CoreSubsys_pnaevvfpg[ForEach_itr_a].self_CoreSubsys[ForEach_itr_h].
          dwork.DiscreteTimeIntegrator1_DSTATE = 0.0;
      }

      /* End of Start for SubSystem: '<S750>/Subsystem' */
    }

    /* End of Start for SubSystem: '<S746>/For Each Subsystem' */
    /* End of Start for SubSystem: '<S4>/ScoringSystemInterface' */

    /* Start for Iterator SubSystem: '<S737>/Input Adapter' */
    for (ForEach_itr_k = 0; ForEach_itr_k < 8; ForEach_itr_k++) {
      self_CoreSubsys_pnaevvfpgh5z[ForEach_itr_k].
        dwork.DiscreteTimeIntegrator_DSTATE = 0.0;
    }

    /* End of Start for SubSystem: '<S737>/Input Adapter' */

    /* Start for Iterator SubSystem: '<S753>/MotionBasePerVehicle' */
    for (ForEach_itr = 0; ForEach_itr < 8; ForEach_itr++) {
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].ManualPosition[0] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].ManualPosition[1] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].ManualPosition[2] = 0.0;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1[0] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate[0] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1[1] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate[1] = 0.0;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states[0] = 0.0;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_tmp[0] = 0.0;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states[1] = 0.0;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_tmp[1] = 0.0;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states[2] = 0.0;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_tmp[2] = 0.0;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE_g =
        0.0;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE_m =
        0.0;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE_d =
        0.0;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE_h =
        0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_j[0] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_p[0] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_j[1] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_p[1] = 0.0;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_b[0] =
        0.0;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_tmp_p[0] = 0.0;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_b[1] =
        0.0;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_tmp_p[1] = 0.0;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_b[2] =
        0.0;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_tmp_p[2] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_jf[0] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_m[0] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_jf[1] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_m[1] = 0.0;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_c[0] =
        0.0;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_tmp_i[0] = 0.0;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_c[1] =
        0.0;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_tmp_i[1] = 0.0;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_c[2] =
        0.0;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_tmp_i[2] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_n[0] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_k[0] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_n[1] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_k[1] = 0.0;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_a[0] =
        0.0;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_tmp_ib[0] = 0.0;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_a[1] =
        0.0;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_tmp_ib[1] = 0.0;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_a[2] =
        0.0;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_tmp_ib[2] = 0.0;

      /* Start for IfAction SubSystem: '<S797>/StandardTrackFeel' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].NextOutput_c = 0.0;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_j = 0.0;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_ln = 0.0;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_l2 = 0.0;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_m = 0.0;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].NextOutput_a = 0.0;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE_c =
        0.0;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DelayInput1_DSTATE_p = 0.0;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].UnitDelay_DSTATE_h = 0.0;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_op = 0.0;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_k = 0.0;

      /* End of Start for SubSystem: '<S797>/StandardTrackFeel' */

      /* Start for IfAction SubSystem: '<S797>/DegradedTrackFeel' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].NextOutput = 0.0;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_o = 0.0;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_cq = 0.0;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_l = 0.0;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_d = 0.0;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].NextOutput_m = 0.0;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE_hq =
        0.0;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DelayInput1_DSTATE = 0.0;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].UnitDelay_DSTATE = 0.0;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_bh = 0.0;

      /* End of Start for SubSystem: '<S797>/DegradedTrackFeel' */

      /* Start for IfAction SubSystem: '<S797>/StandardTrackFeel' */
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_l0[0] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_i[0] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_g[0] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_go[0] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_om[0] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_n[0] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_iv[0] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_i4[0] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_hg[0] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_d[0] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_b[0] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_oc[0] = 0.0;

      /* End of Start for SubSystem: '<S797>/StandardTrackFeel' */

      /* Start for IfAction SubSystem: '<S797>/DegradedTrackFeel' */
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_i[0] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_ko[0] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_o[0] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_a[0] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_c[0] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_g[0] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_iu[0] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_o[0] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_h[0] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_o4[0] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_l[0] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_ge[0] = 0.0;

      /* End of Start for SubSystem: '<S797>/DegradedTrackFeel' */

      /* Start for IfAction SubSystem: '<S797>/StandardTrackFeel' */
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_l0[1] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_i[1] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_g[1] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_go[1] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_om[1] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_n[1] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_iv[1] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_i4[1] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_hg[1] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_d[1] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_b[1] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_oc[1] = 0.0;

      /* End of Start for SubSystem: '<S797>/StandardTrackFeel' */

      /* Start for IfAction SubSystem: '<S797>/DegradedTrackFeel' */
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_i[1] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_ko[1] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_o[1] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_a[1] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_c[1] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_g[1] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_iu[1] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_o[1] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_h[1] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_o4[1] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate1_l[1] = 0.0;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].VectorConcatenate_ge[1] = 0.0;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_d1 = 0.0;

      /* End of Start for SubSystem: '<S797>/DegradedTrackFeel' */

      /* Start for Atomic SubSystem: '<S846>/TimerOffDelay NoInit' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE_j =
        0.0;

      /* Start for InitialCondition: '<S857>/IC' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].IC_FirstOutputTime_j = true;

      /* End of Start for SubSystem: '<S846>/TimerOffDelay NoInit' */

      /* Start for InitialCondition: '<S846>/IC' */
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].IC =
        BEML_EMU_P.CoreSubsys_m.IC_Value_p;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].IC_FirstOutputTime = true;

      /* Start for Atomic SubSystem: '<S779>/Jolt Duration' */
      BEML_EMU_JoltDuration_Start(&BEML_EMU_B.CoreSubsys_m[ForEach_itr].
        JoltDuration_o, &BEML_EMU_DW.CoreSubsys_m[ForEach_itr].JoltDuration_o);

      /* End of Start for SubSystem: '<S779>/Jolt Duration' */

      /* Start for Atomic SubSystem: '<S780>/Jolt Duration' */
      BEML_EMU_JoltDuration_Start(&BEML_EMU_B.CoreSubsys_m[ForEach_itr].
        JoltDuration_n, &BEML_EMU_DW.CoreSubsys_m[ForEach_itr].JoltDuration_n);

      /* End of Start for SubSystem: '<S780>/Jolt Duration' */

      /* Start for Atomic SubSystem: '<S781>/Jolt Duration' */
      BEML_EMU_JoltDuration_Start(&BEML_EMU_B.CoreSubsys_m[ForEach_itr].
        JoltDuration_e, &BEML_EMU_DW.CoreSubsys_m[ForEach_itr].JoltDuration_e);

      /* End of Start for SubSystem: '<S781>/Jolt Duration' */

      /* Start for Atomic SubSystem: '<S782>/Jolt Duration' */
      BEML_EMU_JoltDuration_Start(&BEML_EMU_B.CoreSubsys_m[ForEach_itr].
        JoltDuration, &BEML_EMU_DW.CoreSubsys_m[ForEach_itr].JoltDuration);

      /* End of Start for SubSystem: '<S782>/Jolt Duration' */
    }

    /* End of Start for SubSystem: '<S753>/MotionBasePerVehicle' */
  }

  {
    /* local scratch DWork variables */
    int32_T ForEach_itr;
    int32_T ForEach_itr_k;
    int32_T ForEach_itr_a;
    int32_T ForEach_itr_h;
    int32_T ForEach_itr_m;
    int32_T ForEach_itr_oc;
    int32_T ForEach_itr_ae;
    int32_T ForEach_itr_as;
    int32_T ForEach_itr_jg;
    int32_T ForEach_itr_jn;
    int32_T ForEach_itr_hg;
    int32_T ForEach_itr_jt;
    int32_T ForEach_itr_kt;
    int32_T ForEach_itr_mu;
    uint32_T tseed;
    int32_T t;
    int32_T i;
    real_T tmp;

    /* SystemInitialize for Atomic SubSystem: '<Root>/InputsInterface' */
    /* SystemInitialize for Atomic SubSystem: '<S3>/VehicleConfigProcessing' */
    /* SystemInitialize for Enabled SubSystem: '<S403>/VehicleConfigInterface' */
    for (i = 0; i < 8; i++) {
      /* InitializeConditions for UnitDelay: '<Root>/Unit Delay' */
      BEML_EMU_DW.UnitDelay_DSTATE_i[i] =
        BEML_EMU_P.UnitDelay_InitialCondition_b;

      /* InitializeConditions for UnitDelay: '<Root>/Unit Delay1' */
      BEML_EMU_DW.UnitDelay1_DSTATE[i] = BEML_EMU_P.UnitDelay1_InitialCondition;

      /* InitializeConditions for UnitDelay: '<Root>/Unit Delay2' */
      BEML_EMU_DW.UnitDelay2_DSTATE[i] = BEML_EMU_P.UnitDelay2_InitialCondition;

      /* InitializeConditions for UnitDelay: '<Root>/Unit Delay3' */
      BEML_EMU_DW.UnitDelay3_DSTATE[i] = BEML_EMU_P.UnitDelay3_InitialCondition;

      /* InitializeConditions for UnitDelay: '<S1>/Unit Delay' */
      BEML_EMU_DW.UnitDelay_DSTATE_d[i] =
        BEML_EMU_P.UnitDelay_InitialCondition_d;

      /* InitializeConditions for UnitDelay: '<S1>/Unit Delay5' */
      BEML_EMU_DW.UnitDelay5_DSTATE[i] = BEML_EMU_P.UnitDelay5_InitialCondition;

      /* InitializeConditions for UnitDelay: '<S1>/Unit Delay1' */
      BEML_EMU_DW.UnitDelay1_DSTATE_l[i] =
        BEML_EMU_P.UnitDelay1_InitialCondition_c;

      /* InitializeConditions for UnitDelay: '<S1>/Unit Delay3' */
      BEML_EMU_DW.UnitDelay3_DSTATE_n[i] =
        BEML_EMU_P.UnitDelay3_InitialCondition_a;

      /* InitializeConditions for UnitDelay: '<S1>/Unit Delay2' */
      BEML_EMU_DW.UnitDelay2_DSTATE_d[i] =
        BEML_EMU_P.UnitDelay2_InitialCondition_p;

      /* InitializeConditions for UnitDelay: '<S1>/Unit Delay6' */
      BEML_EMU_DW.UnitDelay6_DSTATE[i] = BEML_EMU_P.UnitDelay6_InitialCondition;

      /* InitializeConditions for UnitDelay: '<S1>/Unit Delay4' */
      BEML_EMU_DW.UnitDelay4_DSTATE[i] = BEML_EMU_P.UnitDelay4_InitialCondition;

      /* InitializeConditions for UnitDelay: '<S1>/Unit Delay7' */
      BEML_EMU_DW.UnitDelay7_DSTATE[i] = BEML_EMU_P.UnitDelay7_InitialCondition;

      /* InitializeConditions for UnitDelay: '<S3>/Unit Delay' */
      BEML_EMU_DW.UnitDelay_DSTATE[i] = BEML_EMU_P.UnitDelay_InitialCondition;

      /* InitializeConditions for UnitDelay: '<S401>/Unit Delay' */
      BEML_EMU_DW.UnitDelay_DSTATE_b[i] =
        BEML_EMU_P.UnitDelay_InitialCondition_o;

      /* InitializeConditions for UnitDelay: '<S675>/Unit Delay' */
      BEML_EMU_DW.UnitDelay_DSTATE_h[i] =
        BEML_EMU_P.UnitDelay_InitialCondition_g;
    }

    for (i = 0; i < 8; i++) {
      /* SystemInitialize for Outport: '<Root>/ProcessedVehConf' incorporates:
       *  Outport: '<S675>/VehicleConfigProcessed'
       */
      BEML_EMU_Y.ProcessedVehConf[i] = BEML_EMU_P.VehicleConfigProcessed_Y0;
    }

    /* End of SystemInitialize for SubSystem: '<S403>/VehicleConfigInterface' */
    /* End of SystemInitialize for SubSystem: '<S3>/VehicleConfigProcessing' */

    /* SystemInitialize for Iterator SubSystem: '<S400>/Subsystem' */
    for (ForEach_itr_ae = 0; ForEach_itr_ae < 8; ForEach_itr_ae++) {
      /* InitializeConditions for UnitDelay: '<S419>/Delay Input1' */
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DelayInput1_DSTATE =
        BEML_EMU_P.CoreSubsys_p.DetectIncrease_vinit;

      /* InitializeConditions for Memory: '<S421>/Memory' */
      self_CoreSubsys_p[ForEach_itr_ae].dwork.Memory_PreviousInput =
        BEML_EMU_P.CoreSubsys_p.SRLatchResetPriority_initial_condition;

      /* InitializeConditions for UnitDelay: '<S416>/Delay Input1' */
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DelayInput1_DSTATE_i =
        BEML_EMU_P.CoreSubsys_p.DetectDecrease_vinit;

      /* InitializeConditions for UnitDelay: '<S415>/Delay Input1' */
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DelayInput1_DSTATE_iw =
        BEML_EMU_P.CoreSubsys_p.DetectChange_vinit;

      /* InitializeConditions for UnitDelay: '<S420>/Delay Input1' */
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DelayInput1_DSTATE_g =
        BEML_EMU_P.CoreSubsys_p.DetectIncrease1_vinit;

      /* InitializeConditions for Memory: '<S422>/Memory' */
      self_CoreSubsys_p[ForEach_itr_ae].dwork.Memory_PreviousInput_g =
        BEML_EMU_P.CoreSubsys_p.SRLatchResetPriority1_initial_condition;

      /* InitializeConditions for UnitDelay: '<S418>/Delay Input1' */
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DelayInput1_DSTATE_b =
        BEML_EMU_P.CoreSubsys_p.DetectDecrease2_vinit;

      /* InitializeConditions for UnitDelay: '<S417>/Delay Input1' */
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DelayInput1_DSTATE_l =
        BEML_EMU_P.CoreSubsys_p.DetectDecrease1_vinit;

      /* InitializeConditions for DiscreteIntegrator: '<S490>/Discrete-Time Integrator' */
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE =
        BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_IC;
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState = 2;

      /* InitializeConditions for DiscreteIntegrator: '<S498>/Discrete-Time Integrator' */
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_p =
        BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_IC_n;
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_j = 2;

      /* InitializeConditions for DiscreteIntegrator: '<S586>/Discrete-Time Integrator' */
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_o =
        BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_IC_k;
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_h = 2;

      /* InitializeConditions for DiscreteIntegrator: '<S610>/Discrete-Time Integrator' */
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_j =
        BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_IC_no;
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_h2 = 2;

      /* InitializeConditions for DiscreteIntegrator: '<S618>/Discrete-Time Integrator' */
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_g =
        BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_IC_c;
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_l = 2;

      /* InitializeConditions for DiscreteIntegrator: '<S626>/Discrete-Time Integrator' */
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_go =
        BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_IC_ca;
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_p = 2;

      /* InitializeConditions for DiscreteIntegrator: '<S634>/Discrete-Time Integrator' */
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_d =
        BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_IC_l;
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_d = 2;

      /* InitializeConditions for DiscreteIntegrator: '<S642>/Discrete-Time Integrator' */
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_i =
        BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_IC_n2;
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_f = 2;

      /* InitializeConditions for DiscreteIntegrator: '<S650>/Discrete-Time Integrator' */
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_dm =
        BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_IC_c4;
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_lt = 2;

      /* InitializeConditions for DiscreteIntegrator: '<S658>/Discrete-Time Integrator' */
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_b =
        BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_IC_j;
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_h1 = 2;

      /* InitializeConditions for DiscreteIntegrator: '<S506>/Discrete-Time Integrator' */
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_l =
        BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_IC_f;
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_ls = 2;

      /* InitializeConditions for DiscreteIntegrator: '<S514>/Discrete-Time Integrator' */
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_k =
        BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_IC_e;
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_n = 2;

      /* InitializeConditions for DiscreteIntegrator: '<S522>/Discrete-Time Integrator' */
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_h =
        BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_IC_b;
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_ni = 2;

      /* InitializeConditions for DiscreteIntegrator: '<S530>/Discrete-Time Integrator' */
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_ks =
        BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_IC_h;
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_f4 = 2;

      /* InitializeConditions for DiscreteIntegrator: '<S538>/Discrete-Time Integrator' */
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_ls =
        BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_IC_p;
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_ph = 2;

      /* InitializeConditions for DiscreteIntegrator: '<S546>/Discrete-Time Integrator' */
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_f =
        BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_IC_ln;
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_c = 2;

      /* InitializeConditions for DiscreteIntegrator: '<S554>/Discrete-Time Integrator' */
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_ik =
        BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_IC_nl;
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_n1 = 2;

      /* InitializeConditions for DiscreteIntegrator: '<S562>/Discrete-Time Integrator' */
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_iq =
        BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_IC_m;
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_lo = 2;

      /* InitializeConditions for DiscreteIntegrator: '<S570>/Discrete-Time Integrator' */
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_oh =
        BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_IC_np;
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_k = 2;

      /* InitializeConditions for DiscreteIntegrator: '<S578>/Discrete-Time Integrator' */
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_e =
        BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_IC_po;
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_a = 2;

      /* InitializeConditions for DiscreteIntegrator: '<S594>/Discrete-Time Integrator' */
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_c =
        BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_IC_j2;
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_m = 2;

      /* InitializeConditions for DiscreteIntegrator: '<S602>/Discrete-Time Integrator' */
      self_CoreSubsys_p[ForEach_itr_ae].dwork.DiscreteTimeIntegrator_DSTATE_pp =
        BEML_EMU_P.CoreSubsys_p.DiscreteTimeIntegrator_IC_be;
      self_CoreSubsys_p[ForEach_itr_ae].
        dwork.DiscreteTimeIntegrator_PrevResetState_fg = 2;

      /* InitializeConditions for UnitDelay: '<S409>/Unit Delay1' */
      self_CoreSubsys_p[ForEach_itr_ae].dwork.UnitDelay1_DSTATE =
        BEML_EMU_P.CoreSubsys_p.UnitDelay1_InitialCondition;

      /* InitializeConditions for RateTransition: '<S409>/Rate Transition1' */
      self_CoreSubsys_p[ForEach_itr_ae].dwork.RateTransition1_Buffer0 =
        BEML_EMU_P.CoreSubsys_p.RateTransition1_InitialCondition;

      /* InitializeConditions for RateTransition: '<S409>/Rate Transition2' */
      self_CoreSubsys_p[ForEach_itr_ae].dwork.RateTransition2_Buffer0 =
        BEML_EMU_P.CoreSubsys_p.RateTransition2_InitialCondition;

      /* InitializeConditions for RateTransition: '<S409>/Rate Transition3' */
      self_CoreSubsys_p[ForEach_itr_ae].dwork.RateTransition3_Buffer0 =
        BEML_EMU_P.CoreSubsys_p.RateTransition3_InitialCondition;

      /* InitializeConditions for RateTransition: '<S409>/Rate Transition4' */
      self_CoreSubsys_p[ForEach_itr_ae].dwork.RateTransition4_Buffer0 =
        BEML_EMU_P.CoreSubsys_p.RateTransition4_InitialCondition;

      /* InitializeConditions for UnitDelay: '<S423>/Unit Delay' */
      self_CoreSubsys_p[ForEach_itr_ae].dwork.UnitDelay_DSTATE =
        BEML_EMU_P.CoreSubsys_p.UnitDelay_InitialCondition;

      /* InitializeConditions for UnitDelay: '<S424>/Unit Delay' */
      self_CoreSubsys_p[ForEach_itr_ae].dwork.UnitDelay_DSTATE_a =
        BEML_EMU_P.CoreSubsys_p.UnitDelay_InitialCondition_e;

      /* InitializeConditions for UnitDelay: '<S425>/Unit Delay' */
      self_CoreSubsys_p[ForEach_itr_ae].dwork.UnitDelay_DSTATE_p =
        BEML_EMU_P.CoreSubsys_p.UnitDelay_InitialCondition_h;

      /* InitializeConditions for UnitDelay: '<S426>/Unit Delay' */
      self_CoreSubsys_p[ForEach_itr_ae].dwork.UnitDelay_DSTATE_k =
        BEML_EMU_P.CoreSubsys_p.UnitDelay_InitialCondition_c;

      /* SystemInitialize for Chart: '<S427>/IRQRequestStateMachine' */
      BEML_EMU_IRQRequestStateMachine_Init(&self_CoreSubsys_p[ForEach_itr_ae].
        dwork.sf_IRQRequestStateMachine_in);

      /* SystemInitialize for Chart: '<S428>/IRQRequestStateMachine' */
      BEML_EMU_IRQRequestStateMachine_Init(&self_CoreSubsys_p[ForEach_itr_ae].
        dwork.sf_IRQRequestStateMachine_fm);

      /* SystemInitialize for Chart: '<S439>/IRQRequestStateMachine' */
      BEML_EMU_IRQRequestStateMachine_Init(&self_CoreSubsys_p[ForEach_itr_ae].
        dwork.sf_IRQRequestStateMachine_h);

      /* SystemInitialize for Chart: '<S442>/IRQRequestStateMachine' */
      BEML_EMU_IRQRequestStateMachine_Init(&self_CoreSubsys_p[ForEach_itr_ae].
        dwork.sf_IRQRequestStateMachine_b);

      /* SystemInitialize for Chart: '<S443>/IRQRequestStateMachine' */
      BEML_EMU_IRQRequestStateMachine_Init(&self_CoreSubsys_p[ForEach_itr_ae].
        dwork.sf_IRQRequestStateMachine_o);

      /* SystemInitialize for Chart: '<S444>/IRQRequestStateMachine' */
      BEML_EMU_IRQRequestStateMachine_Init(&self_CoreSubsys_p[ForEach_itr_ae].
        dwork.sf_IRQRequestStateMachine_mb);

      /* SystemInitialize for Chart: '<S445>/IRQRequestStateMachine' */
      BEML_EMU_IRQRequestStateMachine_Init(&self_CoreSubsys_p[ForEach_itr_ae].
        dwork.sf_IRQRequestStateMachine_m);

      /* SystemInitialize for Chart: '<S446>/IRQRequestStateMachine' */
      BEML_EMU_IRQRequestStateMachine_Init(&self_CoreSubsys_p[ForEach_itr_ae].
        dwork.sf_IRQRequestStateMachine_l);

      /* SystemInitialize for Chart: '<S447>/IRQRequestStateMachine' */
      BEML_EMU_IRQRequestStateMachine_Init(&self_CoreSubsys_p[ForEach_itr_ae].
        dwork.sf_IRQRequestStateMachine_e);

      /* SystemInitialize for Chart: '<S448>/IRQRequestStateMachine' */
      BEML_EMU_IRQRequestStateMachine_Init(&self_CoreSubsys_p[ForEach_itr_ae].
        dwork.sf_IRQRequestStateMachine);

      /* SystemInitialize for Chart: '<S429>/IRQRequestStateMachine' */
      BEML_EMU_IRQRequestStateMachine_Init(&self_CoreSubsys_p[ForEach_itr_ae].
        dwork.sf_IRQRequestStateMachine_a);

      /* SystemInitialize for Chart: '<S430>/IRQRequestStateMachine' */
      BEML_EMU_IRQRequestStateMachine_Init(&self_CoreSubsys_p[ForEach_itr_ae].
        dwork.sf_IRQRequestStateMachine_d);

      /* SystemInitialize for Chart: '<S431>/IRQRequestStateMachine' */
      BEML_EMU_IRQRequestStateMachine_Init(&self_CoreSubsys_p[ForEach_itr_ae].
        dwork.sf_IRQRequestStateMachine_f);

      /* SystemInitialize for Chart: '<S432>/IRQRequestStateMachine' */
      BEML_EMU_IRQRequestStateMachine_Init(&self_CoreSubsys_p[ForEach_itr_ae].
        dwork.sf_IRQRequestStateMachine_hr);

      /* SystemInitialize for Chart: '<S433>/IRQRequestStateMachine' */
      BEML_EMU_IRQRequestStateMachine_Init(&self_CoreSubsys_p[ForEach_itr_ae].
        dwork.sf_IRQRequestStateMachine_e5);

      /* SystemInitialize for Chart: '<S434>/IRQRequestStateMachine' */
      BEML_EMU_IRQRequestStateMachine_Init(&self_CoreSubsys_p[ForEach_itr_ae].
        dwork.sf_IRQRequestStateMachine_e2);

      /* SystemInitialize for Chart: '<S435>/IRQRequestStateMachine' */
      BEML_EMU_IRQRequestStateMachine_Init(&self_CoreSubsys_p[ForEach_itr_ae].
        dwork.sf_IRQRequestStateMachine_i);

      /* SystemInitialize for Chart: '<S436>/IRQRequestStateMachine' */
      BEML_EMU_IRQRequestStateMachine_Init(&self_CoreSubsys_p[ForEach_itr_ae].
        dwork.sf_IRQRequestStateMachine_h1);

      /* SystemInitialize for Chart: '<S437>/IRQRequestStateMachine' */
      BEML_EMU_IRQRequestStateMachine_Init(&self_CoreSubsys_p[ForEach_itr_ae].
        dwork.sf_IRQRequestStateMachine_c);

      /* SystemInitialize for Chart: '<S438>/IRQRequestStateMachine' */
      BEML_EMU_IRQRequestStateMachine_Init(&self_CoreSubsys_p[ForEach_itr_ae].
        dwork.sf_IRQRequestStateMachine_j);

      /* SystemInitialize for Chart: '<S440>/IRQRequestStateMachine' */
      BEML_EMU_IRQRequestStateMachine_Init(&self_CoreSubsys_p[ForEach_itr_ae].
        dwork.sf_IRQRequestStateMachine_p);

      /* SystemInitialize for Chart: '<S441>/IRQRequestStateMachine' */
      BEML_EMU_IRQRequestStateMachine_Init(&self_CoreSubsys_p[ForEach_itr_ae].
        dwork.sf_IRQRequestStateMachine_ma);

      /* SystemInitialize for Chart: '<S423>/Chart' */
      BEML_EMU_Chart_Init(&self_CoreSubsys_p[ForEach_itr_ae].dwork.sf_Chart_f);

      /* SystemInitialize for Enabled SubSystem: '<S423>/ControlStateRequest' */
      BEML_EMU_ControlStateRequest_Init(&self_CoreSubsys_p[ForEach_itr_ae].
        blockIO.ControlStateRequest_a, &self_CoreSubsys_p[ForEach_itr_ae].
        dwork.ControlStateRequest_a,
        &BEML_EMU_P.CoreSubsys_p.ControlStateRequest_a);

      /* End of SystemInitialize for SubSystem: '<S423>/ControlStateRequest' */

      /* SystemInitialize for Chart: '<S424>/Chart' */
      BEML_EMU_Chart_Init(&self_CoreSubsys_p[ForEach_itr_ae].dwork.sf_Chart_k);

      /* SystemInitialize for Enabled SubSystem: '<S424>/ControlStateRequest' */
      BEML_EMU_ControlStateRequest_Init(&self_CoreSubsys_p[ForEach_itr_ae].
        blockIO.ControlStateRequest_n, &self_CoreSubsys_p[ForEach_itr_ae].
        dwork.ControlStateRequest_n,
        &BEML_EMU_P.CoreSubsys_p.ControlStateRequest_n);

      /* End of SystemInitialize for SubSystem: '<S424>/ControlStateRequest' */

      /* SystemInitialize for Chart: '<S425>/Chart' */
      BEML_EMU_Chart_Init(&self_CoreSubsys_p[ForEach_itr_ae].dwork.sf_Chart_e);

      /* SystemInitialize for Enabled SubSystem: '<S425>/ControlStateRequest' */
      BEML_EMU_ControlStateRequest_Init(&self_CoreSubsys_p[ForEach_itr_ae].
        blockIO.ControlStateRequest_i, &self_CoreSubsys_p[ForEach_itr_ae].
        dwork.ControlStateRequest_i,
        &BEML_EMU_P.CoreSubsys_p.ControlStateRequest_i);

      /* End of SystemInitialize for SubSystem: '<S425>/ControlStateRequest' */

      /* SystemInitialize for Chart: '<S426>/Chart' */
      BEML_EMU_Chart_Init(&self_CoreSubsys_p[ForEach_itr_ae].dwork.sf_Chart);

      /* SystemInitialize for Enabled SubSystem: '<S426>/ControlStateRequest' */
      BEML_EMU_ControlStateRequest_Init(&self_CoreSubsys_p[ForEach_itr_ae].
        blockIO.ControlStateRequest, &self_CoreSubsys_p[ForEach_itr_ae].
        dwork.ControlStateRequest, &BEML_EMU_P.CoreSubsys_p.ControlStateRequest);

      /* End of SystemInitialize for SubSystem: '<S426>/ControlStateRequest' */
    }

    /* End of SystemInitialize for SubSystem: '<S400>/Subsystem' */
    /* End of SystemInitialize for SubSystem: '<Root>/InputsInterface' */
    /* SystemInitialize for Atomic SubSystem: '<Root>/InputsInterface' */
    /* SystemInitialize for ModelReference: '<S401>/IOControlsModel' incorporates:
     *  Outport: '<Root>/IOControlsOutput'
     */
    IOControls_Init(&(BEML_EMU_DW.IOControlsModel_InstanceData.rtb),
                    &(BEML_EMU_DW.IOControlsModel_InstanceData.rtdw));

    /* End of SystemInitialize for SubSystem: '<Root>/InputsInterface' */
    /* SystemInitialize for Atomic SubSystem: '<S1>/CouplingInterface' */
    /* SystemInitialize for ModelReference: '<S7>/Model' incorporates:
     *  Outport: '<Root>/CouplingOutput'
     */
    CouplingSystem_Init(&(BEML_EMU_DW.Model_InstanceData.rtb),
                        &(BEML_EMU_DW.Model_InstanceData.rtdw));

    /* End of SystemInitialize for SubSystem: '<S1>/CouplingInterface' */

    /* SystemInitialize for Atomic SubSystem: '<S6>/CBTCInterfacingUnit' */
    /* SystemInitialize for Iterator SubSystem: '<S20>/CBTCModel' */
    for (ForEach_itr_mu = 0; ForEach_itr_mu < 8; ForEach_itr_mu++) {
      /* InitializeConditions for Memory: '<S140>/Memory' */
      BEML_EMU_DW.CoreSubsys_h[ForEach_itr_mu].Memory_PreviousInput =
        BEML_EMU_P.CoreSubsys_h.SRLatchResetPriority_initial_condition;

      /* InitializeConditions for UnitDelay: '<S131>/Unit Delay2' */
      BEML_EMU_DW.CoreSubsys_h[ForEach_itr_mu].UnitDelay2_DSTATE =
        BEML_EMU_P.CoreSubsys_h.UnitDelay2_InitialCondition;

      /* InitializeConditions for Memory: '<S141>/Memory' */
      BEML_EMU_DW.CoreSubsys_h[ForEach_itr_mu].Memory_PreviousInput_m =
        BEML_EMU_P.CoreSubsys_h.SRLatchResetPriority1_initial_condition;

      /* InitializeConditions for UnitDelay: '<S131>/Unit Delay1' */
      BEML_EMU_DW.CoreSubsys_h[ForEach_itr_mu].UnitDelay1_DSTATE =
        BEML_EMU_P.CoreSubsys_h.UnitDelay1_InitialCondition;

      /* InitializeConditions for Memory: '<S142>/Memory' */
      BEML_EMU_DW.CoreSubsys_h[ForEach_itr_mu].Memory_PreviousInput_c =
        BEML_EMU_P.CoreSubsys_h.SRLatchResetPriority2_initial_condition;

      /* InitializeConditions for Memory: '<S143>/Memory' */
      BEML_EMU_DW.CoreSubsys_h[ForEach_itr_mu].Memory_PreviousInput_f =
        BEML_EMU_P.CoreSubsys_h.SRLatchResetPriority3_initial_condition;

      /* InitializeConditions for UnitDelay: '<S131>/Unit Delay' */
      BEML_EMU_DW.CoreSubsys_h[ForEach_itr_mu].UnitDelay_DSTATE =
        BEML_EMU_P.CoreSubsys_h.UnitDelay_InitialCondition;

      /* SystemInitialize for Enabled SubSystem: '<S21>/ATO' */
      /* SystemInitialize for IfAction SubSystem: '<S23>/ATO Braking Demand' */
      /* InitializeConditions for Delay: '<S65>/UD' */
      BEML_EMU_DW.CoreSubsys_h[ForEach_itr_mu].UD_DSTATE_k =
        BEML_EMU_P.CoreSubsys_h.BrakeDemandPIDController_DifferentiatorICPrevScaledInput;

      /* InitializeConditions for DiscreteIntegrator: '<S70>/Integrator' */
      BEML_EMU_DW.CoreSubsys_h[ForEach_itr_mu].Integrator_DSTATE_f =
        BEML_EMU_P.CoreSubsys_h.BrakeDemandPIDController_InitialConditionForIntegrator;

      /* End of SystemInitialize for SubSystem: '<S23>/ATO Braking Demand' */

      /* SystemInitialize for IfAction SubSystem: '<S23>/ATO Traction Demand' */
      /* InitializeConditions for Delay: '<S110>/UD' */
      BEML_EMU_DW.CoreSubsys_h[ForEach_itr_mu].UD_DSTATE =
        BEML_EMU_P.CoreSubsys_h.TractiveDemand_DifferentiatorICPrevScaledInput;

      /* InitializeConditions for DiscreteIntegrator: '<S115>/Integrator' */
      BEML_EMU_DW.CoreSubsys_h[ForEach_itr_mu].Integrator_DSTATE =
        BEML_EMU_P.CoreSubsys_h.TractiveDemand_InitialConditionForIntegrator;

      /* End of SystemInitialize for SubSystem: '<S23>/ATO Traction Demand' */

      /* SystemInitialize for Outport: '<S23>/ATOCommands' */
      BEML_EMU_B.CoreSubsys_h[ForEach_itr_mu].ATOBrake =
        BEML_EMU_P.CoreSubsys_h.ATOCommands_Y0.ATOBrake;
      BEML_EMU_B.CoreSubsys_h[ForEach_itr_mu].ATOTraction =
        BEML_EMU_P.CoreSubsys_h.ATOCommands_Y0.ATOTraction;
      BEML_EMU_B.CoreSubsys_h[ForEach_itr_mu].ATOTBDemand =
        BEML_EMU_P.CoreSubsys_h.ATOCommands_Y0.ATOTBDemand;

      /* End of SystemInitialize for SubSystem: '<S21>/ATO' */
    }

    /* End of SystemInitialize for SubSystem: '<S20>/CBTCModel' */
    /* End of SystemInitialize for SubSystem: '<S6>/CBTCInterfacingUnit' */

    /* SystemInitialize for Atomic SubSystem: '<S10>/ElectricalInputAdapter' */
    /* SystemInitialize for Enabled SubSystem: '<S316>/ExtractConfig' */
    for (i = 0; i < 8; i++) {
      /* SystemInitialize for Outport: '<S317>/CommonVehicleCfg' */
      BEML_EMU_B.ImpAsg_InsertedFor_CommonVehicleConfig_at_inport_0_e[i] =
        BEML_EMU_P.CommonVehicleCfg_Y0_f;

      /* SystemInitialize for Outport: '<S317>/ElectricalVehicleCfg' */
      BEML_EMU_B.ImpAsg_InsertedFor_ElectricalVehicleConfig_at_inport_0[i] =
        BEML_EMU_P.ElectricalVehicleCfg_Y0;
    }

    /* End of SystemInitialize for SubSystem: '<S316>/ExtractConfig' */

    /* SystemInitialize for Iterator SubSystem: '<S316>/VehicleInputAdapter' */
    for (ForEach_itr_hg = 0; ForEach_itr_hg < 8; ForEach_itr_hg++) {
      /* InitializeConditions for Memory: '<S334>/Memory' */
      BEML_EMU_DW.CoreSubsys_ij1[ForEach_itr_hg].Memory_PreviousInput =
        BEML_EMU_P.CoreSubsys_ij1.SRLatchResetPriority1_initial_condition;

      /* InitializeConditions for UnitDelay: '<S333>/Delay Input1' */
      BEML_EMU_DW.CoreSubsys_ij1[ForEach_itr_hg].DelayInput1_DSTATE =
        BEML_EMU_P.CoreSubsys_ij1.DetectIncrease1_vinit;
    }

    /* End of SystemInitialize for SubSystem: '<S316>/VehicleInputAdapter' */
    /* End of SystemInitialize for SubSystem: '<S10>/ElectricalInputAdapter' */

    /* SystemInitialize for ModelReference: '<S10>/ElectricalSystem' incorporates:
     *  Outport: '<Root>/ElectricalOutput'
     */
    ElectricalSystem_Init(&(BEML_EMU_DW.ElectricalSystem_InstanceData.rtb),
                          &(BEML_EMU_DW.ElectricalSystem_InstanceData.rtdw));

    /* SystemInitialize for Atomic SubSystem: '<S13>/TCMSInputAdapter' */
    /* SystemInitialize for Enabled SubSystem: '<S358>/ExtractConfig' */
    for (i = 0; i < 8; i++) {
      /* SystemInitialize for Outport: '<S359>/CommonVehicleCfg' */
      BEML_EMU_B.ImpAsg_InsertedFor_CommonVehicleConfig_at_inport_0_l[i] =
        BEML_EMU_P.CommonVehicleCfg_Y0_k;

      /* SystemInitialize for Outport: '<S359>/TCMSVehicleCfg' */
      BEML_EMU_B.ImpAsg_InsertedFor_TCMSVehicleConfig_at_inport_0[i] =
        BEML_EMU_P.TCMSVehicleCfg_Y0;
    }

    /* End of SystemInitialize for SubSystem: '<S358>/ExtractConfig' */

    /* SystemInitialize for Iterator SubSystem: '<S358>/VehicleInputAdapter' */
    for (ForEach_itr_jg = 0; ForEach_itr_jg < 8; ForEach_itr_jg++) {
      /* InitializeConditions for UnitDelay: '<S377>/Delay Input1' */
      BEML_EMU_DW.CoreSubsys_gf[ForEach_itr_jg].DelayInput1_DSTATE =
        BEML_EMU_P.CoreSubsys_gf.DetectDecrease_vinit;

      /* InitializeConditions for Memory: '<S379>/Memory' */
      BEML_EMU_DW.CoreSubsys_gf[ForEach_itr_jg].Memory_PreviousInput =
        BEML_EMU_P.CoreSubsys_gf.SRLatchResetPriority_initial_condition;

      /* InitializeConditions for UnitDelay: '<S378>/Delay Input1' */
      BEML_EMU_DW.CoreSubsys_gf[ForEach_itr_jg].DelayInput1_DSTATE_k =
        BEML_EMU_P.CoreSubsys_gf.DetectIncrease_vinit;
    }

    /* End of SystemInitialize for SubSystem: '<S358>/VehicleInputAdapter' */
    /* End of SystemInitialize for SubSystem: '<S13>/TCMSInputAdapter' */

    /* SystemInitialize for ModelReference: '<S13>/TCMSSystem' incorporates:
     *  Outport: '<Root>/TCMSOutput'
     */
    TCMSSystem_Init(&(BEML_EMU_DW.TCMSSystem_InstanceData.rtb),
                    &(BEML_EMU_DW.TCMSSystem_InstanceData.rtdw));

    /* SystemInitialize for Atomic SubSystem: '<S12>/PneumaticsInputAdapter' */
    /* SystemInitialize for Enabled SubSystem: '<S347>/ExtractConfig' */
    for (i = 0; i < 8; i++) {
      /* SystemInitialize for Outport: '<S348>/CommonVehicleCfg' */
      BEML_EMU_B.ImpAsg_InsertedFor_CommonVehicleConfig_at_inport_0_b[i] =
        BEML_EMU_P.CommonVehicleCfg_Y0_j;

      /* SystemInitialize for Outport: '<S348>/PneumaticsVehicleCfg' */
      BEML_EMU_B.ImpAsg_InsertedFor_PneumaticsVehicleConfig_at_inport_0[i] =
        BEML_EMU_P.PneumaticsVehicleCfg_Y0;

      /* SystemInitialize for Outport: '<S348>/LocationVehicleConfig' */
      BEML_EMU_B.ImpAsg_InsertedFor_LocationVehicleConfig_at_inport_0[i] =
        BEML_EMU_P.LocationVehicleConfig_Y0;
    }

    /* End of SystemInitialize for SubSystem: '<S347>/ExtractConfig' */
    /* End of SystemInitialize for SubSystem: '<S12>/PneumaticsInputAdapter' */
    /* SystemInitialize for ModelReference: '<S12>/PneumaticsSystem' incorporates:
     *  Outport: '<Root>/PneumaticsVehicleOut'
     */
    PneumaticsSystem_Init(&(BEML_EMU_DW.PneumaticsSystem_InstanceData.rtb),
                          &(BEML_EMU_DW.PneumaticsSystem_InstanceData.rtdw));

    /* SystemInitialize for Atomic SubSystem: '<S11>/PantographInputAdapter' */
    /* SystemInitialize for Enabled SubSystem: '<S337>/ExtractConfig' */
    for (i = 0; i < 8; i++) {
      /* SystemInitialize for Outport: '<S338>/CommonVehicleCfg' */
      BEML_EMU_B.ImpAsg_InsertedFor_CommonVehicleConfig_at_inport_0_a[i] =
        BEML_EMU_P.CommonVehicleCfg_Y0_o;

      /* SystemInitialize for Outport: '<S338>/PantographVehicleCfg' */
      BEML_EMU_B.ImpAsg_InsertedFor_PantographVehicleConfig_at_inport_0[i] =
        BEML_EMU_P.PantographVehicleCfg_Y0;
    }

    /* End of SystemInitialize for SubSystem: '<S337>/ExtractConfig' */
    /* End of SystemInitialize for SubSystem: '<S11>/PantographInputAdapter' */

    /* SystemInitialize for ModelReference: '<S11>/PantographSystem' incorporates:
     *  Outport: '<Root>/PantographVehicleOut'
     */
    PantographSystem_Init(&(BEML_EMU_DW.PantographSystem_InstanceData.rtb),
                          &(BEML_EMU_DW.PantographSystem_InstanceData.rtdw));

    /* SystemInitialize for Atomic SubSystem: '<S8>/DoorsInputAdapter' */
    /* SystemInitialize for Enabled SubSystem: '<S148>/ExtractConfig' */
    for (i = 0; i < 8; i++) {
      /* SystemInitialize for Outport: '<S149>/CommonVehicleCfg' */
      BEML_EMU_B.ImpAsg_InsertedFor_CommonVehicleConfig_at_inport_0_ds[i] =
        BEML_EMU_P.CommonVehicleCfg_Y0_e;

      /* SystemInitialize for Outport: '<S149>/DoorsConfig' */
      BEML_EMU_B.ImpAsg_InsertedFor_DoorsConfig_at_inport_0[i] =
        BEML_EMU_P.DoorsConfig_Y0;

      /* SystemInitialize for Outport: '<S149>/HasCab' */
      BEML_EMU_B.ImpAsg_InsertedFor_HasCab_at_inport_0[i] = BEML_EMU_P.HasCab_Y0;
    }

    /* End of SystemInitialize for SubSystem: '<S148>/ExtractConfig' */
    /* End of SystemInitialize for SubSystem: '<S8>/DoorsInputAdapter' */

    /* SystemInitialize for ModelReference: '<S8>/DoorsSystem' incorporates:
     *  Outport: '<Root>/DoorsVehicleOut'
     */
    DoorSystem_Init(&(BEML_EMU_DW.DoorsSystem_InstanceData.rtb),
                    &(BEML_EMU_DW.DoorsSystem_InstanceData.rtdw));

    /* SystemInitialize for Atomic SubSystem: '<S5>/BrakesInputAdapter' */
    /* SystemInitialize for Enabled SubSystem: '<S15>/ExtractConfig' */
    for (i = 0; i < 8; i++) {
      /* SystemInitialize for Outport: '<S16>/CommonVehicleCfg' */
      BEML_EMU_B.ImpAsg_InsertedFor_CommonVehicleConfig_at_inport_0_ly[i] =
        BEML_EMU_P.CommonVehicleCfg_Y0;

      /* SystemInitialize for Outport: '<S16>/BrakesVehicleCfg' */
      BEML_EMU_B.ImpAsg_InsertedFor_BrakesVehicleConfig_at_inport_0[i] =
        BEML_EMU_P.BrakesVehicleCfg_Y0;
    }

    /* End of SystemInitialize for SubSystem: '<S15>/ExtractConfig' */
    /* End of SystemInitialize for SubSystem: '<S5>/BrakesInputAdapter' */

    /* SystemInitialize for ModelReference: '<S5>/TrainBrakes' incorporates:
     *  Outport: '<Root>/BrakesVehicleOut'
     */
    TrainBrakes_Init(&(BEML_EMU_DW.TrainBrakes_InstanceData.rtb),
                     &(BEML_EMU_DW.TrainBrakes_InstanceData.rtdw));

    /* SystemInitialize for Atomic SubSystem: '<S14>/TractionInputAdapter' */
    /* SystemInitialize for Enabled SubSystem: '<S383>/ExtractConfig' */
    for (i = 0; i < 8; i++) {
      /* SystemInitialize for Outport: '<S384>/CommonVehicleCfg' */
      BEML_EMU_B.ImpAsg_InsertedFor_CommonVehicleConfig_at_inport_0[i] =
        BEML_EMU_P.CommonVehicleCfg_Y0_d;

      /* SystemInitialize for Outport: '<S384>/TractionVehicleCfg' */
      BEML_EMU_B.ImpAsg_InsertedFor_TractionVehicleConfig_at_inport_0[i] =
        BEML_EMU_P.TractionVehicleCfg_Y0;
    }

    /* End of SystemInitialize for SubSystem: '<S383>/ExtractConfig' */

    /* SystemInitialize for Iterator SubSystem: '<S383>/VehicleInputAdapter' */
    for (ForEach_itr_as = 0; ForEach_itr_as < 8; ForEach_itr_as++) {
      /* InitializeConditions for UnitDelay: '<S390>/UD' */
      BEML_EMU_DW.CoreSubsys_cr[ForEach_itr_as].UD_DSTATE =
        BEML_EMU_P.CoreSubsys_cr.Difference1_ICPrevInput;

      /* InitializeConditions for UnitDelay: '<S391>/UD' */
      BEML_EMU_DW.CoreSubsys_cr[ForEach_itr_as].UD_DSTATE_n =
        BEML_EMU_P.CoreSubsys_cr.Difference2_ICPrevInput;
    }

    /* End of SystemInitialize for SubSystem: '<S383>/VehicleInputAdapter' */
    /* End of SystemInitialize for SubSystem: '<S14>/TractionInputAdapter' */

    /* SystemInitialize for ModelReference: '<S14>/TractionSystem' incorporates:
     *  Outport: '<Root>/TractionVehicleOut'
     */
    TractionSystem_Init(&(BEML_EMU_DW.TractionSystem_InstanceData.rtb),
                        &(BEML_EMU_DW.TractionSystem_InstanceData.rtdw));

    /* SystemInitialize for Atomic SubSystem: '<S9>/DynamicsInputAdapter' */
    /* SystemInitialize for Enabled SubSystem: '<S309>/ExtractConfig' */
    for (i = 0; i < 8; i++) {
      /* SystemInitialize for Outport: '<S310>/CommonVehicleCfg' */
      BEML_EMU_B.ImpAsg_InsertedFor_CommonVehicleConfig_at_inport_0_d[i] =
        BEML_EMU_P.CommonVehicleCfg_Y0_m;

      /* SystemInitialize for Outport: '<S310>/DynamicsVehicleCfg' */
      BEML_EMU_B.ImpAsg_InsertedFor_DynamicsVehicleConfig_at_inport_0[i] =
        BEML_EMU_P.DynamicsVehicleCfg_Y0;
    }

    /* End of SystemInitialize for SubSystem: '<S309>/ExtractConfig' */
    /* End of SystemInitialize for SubSystem: '<S9>/DynamicsInputAdapter' */
    /* SystemInitialize for ModelReference: '<S9>/TrainDynamics' incorporates:
     *  Inport: '<Root>/SimData'
     *  Outport: '<Root>/DynamicsOutput'
     */
    TrainDynamics_Init(&(BEML_EMU_DW.TrainDynamics_InstanceData.rtb),
                       &(BEML_EMU_DW.TrainDynamics_InstanceData.rtdw));

    /* SystemInitialize for Atomic SubSystem: '<S4>/AudioSystemInterface' */
    /* SystemInitialize for Iterator SubSystem: '<S734>/Subsystem1' */
    for (ForEach_itr_m = 0; ForEach_itr_m < 8; ForEach_itr_m++) {
      /* InitializeConditions for UnitDelay: '<S739>/Delay Input1' */
      self_CoreSubsys_pnaevvf[ForEach_itr_m].dwork.DelayInput1_DSTATE =
        BEML_EMU_P.CoreSubsys_pnaevvf.DetectDecrease_vinit;

      /* InitializeConditions for UnitDelay: '<S745>/Delay Input1' */
      self_CoreSubsys_pnaevvf[ForEach_itr_m].dwork.DelayInput1_DSTATE_i =
        BEML_EMU_P.CoreSubsys_pnaevvf.DetectIncrease_vinit;
    }

    /* End of SystemInitialize for SubSystem: '<S734>/Subsystem1' */
    /* End of SystemInitialize for SubSystem: '<S4>/AudioSystemInterface' */

    /* SystemInitialize for Atomic SubSystem: '<S4>/ScoringSystemInterface' */
    /* InitializeConditions for DiscreteIntegrator: '<S746>/Discrete-Time Integrator' */
    BEML_EMU_DW.DiscreteTimeIntegrator_DSTATE =
      BEML_EMU_P.DiscreteTimeIntegrator_IC;

    /* SystemInitialize for Iterator SubSystem: '<S746>/For Each Subsystem' */
    for (ForEach_itr_a = 0; ForEach_itr_a < 8; ForEach_itr_a++) {
      /* SystemInitialize for Iterator SubSystem: '<S750>/Subsystem' */
      for (ForEach_itr_h = 0; ForEach_itr_h < 2; ForEach_itr_h++) {
        /* InitializeConditions for DiscreteIntegrator: '<S751>/Discrete-Time Integrator' */
        self_CoreSubsys_pnaevvfpg[ForEach_itr_a].self_CoreSubsys[ForEach_itr_h].
          dwork.DiscreteTimeIntegrator_DSTATE =
          BEML_EMU_P.CoreSubsys_pnaevvfpg.CoreSubsys.DiscreteTimeIntegrator_IC;

        /* InitializeConditions for DiscreteIntegrator: '<S751>/Discrete-Time Integrator1' */
        self_CoreSubsys_pnaevvfpg[ForEach_itr_a].self_CoreSubsys[ForEach_itr_h].
          dwork.DiscreteTimeIntegrator1_DSTATE =
          BEML_EMU_P.CoreSubsys_pnaevvfpg.CoreSubsys.DiscreteTimeIntegrator1_IC;
      }

      /* End of SystemInitialize for SubSystem: '<S750>/Subsystem' */
    }

    /* End of SystemInitialize for SubSystem: '<S746>/For Each Subsystem' */
    /* End of SystemInitialize for SubSystem: '<S4>/ScoringSystemInterface' */

    /* SystemInitialize for Iterator SubSystem: '<S737>/Input Adapter' */
    for (ForEach_itr_k = 0; ForEach_itr_k < 8; ForEach_itr_k++) {
      /* InitializeConditions for DiscreteIntegrator: '<S760>/Discrete-Time Integrator' */
      self_CoreSubsys_pnaevvfpgh5z[ForEach_itr_k].
        dwork.DiscreteTimeIntegrator_DSTATE =
        BEML_EMU_P.CoreSubsys_pnaevvfpgh5z.DiscreteTimeIntegrator_IC;
    }

    /* End of SystemInitialize for SubSystem: '<S737>/Input Adapter' */

    /* SystemInitialize for Iterator SubSystem: '<S753>/MotionBasePerVehicle' */
    for (ForEach_itr = 0; ForEach_itr < 8; ForEach_itr++) {
      /* InitializeConditions for UnitDelay: '<S776>/Unit Delay1' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].UnitDelay1_DSTATE =
        BEML_EMU_P.CoreSubsys_m.UnitDelay1_InitialCondition;

      /* InitializeConditions for DiscreteIntegrator: '<S846>/Discrete-Time Integrator' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE =
        BEML_EMU_B.CoreSubsys_m[ForEach_itr].IC;
      if (BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE >=
          BEML_EMU_P.CoreSubsys_m.DiscreteTimeIntegrator_UpperSat_i) {
        BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE =
          BEML_EMU_P.CoreSubsys_m.DiscreteTimeIntegrator_UpperSat_i;
      } else {
        if (BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE <=
            BEML_EMU_P.CoreSubsys_m.DiscreteTimeIntegrator_LowerSat_c) {
          BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE =
            BEML_EMU_P.CoreSubsys_m.DiscreteTimeIntegrator_LowerSat_c;
        }
      }

      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
        DiscreteTimeIntegrator_PrevResetState = 0;

      /* End of InitializeConditions for DiscreteIntegrator: '<S846>/Discrete-Time Integrator' */

      /* InitializeConditions for UnitDelay: '<S783>/Delay Input1' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DelayInput1_DSTATE_l =
        BEML_EMU_P.CoreSubsys_m.DetectIncrease_vinit_ps;

      /* InitializeConditions for DiscreteIntegrator: '<S779>/Discrete-Time Integrator' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE_g =
        BEML_EMU_P.CoreSubsys_m.DiscreteTimeIntegrator_IC_i;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
        DiscreteTimeIntegrator_PrevResetState_l = 2;

      /* InitializeConditions for UnitDelay: '<S786>/Delay Input1' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DelayInput1_DSTATE_pk =
        BEML_EMU_P.CoreSubsys_m.DetectIncrease_vinit_px;

      /* InitializeConditions for DiscreteIntegrator: '<S780>/Discrete-Time Integrator' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE_m =
        BEML_EMU_P.CoreSubsys_m.DiscreteTimeIntegrator_IC_p;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
        DiscreteTimeIntegrator_PrevResetState_p = 2;

      /* InitializeConditions for UnitDelay: '<S789>/Delay Input1' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DelayInput1_DSTATE_o =
        BEML_EMU_P.CoreSubsys_m.DetectIncrease_vinit_o;

      /* InitializeConditions for DiscreteIntegrator: '<S781>/Discrete-Time Integrator' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE_d =
        BEML_EMU_P.CoreSubsys_m.DiscreteTimeIntegrator_IC_a;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
        DiscreteTimeIntegrator_PrevResetState_f = 2;

      /* InitializeConditions for UnitDelay: '<S792>/Delay Input1' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DelayInput1_DSTATE_g =
        BEML_EMU_P.CoreSubsys_m.DetectIncrease_vinit_k;

      /* InitializeConditions for DiscreteIntegrator: '<S782>/Discrete-Time Integrator' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE_h =
        BEML_EMU_P.CoreSubsys_m.DiscreteTimeIntegrator_IC_k;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
        DiscreteTimeIntegrator_PrevResetState_h = 2;

      /* InitializeConditions for DiscreteTransferFcn: '<S863>/Discrete Transfer Fcn' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states[0] =
        BEML_EMU_P.CoreSubsys_m.DiscreteTransferFcn_InitialStates_g5;

      /* InitializeConditions for DiscreteTransferFcn: '<S859>/Discrete Transfer Fcn' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_b[0] =
        BEML_EMU_P.CoreSubsys_m.DiscreteTransferFcn_InitialStates_a;

      /* InitializeConditions for DiscreteTransferFcn: '<S853>/Discrete Transfer Fcn' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_c[0] =
        BEML_EMU_P.CoreSubsys_m.DiscreteTransferFcn_InitialStates_h;

      /* InitializeConditions for DiscreteTransferFcn: '<S849>/Discrete Transfer Fcn' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_a[0] =
        BEML_EMU_P.CoreSubsys_m.DiscreteTransferFcn_InitialStates_m;

      /* InitializeConditions for DiscreteTransferFcn: '<S863>/Discrete Transfer Fcn' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states[1] =
        BEML_EMU_P.CoreSubsys_m.DiscreteTransferFcn_InitialStates_g5;

      /* InitializeConditions for DiscreteTransferFcn: '<S859>/Discrete Transfer Fcn' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_b[1] =
        BEML_EMU_P.CoreSubsys_m.DiscreteTransferFcn_InitialStates_a;

      /* InitializeConditions for DiscreteTransferFcn: '<S853>/Discrete Transfer Fcn' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_c[1] =
        BEML_EMU_P.CoreSubsys_m.DiscreteTransferFcn_InitialStates_h;

      /* InitializeConditions for DiscreteTransferFcn: '<S849>/Discrete Transfer Fcn' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_a[1] =
        BEML_EMU_P.CoreSubsys_m.DiscreteTransferFcn_InitialStates_m;

      /* InitializeConditions for DiscreteTransferFcn: '<S863>/Discrete Transfer Fcn' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states[2] =
        BEML_EMU_P.CoreSubsys_m.DiscreteTransferFcn_InitialStates_g5;

      /* InitializeConditions for DiscreteTransferFcn: '<S859>/Discrete Transfer Fcn' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_b[2] =
        BEML_EMU_P.CoreSubsys_m.DiscreteTransferFcn_InitialStates_a;

      /* InitializeConditions for DiscreteTransferFcn: '<S853>/Discrete Transfer Fcn' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_c[2] =
        BEML_EMU_P.CoreSubsys_m.DiscreteTransferFcn_InitialStates_h;

      /* InitializeConditions for DiscreteTransferFcn: '<S849>/Discrete Transfer Fcn' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_a[2] =
        BEML_EMU_P.CoreSubsys_m.DiscreteTransferFcn_InitialStates_m;

      /* SystemInitialize for IfAction SubSystem: '<S797>/StandardTrackFeel' */
      /* InitializeConditions for RandomNumber: '<S825>/White Noise' */
      tmp = floor(BEML_EMU_P.CoreSubsys_m.BandLimitedWhiteNoise_seed);
      if (rtIsNaN(tmp) || rtIsInf(tmp)) {
        tmp = 0.0;
      } else {
        tmp = fmod(tmp, 4.294967296E+9);
      }

      tseed = tmp < 0.0 ? static_cast<uint32_T>(-static_cast<int32_T>(
        static_cast<uint32_T>(-tmp))) : static_cast<uint32_T>(tmp);
      i = static_cast<int32_T>((tseed >> 16U));
      t = static_cast<int32_T>((tseed & 32768U));
      tseed = ((((tseed - (static_cast<uint32_T>(i) << 16U)) + t) << 16U) + t) +
        i;
      if (tseed < 1U) {
        tseed = 1144108930U;
      } else {
        if (tseed > 2147483646U) {
          tseed = 2147483646U;
        }
      }

      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].RandSeed_p = tseed;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].NextOutput_c =
        rt_nrand_Upu32_Yd_f_pw_snf(&BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
        RandSeed_p) * BEML_EMU_P.CoreSubsys_m.WhiteNoise_StdDev +
        BEML_EMU_P.CoreSubsys_m.WhiteNoise_Mean;

      /* End of InitializeConditions for RandomNumber: '<S825>/White Noise' */

      /* InitializeConditions for DiscreteTransferFcn: '<S838>/Discrete Transfer Fcn' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_j =
        BEML_EMU_P.CoreSubsys_m.DiscreteTransferFcn_InitialStates;

      /* InitializeConditions for DiscreteTransferFcn: '<S839>/Discrete Transfer Fcn' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_ln =
        BEML_EMU_P.CoreSubsys_m.DiscreteTransferFcn_InitialStates_b;

      /* InitializeConditions for DiscreteTransferFcn: '<S836>/Discrete Transfer Fcn' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_l2 =
        BEML_EMU_P.CoreSubsys_m.DiscreteTransferFcn_InitialStates_k;

      /* InitializeConditions for DiscreteTransferFcn: '<S837>/Discrete Transfer Fcn' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_m =
        BEML_EMU_P.CoreSubsys_m.DiscreteTransferFcn_InitialStates_p;

      /* InitializeConditions for RandomNumber: '<S826>/White Noise' */
      tmp = floor(BEML_EMU_P.CoreSubsys_m.BandLimitedWhiteNoise1_seed);
      if (rtIsNaN(tmp) || rtIsInf(tmp)) {
        tmp = 0.0;
      } else {
        tmp = fmod(tmp, 4.294967296E+9);
      }

      tseed = tmp < 0.0 ? static_cast<uint32_T>(-static_cast<int32_T>(
        static_cast<uint32_T>(-tmp))) : static_cast<uint32_T>(tmp);
      i = static_cast<int32_T>((tseed >> 16U));
      t = static_cast<int32_T>((tseed & 32768U));
      tseed = ((((tseed - (static_cast<uint32_T>(i) << 16U)) + t) << 16U) + t) +
        i;
      if (tseed < 1U) {
        tseed = 1144108930U;
      } else {
        if (tseed > 2147483646U) {
          tseed = 2147483646U;
        }
      }

      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].RandSeed_e = tseed;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].NextOutput_a =
        rt_nrand_Upu32_Yd_f_pw_snf(&BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
        RandSeed_e) * BEML_EMU_P.CoreSubsys_m.WhiteNoise_StdDev_d +
        BEML_EMU_P.CoreSubsys_m.WhiteNoise_Mean_m;

      /* End of InitializeConditions for RandomNumber: '<S826>/White Noise' */

      /* InitializeConditions for DiscreteIntegrator: '<S835>/Discrete-Time Integrator' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE_c =
        BEML_EMU_P.CoreSubsys_m.DiscreteTimeIntegrator_IC;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
        DiscreteTimeIntegrator_PrevResetState_j = 2;

      /* InitializeConditions for UnitDelay: '<S834>/Delay Input1' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DelayInput1_DSTATE_p =
        BEML_EMU_P.CoreSubsys_m.DetectIncrease_vinit;

      /* InitializeConditions for DiscretePulseGenerator: '<S823>/Pulse Generator1' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].clockTickCounter_b = 0;

      /* InitializeConditions for UnitDelay: '<S831>/Unit Delay' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].UnitDelay_DSTATE_h =
        BEML_EMU_P.CoreSubsys_m.SampleandHold_InitialCondition;

      /* InitializeConditions for DiscreteTransferFcn: '<S840>/Discrete Transfer Fcn' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_op =
        BEML_EMU_P.CoreSubsys_m.DiscreteTransferFcn_InitialStates_i;

      /* InitializeConditions for DiscreteTransferFcn: '<S841>/Discrete Transfer Fcn' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_k =
        BEML_EMU_P.CoreSubsys_m.DiscreteTransferFcn_InitialStates_g;

      /* End of SystemInitialize for SubSystem: '<S797>/StandardTrackFeel' */

      /* SystemInitialize for IfAction SubSystem: '<S797>/DegradedTrackFeel' */
      /* InitializeConditions for RandomNumber: '<S804>/White Noise' */
      tmp = floor(BEML_EMU_P.CoreSubsys_m.BandLimitedWhiteNoise_seed_f);
      if (rtIsNaN(tmp) || rtIsInf(tmp)) {
        tmp = 0.0;
      } else {
        tmp = fmod(tmp, 4.294967296E+9);
      }

      tseed = tmp < 0.0 ? static_cast<uint32_T>(-static_cast<int32_T>(
        static_cast<uint32_T>(-tmp))) : static_cast<uint32_T>(tmp);
      i = static_cast<int32_T>((tseed >> 16U));
      t = static_cast<int32_T>((tseed & 32768U));
      tseed = ((((tseed - (static_cast<uint32_T>(i) << 16U)) + t) << 16U) + t) +
        i;
      if (tseed < 1U) {
        tseed = 1144108930U;
      } else {
        if (tseed > 2147483646U) {
          tseed = 2147483646U;
        }
      }

      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].RandSeed = tseed;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].NextOutput =
        rt_nrand_Upu32_Yd_f_pw_snf(&BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
        RandSeed) * BEML_EMU_P.CoreSubsys_m.WhiteNoise_StdDev_b +
        BEML_EMU_P.CoreSubsys_m.WhiteNoise_Mean_k;

      /* End of InitializeConditions for RandomNumber: '<S804>/White Noise' */

      /* InitializeConditions for DiscreteTransferFcn: '<S817>/Discrete Transfer Fcn' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_o =
        BEML_EMU_P.CoreSubsys_m.DiscreteTransferFcn_InitialStates_j;

      /* InitializeConditions for DiscreteTransferFcn: '<S818>/Discrete Transfer Fcn' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_cq =
        BEML_EMU_P.CoreSubsys_m.DiscreteTransferFcn_InitialStates_c;

      /* InitializeConditions for DiscreteTransferFcn: '<S815>/Discrete Transfer Fcn' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_l =
        BEML_EMU_P.CoreSubsys_m.DiscreteTransferFcn_InitialStates_l;

      /* InitializeConditions for DiscreteTransferFcn: '<S816>/Discrete Transfer Fcn' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_d =
        BEML_EMU_P.CoreSubsys_m.DiscreteTransferFcn_InitialStates_k4;

      /* InitializeConditions for RandomNumber: '<S805>/White Noise' */
      tmp = floor(BEML_EMU_P.CoreSubsys_m.BandLimitedWhiteNoise1_seed_l);
      if (rtIsNaN(tmp) || rtIsInf(tmp)) {
        tmp = 0.0;
      } else {
        tmp = fmod(tmp, 4.294967296E+9);
      }

      tseed = tmp < 0.0 ? static_cast<uint32_T>(-static_cast<int32_T>(
        static_cast<uint32_T>(-tmp))) : static_cast<uint32_T>(tmp);
      i = static_cast<int32_T>((tseed >> 16U));
      t = static_cast<int32_T>((tseed & 32768U));
      tseed = ((((tseed - (static_cast<uint32_T>(i) << 16U)) + t) << 16U) + t) +
        i;
      if (tseed < 1U) {
        tseed = 1144108930U;
      } else {
        if (tseed > 2147483646U) {
          tseed = 2147483646U;
        }
      }

      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].RandSeed_f = tseed;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].NextOutput_m =
        rt_nrand_Upu32_Yd_f_pw_snf(&BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
        RandSeed_f) * BEML_EMU_P.CoreSubsys_m.WhiteNoise_StdDev_e +
        BEML_EMU_P.CoreSubsys_m.WhiteNoise_Mean_o;

      /* End of InitializeConditions for RandomNumber: '<S805>/White Noise' */

      /* InitializeConditions for DiscreteIntegrator: '<S814>/Discrete-Time Integrator' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_DSTATE_hq =
        BEML_EMU_P.CoreSubsys_m.DiscreteTimeIntegrator_IC_g;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
        DiscreteTimeIntegrator_PrevResetState_m = 2;

      /* InitializeConditions for UnitDelay: '<S813>/Delay Input1' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DelayInput1_DSTATE =
        BEML_EMU_P.CoreSubsys_m.DetectIncrease_vinit_p;

      /* InitializeConditions for DiscretePulseGenerator: '<S802>/Pulse Generator' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].clockTickCounter = 0;

      /* InitializeConditions for UnitDelay: '<S810>/Unit Delay' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].UnitDelay_DSTATE =
        BEML_EMU_P.CoreSubsys_m.SampleandHold_InitialCondition_e;

      /* InitializeConditions for DiscreteTransferFcn: '<S819>/Discrete Transfer Fcn' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_bh =
        BEML_EMU_P.CoreSubsys_m.DiscreteTransferFcn_InitialStates_o;

      /* InitializeConditions for DiscreteTransferFcn: '<S820>/Discrete Transfer Fcn' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTransferFcn_states_d1 =
        BEML_EMU_P.CoreSubsys_m.DiscreteTransferFcn_InitialStates_gi;

      /* End of SystemInitialize for SubSystem: '<S797>/DegradedTrackFeel' */

      /* SystemInitialize for Merge: '<S797>/Merge' */
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].ManualPosition[0] =
        BEML_EMU_P.CoreSubsys_m.Merge_InitialOutput;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].ManualPosition[1] =
        BEML_EMU_P.CoreSubsys_m.Merge_InitialOutput;
      BEML_EMU_B.CoreSubsys_m[ForEach_itr].ManualPosition[2] =
        BEML_EMU_P.CoreSubsys_m.Merge_InitialOutput;

      /* SystemInitialize for Atomic SubSystem: '<S846>/TimerOffDelay NoInit' */
      /* InitializeConditions for DiscreteIntegrator: '<S857>/Discrete-Time Integrator' */
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].DiscreteTimeIntegrator_IC_LOADING =
        1U;
      BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
        DiscreteTimeIntegrator_PrevResetState_g = 0;

      /* End of SystemInitialize for SubSystem: '<S846>/TimerOffDelay NoInit' */

      /* SystemInitialize for Atomic SubSystem: '<S779>/Jolt Duration' */
      BEML_EMU_JoltDuration_Init(&BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
        JoltDuration_o);

      /* End of SystemInitialize for SubSystem: '<S779>/Jolt Duration' */

      /* SystemInitialize for Atomic SubSystem: '<S780>/Jolt Duration' */
      BEML_EMU_JoltDuration_Init(&BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
        JoltDuration_n);

      /* End of SystemInitialize for SubSystem: '<S780>/Jolt Duration' */

      /* SystemInitialize for Atomic SubSystem: '<S781>/Jolt Duration' */
      BEML_EMU_JoltDuration_Init(&BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
        JoltDuration_e);

      /* End of SystemInitialize for SubSystem: '<S781>/Jolt Duration' */

      /* SystemInitialize for Atomic SubSystem: '<S782>/Jolt Duration' */
      BEML_EMU_JoltDuration_Init(&BEML_EMU_DW.CoreSubsys_m[ForEach_itr].
        JoltDuration);

      /* End of SystemInitialize for SubSystem: '<S782>/Jolt Duration' */
    }

    /* End of SystemInitialize for SubSystem: '<S753>/MotionBasePerVehicle' */
  }

  /* Enable for ModelReference: '<S9>/TrainDynamics' incorporates:
   *  Inport: '<Root>/SimData'
   *  Outport: '<Root>/DynamicsOutput'
   */
  TrainDynamics_Enable(&(BEML_EMU_DW.TrainDynamics_InstanceData.rtdw));
}

/* Model terminate function */
void BEML_EMUModelClass::terminate()
{
  /* (no terminate code required) */
}

/* Constructor */
BEML_EMUModelClass::BEML_EMUModelClass() : BEML_EMU_M()
{
  int32_T ForEach_itr_k_m;
  int32_T ForEach_itr_ho_j;
  for (ForEach_itr_k_m = 0; ForEach_itr_k_m < 8; ForEach_itr_k_m++) {
    self_CoreSubsys_pnaevvfpgh5z[ForEach_itr_k_m].defaultParam =
      &BEML_EMU_P.CoreSubsys_pnaevvfpgh5z;
  }

  for (ForEach_itr_k_m = 0; ForEach_itr_k_m < 8; ForEach_itr_k_m++) {
    self_CoreSubsys_pnaevvfpgh5[ForEach_itr_k_m].defaultParam =
      &BEML_EMU_P.CoreSubsys_pnaevvfpgh5;
  }

  for (ForEach_itr_k_m = 0; ForEach_itr_k_m < 8; ForEach_itr_k_m++) {
    for (ForEach_itr_ho_j = 0; ForEach_itr_ho_j < 2; ForEach_itr_ho_j++) {
      self_CoreSubsys_pnaevvfpg[ForEach_itr_k_m]
        .self_CoreSubsys[ForEach_itr_ho_j].defaultParam =
        &BEML_EMU_P.CoreSubsys_pnaevvfpg.CoreSubsys;
    }

    self_CoreSubsys_pnaevvfpg[ForEach_itr_k_m].defaultParam =
      &BEML_EMU_P.CoreSubsys_pnaevvfpg;
  }

  for (ForEach_itr_k_m = 0; ForEach_itr_k_m < 8; ForEach_itr_k_m++) {
    self_CoreSubsys_pnaevvf[ForEach_itr_k_m].defaultParam =
      &BEML_EMU_P.CoreSubsys_pnaevvf;
  }

  for (ForEach_itr_k_m = 0; ForEach_itr_k_m < 8; ForEach_itr_k_m++) {
    self_CoreSubsys_pnae[ForEach_itr_k_m].self_VehicleEquipment3_o.defaultParam =
      &BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment3_o;
    self_CoreSubsys_pnae[ForEach_itr_k_m].self_VehicleEquipment2_f.defaultParam =
      &BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment2_f;
    self_CoreSubsys_pnae[ForEach_itr_k_m].self_VehicleEquipment1_n.defaultParam =
      &BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment1_n;
    self_CoreSubsys_pnae[ForEach_itr_k_m].self_VehicleEquipment4.defaultParam =
      &BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment4;
    self_CoreSubsys_pnae[ForEach_itr_k_m].self_VehicleEquipment3_ly.defaultParam
      = &BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment3_ly;
    self_CoreSubsys_pnae[ForEach_itr_k_m].self_VehicleEquipment2_m.defaultParam =
      &BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment2_m;
    self_CoreSubsys_pnae[ForEach_itr_k_m].self_VehicleEquipment1_m.defaultParam =
      &BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment1_m;
    self_CoreSubsys_pnae[ForEach_itr_k_m].self_VehicleEquipment_o.defaultParam =
      &BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment_o;
    self_CoreSubsys_pnae[ForEach_itr_k_m].self_VehicleEquipment2_h.defaultParam =
      &BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment2_h;
    self_CoreSubsys_pnae[ForEach_itr_k_m].self_VehicleEquipment3_l.defaultParam =
      &BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment3_l;
    self_CoreSubsys_pnae[ForEach_itr_k_m].self_VehicleEquipment1_a.defaultParam =
      &BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment1_a;
    self_CoreSubsys_pnae[ForEach_itr_k_m].self_VehicleEquipment_g.defaultParam =
      &BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment_g;
    self_CoreSubsys_pnae[ForEach_itr_k_m].self_VehicleEquipment3_f.defaultParam =
      &BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment3_f;
    self_CoreSubsys_pnae[ForEach_itr_k_m].self_VehicleEquipment2_n.defaultParam =
      &BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment2_n;
    self_CoreSubsys_pnae[ForEach_itr_k_m].self_VehicleEquipment1_c.defaultParam =
      &BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment1_c;
    self_CoreSubsys_pnae[ForEach_itr_k_m].self_VehicleEquipment_c.defaultParam =
      &BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment_c;
    self_CoreSubsys_pnae[ForEach_itr_k_m].self_VehicleEquipment3.defaultParam =
      &BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment3;
    self_CoreSubsys_pnae[ForEach_itr_k_m].self_VehicleEquipment2.defaultParam =
      &BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment2;
    self_CoreSubsys_pnae[ForEach_itr_k_m].self_VehicleEquipment1.defaultParam =
      &BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment1;
    self_CoreSubsys_pnae[ForEach_itr_k_m].self_VehicleEquipment.defaultParam =
      &BEML_EMU_P.CoreSubsys_pnae.VehicleEquipment;
    self_CoreSubsys_pnae[ForEach_itr_k_m].defaultParam =
      &BEML_EMU_P.CoreSubsys_pnae;
  }

  for (ForEach_itr_k_m = 0; ForEach_itr_k_m < 8; ForEach_itr_k_m++) {
    for (ForEach_itr_ho_j = 0; ForEach_itr_ho_j < 16; ForEach_itr_ho_j++) {
      self_CoreSubsys_pna[ForEach_itr_k_m].self_CoreSubsys[ForEach_itr_ho_j].
        defaultParam = &BEML_EMU_P.CoreSubsys_pna.CoreSubsys;
    }

    self_CoreSubsys_pna[ForEach_itr_k_m].defaultParam =
      &BEML_EMU_P.CoreSubsys_pna;
  }

  for (ForEach_itr_k_m = 0; ForEach_itr_k_m < 8; ForEach_itr_k_m++) {
    self_CoreSubsys_p[ForEach_itr_k_m].defaultParam = &BEML_EMU_P.CoreSubsys_p;
  }
}

/* Destructor */
BEML_EMUModelClass::~BEML_EMUModelClass()
{
  /* Currently there is no destructor body generated.*/
}

/* Real-Time Model get method */
RT_MODEL_BEML_EMU_T * BEML_EMUModelClass::getRTM()
{
  return (&BEML_EMU_M);
}
